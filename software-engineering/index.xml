<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software-engineerings on</title><link>https://wiki.timz.dev/software-engineering/</link><description>Recent content in Software-engineerings on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wiki.timz.dev/software-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://wiki.timz.dev/software-engineering/aws/assets/Regions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/assets/Regions/</guid><description/></item><item><title/><link>https://wiki.timz.dev/software-engineering/aws/assets/Untitled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/assets/Untitled/</guid><description/></item><item><title/><link>https://wiki.timz.dev/software-engineering/concepts/devops/assets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/devops/assets/</guid><description/></item><item><title/><link>https://wiki.timz.dev/software-engineering/concepts/programming/Actors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Actors/</guid><description/></item><item><title/><link>https://wiki.timz.dev/software-engineering/technologies/assets/Pasted-image-20220805162553.png/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/assets/Pasted-image-20220805162553.png/</guid><description/></item><item><title>Agile</title><link>https://wiki.timz.dev/software-engineering/software-engineering/Agile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/software-engineering/Agile/</guid><description>Agile is a philosophy for project management that is particularly useful for software engineering teams. An alternative to Agile is the [[software-engineering/software-engineering/Agile#Waterfall Methodology|Waterfall approach]].</description></item><item><title>Arrange, Act, Assert</title><link>https://wiki.timz.dev/software-engineering/concepts/testing/Arrange-Act-Assert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/testing/Arrange-Act-Assert/</guid><description>The &amp;lsquo;arrange, act, assert&amp;rsquo; mantra is a pattern for structuring your [[software-engineering/concepts/testing/Unit Testing|unit tests]] (as well as integration tests and e2e tests).</description></item><item><title>Availability Zone</title><link>https://wiki.timz.dev/software-engineering/aws/Availability-Zone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/Availability-Zone/</guid><description>Availability Zones Availability zones (AZz) are basically just one or multiple physical [[software-engineering/aws/Data Center|data centers]] in a [[software-engineering/aws/Region|region]].
Availability zones</description></item><item><title>Builder Pattern</title><link>https://wiki.timz.dev/software-engineering/concepts/design-patterns/Builder-Pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/design-patterns/Builder-Pattern/</guid><description/></item><item><title>C</title><link>https://wiki.timz.dev/software-engineering/programming-languages/C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/C/</guid><description>Spiral Rule See the Clockwise/Spiral Rule. TODO.</description></item><item><title>C++</title><link>https://wiki.timz.dev/software-engineering/programming-languages/C++/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/C++/</guid><description>Pure Virtual Function Pure virtual functions are exactly the same as [[software-engineering/concepts/programming/Object Oriented Programming|abstract methods]].</description></item><item><title>CDNs</title><link>https://wiki.timz.dev/software-engineering/concepts/cloud/CDNs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cloud/CDNs/</guid><description/></item><item><title>Certificate Authority</title><link>https://wiki.timz.dev/software-engineering/concepts/cybersecurity/Certificate-Authority/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cybersecurity/Certificate-Authority/</guid><description/></item><item><title>CI</title><link>https://wiki.timz.dev/software-engineering/concepts/devops/CI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/devops/CI/</guid><description/></item><item><title>Clean Code</title><link>https://wiki.timz.dev/software-engineering/concepts/clean-code/Clean-Code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/clean-code/Clean-Code/</guid><description>TODO.
Coupling Coupling describes how dependent one thing is on another. In object-oriented programming, it refers to how dependent one class is on another.</description></item><item><title>Cloud Computing</title><link>https://wiki.timz.dev/software-engineering/concepts/cloud/Cloud-Computing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cloud/Cloud-Computing/</guid><description>Cloud computing describes the usage of a network of remote computers managed by [[software-engineering/concepts/cloud/Cloud Provider|cloud providers]] to handle computing tasks like storing/serving files, running web servers, training machine learning models, etc.</description></item><item><title>Cloud Provider</title><link>https://wiki.timz.dev/software-engineering/concepts/cloud/Cloud-Provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cloud/Cloud-Provider/</guid><description>Cloud providers are just companies who have set up this big network of remote computers and give you reasonable prices for running computing tasks on their computers.</description></item><item><title>CloudFront</title><link>https://wiki.timz.dev/software-engineering/aws/CloudFront/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/CloudFront/</guid><description>AWS CloudFront is a [[software-engineering/concepts/cloud/CDNs|CDN]] service to help you serve cached static and dynamic content to users with minimal latency. It&amp;rsquo;s great because you can trust in its very high availability, and it also handles things like DDoS attacks and other network attacks well.</description></item><item><title>Code Splitting</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Code-Splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Code-Splitting/</guid><description>TODO.</description></item><item><title>Concurrency</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Concurrency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Concurrency/</guid><description>TODO: concurrency vs. asynchronous concurrency vs. multithreading concurrency vs. parallelism
When talking about concurrency issues, it often involves concurrent access to the same shared data in memory, however, it can involve concurrent access to other resources such as files and databases.</description></item><item><title>Containers</title><link>https://wiki.timz.dev/software-engineering/concepts/devops/Containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/devops/Containers/</guid><description>A container is a process running in its own isolated [[software-engineering/concepts/operating-systems/User Space and Kernel Space|user space]], that runs an app within.</description></item><item><title>CSS</title><link>https://wiki.timz.dev/software-engineering/programming-languages/CSS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/CSS/</guid><description/></item><item><title>Cypress</title><link>https://wiki.timz.dev/software-engineering/technologies/Cypress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/Cypress/</guid><description>![[software-engineering/technologies/assets/cypress-wallpaper.png|500]]
Cypress is an [[software-engineering/concepts/testing/End To End Testing|end-to-end testing]] library for testing the entirety of a web app, including its frontend and backend, in a way that closely simulates how real users would use the app.</description></item><item><title>D3</title><link>https://wiki.timz.dev/software-engineering/technologies/D3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/D3/</guid><description>D3 Force d3-force is an official D3 module.
It runs a physics simulation where it moves each particle every tick until it reaches its equilibrium state.</description></item><item><title>Data Center</title><link>https://wiki.timz.dev/software-engineering/aws/Data-Center/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/Data-Center/</guid><description>![[Data center.png]] Data centers are very large physical buildings that are dedicated to housing the computers that form the [[software-engineering/concepts/cloud/Cloud Computing|cloud]].</description></item><item><title>DevOps</title><link>https://wiki.timz.dev/software-engineering/DevOps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/DevOps/</guid><description>TODO.</description></item><item><title>DNS</title><link>https://wiki.timz.dev/software-engineering/concepts/networking/DNS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/networking/DNS/</guid><description>DNS Resource Records TODO.</description></item><item><title>Docker</title><link>https://wiki.timz.dev/software-engineering/technologies/Docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/Docker/</guid><description>![[software-engineering/technologies/assets/docker-wallpaper.png|800]]
Docker is a [[software-engineering/concepts/devops/Containers|containerisation]] tool, or container runtime, that packages up an app&amp;rsquo;s source code and dependencies into portable containers that can be run in many different environments.</description></item><item><title>Docker Compose</title><link>https://wiki.timz.dev/software-engineering/technologies/Docker-Compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/Docker-Compose/</guid><description>![[software-engineering/technologies/assets/docker-compose.png|300]]
Docker Compose is a CLI tool for running and coordinating the communication of multiple [[software-engineering/technologies/Docker|Docker]] containers. It&amp;rsquo;s a container orchestrator, like [[software-engineering/technologies/Kubernetes|Kubernetes]].</description></item><item><title>Edge Location</title><link>https://wiki.timz.dev/software-engineering/aws/Edge-Location/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/Edge-Location/</guid><description>AWS edge locations are [[software-engineering/aws/Data Center|data centers]] owned by trusted 3rd party, called an AWS Partner, that uses [[software-engineering/aws/CloudFront|CloudFront]]. Together, the edge locations form the edge network between AWS and end users.</description></item><item><title>End To End Testing</title><link>https://wiki.timz.dev/software-engineering/concepts/testing/End-To-End-Testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/testing/End-To-End-Testing/</guid><description>End-to-end (e2e) tests are tests that aim to simulate the user experience as closely as possible and will look almost like manual testing, but automated.</description></item><item><title>Extreme Programming</title><link>https://wiki.timz.dev/software-engineering/software-engineering/Extreme-Programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/software-engineering/Extreme-Programming/</guid><description>TODO.</description></item><item><title>Factory Pattern</title><link>https://wiki.timz.dev/software-engineering/concepts/design-patterns/Factory-Pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/design-patterns/Factory-Pattern/</guid><description>The Factory pattern aims to give you a way to make objects&amp;hellip; TODO.</description></item><item><title>Functional Programming</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Functional-Programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Functional-Programming/</guid><description>TODO.
A [[software-engineering/concepts/programming/Programming Paradigm|programming paradigm]]</description></item><item><title>Generators</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Generators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Generators/</guid><description>Generators are just functions which, when invoked, will give you a single value from a list of values. They&amp;rsquo;re stateful functions which return the next value in a list of values for each successive invocation.</description></item><item><title>Generics</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Generics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Generics/</guid><description>Generic programming is about writing reusable functions, classes, etc. without compromising on [[software-engineering/concepts/programming/Type System|type safety]]. The primary motivation behind them is to keep code DRY, that is, to avoid code duplication.</description></item><item><title>Go</title><link>https://wiki.timz.dev/software-engineering/programming-languages/Go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/Go/</guid><description>![[software-engineering/programming-languages/assets/go-wallpaper.png|800]]
Go is a [[software-engineering/concepts/programming/Programming Paradigm|statically-typed]] compiled language inspired by [[software-engineering/programming-languages/C|C]] in design, but aims to provide memory safety, ease of usage, and the high performance of close-to-metal languages like [[software-engineering/programming-languages/C++|C++]] and [[software-engineering/programming-languages/Rust|Rust]], which Go is often compared to.</description></item><item><title>GoogleTest</title><link>https://wiki.timz.dev/software-engineering/technologies/GoogleTest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/GoogleTest/</guid><description>TODO.</description></item><item><title>HTML</title><link>https://wiki.timz.dev/software-engineering/programming-languages/HTML/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/HTML/</guid><description>SVGs See [[software-engineering/concepts/graphics/SVGs|SVGs]]. You can put SVGs into an HTML document in the following ways:
You can just put the &amp;lt;svg&amp;gt; element in directly.</description></item><item><title>Hypervisor</title><link>https://wiki.timz.dev/software-engineering/concepts/devops/Hypervisor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/devops/Hypervisor/</guid><description>A hypervisor, in most contexts, is the software that creates and runs [[software-engineering/concepts/devops/Virtual Machines|virtual machines]]. VMWare is an example of a hypervisor that you might use for running a different OS on a personal work computer (eg.</description></item><item><title>IaaS</title><link>https://wiki.timz.dev/software-engineering/concepts/cloud/IaaS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cloud/IaaS/</guid><description/></item><item><title>Integration Testing</title><link>https://wiki.timz.dev/software-engineering/concepts/testing/Integration-Testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/testing/Integration-Testing/</guid><description>Integration tests, also called &amp;rsquo;end-to-end&amp;rsquo; tests, are&amp;hellip; TODO.</description></item><item><title>Iterators</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Iterators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Iterators/</guid><description>An iterator is an object that lets you loop through an iterable, usually by invoking, implicitly or explicitly, a next method.</description></item><item><title>Java</title><link>https://wiki.timz.dev/software-engineering/programming-languages/Java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/Java/</guid><description/></item><item><title>JavaScript</title><link>https://wiki.timz.dev/software-engineering/programming-languages/JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/JavaScript/</guid><description>TODO.
There&amp;rsquo;s also [[software-engineering/programming-languages/TypeScript]].
Rest Operator TODO.
Generators TODO.
Object Oriented Programming Classes TODO.
Inheritance TODO.
Prototypes TODO.
Modules First, a brief timeline of JavaScript&amp;rsquo;s weird module system development:</description></item><item><title>Jest</title><link>https://wiki.timz.dev/software-engineering/technologies/Jest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/Jest/</guid><description>TODO.</description></item><item><title>Kanban</title><link>https://wiki.timz.dev/software-engineering/software-engineering/Kanban/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/software-engineering/Kanban/</guid><description>TODO.</description></item><item><title>Kernel</title><link>https://wiki.timz.dev/software-engineering/concepts/operating-systems/Kernel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/operating-systems/Kernel/</guid><description>The kernel is the part of the OS that is closer to hardware and provides abstractions such as system calls, memory management, process management, device driving, etc.</description></item><item><title>Kubernetes</title><link>https://wiki.timz.dev/software-engineering/technologies/Kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/Kubernetes/</guid><description>![[software-engineering/technologies/assets/kubernetes-wallpaper.png|700]]
Kubernetes is an open-source container orchestrator, ie. a system for automating the deployment and [[software-engineering/concepts/cloud/Scaling|scaling]] of [[software-engineering/concepts/devops/Containers|containers]]. The rise in popularity of microservice architectures gave rise to the need for container orchestration tools because microservices often need to be containerised.</description></item><item><title>Load Balancer</title><link>https://wiki.timz.dev/software-engineering/concepts/architecture/Load-Balancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/architecture/Load-Balancer/</guid><description/></item><item><title>Microservice</title><link>https://wiki.timz.dev/software-engineering/concepts/architecture/Microservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/architecture/Microservice/</guid><description>Microservice architecture aims split off an application&amp;rsquo;s set of functionalities into [[software-engineering/concepts/cloud/SaaS|services]] that run inside [[software-engineering/concepts/devops/Containers|containers]].
Microservice architectures try to solve scaling challenges faced by [[software-engineering/concepts/architecture/Monolith|monolithic]] applications.</description></item><item><title>Monolith</title><link>https://wiki.timz.dev/software-engineering/concepts/architecture/Monolith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/architecture/Monolith/</guid><description>In monolithic architectures, every part of the application is developed and shipped as a tightly coupled whole.</description></item><item><title>Mutex</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Mutex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Mutex/</guid><description> &amp;ldquo;Tip 59: Use actors for concurrency without shared state.&amp;rdquo; — Pragmatic Programmer.</description></item><item><title>Next.js</title><link>https://wiki.timz.dev/software-engineering/technologies/Next/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/Next/</guid><description/></item><item><title>NGINX</title><link>https://wiki.timz.dev/software-engineering/technologies/NGINX/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/NGINX/</guid><description>![[software-engineering/technologies/assets/nginx-wallpaper.png|800]]
NGINX is a production-grade web server that sits between the external web and your backend infrastructure. It can be configured to be a simple web server that just serves static content, or it can be used in more sophisticated architectures as a [[software-engineering/concepts/architecture/Load Balancer|load balancer]], [[software-engineering/concepts/architecture/Reverse Proxy|reverse proxy]], HTTP cache, and other roles.</description></item><item><title>Node.js</title><link>https://wiki.timz.dev/software-engineering/programming-languages/Node.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/Node.js/</guid><description>TODO.
Filesystem APIs Note: In Node.js, the convention is generally for functions like fs.readFile, fs.appendFile, etc. to take in a callback as their last argument which has the signature (error, data) =&amp;gt; {.</description></item><item><title>Nuxt.js</title><link>https://wiki.timz.dev/software-engineering/technologies/Nuxt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/Nuxt/</guid><description>![[software-engineering/technologies/assets/Nuxt.js-logo.png|300]]
Nuxt.js is a production-ready Vue.js framework that also provides excellent developer experience. It&amp;rsquo;s inspired by [[software-engineering/technologies/Next|Next.js]], hence the naming, and exists for a similar purpose as Next.</description></item><item><title>Object Oriented Programming</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Object-Oriented-Programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Object-Oriented-Programming/</guid><description>Object-oriented programming is a [[software-engineering/concepts/programming/Programming Paradigm|programming paradigm]] that sees programs as a collection of objects interacting with each other. Objects are just containers for some data (called &amp;lsquo;fields&amp;rsquo;) and functions (called &amp;lsquo;methods&amp;rsquo;).</description></item><item><title>PaaS</title><link>https://wiki.timz.dev/software-engineering/concepts/cloud/PaaS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cloud/PaaS/</guid><description/></item><item><title>PostgreSQL</title><link>https://wiki.timz.dev/software-engineering/technologies/PostgreSQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/PostgreSQL/</guid><description>![[software-engineering/technologies/assets/postgresql-wallpaper.png|750]]
PostgreSQL is an object-relational DBMS that is [[software-engineering/programming-languages/SQL|SQL]]-compliant. Postgres being an &amp;lsquo;object-relational&amp;rsquo; DBMS means that it supports table inheritance and function overloading, inspired by [[software-engineering/concepts/programming/Object Oriented Programming|OOP]].</description></item><item><title>Program Memory</title><link>https://wiki.timz.dev/software-engineering/concepts/computer-science/Program-Memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/computer-science/Program-Memory/</guid><description>Stack TODO.</description></item><item><title>Programming Paradigms</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Programming-Paradigm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Programming-Paradigm/</guid><description>A programming paradigm describes a general strategy for how to write software. Formally, a &amp;lsquo;paradigm&amp;rsquo; in everyday English is:
A set of assumptions, concepts, values, and practices that constitutes a way of viewing reality for the community that shares them.</description></item><item><title>Python</title><link>https://wiki.timz.dev/software-engineering/programming-languages/Python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/Python/</guid><description>Dunder Methods TODO.
Virtual Environments 1 python3 -m venv ./venv # Create a virtual environment Basic python installation</description></item><item><title>React</title><link>https://wiki.timz.dev/software-engineering/technologies/React/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/React/</guid><description>TODO.</description></item><item><title>Redux</title><link>https://wiki.timz.dev/software-engineering/technologies/Redux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/Redux/</guid><description>Reducers TODO.</description></item><item><title>Region</title><link>https://wiki.timz.dev/software-engineering/aws/Region/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/Region/</guid><description>Regions A region is literally a geographic region which contains 1 or more [[software-engineering/aws/Availability Zone|availability zones]]. AWS ensures that there are a minimum of 2 AZs in every region.</description></item><item><title>Requirements Engineering</title><link>https://wiki.timz.dev/software-engineering/software-engineering/Requirements-Engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/software-engineering/Requirements-Engineering/</guid><description>Software Requirement Specification (SRS) A software requirement specification is a document, written for engineers and stakeholders alike, that describes what the project&amp;rsquo;s features are and its business model.</description></item><item><title>Reverse Proxy</title><link>https://wiki.timz.dev/software-engineering/concepts/architecture/Reverse-Proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/architecture/Reverse-Proxy/</guid><description>TODO.</description></item><item><title>Rust</title><link>https://wiki.timz.dev/software-engineering/programming-languages/Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/Rust/</guid><description/></item><item><title>SaaS</title><link>https://wiki.timz.dev/software-engineering/concepts/cloud/SaaS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cloud/SaaS/</guid><description>SaaS</description></item><item><title>Scaling</title><link>https://wiki.timz.dev/software-engineering/concepts/cloud/Scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cloud/Scaling/</guid><description/></item><item><title>Scrum</title><link>https://wiki.timz.dev/software-engineering/software-engineering/Scrum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/software-engineering/Scrum/</guid><description>TODO.
Scrum Roles A Scrum team&amp;rsquo;s member each adopts a role:
Product owner Understanding customer requirements Creates the vision for what the product should be Maintains the backlog Scrum master The middleman between product owner and dev team Assists task breakdown and planning Ensures completion of tasks Scrum team — the developers Breaks down epic to stories/tasks, then into subtasks Implements features and writes tests</description></item><item><title>Semaphores</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Semaphore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Semaphore/</guid><description>A semaphore is something that only one thread can own. It&amp;rsquo;s used to coordinate access to a shared resource by forcing threads to first acquire the semaphore before accessing the resource.</description></item><item><title>Server-Side Rendering</title><link>https://wiki.timz.dev/software-engineering/concepts/full-stack-dev/Server-Side-Rendering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/full-stack-dev/Server-Side-Rendering/</guid><description>TODO.</description></item><item><title>Site Reliability Engineering</title><link>https://wiki.timz.dev/software-engineering/Site-Reliability-Engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/Site-Reliability-Engineering/</guid><description/></item><item><title>Software Engineering</title><link>https://wiki.timz.dev/software-engineering/Software-Engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/Software-Engineering/</guid><description>Software engineering is the set of theory and practices around how to write, reason about, and maintain software. Below is a list of notes written in my exploration of software technologies and concepts.</description></item><item><title>SPAs</title><link>https://wiki.timz.dev/software-engineering/concepts/full-stack-dev/SPAs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/full-stack-dev/SPAs/</guid><description>TODO.</description></item><item><title>SQL</title><link>https://wiki.timz.dev/software-engineering/programming-languages/SQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/SQL/</guid><description>TODO.</description></item><item><title>SSL</title><link>https://wiki.timz.dev/software-engineering/concepts/cybersecurity/SSL-and-TLS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cybersecurity/SSL-and-TLS/</guid><description/></item><item><title>Stack Frame</title><link>https://wiki.timz.dev/software-engineering/concepts/computer-science/Stack-Frame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/computer-science/Stack-Frame/</guid><description>TODO.</description></item><item><title>State Management</title><link>https://wiki.timz.dev/software-engineering/concepts/full-stack-dev/State-Management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/full-stack-dev/State-Management/</guid><description>State, in this context, is just the read/write data that a UI project like a React app needs. State management is about avoiding making a mess of this data when you have a complex component hierarchy with some distantly related components that need to read/modify the same part of state.</description></item><item><title>Static Site Generation</title><link>https://wiki.timz.dev/software-engineering/concepts/full-stack-dev/Static-Site-Generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/full-stack-dev/Static-Site-Generation/</guid><description>TODO.</description></item><item><title>SVGs</title><link>https://wiki.timz.dev/software-engineering/concepts/graphics/SVGs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/graphics/SVGs/</guid><description>SVG (scalable vector graphics) is an image format that defines images using vectors in XML on a cartesian plane rather than pixels, like PNG or JPEG, which we call bitmapped or raster image formats.</description></item><item><title>Tailwind</title><link>https://wiki.timz.dev/software-engineering/technologies/Tailwind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/Tailwind/</guid><description>![[software-engineering/technologies/assets/tailwind-wallpaper.png|700]]
With Tailwind, you style elements by applying a bunch of pre-written utility classes, minimising the amount of [[software-engineering/programming-languages/CSS|CSS]] you have to write and maintain.</description></item><item><title>Terraform</title><link>https://wiki.timz.dev/software-engineering/technologies/Terraform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/Terraform/</guid><description>![[software-engineering/technologies/assets/terraform.png|700]]
Terraform is an infrastructure as code technology that you can use to automate your infrastructure setup. All you do is define the things you want to spin up in a .</description></item><item><title>Tree Shaking</title><link>https://wiki.timz.dev/software-engineering/concepts/full-stack-dev/Tree-Shaking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/full-stack-dev/Tree-Shaking/</guid><description/></item><item><title>Type System</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Type-System/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Type-System/</guid><description>A type system is a set of rules defined by a programming language specification that assigns a type to every variable, expression, function, and possibly other things beyond those.</description></item><item><title>TypeScript</title><link>https://wiki.timz.dev/software-engineering/programming-languages/TypeScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/TypeScript/</guid><description>![[software-engineering/programming-languages/assets/javascript-wallpaper.png|600]]
TypeScript is a programming language made by Microsoft that is superset of [[software-engineering/programming-languages/JavaScript|JavaScript]]. The reason that TypeScript exists is to make complex JavaScript projects more maintainable and less error-prone by introducing a [[software-engineering/concepts/programming/Type System#Static Typing|static]] and [[software-engineering/concepts/programming/Type System#Strong Typing|strong]] type system.</description></item><item><title>Unit Testing</title><link>https://wiki.timz.dev/software-engineering/concepts/testing/Unit-Testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/testing/Unit-Testing/</guid><description>TODO.</description></item><item><title>User Space &amp; Kernel Space</title><link>https://wiki.timz.dev/software-engineering/concepts/operating-systems/User-Space-and-Kernel-Space/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/operating-systems/User-Space-and-Kernel-Space/</guid><description>Most operating systems will divide the computer&amp;rsquo;s [[software-engineering/concepts/operating-systems/Virtual Memory|virtual memory]] into two parts: the user space (or userland) and the kernel space.</description></item><item><title>Virtual Machines</title><link>https://wiki.timz.dev/software-engineering/concepts/devops/Virtual-Machines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/devops/Virtual-Machines/</guid><description>System Virtual Machine &amp;ldquo;A &amp;lsquo;virtual machine&amp;rsquo; was originally defined by Popek and Goldberg as &amp;lsquo;an efficient, isolated duplicate of a real computer machine.</description></item><item><title>Virtual Memory</title><link>https://wiki.timz.dev/software-engineering/concepts/operating-systems/Virtual-Memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/operating-systems/Virtual-Memory/</guid><description/></item><item><title>VPC</title><link>https://wiki.timz.dev/software-engineering/concepts/devops/VPC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/devops/VPC/</guid><description>Virtual private cloud. TODO.</description></item><item><title>Vue.js</title><link>https://wiki.timz.dev/software-engineering/technologies/Vue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/technologies/Vue/</guid><description>![[software-engineering/technologies/assets/vue-wallpaper.png|600]]
Vue.js is a [[software-engineering/programming-languages/JavaScript|JavaScript]] framework for building sophisticated UI components in a reusable, maintainable and performant way. Just like for React, there&amp;rsquo;s a rich ecosystem of npm packages you can plug in to have things like: unit testing, static site generation, client-side routing, state management, etc.</description></item></channel></rss>