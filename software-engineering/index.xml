<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software-engineerings on</title><link>https://wiki.timz.dev/software-engineering/</link><description>Recent content in Software-engineerings on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wiki.timz.dev/software-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://wiki.timz.dev/software-engineering/aws/assets/Regions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/assets/Regions/</guid><description/></item><item><title/><link>https://wiki.timz.dev/software-engineering/aws/assets/Untitled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/assets/Untitled/</guid><description/></item><item><title>Arrange, Act, Assert</title><link>https://wiki.timz.dev/software-engineering/concepts/testing/Arrange-Act-Assert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/testing/Arrange-Act-Assert/</guid><description>The &amp;lsquo;arrange, act, assert&amp;rsquo; mantra is a pattern for structuring your [[software-engineering/concepts/testing/Unit Testing|unit tests]] (as well as integration tests and e2e tests).</description></item><item><title>Availability Zone</title><link>https://wiki.timz.dev/software-engineering/aws/Availability-Zone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/Availability-Zone/</guid><description>Availability Zones Availability zones (AZz) are basically just one or multiple physical [[software-engineering/aws/Data Center|data centers]] in a [[software-engineering/aws/Region|region]].
Availability zones</description></item><item><title>Builder Pattern</title><link>https://wiki.timz.dev/software-engineering/concepts/design-patterns/Builder-Pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/design-patterns/Builder-Pattern/</guid><description/></item><item><title>C</title><link>https://wiki.timz.dev/software-engineering/programming-languages/C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/C/</guid><description/></item><item><title>C++</title><link>https://wiki.timz.dev/software-engineering/programming-languages/C++/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/C++/</guid><description>Pure Virtual Function Pure virtual functions are exactly the same as [[software-engineering/concepts/programming/Object Oriented Programming|abstract methods]].</description></item><item><title>Clean Code</title><link>https://wiki.timz.dev/software-engineering/concepts/clean-code/Clean-Code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/clean-code/Clean-Code/</guid><description>TODO.
Coupling Coupling describes how dependent one thing is on another. In object-oriented programming, it refers to how dependent one class is on another.</description></item><item><title>Cloud Computing</title><link>https://wiki.timz.dev/software-engineering/concepts/cloud/Cloud-Computing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cloud/Cloud-Computing/</guid><description>Cloud computing describes the usage of a network of remote computers managed by [[software-engineering/concepts/cloud/Cloud Provider|cloud providers]] to handle computing tasks like storing/serving files, running web servers, training machine learning models, etc.</description></item><item><title>Cloud Provider</title><link>https://wiki.timz.dev/software-engineering/concepts/cloud/Cloud-Provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cloud/Cloud-Provider/</guid><description>Cloud providers are just companies who have set up this big network of remote computers and give you reasonable prices for running computing tasks on their computers.</description></item><item><title>CloudFront</title><link>https://wiki.timz.dev/software-engineering/aws/CloudFront/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/CloudFront/</guid><description>AWS CloudFront is a CDN service to help you serve cached static and dynamic content to users with minimal latency. It&amp;rsquo;s great because you can trust in its very high availability, and it also handles things like DDoS attacks and other network attacks well.</description></item><item><title>Code Splitting</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Code-Splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Code-Splitting/</guid><description>TODO.</description></item><item><title>Concurrency</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Concurrency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Concurrency/</guid><description>TODO: concurrency vs. asynchronous concurrency vs. multithreading concurrency vs. parallelism
TODO: Critical region.
Mutex Semaphore</description></item><item><title>CSS</title><link>https://wiki.timz.dev/software-engineering/programming-languages/CSS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/CSS/</guid><description/></item><item><title>Cypress</title><link>https://wiki.timz.dev/software-engineering/frameworks/Cypress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/frameworks/Cypress/</guid><description>Cypress is an [[software-engineering/concepts/testing/End To End Testing|end-to-end testing]] library for testing the entirety of a web app, including its frontend and backend, in a way that closely simulates how real users would use the app.</description></item><item><title>Data Center</title><link>https://wiki.timz.dev/software-engineering/aws/Data-Center/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/Data-Center/</guid><description>![[Data center.png]] Data centers are very large physical buildings that are dedicated to housing the computers that form the [[software-engineering/concepts/cloud/Cloud Computing|cloud]].</description></item><item><title>Edge Location</title><link>https://wiki.timz.dev/software-engineering/aws/Edge-Location/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/Edge-Location/</guid><description>AWS edge locations are [[software-engineering/aws/Data Center|data centers]] owned by trusted 3rd party, called an AWS Partner, that uses [[software-engineering/aws/CloudFront|CloudFront]]. Together, the edge locations form the edge network between AWS and end users.</description></item><item><title>End To End Testing</title><link>https://wiki.timz.dev/software-engineering/concepts/testing/End-To-End-Testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/testing/End-To-End-Testing/</guid><description>End-to-end (e2e) tests are tests that aim to simulate the user experience as closely as possible and will look almost like manual testing, but automated.</description></item><item><title>Factory Pattern</title><link>https://wiki.timz.dev/software-engineering/concepts/design-patterns/Factory-Pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/design-patterns/Factory-Pattern/</guid><description>The Factory pattern aims to give you a way to make objects&amp;hellip; TODO.</description></item><item><title>Functional Programming</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Functional-Programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Functional-Programming/</guid><description>TODO.
A [[software-engineering/concepts/programming/Programming Paradigm|programming paradigm]]</description></item><item><title>Generators</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Generators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Generators/</guid><description>Generators are just functions which, when invoked, will give you a single value from a list of values. They&amp;rsquo;re stateful functions which return the next value in a list of values for each successive invocation.</description></item><item><title>Generics</title><link>https://wiki.timz.dev/software-engineering/programming-languages/Generics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/Generics/</guid><description>Generic programming is about writing reusable functions, classes, etc. without compromising on [[software-engineering/concepts/programming/Type System|type safety]]. The primary motivation behind them is to keep code DRY, that is, to avoid code duplication.</description></item><item><title>GoogleTest</title><link>https://wiki.timz.dev/software-engineering/frameworks/GoogleTest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/frameworks/GoogleTest/</guid><description>TODO.</description></item><item><title>IaaS</title><link>https://wiki.timz.dev/software-engineering/concepts/cloud/IaaS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cloud/IaaS/</guid><description/></item><item><title>Integration Testing</title><link>https://wiki.timz.dev/software-engineering/concepts/testing/Integration-Testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/testing/Integration-Testing/</guid><description>Integration tests, also called &amp;rsquo;end-to-end&amp;rsquo; tests, are&amp;hellip; TODO.</description></item><item><title>Iterators</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Iterators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Iterators/</guid><description>An iterator is an object that lets you loop through an iterable, usually by invoking, implicitly or explicitly, a next method.</description></item><item><title>Java</title><link>https://wiki.timz.dev/software-engineering/programming-languages/Java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/Java/</guid><description/></item><item><title>JavaScript</title><link>https://wiki.timz.dev/software-engineering/programming-languages/JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/JavaScript/</guid><description>TODO.
There&amp;rsquo;s also [[software-engineering/programming-languages/TypeScript]].
Rest Operator TODO.
Generators TODO.
Object Oriented Programming Classes TODO.
Inheritance TODO.
Prototypes TODO.
Modules First, a brief timeline of JavaScript&amp;rsquo;s weird module system development:</description></item><item><title>Jest</title><link>https://wiki.timz.dev/software-engineering/frameworks/Jest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/frameworks/Jest/</guid><description>TODO.</description></item><item><title>Node.js</title><link>https://wiki.timz.dev/software-engineering/programming-languages/Node.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/Node.js/</guid><description>TODO.
Filesystem APIs Note: In Node.js, the convention is generally for functions like fs.readFile, fs.appendFile, etc. to take in a callback as their last argument which has the signature (error, data) =&amp;gt; {.</description></item><item><title>Object Oriented Programming</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Object-Oriented-Programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Object-Oriented-Programming/</guid><description>Object-oriented programming is a [[software-engineering/concepts/programming/Programming Paradigm|programming paradigm]] that sees programs as a collection of objects interacting with each other. Objects are just containers for some data (called &amp;lsquo;fields&amp;rsquo;) and functions (called &amp;lsquo;methods&amp;rsquo;).</description></item><item><title>PaaS</title><link>https://wiki.timz.dev/software-engineering/concepts/cloud/PaaS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cloud/PaaS/</guid><description/></item><item><title>Program Memory</title><link>https://wiki.timz.dev/software-engineering/concepts/computer-science/Program-Memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/computer-science/Program-Memory/</guid><description>Stack TODO.</description></item><item><title>Programming Paradigms</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Programming-Paradigm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Programming-Paradigm/</guid><description>A programming paradigm describes a general strategy for how to write software. Formally, a &amp;lsquo;paradigm&amp;rsquo; in everyday English is:
A set of assumptions, concepts, values, and practices that constitutes a way of viewing reality for the community that shares them.</description></item><item><title>Python</title><link>https://wiki.timz.dev/software-engineering/programming-languages/Python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/Python/</guid><description>Dunder Methods TODO.</description></item><item><title>React</title><link>https://wiki.timz.dev/software-engineering/frameworks/React/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/frameworks/React/</guid><description>TODO.</description></item><item><title>Redux</title><link>https://wiki.timz.dev/software-engineering/frameworks/Redux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/frameworks/Redux/</guid><description>Reducers TODO.</description></item><item><title>Region</title><link>https://wiki.timz.dev/software-engineering/aws/Region/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/aws/Region/</guid><description>Regions A region is literally a geographic region which contains 1 or more [[software-engineering/aws/Availability Zone|availability zones]]. AWS ensures that there are a minimum of 2 AZs in every region.</description></item><item><title>SaaS</title><link>https://wiki.timz.dev/software-engineering/concepts/cloud/SaaS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cloud/SaaS/</guid><description>SaaS</description></item><item><title>Scaling</title><link>https://wiki.timz.dev/software-engineering/concepts/cloud/Scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/cloud/Scaling/</guid><description/></item><item><title>Software Engineering</title><link>https://wiki.timz.dev/software-engineering/Software-Engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/Software-Engineering/</guid><description>Software engineering is the set of theory and practices around how to write, reason about, and maintain software.
Below is a list of notes written in my exploration of software technologies and computer science concepts.</description></item><item><title>SQL</title><link>https://wiki.timz.dev/software-engineering/programming-languages/SQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/SQL/</guid><description>TODO.</description></item><item><title>Stack Frame</title><link>https://wiki.timz.dev/software-engineering/concepts/computer-science/Stack-Frame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/computer-science/Stack-Frame/</guid><description>TODO.</description></item><item><title>Type System</title><link>https://wiki.timz.dev/software-engineering/concepts/programming/Type-System/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/programming/Type-System/</guid><description>A type system is a set of rules defined by a programming language specification that assigns a type to every variable, expression, function, and possibly other things beyond those.</description></item><item><title>TypeScript</title><link>https://wiki.timz.dev/software-engineering/programming-languages/TypeScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/programming-languages/TypeScript/</guid><description>TypeScript is a programming language made by Microsoft that is superset of [[software-engineering/programming-languages/JavaScript|JavaScript]]. The reason that TypeScript exists is to make complex JavaScript projects more maintainable and less error-prone by introducing a [[software-engineering/concepts/programming/Type System#Static Typing|static]] and [[software-engineering/concepts/programming/Type System#Strong Typing|strong]] type system.</description></item><item><title>Unit Testing</title><link>https://wiki.timz.dev/software-engineering/concepts/testing/Unit-Testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/concepts/testing/Unit-Testing/</guid><description>TODO.</description></item><item><title>Vue.js</title><link>https://wiki.timz.dev/software-engineering/frameworks/Vue.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.timz.dev/software-engineering/frameworks/Vue.js/</guid><description>Vue.js Vue.js is &amp;hellip;</description></item></channel></rss>