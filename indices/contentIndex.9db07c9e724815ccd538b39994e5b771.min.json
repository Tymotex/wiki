{"/":{"title":"Tim's Dev Wiki","content":"\nHi! I'm Tim, a computer science student at the University of New South Wales. \n\nWelcome to my personal developer wiki. Learning is incredibly chaotic ‚Äî this is my attempt to establish some semblance of order to my monkey brain. This wiki contains things I learn about software engineering, computer science and a bunch of other areas of study. Since mid 2022, I finally decided to ditch [Notion](https://notion.so/) for [Obsidian](https://obsidian.md/) as my knowledge management system. I'm sharing this with the hope that it helps or inspires whoever stumbles upon it üòÉ.\n\nüå≤ These are my [evergreen notes](https://notes.andymatuschak.org/Evergreen_notes). They're a constant work in progress ‚Äî I'm pruning, editing and adding new notes as I piece together a better understanding of software engineering as well as other areas of study that interest me.\n\nüó∫Ô∏è To get around, use the big interactive graph above or start from the subject links below. Use `ctrl+k` to fuzzy search through the entire wiki.\n\nüíª Curious how I made this? I used the [Obsidian](https://obsidian.md/) editor to create a bunch of interconnected [markdown](https://www.markdownguide.org/) files, each of which correspond to a page in this wiki. To deploy those markdown files as a set of connected webpages, I forked \u003ca href=\"https://github.com/jackyzha0/quartz\"\u003eQuartz\u003c/a\u003e, tweaked the CSS and JavaScript to my liking, then published it to [GitHub Pages](https://pages.github.com/). See the source code for this project \u003ca href=\"https://github.com/Tymotex/wiki\"\u003ehere\u003c/a\u003e.\n\nüë®‚Äçüíª Who am I? See [timz.dev](https://timz.dev).\n\n---\n\n# Software Engineering\n*Software engineering* is the set of theory and practices around making computers do what you want it to do. Below is a list of notes written in my exploration of software technologies and concepts.\n\n## Languages\n- [[Knowledge/Engineering/Languages/C++|C++]]\n    - [[Knowledge/Engineering/Languages/C++ Cheatsheet|C++ cheatsheet]]\n- [[Knowledge/Engineering/Languages/TypeScript|TypeScript]]\n- [[Knowledge/Engineering/Languages/Python|Python]]\n- [[Knowledge/Engineering/Languages/Go|Go]]\n- [[Knowledge/Engineering/Languages/CSS|CSS]]\n- [[Knowledge/Engineering/Languages/Rust|Rust]] \n\n## Technologies\n- [[Knowledge/Engineering/Technologies/Cypress|Cypress]]\n- [[Knowledge/Engineering/Technologies/Vue|Vue.js]]\n- [[Knowledge/Engineering/Technologies/Nuxt|Nuxt.js]]\n- [[Knowledge/Engineering/Technologies/Docker|Docker]]\n- [[Knowledge/Engineering/Technologies/Docker Compose|Docker Compose]]\n- [[Knowledge/Engineering/Technologies/Tailwind|Tailwind]]\n- [[Knowledge/Engineering/Technologies/NGINX|NGINX]]\n- [[Knowledge/Engineering/Technologies/PostgreSQL|PostgreSQL]]\n- [[Knowledge/Engineering/Technologies/Flutter|Flutter]]\n- [[Knowledge/Engineering/Technologies/Firebase|Firebase]]\n- [[Knowledge/Engineering/Technologies/Figma|Figma]]\n\n## Knowledge\n- **Programming**\n\t- [[Knowledge/Engineering/Programming/Generators|Generators]]\n\t- [[Knowledge/Engineering/Programming/Iterators|Iterators]]\n- **DevOps**\n\t- [[Knowledge/Engineering/DevOps/Virtual Machines|Virtual machines]]\n\t- [[Knowledge/Engineering/DevOps/Containers|Containers]]\n\t- [[Knowledge/Engineering/DevOps/Hypervisor|Hypervisors]]\n- **Fullstack**\n\t- [[Knowledge/Engineering/Full-Stack/State Management|State management]]\n- **Architecture**\n\t- [[Knowledge/Engineering/Architecture/Microservice|Microservices]]\n\t- [[Knowledge/Engineering/Architecture/Monolith|Monoliths]]\n- **Operating systems**\n\t- [[Knowledge/Engineering/Operating Systems/User Space and Kernel Space|Userland \u0026 Kernel Space]]\n- **Graphics**\n    - [[Knowledge/Engineering/Graphics/SVGs|SVGs]]\n- **Agile**\n    - [[Knowledge/Engineering/Agile/Requirements Engineering|Requirements]]\n    - [[Knowledge/Engineering/Agile/Agile|Agile]]\n\n","lastmodified":"2022-10-14T06:51:54.110892787Z","tags":null},"/Journal/archive/2022-09-10":{"title":"","content":"\n\u003e \\\"All we need to do are these three little duties‚Äîto try hard, to be honest, and to help ourselves and others.\\\" ‚Äî Ryan Holiday\n\n# Thoughts\n\n# What is one of your most cherished memories and why?\n\n# One Thing You're Grateful For\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-11":{"title":"","content":"\n\u003e \\\"All we need to do are these three little duties‚Äîto try hard, to be honest, and to help ourselves and others.\\\" ‚Äî Ryan Holiday\n\n# Thoughts\n\n# Was today a meaningful day? Are you any closer to your goals?\n\n# One Thing You're Grateful For\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-12":{"title":"","content":"\n\u003e \\\"He who has a *why* to live for can bear almost any *how*.\\\" ‚Äî Nietzche\n\n# Thoughts\n\n# Think of something you‚Äòve done that you regret. Write yourself an apology and your own response of forgiveness.\n\n# One Thing You're Grateful For\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-13":{"title":"","content":"\n\u003e \\\"He who has a *why* to live for can bear almost any *how*.\\\" ‚Äî Nietzche\n\n# Thoughts\n\n# Think of someone you admire. Write yourself advice you think they would give you from their point-of-view.\n\n# One Thing You're Grateful For\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-14":{"title":"","content":"\n\u003e \\\"All we need to do are these three little duties‚Äîto try hard, to be honest, and to help ourselves and others.\\\" ‚Äî Ryan Holiday\n\n# Thoughts\n\n# What is one of your most cherished memories and why?\n\n# One Thing You're Grateful For\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-15":{"title":"","content":"\n\u003e \\\"He who has a *why* to live for can bear almost any *how*.\\\" ‚Äî Nietzche\n\n# Thoughts\n\n# Think of a thing, item, or product you‚Äôve been wanting to replace or upgrade. Is what you currently have functioning well enough? What do you appreciate about it? What sustained value will an upgrade or replacement add to your life?\n\n# One Thing You're Grateful For\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-16":{"title":"","content":"\n\u003e \\\"He who has a *why* to live for can bear almost any *how*.\\\" ‚Äî Nietzche\n\n# Thoughts\n\n# What is one of your most cherished memories and why?\n\n# One Thing You're Grateful For\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-17":{"title":"","content":"**Am I happy with today?**\nFairly. I went to a social sports event with a bunch of people. I felt pretty connected with the people there and I'm feeling pretty motivated to try more social meetups like that again. I was super reluctant beforehand and contemplated flaking. I'm glad that I didn't. Also, I feel guilty for spending so much time on my second brain. Just thining about it, all I have to do now, I believe, is just to migrate a few things:\n- My backlog of ideas.\n- My exercise routine table.\nAnd get sync working. Then, I can be mostly free of Notion. Wow.\n\n**What can I do better?**\nI could stop being a coward and actually set and do the tasks that I feel a lot of resistance towards.\n\n**What am I grateful for?**\nI'm grateful that I have friends who invite me to things.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-18":{"title":"","content":"**Am I happy with today?**\nMildly satisfied. I spent the morning setting up mobile Git sync and then doing some C++ problems. I had a walk with my family at Meadowbank again which just seems to suck up a quarter of the day. I wrapped up a few more things about the Cairns trip, so I think I'm pretty much done with that.\n\n**What can I do better?**\nI need to just dive in, head first, into the thing I am feeling a lot of resistance to but which I really want to move forward on.\n\n**What am I grateful for?**\nI'm grateful that my mum wants me to be happy and actively tries to make me so. I'm also grateful that my parents are grateful towards me.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-19":{"title":"","content":"**Am I happy with today?**\nSomewhat. I unexpectedly spent the morning learning more about Python again. I feel a stronger grasp towards languages after completing that Programming TypeScript textbook. Learning type hinting was like re-visiting TypeScript syntax. I also finally learned about the Python import/export module system a little more in-depth and now understand the basics of my struggle with it.\n\nI continued reading Man's Search For Meaning. It's a really emotional book. One very interesting psychological phenomenon the book ponders is the apathy the author developed towards human suffering. Another interesting observation is that humans seem to regress in their wants, which is noticeably reflected in their dreams. Sexual urges are not present when the primary urge becomes hunger. The main takeaway from this for me is that my baseline of happiness is in equilibrium with the status quo, meaning that I'll probably always feel something missing, and when I acquire it, the goalpost for 'happiness' simply shifts forward. One more compelling insight from the book is that love is truly what makes life worth living. I'm starting to get why Lex Fridman is so obsessed with the idea of love in the world. I want to suffer in my life, and I want it to be for love.\n\n**What can I do better?**\nI need to suffer more. I need to work at least twice as hard. I don't know why but time seems to just fly by after lunch. I really need to capitalise on my morning mental vigour and \n\n**What am I grateful for?**\nMy mum for selflessly living her life to make me happy.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-20":{"title":"","content":"**Am I happy with today?**\nA bit more than usual. I sat down and learned more about Python (this time about built-in modules). I finished a script to format my Obsidian tasks and it actually worked. I also unit tested things a decent amount. It felt good because I actually think I wrote a readable, extensible, tested script. It's got a number of flaws for sure, but this little project made me feel like a craftsman.\n\n**What can I do better?**\nI relapsed today. I should have prevented it. I kept rationalising, as usual.\n\n**What am I grateful for?**\nA mum and dad that will work hard together to make life better.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-21":{"title":"","content":"**Am I happy with today?**\n\n\n**What can I do better?**\n\n\n**What am I grateful for?**\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-22":{"title":"","content":"**Am I happy with today?**\nIt was okay today. I worked a decent amount of hours however I am a bit disappointed with my output quality and quantity. I should focus on one hard task in the morning.\n\nI am so disappointed with myself. Where the hell does my time go each day? Why does it not amount to much? I've had months to myself at this point and what do I have to show for it? What even are my goals at this point? I just have a backlog of things to accomplish or try but that's it. How can I get out of this rut and work hard and feel something again?\n\nI feel so guilty that I haven't been able to get my parents to a better state in life. They should be healthier and wealthier and happier, and I could have done more to help them.\n\n**What can I do better?**\nSeriously, just get one hard task done in the morning. Spend the rest learning and reading, knowing you've already done something hard and important upfront.\n\n**What am I grateful for?**\nMum for advocating to take the trip to Cairns. I think it really will be one of the best experiences in our lifetime.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-23":{"title":"","content":"**Am I happy with today?**\nI'm feeling okay about today. Subjectively, it doesn't feel like I accomplished all that much, however when I see what I've checked for today, it's an okay amount. \n\nI slept so much better last night. I think it was because I didn't look at screens much and because I got in bed before 9. I'll continue to do that. I'm pretty happy that my Fitbit sleep scores are consistently higher than they were nearer the start of the year.\n\nI love Man's Search for Meaning. It's a book that really gets me to think deeply about meaning and suffering and stoicism.\n\n**What can I do better?**\nNext, like I mentioned already, I need to just pick the most challenging and most meaningful project and dive in head-first in the 4 hours morning deep work block that I have each day. Today, I spent a lot of that time just reading about personal finance, which wasn't wasted time, but I could have spent it coding something challenging.\n\n**What am I grateful for?**\nHaving a mum that can see when I am feeling under the weather and will do her best to console me and lift my mood. Having a dad who is seriously optimistic and reassures me that everything will be fine.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-24":{"title":"","content":"**Am I happy with today?**\n\n\n**What can I do better?**\n\n\n**What am I grateful for?**\nI'm grateful that I'm a happy person. I'm grateful that I'm bulletproof against depression. I'm grateful to know that whatever happens to me or my loved ones, I will always find meaning in my life and in suffering.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-25":{"title":"","content":"**Am I happy with today?**\nI'm feeling angry towards dad for complaining so much while going outdoors with mum and I. I wish he would stop using his phone so much while outside with us and that he would just enjoy the experience more. I am honestly so pissed off towards him and do not want to go out with him anymore.\n\nI'm starting to think again of that time that I stole ice cream. I am so deeply ashamed that I did that. You wouldn't fault a toddler for making that decision, but I was a young teenager and I should have known better. I'm ashamed that I had no real principles and moral understanding. I am grateful, however, that I can reflect back on this moment that I am most ashamed of and feel this way. I will be a man of integrity.\n\n**What can I do better?**\nI need to work harder and be more willing to endure severe discomfort for the sake of my goals. I am pretty goal-less right now and that's dangerous. Things will expand to take up all this precious time that I have available at the moment and I won't have this much time again.\n\n**What am I grateful for?**\nI'm grateful that I have a great job lined up. I remember being so damn happy to have gotten that internship.\n\nI'm grateful that my mum is so caring and logical when she's consoling me. She tried to mend my poor attitude towards dad and really put things into perspective. I love that she of all people could do it, when not too long ago they had the worst fight I've ever seen in my life. She's really a person of solid character.\n\nI'm grateful towards my dad for at least making an effort to do better.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-25-weekly":{"title":"Weekly Review","content":"\n\u003e The point is not to review life goals or re-evaluate every ongoing project. \n\n- [x] Tidy up your projects.\n    - Does any need to be archived?\n    - Clear your email inbox.\n- [x] Filter your todos. Get rid of the ones that don't matter.\n- [x] Decide on priorities over next week. Which project will you focus on most?\n    - Schedule tasks through the week.\n    - Determine the purpose of each day.\n\n## Reflection\nI reconnected with both C++ and Python and I did a lot more for my personal wiki project. I also tried Prometheus and Grafana. Yesterday and today, I learned a lot more CSS. I feel like there was no overarching focus of the week... I need to correct this going forward.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-26":{"title":"","content":"**Am I happy with today?**\nNo. I am so disappointed in myself for relapsing to porn. I got bad sleep and just couldn't control myself. Actually, no, I got triggered by a few things and couldn't control myself after that.\n\n**What can I do better?**\nImplement a better system for avoiding and preventing relapses.\n\n**What am I grateful for?**\nThat I'm guilty whenever these relapses happen.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-27":{"title":"","content":"**Am I happy with today?**\nIt was average. I didn't code today unfortunately. Holy crap I spend so much time just eating... it is actually frustratingly bad. I think I probably spend 2 hours just eating, everyday. I also get annoyed having to talk to Raymond... I think I should really try not to meet up with him as much and just slowly distance myself. I'm not really interested in being like him.\n\nI finished Rich Dad Poor Dad today. It was a decent book but not groundbreaking. It was helpful in confirming a lot about what I already knew vaguely or concretely from reading various things online and from reading other books on personal finance and entrepreneurship.\n\n**What can I do better?**\nI need deadlines. I need them badly, else I will always be frustrated at how little I accomplish.\n\n**What am I grateful for?**\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-28":{"title":"","content":"**Am I happy with today?**\n\n\n**What can I do better?**\n\n\n**What am I grateful for?**\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-29":{"title":"","content":"I did squats 3 days ago and I am still so sore from it. That was the hardest workout in a long time and I'm proud to have suffered through it.\n\nI get so annoyed thinking about Simon. Why does he think that his problems are significant enough to go to a psychologist? What suffering has he endured? All of his problems are purely by his own construction. Life would be better and he would be so much more respectable if he were to work hard at something meaningful, be more open-minded, and find beauty in something beyond gaming and porn. **I must not be like this kind of person**. I mustn't ever be around people who I simply grow to resent. The same applies to a person like David. Reese I respect more because he has demonstrated initiative and some pursuit of meaning. He exercises and has goals to strive towards - and actually does so. That's commendable. Arthur is also someone I respect - he loves what he does, possibly on the same level as I do, and he loves challenge as well. He is ambitious and will work hard to pursue goals. \n\n**Am I happy with today?**\n\n\n**What can I do better?**\n\n\n**What am I grateful for?**\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-30":{"title":"","content":"\n\u003e \\\"All we need to do are these three little duties‚Äîto try hard, to be honest, and to help ourselves and others.\\\" ‚Äî Ryan Holiday\n\n# Thoughts\nShopping, commuting, cooking and eating are so depressingly time-consuming. It really took me half the day to accomplish all these things. I really need to optimise my time away from doing these things and only enjoy them as a very occasional luxury. If I need groceries, I should just tell mum. If I want to try a certain meal, I should only try it on a day where I plan to do less intensive and long work.\n\n# Think of 12 year-old you. What ‚Äúsecrets of life‚Äù have you acquired that you would want to share with yourself?\nMeaningful hard work and constantly increasing your own tree of knowledge are the among the most satisfying pursuits possible in life.\n\n# One Thing You're Grateful For\nMy mum. She keeps mentioning how she is really happy. Her own gratitude for her life is infectious and I feel deeply grateful from it. Also her mannerisms are just overall adorable. \n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-09-30-monthly":{"title":"Monthly Review","content":"\nThe point of weekly reviews is mainly to ensure that the projects are keeping to deadlines. The point of monthly reviews it to check that the projects are worth doing and that I'm progressing to the right goals the right way.\n\n- [x] Review [[Tasks/Goals|Goals]].\n    - [x] Are you happy with them?\n    - [x] Are you on track to completing them?\n        - I just need to get Konflux done ASAP and move on to the math website. Then I'm pretty on track, career-wise. With investing, I've just got to push through with real estate vs. stocks. Lifting I'm fine. Reading I'm doing pretty well too. I think I could have more career goals.\n- [x] What are the 3 highest priority projects over next month?\n    - Probably: Konflux, math website, structs.sh. Also, building a second brain whenever I've got a moment where I want to do some fun coding.\n- [x] What other projects should you bring to life or put in the ice box?\n    - None. They're all important right now.\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-01":{"title":"","content":"\n\u003e \\\"He who has a *why* to live for can bear almost any *how*.\\\" ‚Äî Nietzche\n\n# Thoughts\nWhen I don't work on a project for a while (\u003e= 1 week), I notice that I build up a lot of resistance towards starting that task again. It feels as if I left it in a state that I'm not proud of and that would be unpleasant to return to. I know that's not the case. I will always finish my projects, no matter what. I just want to knock out Konflux this week and then stop worrying about it for a while.\n\nI find that writing my subtasks down on paper is very helpful. Recursively breaking down tasks seems like a universally good idea wherever you go, especially problem-solving and beating procrastination resistance.\n\nI always wake up feeling a bit lethargic. I should be aggressive and get to bed well before 9 hours before my waking time.\n\n# Think of a thing, item, or product you‚Äôve been wanting to replace or upgrade. Is what you currently have functioning well enough? What do you appreciate about it? What sustained value will an upgrade or replacement add to your life?\n\n\n# One Thing You're Grateful For\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-02":{"title":"","content":"\n\u003e \\\"He who has a *why* to live for can bear almost any *how*.\\\" ‚Äî Nietzche\n\n# Thoughts\nNot really that proud of today. I spent most of it on konflux,then origami. I was super inefficient towards the end of the day. I need to just focus solely on one thing and ruthlessly do it for the entire day.\n\n# Think of a thing, item, or product you‚Äôve been wanting to replace or upgrade. Is what you currently have functioning well enough? What do you appreciate about it? What sustained value will an upgrade or replacement add to your life?\nI've been wanting to upgrade my watch. Yes it is good enough. I remember scratching it and feeling pretty bad about it, thinking I'd need to replace it, but now I barely notice it. In fact, I probably appreciate it more now that I realised it's not invincible. And upgrade would do close to nothing for me in the best case.\n\n# One Thing You're Grateful For\nI'm really grateful for having my own home gym. I also grateful for my hobbies and that I find so many different things really interesting.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-02-weekly":{"title":"Weekly Review","content":"\n\u003e The point is not to review life goals or re-evaluate every ongoing project. \n\n- [x] Tidy up your projects.\n    - [x] Archive inactive or unimportant projects.\n    - [x] Clear your email inbox.\n- [x] Filter your todos. Get rid of the ones that don't matter.\n- [x] Decide on priorities over next week. Which project will you focus on most? Remember, I'm using these weekly reviews to keep track of project deadlines. \n      I'm going to finish Konflux this week, then maths and read more books.\n    - [x] Schedule tasks through the week. Move tasks from the projects board into the tasks board.\n    - [x] Determine the purpose of each day, stating the project to be focused on and the main goal that day. Link to that project's page.\n\n---\n\nAfter starting work:\n- [ ] Look at finance spreadsheet. \n    - [ ] Add super balance.\n    - [ ] Add investments balance.\n    - [ ] Determine what expenses can be cut.\n\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-03":{"title":"","content":"\n\u003e \\\"He who has a *why* to live for can bear almost any *how*.\\\" ‚Äî Nietzche\n\n# Thoughts\n\n# Think of 12 year-old you. What ‚Äúsecrets of life‚Äù have you acquired that you would want to share with yourself?\n\n# One Thing You're Grateful For\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-04":{"title":"","content":"\n\u003e \\\"All we need to do are these three little duties‚Äîto try hard, to be honest, and to help ourselves and others.\\\" ‚Äî Ryan Holiday\n\n# Thoughts\n\n# Think of 12 year-old you. What ‚Äúsecrets of life‚Äù have you acquired that you would want to share with yourself?\n\n# One Thing You're Grateful For\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-05":{"title":"","content":"\n\u003e \\\"He who has a *why* to live for can bear almost any *how*.\\\" ‚Äî Nietzche\n\n# Thoughts\nI met that girl from Baulkham Hills yesterday. I thought she was really pretty. If I could have a girl with her looks as my girlfriend, I'd be really content. I should remember that girls like her are available to me, so long as I stay the course and avoid PMO. \n\nAlso, today I got a perm for the first time and I hate it. I hope it grows out quickly. I'm glad that I made this mistake when it mattered the least, ie. right before work and just after university.\n\n# What is one of your most cherished memories and why?\nSupporting my mum during her visit to the eye doctor when we were scared about a detached retina. I felt so close to her and I felt so purposeful and happy despite the expected tragedy. I was so ready to step up as a man and carry the world for her. I strive to be that kind of person.\n\n# One Thing You're Grateful For\nThat I feel immensely guilty and ashamed when I don't work hard. Working hard feels so good because it's meaningful to me.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-06":{"title":"","content":"\n\u003e \\\"All we need to do are these three little duties‚Äîto try hard, to be honest, and to help ourselves and others.\\\" ‚Äî Ryan Holiday\n\n# Thoughts\nI found out that that girl probably doesn't care at all about me. I had some pretty inflated ideas that I was her idol, but it turns out it was just her mum who idolised me. I need to get out of my own head. I'm not that good at all. I have to be better for these girls to actually be head over heels for me. Plus, she really isn't that high quality of a partner, probably, given how little social awareness she seemed to have during that dinner. Good, you dodged a bullet. You really have to refine your tastes and especially your standards. You should ignore all women for at least the next several years.\n\n# Think of something you‚Äòve done that you regret. Write yourself an apology and your own response of forgiveness.\nI really regret not reading. I'm sorry that I couldn't execute on the little bit of discipline required to get into a reading habit. You would have benefited so much from this, but I failed you. It's okay though because I'm reading now and forgive my past self for being so selfish and inconsiderate of my future self.\n\n# One Thing You're Grateful For\nI'm grateful to all the books that have taught me so much and about so many lessons I would have had to painfully and unnecessarily make.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-07":{"title":"","content":"\n\u003e \\\"All we need to do are these three little duties‚Äîto try hard, to be honest, and to help ourselves and others.\\\" ‚Äî Ryan Holiday\n\n# Thoughts\nI got a fitbit sleep score of 87 and feel pretty amazing this morning. The sun is partially out as well. I was in bed for more than 9 hours however, and I had a total time asleep of around 8 hours 13 mins. In the future, I should wind down outside of bed and just enter it to sleep. Also, I had to wake up to go to the toilet. I think these are the two big things I need to improve on: wind down separately outside of bed, and stop drinking water a few hours shy of bedtime.\n\nDamn, I really need to just get sleep right and my life will improve so much.\n\nI did a decent amount of work today. I just really want to wrap up Konflux this week, I've already exceeded my previous deadline which was Sunday 2nd Oct, which in retrospect was way too ambitious. I'm starting let some broken windows stick around in the codebase now which I hate, but I just want to get this shipped and out of the way. Also, I really wish I had tracked my progress a little better :(. Never too late to do it.\n\n# Think of someone you admire. Write yourself advice you think they would give you from their point-of-view.\nThe first person to come to mind is David Goggins. He would tell me to suffer more, and that I'm way too comfortable, and he'd be right. I've been avoiding doing things that scare me for too long.\n\n# One Thing You're Grateful For\nHaving a good night's sleep.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-08":{"title":"","content":"\n\u003e \\\"All we need to do are these three little duties‚Äîto try hard, to be honest, and to help ourselves and others.\\\" ‚Äî Ryan Holiday\n\n# Thoughts\nNot a bad day, I worked an average amount of time today, but I could always do a lot better (I estimate today I did around 5-6 hours, excluding reading). I should be pushing hard to do 8 hours of solid work, at least 3 of which should involve deep focus. I lost the morning today ‚Äî I went out with my parents to Chatswood again to eat fried bread sticks.\n\n# Think of a thing, item, or product you‚Äôve been wanting to replace or upgrade. Is what you currently have functioning well enough? What do you appreciate about it? What sustained value will an upgrade or replacement add to your life?\nI've been wanting to update my barbell and rack. In truth, the current setup is fine, it just lacks safety features and is a bit rusted. After searching this up a bit, I think it should be fine. I love that my barbell, rack and bench have led to me forming an amazing hobby. If it weren't for my brother, I wouldn't have had this, and I'd probably be a lot worse off because of that. An upgrade would feel marginally better, but I'm better off using the money for something else I think.\n\n# One Thing You're Grateful For\nMy home gym.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-09":{"title":"","content":"\n\u003e \\\"All we need to do are these three little duties‚Äîto try hard, to be honest, and to help ourselves and others.\\\" ‚Äî Ryan Holiday\n\n# Thoughts\nI felt quite a strong urge to play Rimworld again. I'm not sure whether I'll play it again.\n\n# What is one of your most cherished memories and why?\nStepping on stage and receiving the Dux award for years 11 and 12. I worked hard for that and I proved to myself that I could beat everyone and win.\n\n# One Thing You're Grateful For\nThat my lifestyle doesn't consist of many bad habits other than PMO.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-09-weekly":{"title":"Weekly Review","content":"\n\u003e The point is not to review life goals or re-evaluate every ongoing project. \n\n- [x] Tidy up your projects.\n    - [x] Archive inactive or unimportant projects.\n    - [x] Clear your email inbox.\n- [x] Filter your todos. Get rid of the ones that don't matter.\n- [x] Decide on priorities over next week. Which project will you focus on most? Remember, I'm using these weekly reviews to keep track of project deadlines.\n    - [x] Schedule tasks through the week. Move tasks from the projects board into the tasks board.\n    - [x] Determine the purpose of each day, stating the project to be focused on and the main goal that day. Link to that project's page.\n\n---\n\nAfter starting work:\n- [ ] Look at finance spreadsheet. \n    - [ ] Add super balance.\n    - [ ] Add investments balance.\n    - [ ] Determine what expenses can be cut.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-10":{"title":"","content":"\n\u003e \\\"He who has a *why* to live for can bear almost any *how*.\\\" ‚Äî Nietzche\n\n# Thoughts\n\n# How did I help someone today? And how can I help someone tomorrow?\n\n# One Thing You're Grateful For\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-11":{"title":"","content":"\n\u003e \\\"No great thing is created suddenly.\\\" ‚Äî Epictetus\n\n# Thoughts\nI feel a pretty strong urge to game again. I don't know if I should. I find Rimworld really enjoyable, and the new expansion has me longing to play it, but I know that it's not good for me. I honestly think I'll just pass. Maybe at some point I'll play again, but right now is a dangerous time to be picking up bad habits again. I can't let my bad habits exceed just PMO.\n\nI spent the better part of this morning (my most impactful hours) writing notes on Spark. I don't think it's wasted time, but I could have been doing something more meaningful. I think that in the morning I felt that I had too many tasks and was a bit overwhelmed, so I decided to do the thing with the least resistance, and that was finishing off Spark notes. In the future, I should avoid having such huge task lists... I don't know what to do about it yet, but maybe I'll more ruthlessly drop things.\n\n# What is an accomplishment you're very proud of? Why are you proud of it? What can you do to do more things like that?\nI'm really proud of that moment when I picked up a geometry book and just worked on it consistently for a little while. Seriously, that moment, when I was starting to get pretty good, was the start of all this momentum the last several years. If not for that, I would not have scored exceptionally high that one time in year 10, which means I would not have performed nearly as well in year 11 and year 12, and consequently in university. It all happened because I had an open mind and desire to learn and get better. I still have this and must go harder and be bolder and hungrier for knowledge, wisdom and competence.\n\n# One Thing You're Grateful For\nMy mum, who listens to me and respects the things I say. My mum and dad are both willing to admit they were wrong on certain things and give me autonomy. It feels great to have both their respect.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-12":{"title":"","content":"\n\u003e \\\"Men are disturbed not by things, but by the view which they take of them.\\\" ‚Äî Epictetus\n\n# Thoughts\nAll these personal finance and self-help books leave me feeling so hopeful for the future. I feel grateful knowing that I'm a really frugal person and that I'm mindful and disciplined about my money. I feel grateful knowing that I will be motivated to invest money, and that I'll see that money as units in a exponentially growing army of freedom fighters. I see frugality as a challenge to rise against, not a form of deprivation.\n\nAlso, I'm really glad I set up that automatic journal generation idea. I actually look forward to seeing what I get and it makes me introspect more deeply.\n\n# Which emotions do you find hardest to accept (guilt, anger, disappointment, etc.)? How do you handle these emotions?\nI find guilt/regret/shame, which are really all expressions of the same emotional distress, to be the hardest to accept. Anger, disappointment, sadness, these are all easier to control. Guilt is something that haunts me for years, and feels awful because I brought it upon myself. Perhaps the only consolation of this emotion is that it is a strong driver for me to never conduct myself in a certain way again.\n\n# One Thing You're Grateful For\nThat I love reading, and leaning.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Journal/archive/2022-10-13":{"title":"","content":"\n\u003e \\\"You have power over your mind ‚Äì not outside events. Realize this, and you will find strength.\\\" ‚Äî Marcus Aurelius\n\n# Thoughts\nI had such a bad day with porn today. First, I searched up lewd images of lingerie in the morning, then I caved into that porn video that I've watched for years, then I went to even more extreme porn shortly after. That's 3 times. I felt myself almost break down at how frustrated and shameful I felt. I don't deserve this pleasure. This is such a betrayal to who I am. Next time I get urges, I will just release pure rage against it. It is unacceptable to give up. Rather than feel helpless, I am going to put up a huge fight. I will do whatever it takes and not admit defeat. I'll drop what I'm doing and go outside for a few minutes, I'll talk to mum, I'll just go exercise, I'll go watch a YouTube video, I'll exhaust all the possibilities.\n\n\n# What do you appreciate most about your personality? What aspects do you find harder to accept?\nI like that working hard, finding meaning, and loving life are important to me and are things I prioritise doing. I like that failing to do these things leaves me sad and regretful, because it prevents me from straying. What I find unacceptable about me is that I still relapse to PMO, and sometimes I'm so averse to signing up for certain things like events, social situations, etc. In a way, it's cowardly, not rational as I'd hope to believe myself to be.\n\n# One Thing You're Grateful For\nReading the Psychology of Money. I think the lessons in that book will serve me for a lifetime. I'm also grateful for a mum who trusts me and allows me independence.\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Knowledge/Business/Entrepreneurship":{"title":"Entrepreneurship","content":"\nSome scattered ideas about entrepreneurship, sourced from books:\n- *Complete Software Developer's Career Guide* by John Sonmez.\n- *So Good They Can't Ignore You* by Cal Newport.\n\n\u003e \"Assume the business will fail, then do the smallest amount of initial setup and work to get it started.\" ‚Äî John Sonmez\n\nIn other words, direct as much of your efforts to what matters ‚Äî which is getting your idea developed and ship as soon as possible. Forget all the branding and business laws, etc. That all matters, but not if your business isn't going to survive.\n\nStart building the business *during* your 9-5 job. If you can't tolerate this, give up. You're not mentally fit for this pursuit.\n\nLearn [[Knowledge/Business/Sales|sales]] and [[Knowledge/Business/Marketing|marketing]]. Successful entrepreneurs who aren't competent salespeople don't exist.\n\nBe prepared for life to truly suck as an entrepreneur.\n\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Knowledge/Business/Marketing":{"title":"Marketing","content":"\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Knowledge/Business/Sales":{"title":"Sales","content":"\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Knowledge/Economics/Macroeconomics":{"title":"Macroeconomics","content":"\n![[Knowledge/Economics/assets/macroeconomics-wallpaper.png|600]]\n\nAn *economy* is simply the sum of all transactions that make it up. *Economic growth* is driven by transactions, ie. spending. *Macroeconomics* is the study of the aggregate behaviour of economies and aggregate variables such as a country's GDP, unemployment rate, inflation rate, etc. which are mainly produced by government statistical agencies like the [ABS](https://www.abs.gov.au/) in Australia.\n\n- [[Knowledge/Economics/macroeconomics/GDP|GDP]]\n- [[Knowledge/Economics/macroeconomics/Inflation|Inflation \u0026 CPI]]\n- [[Knowledge/Economics/macroeconomics/Labour Market|Labour market]]\n- [[Knowledge/Economics/macroeconomics/Interest|Interest]]\n- [[Knowledge/Economics/macroeconomics/Savings and Investments|Savings and investments]]\n- [[Knowledge/Economics/macroeconomics/Income-Expenditure Model|Income-expenditure model]]\n- [[Knowledge/Economics/macroeconomics/Fiscal Policy|Fiscal policy]]\n- [[Knowledge/Economics/macroeconomics/Public Debt|Public debt]]\n- [[Knowledge/Economics/macroeconomics/Private Banks|Private banks]]\n- [[Knowledge/Economics/macroeconomics/Money|Money]]\n- [[Knowledge/Economics/macroeconomics/Monetary Policy|Monetary policy \u0026 cash rate]]\n- [[Knowledge/Economics/macroeconomics/Aggregate Supply and Demand Model|Aggregate supply and demand model]]\n- [[Knowledge/Economics/macroeconomics/International Trade|International trade]]\n- [[Knowledge/Economics/macroeconomics/Exchange Rate|Exchange rate]]\n- [[Knowledge/Economics/macroeconomics/Economic Growth|Economic growth]]\n\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Knowledge/Economics/Microeconomics":{"title":"Microeconomics","content":"\n==Hello world==\n","lastmodified":"2022-10-14T06:51:53.854874208Z","tags":null},"/Knowledge/Economics/macroeconomics/Aggregate-Supply-and-Demand-Model":{"title":"Aggregate Supply and Demand","content":"\nThe [[Knowledge/Economics/macroeconomics/Income-Expenditure Model|income-expenditure model]] aims to determine the short-run real GDP. The *aggregate supply and demand model* aims to determine the real GDP in both the short-run and long-run.\n\n\u003e Note that the aggregate demand and aggregate supply curves are different in meaning fundamentally to the marginal benefit and marginal cost curves in microeconomic contexts.\n\n### Aggregate Demand (AD)\nRecall that the planned aggregate expenditure in a 4-sector economy is given as $PAE = C+I^P+G+X-M$.\n\nOne core assumption is that a rise in $r$ will tend to reduce consumption and planned investment. We can assume they are affected in the following way:\n- $C=C_{0}+c(Y-T)-\\alpha r$, where $\\alpha \u003e0$.\n- $I^{P}= I_{0}- \\beta r$, where $\\beta \u003e 0$.\n\nPlugging these in and solving for the equilibrium real GDP, we get:\n$$\n\\begin{align}\n\tY_\\text{equilibrium}\u0026=PAE=\\big[C_{0}+c(Y-T) -\\alpha r\\big]+ \\big[I_{0}- \\beta r\\big] + G_0 + X_0 -mY \\notag \\\\\n\t\u0026= \\frac{1}{1-c(1-t)+m}\\bigg( \\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0}\\big)- r(\\alpha + \\beta) \\bigg). \\notag\\\\\n\\end{align}\n$$\n\nNow we've made $Y_\\text{equilibrium}$ a function of $r$, we have a simple model for predicting the effects of [[Knowledge/Economics/macroeconomics/Monetary Policy|monetary policy]] on real GDP.\n\nTo express $Y_\\text{equilibrium}$ as a function of $\\pi$, we can assume that the central bank will use the [[Knowledge/Economics/macroeconomics/Cash Rate#Simple Policy Rule|simple policy rule]] reaction function which tells them to increase the real interest rate in response to an increase in inflation rate. With this assumption, we can relate the real interest rate with the inflation rate, $r= r_{0}+\\gamma\\pi$ and express $Y_\\text{equilibrium}$ as a function of $\\pi$:\n\n$$\n\\begin{align}\n\tY_\\text{equilibrium} \u0026= \\frac{1}{1-c(1-t)+m}\\bigg( \\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0}\\big)- r(\\alpha + \\beta) \\bigg), \\notag\\\\\n\t\u0026= \\frac{1}{1-c(1-t)+m}\\bigg( \\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0}\\big)- (r_{0}+\\gamma\\pi)(\\alpha + \\beta) \\bigg), \\notag\\\\\n\t\\notag\\\\\n\t\\text{Supposing }k \u0026= \\frac{1}{1-c(1-t)+m}, \\notag\\\\\n\tY_\\text{equilibrium} \u0026= k\\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0} - r_0(\\alpha + \\beta)\\big)-k\\gamma(\\alpha +\\beta)\\pi. \\notag\\\\\n\t\\notag\\\\\n\\end{align}\n$$\nSupposing $A_{0} = k \\underbrace{\\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0} - r_0(\\alpha + \\beta)\\big)}_{\\text{Exogenous variables}}$, we now have an equation representing the aggregate demand curve:\n$$\\colorbox{#FFFFBF}{$ Y_\\text{equilibrium} = A_0-k\\gamma(\\alpha +\\beta)\\pi$},$$\nwhich relates the real GDP to the inflation rate. Although the AD curve links the real GDP and inflation, it does not determine them. That's where we need the aggregate supply curve.\n\n![[Knowledge/Economics/macroeconomics/assets/aggregate-demand-curve.png|500]]\n\nChanges to the exogenous variables in the constant $A_0 = k\\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0} - r_0(\\alpha + \\beta)\\big)$ will cause shifts in the AD curve, often called *AD shocks*. \n\nNote that when productivity is low, ie. real GDP is low, prices are high.\n\n### Aggregate Supply (AS)\nIn the [[Knowledge/Economics/macroeconomics/Income-Expenditure Model|income-expenditure model]], we assumed that the prices would stay fixed in the short run. In the aggregate supply and demand model, we assume that the business will choose the new prices, thereby setting the actual inflation rate, based on 3 factors:\n1. \u003cmark style=\"background: #ADCCFFA6;\"\u003eThe *expected* inflation rate.\u003c/mark\u003e \n   \n\t**Rational expectations hypothesis** ‚Äî asserts that people always factor in *all* relevant information, producing the best theoretical possible forecast on what the future inflation rate will be. The actual and expected value differ by a completely unpredictable margin, $\\omega$:  $\\pi_\\text{actual}=\\pi_\\text{expected}+\\omega$\n\t\n\t**Adaptive expectations hypothesis** ‚Äî asserts that people will use historical data only in their prediction of the future inflation rate, ie. that $\\pi_\\text{actual}=\\pi_{\\text{prev}}$, which makes the AS curve a simple horizontal line:\n\t\t![[Knowledge/Economics/macroeconomics/assets/adaptive-expectations-hypothesis-aggregate-supply-curve.png|380]]\n\t\n\t*Inflation shocks* are when there are changes to the inflation rate. Events that might cause inflation shocks include changes in commodity prices and foreign exchange rates. Factoring in inflation shocks, we'd have $\\pi_\\text{actual} = \\pi_\\text{prev}+\\epsilon$, where $\\epsilon$ is the size of the inflation shock. Note that inflation shocks, although temporary in nature, cause permanent effects to the inflation rate since the adaptive expectations hypothesis asserts that the next period's inflation rate retains the previous period's inflation rate.\n2. \u003cmark style=\"background: #ADCCFFA6;\"\u003eShifts in the aggregate demand curve which impact the business' production costs.\u003c/mark\u003e \n3. \u003cmark style=\"background: #ADCCFFA6;\"\u003eSize of the output gap.\u003c/mark\u003e \n\t\n\tWhen there exists a short-run expansionary output gap like below for example, businesses will initially ramp up production levels to meet increased demand, but over time they'll experience increased production costs and inflate their prices. When all businesses behave this way, then in aggregate, it'll cause inflation to increase and close the output gap.\n\t\n\t![[Knowledge/Economics/macroeconomics/assets/aggregate-supply-expansionary-output-gap.png|500]]\n\n### Applications\n\nIf households were to collectively become more optimistic about wage growth and were to start consuming more, then this could cause an increase in $C_0$, causing an AD shock that shifts the curve up, causing the real GDP to increase but with inflation staying constant in the short-run:\n\n![[Knowledge/Economics/macroeconomics/assets/ad-shock-example-1.png|500]]\n\nProgressing towards the long-run, the AS curve will shift up to close the expansionary output gap.\n\n![[Knowledge/Economics/macroeconomics/assets/ad-shock-example-2.png|500]]\n\nInflation will keep increasing until $Y_\\text{equilibrium}=Y^*$.\n\n![[Knowledge/Economics/macroeconomics/assets/ad-shock-example-3.png|500]]\n\nWhen an inflation shock happens and shifts the AS curve upwards, it'll be the case that in the long run, the inflation rate will drop to the same level prior to the shock.\n\n![[Knowledge/Economics/macroeconomics/assets/inflation-shock-example-1.png|500]]\n\nNotice how the economy 'self-corrects' in the long run. Does this mean that [[Knowledge/Economics/macroeconomics/Fiscal Policy|fiscal]] and [[Knowledge/Economics/macroeconomics/Monetary Policy|monetary]] policy are unnecesssary? No, because they can accelerate the self-correction and minimise the negative effects of AD shocks and inflation shocks.\n\nNote that in the above example, the government and central bank could choose to 'accommodate' the inflation shock by implement tax cuts (or some other policy) to shift up the AD curve and meet the higher inflation value. Doing this will mean that the contractionary gap is closed quicker, but the higher inflation will tend to persist instead of being temporary. If they don't want higher inflation to persist (in order to ensure they meet an inflation target), then they can simply do nothing and let the self-correction proceed.\n\n![[Knowledge/Economics/macroeconomics/assets/accommodating-inflation-shock.png|500]]\n\n\n\n\n\n\n\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Asset-Bubble":{"title":"Asset Bubble","content":"\nIn finance and economic contexts, a 'bubble' is when the price for a class of assets, such as real estate, grows substantially over a short period of time, but largely as a result of ['irrational exuberance'](https://www.thebalance.com/irrational-exuberance-quotes-dangers-and-examples-3305937) and herd mentality. Since the demand is 'artificial' and not largely based on any 'real' value of the asset, the bubble is often 'bursts' or 'crashes', resulting in sometimes catastrophic reductions in the demand of that asset.\n\nLower [[Knowledge/Economics/macroeconomics/Interest|interest rates]] often contribute to the expansion of asset bubbles since people are encouraged to borrow more and invest in assets.\n\nSome notable examples of bubbles:\n- The burst housing bubble in 2007ish which sparked the *Global Financial Crisis*.\n- The Dot-com bubble in the late 1990s was a stock market bubble associated with the massive growth in the use of the internet.\n- The cryptocurrency bubble.\n- The 2022 tech bubble which wrecked the stock prices of many tech companies and resulted in mass layoffs.\n- The [Australian property bubble](https://en.wikipedia.org/wiki/Australian_property_bubble), maybe.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Bonds":{"title":"Bonds","content":"\nA *bond* is an [I.O.U](https://www.investopedia.com/terms/i/iou.asp), a formal acknowledgement about a loan and its regular payments between the lender and borrower. Bonds are a type of [[Knowledge/Investing/Securities|security]] known as *debt securities* and are sometimes called 'fixed-income securities'. They're considered a low risk investment.\n\nGovernments and businesses will sell bonds, or borrow money in other words, to fund their expenses. For instance, the government might sell bonds to the private sector to fund public infrastructure development, schools, military equipment, etc. A business might sell bonds to hire people and buy capital goods such as computers.\n\nThere are also *investment bonds* which let you invest in managed share funds. They let you avoid capital gains tax after 10 years when you sell.\n\n### Bond Value\nIn general, the gross return on investment for an asset is generally expressed as: $\\frac{P_{t} + I}{P_{t-1}}$, where $P_{t}$ is the current price, $P_{t-1}$ is the previous price, and $I$ is the income (dividend) in the form of regular payments for holding the asset.\n\nA bond has the following properties which dictate its value:\n- *Principal* ‚Äî the amount of money given.\n- *Term* ‚Äî time by which the principal must be repaid, ie. the deadline.\n- *Coupon payment* ‚Äî regular payment to the lender.\n- *Coupon rate* ‚Äî the interest rate on the bond.\n\nBonds can be traded on the *bond market*.\n\nRemember, $100 now is worth more than $100 in the future in almost all situations. The simple reason for this is because we can earn interest on the $100 by putting it in a savings account, for example. The value of a bond needs to take this into account by discounting the future value of payments:\n$$\\colorbox{#FFFFBF}{$V_t=\\frac{\\text{coupon payment}_{1}}{1+i}+\\frac{\\text{coupon payment}_{2}}{(1+i)^2}+\\ldots \\text{further rounds of payments.}+\\frac{P+\\text{coupon payment}_{n}}{(1+i)^n}$}$$\nBond price and the market interest rate are inversely related. Rises in the market interest rate decrease the value of a bond.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Business-Cycle":{"title":"Business Cycle","content":"\nBusiness cycles are the observed fluctations in production.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Cash-Rate":{"title":"Cash Rate","content":"\nThe cash rate, which is set by the [[Knowledge/Economics/macroeconomics/Central Bank|RBA]] as part of its [[Knowledge/Economics/macroeconomics/Monetary Policy|monetary policy]], is a short-term interest rate charged on the 'overnight' loans between banks.\n- To 'tighten' monetary policy means to raise the cash rate to discourage lending and therefore lower production.\n- To 'loosen' monetary policy means to lower the cash rate to incentivise lending and therefore boost production.\n\n## How does the interest rate affect you and the economy?\nWhen the central bank *raises interest rates*, it'll eventually propagate through the economy, causing private banks to increase the interest rates they offer for savings accounts and the rates they charge on loans, notably *variable-rate mortgages*. When this happens, consumers like you are incentivised to **save more money** and spend less on consumption, which means that businesses will experience less demand for their goods, thus be less inclined to raise prices, hence **reducing the inflation rate**.\n\n\u003e Notably, house prices will tend to drop because mortgage repayments are higher, so people are collectively less willing to take on a bigger mortgage to buy a house.\n\nFor businesses, a higher interest rate will discourage them from taking out loans and make capital investments. They'll hire fewer people, lay off more people or cut wages, resulting in a rise in [[Knowledge/Economics/macroeconomics/Labour Market|unemployment]] and reduction in disposable income.\n\nThere are potentially disastrous consequences to the economy when the central bank changes the interest rate, so they must be very careful about how big the hikes are and for long they're imposed on the economy.\n- When interest rates are increased too much, the economy might enter a [[Knowledge/Economics/macroeconomics/GDP#Recession|recession]].\n- When interest rates are decreased too much or not increased by enough, inflation may 'spiral' towards [[Knowledge/Economics/macroeconomics/Inflation#Hyperinflation|hyperinflation]].\n\nInterest rate changes can take a long time (eg. 2 years) to propagate through the economy and actually affect it. The central bank needs to produce an accurate forecast about where the economy might be headed to inform their decision about how much to change the interest by.\n\n---\n\n## Payment Settlement\nSuppose Commbank owes Westpac an outstanding $10 million AUD. The payment needs to proceed through accounts held at the RBA, called **Exchange Settlement Accounts (ESA)** which must never have a negative balance. Commbank transfers $10 million from their ESA to Westpac‚Äôs ESA. \n\nIf Commbank ever has insufficient funds in their reserve, then it must borrow those funds from another bank which expects full repayment in $\u003c24$ hours (which is where the term ‚Äòovernight‚Äô comes from). When borrowing from other banks' ESAs, the loans are charged an interest rate known as the *cash rate*.\n\nThere are 3 interest rates that the RBA defines:\n- $i^T$ ‚Äî the RBA‚Äôs target cash rate.\n- $i^T-0.25$ ‚Äî the interest rate RBA pays to banks for their ESAs. The $0.25$ is a typical value, but it can be tweaked.\n- $i^T+0.25$ ‚Äî the interest rate for banks to borrow from other banks‚Äô ESAs.\n\nThis creates a 50 basis point ‚Äòchannel‚Äô which defines the range the actual cash rate value can be in. *Note*: a 'basis point' is just $\\frac{1}{100}$ of $1\\%$. \n\n![[Knowledge/Economics/macroeconomics/assets/cash-rate-channel-system.png|500]]\n\n## Open Market Operations\n*Open market operations* is the trading of goverment bonds between the central bank and the private sector. The RBA mainly buys bonds from banks to increase their ESA and therefore the [[Knowledge/Economics/macroeconomics/Money#Money Supply|money supply]], and sells bonds to banks to decrease their ESA and bring down money supply.\n\n## Supply \u0026 Demand for ES Funds\nBelow is the demand curve for banks' ES funds in the overnight cash market.\n\n![[Knowledge/Economics/macroeconomics/assets/ES-funds-demand-curve.png|500]]\n\nBelow is the supply curve for ES funds in the overnight cash market.\n\n![[Knowledge/Economics/macroeconomics/assets/ES-funds-supply-curve.png|500]]\n\nSupply is affected exogenously by the value of the open market operations the RBA undertakes with banks, and the transfers government make to households (by transferring funds into the bank‚Äôs ESA, therefore increasing ES funds).\n\nBy undertaking open market operations, the RBA can push the supply curve to intersect with the demand curve as shown above. This is how the RBA sets the *actual* cash rate to be the *target* cash rate that they‚Äôve announced.\n\n## Expectations Hypothesis\nThe *expectations hypothesis* predicts how short-term interest rates like the cash rate affects the long-term interest rates after sufficient time. Basically, it predicts how the interest rate set by the central bank will propagate throughout the rest of the economy, influencing the interest rates charged by private banks on loans and savings.\n\nThe long-term interest rate, $i^N_0$, is simply the average of the current interest rate (at term 0) and all *expected* future interest rates. This is summarised in the following equation:\n$$\n\t\\colorbox{#FFFFBF}{$i^N_0 = \\frac{1}{N}(i^1_0+i^2_1+\\ldots+i^N_{N-1})$}\n$$\nwhere $i^\\alpha_\\beta$ is the interest rate associated with a loan spanning $\\alpha$ total terms starting from at time $\\beta$.\n\nGenerally, the cash rate can be expected to have a very large effect on the mortgage rate, savings bank account interest rates, exchange rate (currency tends to appreciate when cash rate rises), and so on.\n\n## Policy Rules\nA *policy rule*, also called a *monetary policy reaction function* (PRF), is a simple approximation of how the cash rate affects macroeconomic variables and therefore is a model that describes how central banks choose their policy interest rates. \n\n#### Taylor Rule\nThe *Taylor rule* is a well-known policy rule, which asserts:\n$$\\colorbox{#FFFFBF}{$i_\\text{nominal cash rate}=1+1.5\\pi+0.5\\tilde{Y}$},$$\nwhere $\\tilde{Y}$ is the output gap. Alternatively, using the *real* cash rate, this would be $r_\\text{real cash rate} = 1 + 0.5\\pi + 0.5\\tilde{Y}$.\n\n#### Simple Policy Rule\nThe simple monetary policy reaction function is:\n$$\n\tr = r_{0}+ \\gamma \\pi.\n$$\nHere, $\\gamma$ is a value chosen by the central bank to represent their *sensitivity to inflation*. A higher $\\gamma$ results in a larger increase in the cash rate by the RBA. The constant, $r_0$ is the real cash rate when inflation is $0\\%$.\n\n![[Knowledge/Economics/macroeconomics/assets/simple-policy-rule-graph.png|500]]\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Central-Bank":{"title":"Central Bank","content":"\nThe central bank is a financial institution that is trusted with controlling the *supply of money*, implementing [[Knowledge/Economics/macroeconomics/Monetary Policy|monetary policies]], and regulating the behaviour of [[Knowledge/Economics/macroeconomics/Private Banks|private banks]] and other financial instutions through [reserve requirements](https://www.investopedia.com/terms/r/requiredreserves.asp). Their main goal is to ensure economic stability by ensuring macroeconomic variables such as inflation, unemployment rate, etc. all stay in reasonable values.\n\nThe vast majority of countries have their own central bank, which is said to be politically independent, so not owned by the government, and also not motivated by profits like a regular private bank would be. Monetary policy and [[Knowledge/Economics/macroeconomics/Fiscal Policy|fiscal policy]] are independent, however they're both powerful economic tools for affecting macroeconomic variables. One criticism of fiscal policy is that it can be politically motivated, while monetary policies tend to be more impartial because the central bank operates mostly independently of politics. Ideally, monetary policies and fiscal policies should support each other in their goals and should be coordinated.\n\nThe central bank can be considered as a 'bank for banks'. Private banks can borrow money from central banks and deposit money to the central bank and earn interest from doing so. Central banks are sometimes seen as the 'lender of last resort' because they can bail out financial institutions that are struggling with debt and prevent private banks from [[Knowledge/Economics/macroeconomics/Private Banks|becoming insolvent]], for example.\n\nIn Australia, the central bank is the [Reserve Bank of Australia](https://www.rba.gov.au/), in the US, it's the [Federal Reserve](https://www.federalreserve.gov/).\n\n![[Knowledge/Economics/macroeconomics/assets/RBA-building.png|450]]\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Economic-Growth":{"title":"Economic Growth","content":"\n*Economic growth* is the general improvement in *living standards*, which is representable through an indicator like *real [[Knowledge/Economics/macroeconomics/GDP|GDP]] per capita*.\n\nSupposing $y=\\frac{Y_\\text{real}}{\\text{Population}}$, the economic growth rate from $t-1$ to $t$ is\n$$\n    g = \\frac{y_{t}- y_{t-1}}{y_{t-1}}.\n$$\nMaking $y_t$ the subject, and then extrapolating across time periods $[0, t]$, we have:\n$$\n\\begin{align}\n    y_{t} \u0026= (1 + g) \\cdot y_{t-1},\\\\\n    \u0026= (1+g)^{2} \\cdot y_{t-2} \\\\\n    \u0026= (1+g)^{t} \\cdot y_0. \\\\\n\\end{align}\n$$\nA small difference in $g$ across a long span of time will result in enormous differences because of the compounding effect.\n\n## Purchase Power Parity\nThe **Purchase Power Parity** exchange rate uses a standard basket of goods and services to assess economic productivity and living standards across different countries.\n\n## Aggregate Production Function\nAn aggregate production function is a function of variables such as aggregate physical capital stock, aggregate labour quantity used, general level of factor productivity, etc. \n\nThe [Cobb-Douglas Production Function](https://en.wikipedia.org/wiki/Cobb%E2%80%93Douglas_production_function) is an example of an aggregate production function that produces real GDP as a function of labour, physical capital and technology and has the the form:\n$$\n     Y_\\text{real} = AK^{\\alpha}L^{1-\\alpha},\n$$\nwhere $A$ is 'factor productivity', $K$ is physical capital, $L$ is labour input, and $0 \u003c \\alpha \u003c 1$.\n\nA notable property of this function is that if you were to double capital $K$ and labour $L$ (representing the quantity and quality of human capital), the production output doubles. This property is called *constant returns to scale*.\n\n- *Marginal product of labour*: $MPL = \\frac{\\delta Y}{\\delta L} = (1-\\alpha)\\frac{Y}{L}$\n- *Marginal product of capital*: $MPK = \\frac{\\delta Y}{\\delta L} = \\alpha\\frac{Y}{K}$\n\n**Capital Per Worker**\nThe average worker productivity is given by $\\frac{Y}{L}=A(\\frac{K}{L})^\\alpha$. Since $0 \u003c \\alpha \u003c 1$, increases in $\\frac{K}{L}$ result in *diminishing increases* in worker productivity. Letting $y=\\frac{Y}{L}$ and $k=\\frac{K}{L}$ (the *capital per worker*), we have $y=Ak^\\alpha$.  \n\n**Growth of Productivity**\nThe change in aggregate production is given by\n$$\n    \\Delta Y = \\Delta A + \\alpha \\Delta K + (1 - \\alpha) \\Delta L,\n$$\nwhich can be rearranged to get the growth in productivity, $\\Delta A$,\n$$\n    \\Delta A = \\Delta Y - \\alpha \\Delta K - (1 - \\alpha) \\Delta L.\n$$\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Exchange-Rate":{"title":"Exchange Rate","content":"\nThe exchange rate is the pricing of one country's currency relative to other currencies.\n\n*Bilateral nominal exchange rate* is rate at which two countries can exchange their currencies. In Australia, we express the exchange rate towards every other foreign currency like $e=\\frac{\\text{Foreign Currency}}{AUD}$. A higher $e$ means that $\\$1 \\text{ AUD}$ buys more of that foreign currency.\n\n*Bilateral real exchange rate* measures the price of *domestic* goods \u0026 services relative to the price of the same *foreign* goods \u0026 services. It's useful to use a price index like the CPI to compare the prices of goods and services broadly in different economies.\nThe real exchange rate, $\\frac{e\\times P_\\text{home}}{P_\\text{foreign}}$, gives some measure of *international competitiveness*. If a country's goods \u0026 services become less expensive, that is $P_\\text{home}$ becomes lower, then it'll tend to have higher net exports.\n\n## Models of Nominal Exchange Rate\n### Law of One Price\nThe *Law of One Price* asserts that a tradable good should be priced the same irrespective of where it's coming from (after the application of taxes and transportation costs). If this is not the case (which it indeed isn't in practice), people can exploit the price difference and make a profit.\n\n### Purchasing Power Parity\nThe *purchasing power parity* is an idea that extends the *Law of One Price* to a general basket of goods and services instead of just one good or service. It asserts that the exchange rate between two currencies will change to reflect the price levels within the two countries, ie. that \n\n$$\n\\begin{align}\n\te\u0026=\\frac{P_\\text{foreign}}{P_\\text{home}}, \\\\\n\t\\Delta e \u0026= \\pi_\\text{foreign} -\\pi_\\text{home}.\n\\end{align}\n$$ \nA rise in prices, or higher inflation, in the home country will reduce $e$, making it so that the home currency purchases less of the foreign currency. \n\n## Foreign Exchange Market\nThe supply and demand model is useful for seeing how the exchange rate is set between two currencies. In the AUD/USD exchange market, a greater preference for US goods by Australians would push the supply curve to the right, and likeiwse, a greater preference for Australian goods by US residents would push the demand for AUD to the right.\n\n![[Knowledge/Economics/macroeconomics/assets/aud-supply-and-demand.png|500]]\n\n### Fixed Exchange Rates\nIt's possible to sustain an overvalued fixed exchange rate for the home country's currrency if the central bank purchases the excess supply of the home country's currency\n\n![[Knowledge/Economics/macroeconomics/assets/aud-nzd-exchange-market.png|400]]\n\nIf market participants doubt the long-term sustainability of an fixed exchange rate, they might sell their holdings of the currency on the inflated value in aggregate, launching what's called a *[speculative attack](https://en.wikipedia.org/wiki/Speculative_attack)*.\n\n### Effect of Monetary Policy\nWhen [[Knowledge/Economics/macroeconomics/Monetary Policy|monetary policy]] tightens in a country, increasing the [[Knowledge/Economics/macroeconomics/Cash Rate|interest rates]] will tend to reduce the country's demand for foreign goods \u0026 services and increase foreign demand for domestic goods \u0026 services, causing the home country's currency to appreciate. A loosening of monetary policy tends to depreciate the country's currency.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Fiscal-Policy":{"title":"Fiscal Policy","content":"\n**Fiscal policies** are the policies around the usage of government income and expenditure in an effort to positively affect macroeconomic variables like [[Knowledge/Economics/macroeconomics/Inflation|inflation]], [[Knowledge/Economics/macroeconomics/Labour Market|unemployment rate]], etc.\n\nFiscal policies include things like:\n- Tax cuts which are reductions to how much tax you'd pay on your personal income.\n- Transfer payments, which are direct payments the government makes to individuals without anything in return. This is usually done to fairly distribute wealth, or to subsidise something (eg. the [JobKeeper policy](https://treasury.gov.au/coronavirus/jobkeeper) was introduced in the COVID-19 pandemic).\n- Subsidising home renovations (eg. [solar panel rebate](https://www.energysaver.nsw.gov.au/save-solar)).\n\nGovernment expenditure occupies about 20% of a country's [[Knowledge/Economics/macroeconomics/GDP|GDP]].\n![[Knowledge/Economics/macroeconomics/assets/gdp-pie.png|500]]\n\n## 3-Sector Economy\nConsidering a three-sector economy in the [[Knowledge/Economics/macroeconomics/Income-Expenditure Model|income-expenditure model]], we'd have $Y = C+I^P+G$.\n\nSuppose we have the **tax function**: $T=T_0 + tY$, with $t$ being the *marginal propensity to tax*, or *marginal tax rate*. At equilibrium GDP, we would have: \n$$\n\tY=PAE=\\frac{1}{1-c(1-t)}\\underbrace{(C_0-cT_0+I_0+G_0)}_{\\text{Exogenous expenditure}}.\n$$\nExpressed in changes, this would be:\n$$\n\t\\Delta Y=PAE=\\frac{1}{1-c(1-t)}(\\Delta C_0- c \\Delta T_0+\\Delta I_0+\\Delta G_{0}).\\tag{1}\n$$\nThis lets you assess how changing one exogenous variable would change the equilibrium GDP. Notice that with the multiplier $\\frac{1}{1-c(1-t)}$, an increase in government spending $G_0$ would cause a rise of $\\frac{1}{1-c(1-t)}$ which is always larger than $\\$1$ to the real GDP.\n\n**Opening the Economy**\nWhen we open this 3-sector economy to international trade, we'd have $PAE=C+I^P+G+X-M$. Using the following substitutions, we can derive the equilibrium GDP and its multiplier:\n$$\n\\begin{align}\n\tC\u0026=C_{0+c(Y-T)}\\\\\n\tI^P\u0026=I_0\\\\\n\tG\u0026=G_0\\\\\t\n\tX\u0026=X_0\\\\\n\tM\u0026=mY\\\\\n\tY\u0026=\\frac{1}{1-\\big(c(1-t)-m\\big)}(C_0-cT_0+G_0+I_0+X_0)\\\\\n\\end{align}\n$$\n\n### Balanced Budget Multiplier\nA surprising result from equation $(1)$ is that you can increase government expenditure $G_0$ and taxes $T_0$ by the *same amount* but still end up with a positive change in the GDP. The *balanced budget multiplier* can be determined as:\n$$\n\t\\frac{\\Delta Y_\\text{equilibrium}}{\\Delta G_0} = \\frac{1-c}{1-c(1-t)}.\n$$\nThis means that fiscal policies can help with closing *contractionary output gap*. For instance, you could achieve the following shift in the $PAE$ curve.\n\n![[Knowledge/Economics/macroeconomics/assets/fiscal-policy-eliminates-output-gap.png|400]]\n\nThis shift is achieved by cutting taxes $T_0$ and/or increasing $G_0$. Likewise, when faced with undesirably high inflation, governments can implement a contractionary fiscal policy that closes *expansionary output gaps*. Importantly, fiscal policies have a large effect on [[Knowledge/Economics/macroeconomics/Public Debt|government debt]]. Expansionary fiscal policies reduce government budget and contractionary fiscal policies increase government budget.\n\n### Automatic Fiscal Stabiliser\nAn **automatic fiscal stabiliser** is a tax or government transfer payments system that helps dampen _business cycle_ fluctuations. Eg. marginal tax rate systems and welfare payments are examples of automatic stabilisers.\n\nConsider the case where all exogenous variables except $I_0$ are constant in a closed 3-sector economy, so: $\\Delta Y=\\frac{1}{1-c(1-t)}(\\Delta I_0)$. Here, the amplitude of each [[Knowledge/Economics/macroeconomics/Business Cycle|business cycle]] can be controlled by tweaking the marginal tax rate $t$ and therefore the multiplier.\n\n![[Knowledge/Economics/macroeconomics/assets/automatic-fiscal-stabiliser.png|400]]\n\n**Discretionary fiscal policies** are ones undertaken explicitly by the government to counter fluctuations in the business cycle.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/GDP":{"title":"GDP","content":"\n**GDP** (*gross domestic product*) is the **monetary** value of all the *domestically-produced **final** goods and services* in a country during a given period. The Australian GDP value is usually announced by the [ABS](https://www.abs.gov.au/) every quarter (3 months). GDP is regarded as a *standard* measure of the *level of production* of a country and its purpose is to serve as an indicator for the size an economy. An increase in a country's GDP indicates that it is undergoing economic growth (an increase in the amount of goods and services produced by the country).\n\n**GDP per capita** is the GDP divided by the country‚Äôs population. It's used as an indicator for labour productivity and living standards ([[Knowledge/Economics/macroeconomics/GDP#GDP and Economic Welfare|with many caveats]]).\n\n*Some figures from 2020, rounded loosely:*\n\n| Country     | GDP                 | GDP Per Capita |\n| ----------- | ------------------- | -------------- |\n| Australia   | $1.33 trillion USD  | $52000 USD     | \n| U.S         | $20.94 trillion USD | $64000 USD     |\n| China       | $14.72 trillion USD | $10000 USD     |\n| New Zealand | $0.21 trillion USD  | $42000 USD     |\n\n*Sample of Australia's quarterly GDP, sourced from the ABS.* Australia's annual GDP in 2015 is simply the sum of all 4 quarterly GDPs, which in this case, is roughly $\\$1.6$ trillion AUD.\n\n| Quarter        | GDP            |\n| -------------- | -------------- |\n| March 2015     | $404.1 billion |\n| June 2015      | $405.4 billion |\n| September 2015 | $408.9 billion |\n| December 2015  | $410.4 billion |\n\n### GDP and Economic Welfare\nAlthough correlated, GDP is *not* a measure of societal wellbeing. *GDP per capita* is a better indicator but still does not capture the full picture of wellbeing. Notably, GDP omits [[Knowledge/Economics/microeconomics/Externalities|negative externalities]] associated with production, such as pollution, and does not take into account whether a country's wealth is 'fairly' distributed.\n\n### What Contributes to GDP?\nGDP only counts the transaction of ***final*** goods and services, which are goods and services that have reached the final owner and will not be resold. This means that the transaction of all intermediate **goods** do not contribute to a country‚Äôs GDP, otherwise it would be double counted.\n\n\u003e Ô∏èGDP *does not count the value of the inputs*, only the price paid by a **final consumer**.\n\n#### Examples\n- If you grow your own vegetables, that doesn‚Äôt count to GDP. If you buy vegetables from a supermarket however, then that *will* contribute to the GDP.\n    - **Note**: supermarkets purchasing fruits/vegetables for their inventory would be counted to GDP *even* if they‚Äôre not sold to customers. The *final consumer* here is the supermarket since they‚Äôre the last owner of the good.\n- If a constructor purchases materials to buy a house which eventually is sold to a family, the GDP only counts the transaction between the constructor and the family. Ie. we do not count the value of the *inputs to production* such as the bricks, cement, glass, etc.\n- ‚ÄòHousehold production‚Äô such as cooking and child care are *mostly* excluded from the GDP, purely because it‚Äôs too hard to valuate those goods \u0026 services.\n- A change in ownership of an asset like buying/selling shares doesn‚Äôt count to GDP.\n    - Buying an *existing* property doesn‚Äôt count either, but buying a *newly* constructed property is counted. Again, what matters is that GDP is only counted once per asset and never again along the chain of ownership.\n- Watching YouTube contributes to the GDP since you‚Äôre driving a transaction between YouTube and the advertisers paying to put their ads on YouTube.\n- **The location of the production of the good/service matters**. Eg. if you‚Äôre on holiday in New Zealand and you teach a computer science lesson for $1000 NZD, then that counts to New Zealand's GDP, not your country‚Äôs GDP, since the service was produced in New Zealand.\n\n#### Estimating Value\nWhen some good/service does not have a *concrete* price or market value, we can estimate it by calculating the sum of the *value of the inputs* used to *produce* that good or service. This is often done for services provided by the government. \n\nFor instance, if a firefighter is alerted of an incident and has to drive somewhere to put out a fire, that service might have no payment associated with it, but it‚Äôll still contribute to the GDP. The value it contributes is simple a sum of the value of the inputs necessary to provide that service (cost of labour, fuel, extinguisher materials, etc.).\n\n#### Imports/Exports\nBuying imported goods **does not** contribute to our country‚Äôs GDP, however it **does contribute** to the exporting country‚Äôs GDP.\n\nIf you‚Äôre a foreigner working in Australia, your work contributes to the Australian GDP but not to that of your home country.\n\n\u003e *Exports contribute* to our GDP. Imports do not.\n\n## Calculating GDP\nThe GDP value is obtainable through 3 main ways: the [[Knowledge/Economics/macroeconomics/GDP#Production Approach|production approach]], [[Knowledge/Economics/macroeconomics/GDP#Expenditure Approach|expenditure approach]] and [[Knowledge/Economics/macroeconomics/GDP#Income Approach|income approach]]. These are all meant to arrive at the same value in theory, but in practice, each will have their own measurement errors and report slightly different values of GDP. The ABS takes the average of the 3 values and reports that as the official GDP value in their announcements.\n\n*Note*: we use $Y$ as the symbol for GDP.\n\n### Production Approach\nIn the production approach, we measure GDP as the difference between the value of outputs and the value of inputs in producing those outputs.\n\nGDP is calculated as: $Y \\equiv \\text{gross value of output } - \\text{ intermediate costs}$ .\n\nIn other words, it‚Äôs the total *value-added* of all transactions in a country.\n\n### Expenditure Approach\nIn the expenditure approach, we measure GDP as the total money spent on *domestically produced final* goods and services by everyone (individuals/businesses in Australia and other countries who consume what Australia supplies).\n\nWe can calculate GDP based on total expenditures from different sources: \n$$\\colorbox{#ffffbf}{$Y\\equiv C+I+G+(X-M)$}.$$\n- $C$ ‚Äî **household** **consumption spending**. Ie. how much households spend.\n\t- The goods consumed can be categorised into *durable* (longer-lived items whose ownership can be transferred) and *non-durable* (single-use items, like food).\n- $I$ ‚Äî **gross private investment**. Ie. how much businesses spend.\n\t- This can be further categorised as: dwelling construction costs, non-dwelling construction costs, machinery/equipment costs, etc.\n- $G$ ‚Äî **government spending**.\n- $X$ ‚Äî **exports**. Ie. how much the rest of the world purchases from us (Australia).\n- $M$ ‚Äî **imports**. Ie. how much we (Australia) spend on imports from the rest of the world.\n\t- $NX = X - M$ ‚Äî **net exports**.\n\n### Income Approach\nIn the income approach, we calculate GDP as the total income generated by the production of all goods and services.\n\nGDP is calculated as: \n$$Y\\equiv \\text{labour income + capital income + }\\underbrace{\\text{(indirect taxes - subsidies)}}_{\\text{Net indirect taxes}}.$$\nExpressed differently and assuming $0$ net indirect taxes,\n$$Y \\equiv (W \\times L) + (R \\times K),$$\nwhere $W \\times L$ is the wage per ‚Äòunit‚Äô of labour times the total labour and $R\\times K$ is the rate of return times the total capital.\n\n## Real vs. Nominal GDP\n\n***Nominal GDP*** counts everything at *current prices*. It therefore does not account for [[Knowledge/Economics/macroeconomics/Inflation|inflation]]. This means that the value of nominal GDP can change year-to-year even when the rate of production has stayed the same, because some goods/services have become more or less valuable over time.\n\n***Real GDP*** counts the changes in production by holding prices constant at a chosen *base year*‚Äôs prices. Which base year you choose affects the real GDP calculated in other years. It's basically *nominal GDP*, but adjusted for inflation.\n\n## Recession\nA *recession* is a period, typically several months, where production levels have declined from previous levels and unemployment rates are high. There is no universal formal definition of a recession, but it's typically identified as two consecutive quarters where GDP growth has been negative, which means that the total final goods and services produced in the country has reduced for 6 months straight.\n\nA *depression* is like a recession, but it lasts for many years, is more destructive, and is much rarer.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Income-Expenditure-Model":{"title":"Income-Expenditure Model","content":"\nThe income-expenditure model of GDP, also called the *Keynesian* model since it was pioneered by [Keynes](https://en.wikipedia.org/wiki/John_Maynard_Keynes), is a model that asserts that the real GDP at equilibrium is entirely determined by the *desired level* of aggregate expenditure on domestically-produced final goods \u0026 services by all people, households, firms, foreigners and the government. This is called the **planned aggregate expenditure**, $PAE$.\n\nBasically, the income-expenditure model expects a country's GDP to be equal to the planned aggregate expenditure, ie. the equilibrium condition is:\n$$\n\tY_\\text{equilibrium}=PAE=C+I^P + G+ NX.\n$$\nSee the [[Knowledge/Economics/macroeconomics/GDP#Expenditure Approach|expenditure approach of calculating GDP]].\n- $I^P$ is the *planned* investment as opposed to *actual* investment $I$. They differ in value because of unplanned changes to firms‚Äô inventories, given by: $I=I^P+\\Delta\\text{Inv}_\\text{unplanned}$.\n- *Unplanned inventory* ‚Äî the difference between the *actual* expenditure and the *planned* expenditure.\n\n### Assumptions\nA key assumption of the income-expenditure model is that **prices of goods \u0026 services are *‚Äòfixed‚Äô* (or *‚Äòsticky‚Äô*)**. It assumes that firms will *not* change the prices of their goods \u0026 services in response to a change in demand for them in the *short-run*. Instead, they'll respond by adjusting their level of production. \n\n*Note*: this is a fair assumption since firms cannot know whether it‚Äôs reasonable to change costs so quickly, due to **[[Knowledge/Economics/macroeconomics/Inflation#'Costs' of Inflation|menu costs]]**. Why? Suppose you‚Äôre a cafe owner. When there's a sudden influx of demand, you would probably crank up the level of production rather than increasing the cost of coffee. Eventually in the long-run, if you see that this demand persists then you‚Äôd increase prices.\n\n### Disequilibrium\nThe business sector can produce at a level greater than or less than the $PAE$, in which case the economy would be in *disequilibrium*. \n\nIf $Y \u003e PAE$, businesses have produced more goods \u0026 services than all sectors were willing to purchase. This leads to an unplanned increase in their inventories, and will prompt businesses to reduce their production levels accordingly, causing GDP to fall until the equilibrium condition $Y = PAE$ is satisfied.\n\nLikewise, if $Y \u003c PAE$, then businesses have produced less than what all sectors were willing to purchase, unexpectedly depleting their inventories. They'll ramp up production, until $Y = PAE$.\n\nGraphically, it looks like this:\n\n![[Knowledge/Economics/macroeconomics/assets/income-expenditure-equilibrium.png|700]]\n\n### Consumption Function\nIn the income-expenditure model, we model household consumption, $C$, using the **[Keynesian consumption function](https://www.investopedia.com/terms/c/consumptionfunction.asp)**: \n$$\n\tC=C_0+c\\underbrace{(Y-T)}_{\\text{Disp. income}}.\n$$\n- $C_0$ is an exogenous variable representing how much households will spend on consumption when their disposable income is $0$. An assumption here is that $C_0 \u003e 0$.\n- $c$ is the **marginal propensity to consume**, $MPC$. A key assumption is that $0\u003cc\u003c1$. In the above consumption function, if your income were to rise by $\\$1$, your marginal propensity to consume is how much of that $\\$1$ you will spend on consumption instead of save.\n\t- *Note*: we also call $1-c$ the *marginal propensity to consume*.\n- **Average propensity to consume**, $APC$, is the percentage of income that is spent rather than saved. It can be obtained as $APC=\\frac{C}{Y-T} = \\frac{C_0}{Y-T}+c$.\n\n*Household consumption is a stable and major contributor to GDP, sitting at around $\\approx 60\\%$ in Australia.*\n![[Knowledge/Economics/macroeconomics/assets/household-consumption-gdp-share.png|500]]\n\n### 2-Sector Economy\nConsider an economy that only consists of households and businesses. In this case, we'd have $Y=C+I^P$. At equilibrium, we can see that:\n$$\n\\begin{align}\n\tY_\\text{Equilibrium}\u0026=PAE=C+I_0 \\notag\\\\\n\t\u0026= C_0 + cY + I_0 \\notag\\\\\t\n\t\u0026=\\frac{1}{1-c}(C_0+I_0),\\tag{1}\\\\\n\\end{align}\n$$\nwhere $\\frac{1}{1-c}$ is called the *multiplier*.\n\n**Savings and Investment**\nAt equilibrium, the savings is equal to the planned investment:\n$$\n\\begin{align}\n\tY \u0026= PAE \\notag\\\\\n\t\u0026 = C+I^P\\notag\\\\\n\tY - C \u0026= I^P\\notag\\\\\n\tS \u0026= I^P. \\notag\\\\\n\\end{align}\n$$\nFrom the consumption function, we can express a saving function,\n$$\n\\begin{align}\n\tS \u0026= Y - C \\\\ \n\t\u0026= Y - (C_0 + cY)\\\\\n\t\u0026= -C_0 + (1-c)Y,\n\\end{align}\n$$\n\n![[Knowledge/Economics/macroeconomics/assets/income-expediture-2-sector-savings-and-investment.png|500]]\n\n**Opening the 2-Sector Economy**\nNow let's the consider the economy that includes imports/exports. We have $PAE = C + I^P + X - M$. Assuming that the imports scales linearly with GDP: $M=mY$, where $0\u003cm\u003cc$ is the *marginal propensity to import*, we can derive:\n$$\n\\begin{align}\n\tY_\\text{Equilibrium} \u0026= PAE = C+ I^P +X -M \\\\\n\t\u0026= C_0 +cY + I_0 + X_0 - mY \\\\\n\t\u0026= \\frac{1}{1-(c-m)}(C_0+I_0 + X_0). \\tag{2}\\\\\n\\end{align}\n$$\nComparing this result with $(1)$, we see that opening the economy makes the multiplier smaller.\n\n### Paradox of Thrift\nThe *'paradox of thrift'* is a paradox where an increase in exogenous household saving, $C_0$, which shifts the aggregate saving function up, does not actually increase the amount of *real* savings. This is because a collective effort of every household to save simply causes the production levels to drop, meaning a reduction in equilibrium GDP and the effects of saving are nullified as shown:\n\n![[Knowledge/Economics/macroeconomics/assets/paradox-of-thrift-graph.png|500]]\n\n\u003e The Paradox of Thrift suggests that while it may be wise for an individual to save money when income is low and job prospects are precarious, it could be collectively disastrous if everyone is thrifty together.\n\nThe paradox of thrift is an example of a *[fallacy of composition](https://en.wikipedia.org/wiki/Fallacy_of_composition)*. An example of the fallacy of composition: when you stand up amongst a crowd to get a better view of something, it only works when a few people do it. When everyone does it, then the gains from standing up are nullified. At that point, it would be equivalent to if everyone remained seated.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Inflation":{"title":"Inflation","content":"\n\u003e \"Like virginity, a stable price level seems capable of maintenance, but not of restoration\" ‚Äî Warren Buffett.\n\nInflation describes a period where *prices in an economy are increasing*, or alternatively, the decline of the purchasing power of a country‚Äôs currency. Likewise, *deflation* describes a period where prices are falling. The *inflation rate* describes a value for how much the prices for goods and services have increased in an economy from one point of time to another.\n\nThe [[Knowledge/Economics/macroeconomics/Central Bank|central bank]] measures inflation using a *price index*, which is a value that is representative of the aggregate price level. One standard and very commonly chosen price index central banks use to measure inflation is the [[Knowledge/Economics/macroeconomics/Inflation#Consumer Price Index|consumer price index (CPI)]]. Inflation is measured in terms of the CPI between the current year, $CPI$, and its previous year, $CPI_{-1}$:\n$$\n\t\\pi=\\big( \\frac{CPI-CPI_{-1}}{CPI_{-1}} \\big) \\times 100\n$$\n*Note*: we use $\\pi$ as the symbol for inflation.\n\nInflation is generally bad for your savings because the same amount of money will purchase fewer goods and services in the future. During inflation, you‚Äôre incentivised to minimise holdings of currency and ‚Äòstore‚Äô wealth in other assets.\n\nInflation is sometimes classified into 3 types:\n- **Cost-push inflation** is when the costs of a business producing goods and services rises (due to shortages in materials, increases in wage, etc.), causing the price of those goods and services charged to consumers to rise. This assumes demand for the business' output hasn't changed.\n- **Demand-pull inflation** is when the demand for a good or service increases while the supply doesn't, causing prices to rise for that good or service.\n- **Built-in inflation** is when *expectations* about future increases in price are the thing that's pushing prices up.\n\n## Consumer Price Index\nThe consumer price index (CPI) value aims to represent changes to the cost of living experienced by typical households. It does this by comparing the price of a *fixed basket* of ‚Äòstandard‚Äô goods/services that households consume at a base year with the price of that same basket of goods/services in subsequent years. The items in such a basket might include milk, clothes, chicken, fruit, etc., basically a huge set of things that are usually good representatives of the average urban consumption (since it's based on real data and constant price sampling).\n$$\n\tCPI = \\frac{\\texttt{basket\\_cost(current\\_year)}}{\\texttt{basket\\_cost(base\\_year)}}.\n$$\nTo get the CPI for a year $n$ with base year $m$, first calculate the cost of the basket in year $m$ with year $m$ prices, then calculate the cost of the same basket but with year $n$‚Äôs prices. Finally, the CPI is the ratio of the price of the basket calculated at year $n$‚Äôs prices to the price of the basket calculated at year $m$‚Äôs prices.\n\nEg. Consider the following:\n\t\n\t\t![[Knowledge/Economics/macroeconomics/assets/cpi-calculation-example.png|400]]\nThe CPI at year 2010 is given by: $CPI=\\frac{100\\times3 + 50 \\times 10}{100 \\times 5 + 50 \\times 10}$.\n\n**Shortfalls of CPI:**\n- When the quality of an item in the basket changes (eg. a phone gets a hardware upgrade), the CPI value fails to capture that. This means the reported CPI might over-estimate increases in living cost. This is called *quality adjustment bias*.\n- CPI does not take into account the *substitution effect*. Eg. when beef becomes expensive, people will tend to substitute away towards chicken, however the CPI will report its value assuming people continue consuming the same amount of the same things in the fixed basket. This is called *substitution bias*.\n\n## Optimal Inflation Rate\nIt‚Äôs typically desirable for economies to maintain a low and stable inflation rate over time, usually in the ballpark of 1-3% per year. This is usually controlled through [[Knowledge/Economics/macroeconomics/Fiscal Policy|fiscal]] and [[Knowledge/Economics/macroeconomics/Monetary Policy|monetary]] policies.\n\nHaving an inflation rate above zero will tend to grow the economy. Although highly contended, [[Knowledge/Economics/macroeconomics/Income-Expenditure Model|Keynesian economics]] argues in the short-run, it takes some time for the decrease in purchasing power of money to fall, so there is a 'window of opportunity' where before inflation 'kicks in' and errodes people's savings, prices all stay the same allowing people or businesses with more money to acquire more goods \u0026 services, growing the country's real GDP. This is what governments may try to exploit to grow the economy, but it's a move that has historically backfired hard for some economies.\n\nAiming for an inflation rate of around 1-3% reduces the likelihood of deflation, which is usually agreed to be more destructive than a little bit of inflation. For example, in deflationary periods, when you expect prices in the future to be lower, then you might hold off on purchasing. Preventing a transaction like this causes businesses to have lower income, resulting in higher unemployment and lower productivity in an economy.\n\nHigh inflation tends to be self-reinforcing. When too high, it's easy for countries to lose the ability to control the escalation towards hyperinflation, which amplifies all the [[Knowledge/Economics/macroeconomics/Inflation#Undesirable Effects of Inflation|undesirable effects of inflation]].\n\n## Undesirable Effects of Inflation\n- Inflation can be particularly bad for some parties when it‚Äôs *unanticipated*.\n  \n  Eg. Suppose a bank loans you $1000 with an interest rate calculated based on its *expected rate of inflation* for the loan period. If the inflation is in fact higher than what the bank expected, then you will be repaying the loan in dollars with less purchasing power. Ie. there has been an unintended redistribution of real wealth in your favour, as the borrower.\n- **Menu costs** ‚Äî the cost of having to *literally* re-printing physical menus to reflect new cost, or any other process that needs to take place to update costs of items in a high-inflation environment.\n- **Shoe-leather cost** ‚Äî the real cost associated with the process of conducting transactions with banks. Inflation increases the transactions you‚Äôd make with the bank since you‚Äôd want to minimise the amount of currency you have (because they‚Äôre decreasing in value).\n  \n  The term ‚Äòshoe-leather‚Äô cost is the cost associated with *literally* wearing out the shoe leather each time you take a physical trip to the bank (back in the early 2000s, that is). Generally however, shoe-leather cost refers to the real cost of making transactions with banks which doesn't just involve wearing out your shoes. \n - The poorer bracket of people in society tend to have a higher [[Knowledge/Economics/macroeconomics/Income-Expenditure Model#Consumption Function|marginal propensity to consume]]. A reduction in purchasing power of their money will hurt them more than more affluent individuals. Poorer households typically have less assets that act as a *hedge* against inflation, such as real estate or gold.\n\n### Hyperinflation\nWhen the inflation rate escalates uncontrollably. This tends to result in a sudden drop in living standards as people can no longer afford the same basket of goods and services. People will tend to hoard goods, creating shortages. People become bankrupt. Banks may become insolvent. Governments fail to provide critical services, payments and infrastructure. Everything basically falls apart.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Interest":{"title":"Interest","content":"\nInterest is the *cost of borrowing money*. Borrowing money enables you to acquire goods and services that will produce value. Lending $\\$100$ is only worth doing with the expectation that you get some amount greater than $\\$100$ back. Lending $\\$100$ makes poorer, reducing your ability to acquire goods and services that will produce value, hence you want to be compensated for *more than you have lent*. 'Interest' literally means 'compensation for loss' from the Latin word 'interesse'.\n\nWhen you make a deposit of $\\$100$ to a [[Knowledge/Economics/macroeconomics/Private Banks|private bank]], you're forgoing the privilege of being able to use that $\\$100$ with the expectation of being paid a certain interest rate for letting the bank do what it wants with you money. Note that although [[Knowledge/Economics/macroeconomics/Private Banks|private banks]] each set their own interest rates on savings accounts and on loans, they're all directly influenced by the [[Knowledge/Economics/macroeconomics/Cash Rate|interest rate]] set by the [[Knowledge/Economics/macroeconomics/Central Bank|central bank]].\n\nRemember, the economy is not a [zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). In theory, the act of lending/borrowing should result in a win-win scenario and create a net increase in 'value' in the game (economy). The [economic pie tends to keep on growing](https://en.wikipedia.org/wiki/Growing_the_pie).\n\n\u003e Fundamentally, the concept of *interest* exists because all humans value something more when they can use it today versus tomorrow because life is finite.\n\nInterestingly, the [Islamic banking](https://en.wikipedia.org/wiki/Islamic_banking_and_finance) system prohibits monetary interest for religious reasons, instead it sets up other non-monetary incentive structures to reward lenders.\n\n## Nominal vs. Real Interest\n**Nominal interest rate** ‚Äî the *monetary* interest charged on a loan. It does not take into account the effects of [[Knowledge/Economics/macroeconomics/Inflation|inflation]].\n\n**Real interest rate** ‚Äî the interest charged on loan *adjusted for inflation*. The real interest rate can be approximated by the difference between the nominal interest rate and inflation rate: $r \\approx i - \\pi$, where $i$ is nominal interest rate and $\\pi$ is the inflation rate *over the period of the loan* (eg. 1 year).\n\nIf you're a lender and want to earn a real interest rate of 5%, for example, and you're expecting the inflation rate to be 2%, then you should set the nominal interest rate to be 7%.\n\n## Fisher Effect\nThe **Fisher Effect** asserts that nominal interest rate will increase 1:1 with inflation, ie. that every 1% rise in inflation will have a corresponding 1% rise in nominal interest rate.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/International-Trade":{"title":"International Trade","content":"\n### Balance of Payments\nThe *balance of payments* is a record of transactions between residents and foreigners. It consists of the *current account* and the *capital and financial account*\n- **Current account**: $\\text{Curr. Account = }NX + \\text{Primary income}+\\text{Transfers}$.\n\t- Goods and services trade: $NX=X-M$.\n\t- Factor income flows, called *net primary income*: $\\text{Payments to us} - \\text{Payments to other countries' residents}$.\n\t- Transfer payments, called *net secondary income*, which includes international aid, for example.\n- **Capital and financial account**: $\\text{Cap. \\\u0026 Fin. Account = Balance on Cap. Account + Balance on Fin. Account}$.\n\t- Capital account: the acquisition/disposal of non-financial assets, and capital transfers.\n\t- Financial account: the trade of financial assets between residents and foreigners.\n\nIt should be the case (in accounting) that $\\text{Current Account} + \\text{Cap. \\\u0026 Fin. Account} = 0$. In practice, there are measurement errors causing $\\text{Current Account} \\approx -\\text{Cap. \\\u0026 Fin. Account}$. The difference is called the *net errors and omissions*.\n\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Labour-Market":{"title":"Labour Market","content":"\nThe labour market, also called the *job market*, is the market for the supply of skills and time from employees and demand from businesses to hire those people. The unemployment rate and productivity levels are two important macroeconomic variables.\n\n![[Knowledge/Economics/macroeconomics/assets/labour-market-taxonomy.png|250]]\n\nSome terminology.\n- **Working-age population**: The population consisting of people who are 15 years and older and not part serving in the military.\n- **Labour force**: Members of the working-age population are either a member of the labour force or not. People may not be in the labour force for a number of reasons: eg. disabilities, and even people who are depressed about not finding a job and have given up. A member of the labour force may be employed or unemployed. Note: the workforce, on the other hand, is the set of people who are actively working, excluding the unemployed people.\n- **Employed**: You are considered *employed* if you work ‚â•1 hour per week and earn money for doing so. The exception is that if you‚Äôre working for a family business, then that ‚â•1 hour of work need not be paid. \n\t- **Full-time employment**: If you work ‚â•35 hours per week.\n\t- **Part-time employment**: If you work \u003c35 hours but ‚â•1 hour per week.\n- **Unemployed**: If you are in the *labour force* and are *not employed* *and* are **actively seeking employment**, you are formally *unemployed* and will contribute to the *unemployment rate*.\n- **Underemployment**: underemployment is a lack of utilisation of your labour. There are two types:\n\t- **Time-related underemployment**: when you are willing to work for more hours than you currently are offered to work for.\n\t- **Skill-related underemployment**: when you are working in a job that does not utilise much of your skillset.\n- **Unemployment rate**: the percentage of the *labour force* that are formally *unemployed*: $u = \\frac{\\texttt{num\\_unemployed}}{\\texttt{labour force size}} \\times 100$.\n- **Participation rate**: the percentage of the *working-age population* that is a part of the *labour force*: $\\text{participation rate} = \\frac{\\texttt{labour force size}}{\\texttt{working age population}} \\times 100$.\n\n## Types of Unemployment\nUnemployment is categorised into 3 groups: *frictional*, *structural* and *cyclical*.\n1. **Frictional** ‚Äî temporary unemployment as a result of transitioning between different jobs or from full-time university.\n    \n    Change in level of unemployment is given by: $\\Delta U = sL - fU$, where:\n    - $s$ is the job separation rate\n    - $L$ is the number of employed people\n    - $f$ is the job finding rate\n    - $U$ is the number of unemployed people.\n    \n    The long-run frictional unemployment is given by: $u = \\frac{s}{s+f} \\times 100$, derived by combining $\\Delta U = sL - fU$ with $\\text{labour force}=L+U$.\n    \n2. **Structural** ‚Äî unemployment as a result of fundamental changes to an economy. For example, automation technology might radically change certain industries, causing many people to be made redundant. Structural unemployment involves unemployment arising from insufficient worker skill and job locations being too physically far away.\n    - Policies that address structural unemployment involve re-training programs for assisting the transition of workers to different industries.\n3. **Cyclical** ‚Äî temporary unemployment as a result of changes over the ***business cycle***. The cyclical unemployment rate is strongly correlated with recessions.\n    - Cyclical unemployment can become classified as *structural unemployment* when the skills of a cyclically unemployed person go out of demand after the business cycle downturn.\n    - The **natural rate of unemployment**, given by: $u^* = \\text{frict. unemployment + struct. unemployment}$, represents the unemployment rate that‚Äôs independent of fluctuations in real GDP.\n    - The cyclical unemployment rate is the difference between total unemployment $u$ and natural unemployment $u^*$, which is: $\\text{Cyclical unemployment rate }= u - u^*$.\n\n## Output Gap\nThe **utilisation rate** is the rate at which businesses actually utilise their factors of production, primarily labour and capital. Businesses are assumed to have granular control over whether they have a high or low utilisation rate. There is a *normal utilisation rate* where labour and capital are neither overutilised or underutilised that is considered economically sustainable in the long-term. If ***all*** businesses operate at such a utilisation rate, then we achieve the value of the **potential real GDP**, $Y^*$, or also known as the **potential output**. It‚Äôs hard to measure/estimate potential GDP.\n\nThe **output gap** is the difference between the real GDP $Y$ and the *real potential GDP $Y^*$*: $\\text{Output gap} = Y - Y^*$, or expressed as a percentage, $\\text{Output gap} = \\frac{Y-Y^*}{Y^*}\\times 100$.\n- When the output gap is negative, we call it a *contractionary gap*. Likewise, we call it an *expansionary gap* when the output gap is positive.\n- Persistent contractionary gaps imply an underutilisation of labour \u0026 capital, meaning that we‚Äôre not producing as much as we could.\n- Persistent expansionary gaps imply an overutilisation of labour \u0026 capital. It typically drives inflation to higher rates since prices of goods and services increase in response to higher demand.\n\nThe output gap serves as a useful indicator that informs [[Knowledge/Economics/macroeconomics/Fiscal Policy|fiscal]] and [[Knowledge/Economics/macroeconomics/Monetary Policy|monetary]] policies.\n\n### Okun‚Äôs Law\nOkun‚Äôs law is an empirical result that states how a country‚Äôs *cyclical unemployment* rate changes when the **output gap** changes.\n$$\n\t\\underbrace{\\frac{Y-Y^*}{Y^*}\\times 100}_{\\text{Output gap (percentage)}}  = - \\beta \\underbrace{(u - u^*)}_{\\text{Cycl. unempl. rate}}\n$$\nThis relationship states that the **output gap** is directly proportional to the negative of the **cyclical unemployment rate**. In Australia, the $\\beta$ coefficient is estimated to be somewhere around 2, which means that with a 1% rise in cyclical unemployment rate we‚Äôll expect a 2% drop in output gap. We determine $\\beta$  empirically through statistics.\n\n*Note*: a negative cyclical unemployment rate implies that workers who *would be* frictionally or structurally unemployed have been temporarily pulled into jobs.\n\n## Labour Supply \u0026 Demand\nThe labour market can be modelled with the following supply and demand curves:\n\n![[Knowledge/Economics/macroeconomics/assets/labour-supply-and-demand.png|400]]\n\n- *Marginal product of labour*, $MPL$ ‚Äî the additional output produced when you supply an extra 1 unit of labour (with all other factors of production held constant). \n- *Value of marginal product of labour*, $VMPL$ ‚Äî the monetary value of the additional output produced for each extra unit of labour, ie. $p\\times MPL$, where $p$ is the price per unit of output. This represents the labour demand curve.\n\t- Improvements to worker productivity (eg. more capital goods or better technology) will shift the labour demand curve to the right.\n\t- *Diminishing marginal product*. The ability of each additional worker to help us diminishes. Each new worker produces less than the previous. It‚Äôs a valid assumption when you‚Äôre holding capital fixed.\n\t- The optimal amount for a firm is when $\\text{marginal benefit}=\\text{marginal cost}$, ie. when $VMPL$ gained for an additional work is greater than or equal to the cost of hiring that extra worker.\n- *Real wage*, $\\frac{W}{P}$‚Äî the nominal wage divided by some measure of the price of goods \u0026 services (eg. CPI).\n\n**Observations**\n- Shifts in the aggregate labour supply curve can happen due to immigration, birth rate changes, retirement age changes, and any number of other things that influence the general willingness for the population to participate in the labour market.\n- At equilibrium, everyone who is willing to work for the market real wage *will* be employed.\n- Factors such as minimum wage laws, labour unions, taxes keep us away from market equilibrium real wage.\n\t![[Knowledge/Economics/macroeconomics/assets/minimum-wage-on-labour-market.png|300]]\n\tHere, $L^s-L^d$ is the number of people who *would be willing* to work but cannot find employment.\n- A higher minimum wage will increase unemployment rates, *theoretically*.\n\n\t![[Knowledge/Economics/macroeconomics/assets/labour-tax.png|300]]\n\t\n\tAdding taxes on labour will pull the labour supply curve left since fewer people will be willing to work for a lower net wage.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Liquidity":{"title":"Liquidity","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Monetary-Policy":{"title":"Monetary Policy","content":"\nMonetary policy is a modification of the [[Knowledge/Economics/macroeconomics/Monetary Policy#Money Supply|supply of money]] by the [[Knowledge/Economics/macroeconomics/Central Bank|Central bank]], usually in an effort to reduce [[Knowledge/Economics/macroeconomics/Inflation|inflation]], [[Knowledge/Economics/macroeconomics/Interest|interest rates]] or some other macroeconomic variable, and to ensure the stability of a country‚Äôs currency, minimal unemployment rate, and general welfare of citizens. \n\nCentral banks will announce a **target** value for the macroeconomic variable they're trying to influence. For instance, most central banks announce a target inflation rate of $2$ to $3\\%$ on average. To actually work towards achieving such a target, the central bank will tweak a variable called an **instrument** that these macroeconomic variables, of which the central banks cannot directly control, depend on. The [[Knowledge/Economics/macroeconomics/Cash Rate|cash rate]] is one of the most influential policy instruments the RBA tweaks in monetary policies.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Money":{"title":"Money","content":"\nFundamentally, *money* is a:\n1. **Medium of exchange** ‚Äî an asset that makes trading efficient by eliminating the *inefficiencies of bartering*, a form of trading where two parties exchange goods and relies on mutual desire of the others‚Äô goods, called a *[double coincidence of wants](https://en.wikipedia.org/wiki/Coincidence_of_wants)*.\n   \n   Eg. in bartering, you might trade a video game for someone‚Äôs book, but they must be someone who wants that video game for them to agree to that exchange.\n    - *Commodity currencies* ‚Äî money in the form of assets which have intrinsic value, such as precious metals.\n    - *Fiat money* ‚Äî money in the form of something that has no/very little intrinsic value, such as a cash note. \n2. **Unit of account** ‚Äî the value of everything is measured in terms of the same standard, a dollar, in the same way that all lengths are quantifiable with the standard unit, the *meter*.\n3. **Store of value** ‚Äî money can be accumulated and be used to acquire things in the future. People collectively trust in the value of holding money over time.\n   \n    Money is not the only store of value. You could store your value in the form of other assets like a house or shares. Money, being the medium of exchange, has the advantage of being *perfectly liquid* meaning that you can directly use it to purchase something. You can‚Äôt use a house to purchase something, at least not directly.\n\n\u003e Australia's physical currency is produced by the RBA and [Royal Australian Mint](https://www.ramint.gov.au/).\n\n### Money Measures\nIn modern economies, money takes the form of _physical currency_ (notes/coins) and private bank deposits.\n\nSome standard measures of money used by Australia. *Some figures as of 2022, sourced from the [RBA](https://www.rba.gov.au/publications/bulletin/2018/sep/money-in-the-australian-economy.html)*\n| Currency    | Description                                                                                   | value             |\n| ----------- | --------------------------------------------------------------------------------------------- | ----------------- |\n| Currency    | Physical notes and coins produced by the [[Knowledge/Economics/macroeconomics/Sectors\\|public sector]]. | ~74 billion AUD   |\n| M1          | *Currency*, plus private bank deposits.                                                       | ~357 billion AUD  |\n| M3          | *M1*, plus any deposits made to non-banks.                                                    | ~2086 billion AUD |\n| Broad money | *M3*, plus all the money borrowed from private sector.                                        | ~2096 billion AUD |\n\n### Money Supply\nMoney supply is the amount of money circulating in the economy. It can be a measure of currency, M1, or other standard measures of money.\n\n### Money Demand\nMoney demand is basically how much money we, in aggregate, would like to hold in our bank accounts (as opposed to lower liquidity assets):\n$$\\colorbox{#FFFFBF}{$M^D=P\\times L(Y, i)$},$$\nwhere $P$ is the aggregate price level and $L$ is the [liquidity preference function](https://en.wikipedia.org/wiki/Liquidity_preference), which is a function of real GDP and interest rate. A decrease in the [[Knowledge/Economics/microeconomics/Opportunity Cost|opportunity cost]] of holding money will shift the money demand curve up.\n\nThe *liquidity preference function* looks like this:\n\n![[Knowledge/Economics/macroeconomics/assets/liquidity-preference-function.png|500]]\n*Sourced from [Intelligent Economist](https://www.intelligenteconomist.com/liquidity-preference-theory/).*\n\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Private-Banks":{"title":"Private Banks","content":"\nPrivate banks are *financial intermediaries* that make household savings available for borrowing. \n\nWhen you make a deposit of physical currency to a bank, you are converting physical currency into an increase in the number representing the the value of your bank account. \n\nDeposits represent a liability for the bank. \n\nBanks make money by incentivising people to make deposits that they can earn a small interest on, and then making that deposited money available for borrowing at a higher interest rate. The money they make is in the difference between the two.\n\n### Bank Balance Sheet\n\n![[Knowledge/Economics/macroeconomics/assets/private-bank-balance-sheet.png|400]]\n\nTo start a bank, you need an initial fund, called the 'shareholders' equity capital', or just 'equity'. Suppose you start a bank with $100 AUD equity. This also means the bank has $100 in its *reserves*.\n\n![[Knowledge/Economics/macroeconomics/assets/private-bank-initial-balance.png|300]]\n\nSuppose a customer gets a $1000 loan from our bank. They'd have a deposit account with $1000. Our balance sheet would record a $1000 loan as an *illiquid* financial asset and a deposit of $1000. \n\nNote that we essentially 'created' money out of thin air. We say that the borrower has $1000 available, but we don't need to actually provide it until they withdraw it from our reserves. When they do withdraw more than is in our reserves, we must either attract more deposits to build up our reserves or borrow it from someplace else. If we fail to do either, then we'll become *insolvent*, ie. unable to pay back depositors and therefore operate.\n\nWe must do our best to ensure that $\\text{Assets} \u003e \\text{Liabilities}$.\n\n### Bank Run\nWhen someone wants to withdraw more money than the bank has in its reserves, then it‚Äôll have to actively attract more deposits *or* they‚Äôll have to resort to borrowing the necessary money from the central bank or other financial institutions in the [[Knowledge/Economics/macroeconomics/Central Bank|overnight cash market]].\n\nA bank run is when *a lot of people* all try to withdraw their deposits in full from the bank, and the bank becomes *insolvent*, where the bank is no longer able to pay back people's deposits. The unfortunate thing is that the mass panic about the bank becoming insolvent is what *causes* the bank to become insolvent, just like how [panic buying](https://en.wikipedia.org/wiki/Panic_buying) causes shortages.\n\nEven when $\\text{Assets}\u003e\\text{Liabilities}$ on the balance sheet, it is still possible for banks to become insolvent if they have insufficient *liquid* assets to meet a sudden increase in demand for withdrawal.\n\n#### Surviving Bank Runs\n**Central bank bailout**\nThe [[Knowledge/Economics/macroeconomics/Central Bank|central bank]] can help bail out banks that are on the verge of becoming insolvent, however they shouldn‚Äôt do this liberally. The general rule is that the central bank should lend to a bank only if it is *solvent* (ie. $\\text{Assets} \u003e \\text{Liabilities}$ in their balance sheet), but they're simply just lacking in *liquid* assets to pay deposits with.\n\n**Deposit insurance**\nGovernments can provide deposit insurance that guarantee you can withdraw currency up to some maximum value. In Australia, the government promises you deposits of up to 250000 AUD can be withdrawn without fear of the bank losing your savings. This insurance doesn‚Äôt come for free ‚Äî the government charges a fee to banks to have this insurance, and the banks in turn charge the depositor by lowering the deposit rates or charging more admin fees.\n\n### Prudential Regulations\nGovernment regulations set by [APRA](https://www.apra.gov.au/what-prudential-regulation), called 'prudential' or 'macro-prudential' regulations, require banks (and other financial institutions like super funds, insurance companies, etc.) to adhere to certain balance sheet values in order to prevent becoming insolvent.\n\nFor a bank, there are the following ratios that must be above/below a prescribed safe value:\n1. **Leverage ratio** ‚Äî $\\frac{\\text{Loans}}{\\text{Equity}}$ should be below a ceiling value. \n\t- Note that $\\text{Equity = Loans + Reserves - Debt}$. Equity provides a buffer to prevent banks becoming insolvent.\n1. **Reserve-deposit ratio** (*liquidity coverage ratio*) ‚Äî $\\frac{\\text{Reserves}}{\\text{Deposits}}$ should be above some floor value. It's also called 'liquidity coverage' ratio because there must be sufficient liquid reserves to meet sudden withdrawal demand.\n2. **Capital ratios** ‚Äî a ratio of equity to a weighted risk measure of their assets. A [[Knowledge/Economics/macroeconomics/Bonds|government bond]], for example, is far less risky financial asset than a mortgage arranged with someone with low income.\n3. **Net stable funding ratios** ‚Äî a value associated with the sources of bank funding. For example, longer-term loans corresponds to a lower likelihood of currency withdrawal.\n4. **Loan to value ratio** ‚Äî a limit on the amount someone can borrow to hold a certain asset. For instance, a loan-to-value ratio of $0.8$ means that banks will lend a maximum of $80\\%$ of the market value of an asset.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Public-Debt":{"title":"Public Debt","content":"\n**Public debt**, also called *government debt* or *national debt*, is the financial liabilities of the government. Since raising taxes is not always reasonable, nearly all governments have to borrow money from the [[Knowledge/Economics/macroeconomics/Sectors|private sector]] to meet their expenses. The main way governments borrow money is buy selling *securities* known as **[[Knowledge/Economics/macroeconomics/Bonds|government bonds]]**. \n\nThe government's *budget balance* is expressed as: \n$$\n\tBB=T-G,\n$$\nwhere $T$ is taxes and $G$ is government spending.\n- When $BB \u003c 0$, we say there's a **budget deficit**.\n- When $BB \u003e 0$, we say there's a **budget surplus**.\n\nThe governments debt at a time $t$ is expressed as $D_t = D_{t-1} - BB_t$, basically the previous debt minus the *budget balance* over the time between $t-1$ and $t$.\n\n### Golden Rule of Public Investment\nA golden rule for public investment says:\n- Government expenditures that benefit the current taxpayers should be paid for using *their* taxes.\n- Government investments that are long-lived, such as the construction of hospitals, should be funded through government borrowing.\n\nThe aim is to be fairer to each generation. Your children shouldn‚Äôt have to pay off debts that paid for things which you can enjoy now but which they cannot enjoy in their time.\n\n### Government Budget Constraint\nThe government budget constraint equation is given as:\n$$\n\\begin{align}\n\t-(T_t-G_t) \u0026= D_t-D_{t-1} \\\\ \n\t-(\\tilde{T_t} - TR_t - rD_{t-1} - G_t)\u0026= D_t - D_{t-1},\\\\\n\\end{align}\n$$\nrearranging terms, we have:\n$$\n\t\\underbrace{G_t+TR_t+rD_{t-1}}_{\\text{Expenses}} = \\underbrace{\\tilde{T_t} + D_t - D_{t-1}}_{\\text{Funding sources}}.\n$$\nRemember, $T_t=\\tilde{T_t}-TR_t-rD_{t-1}$ consists of tax revenue $\\tilde{T_t}$ , transfer payments $TR_t$ and interest on debt $rD_{t-1}$. \n\nWe call the equation above the government 'budget constraint' because we can see that the only way to fund expenses is to either raise taxes or borrow.\n\n### Sustainability of Public Debt\nThe *debt-to-GDP ratio* is the standard way we assess whether a country's total public debt is sustainable in the long-term. \n\nAustralia's public debt-to-GDP ratio is sitting at ~60% as of 2022, which is regarded as sustainable. Japan's debt-to-GDP ratio, however, is at about +200%, the highest of any developed country. Public debt may be owed to domestic households or firms, or foreign residents.\n\nAn equation for the change in debt-to-GDP ratio is derived from:\n\n$$\n\\begin{align}\n\tD_t \u0026= D_{t-1} - BB_t \\\\\n\t\u0026=D_{t-1}+rD_{t-1}-(\\tilde{T_t}-G_t - TR_t) \\\\\n\t\u0026=D_{t-1}+rD_{t-1}-PBB_t \\\\\n\t\\frac{D_t}{Y_t}\t\u0026=\\frac{D_{t-1}(1+r)}{Y_t}-\\frac{PBB_t}{Y_t}\n\\end{align}\n$$\n\nAssuming GDP grows at a constant rate $g$, we can use $Y_t=Y_{t-1}(1+g)$ to obtain:\n\n$$\n\\begin{align}\n\t\\frac{D_t}{Y_t} \u0026= \\frac{D_{t-1}(1+r)}{Y_{t-1}(1+g)}-\\frac{PBB_t}{Y_t} \\\\\n\td_t\u0026= \\frac{d_{t-1}(1+r)}{1+g}-pbb_t\\\\\n\td_t-d_{t-1}\u0026= \\frac{(r-g)d_{t-1}}{1+g} - pbb_t \\\\\n\t\\Delta d_t \u0026= \\frac{(r-g)d_{t-1}}{1+g} - pbb_t.\n\\end{align}\n$$\n-   $g$ is the real growth rate of GDP.\n-   $r$ is the real interest rate.\n-   $PBB=\\tilde{T_t}-G_t - TR_t$ is the *primary budget balance*, consisting of taxes $\\tilde{T_t}$, government bond interest payments $G_t$, and transfer payments $TR_t$.\n-   $pbb_t=\\frac{PBB}{Y}$.\n\nFrom the above equation, running a budget surplus (ie. making $pbb_t$ positive) is the best way to reduce debt. Alternatively, if you can achieve $r\u003cg$, then you can still reduce debt that way.\n\nIn general, a higher public debt to GDP ratio results in a reduction in real GDP growth.\n\n**Crowding out:**\nSee [[Knowledge/Economics/macroeconomics/Savings and Investments|savings and investment]]. When the government borrows more, it tends to shift the national savings curve to the left (remember that national savings is a function of government balance), causing the equilibrium real interest rate to rise and therefore the investment demand curve to fall.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Quantity-Theory":{"title":"Quantity Theory","content":"\nThe *quantity theory of money* asserts that the price of goods and services is proportional to the *money supply* in the economy, assuming everything else is held constant. Basically, if you double how much money exists in the economy, then prices will simply double in response over time due to inflation.\n\n### Velocity of Money\nThe *'velocity' of money* is a measure of the rate at which mone circulates in the economy. It's the number of times $1 is exchanged in a time period. A higher velocity of money is indicative of economic growth.\n\nThe velocity of money is calculated as the ratio of nominal GDP to the money supply,\n\n$$\n\\begin{align}\n\tV \u0026\\equiv \\frac{Y_\\text{nominal}}{M} \\\\\n\t\u0026\\equiv \\frac{PY_\\text{real}}{M},\n\\end{align}\n$$\nwith $P$ being the aggregate price level.\n\nWhen we assume that $Y$ and $M$ are exogenous, or in other words, constant, then we'll have\n\n$$\n\tP \\propto M,\n$$\n$$\n\t\\Delta P=\\colorbox{#ffffbf}{$\\pi = \\Delta M$}.\n$$\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Savings-and-Investments":{"title":"Savings and Investments","content":"\n## Investment\nAn **investment**, in macroeconomics, is the act of purchasing new capital goods to bolster productivity.\n- **Private investment** ‚Äî any investment made by households/businesses. Eg. buying equipment, software, computers, buildings (new dwelling), etc.\n- **Public investment** ‚Äî any investment made by the government such as infrastructure.\n\n**Capital stock** ‚Äî encompasses everything in an economy that enables businesses to generate future sales such as buildings, bridges, literally everything like that.\n- *Accumulation of capital stock*: $K_1 = I_1 + \\underbrace{ K_0(1-\\delta)}_{\\text{Depreciation}}$. The stock at the end of a period is equal to the stock at the start of the period, plus any more investments made over that period, minus the depreciation of the stock at the start.\n    - Typically, capital goods are *durable*, meaning they can be consumed multiple times over a longer time period, and can be sold after some use.\n\nThe decision of whether a business purchases capital goods (ie. invests) follows the familiar marginal cost-benefit analysis in microeconomics. \n- Marginal benefit: **value of the marginal product of capital**, $VMPK = MPK\\times \\text{price per unit}$ ‚Äî value of the marginal product of capital ($MPK$).\n- Marginal cost: **user cost of capital**, $UC = P_K + \\underbrace{iP_K}_{\\text{Interest}}-\\underbrace{(1 - \\delta)}_{\\text{Dep.}} \\times\\underbrace{(P_K+\\Delta P_K)}_{\\text{End-of-year market price}}$ ‚Äî the cost for holding the capital asset for 1 year, for example. Note that we can resell the capital good since it‚Äôs *durable*.\n    - A simpler approximation is given as $UC\\approx P_K\\big( i + \\delta - \\frac{\\Delta P_K}{P_K} \\big)$.\n    - An even further simplification is assuming that changes in the market price $\\frac{\\Delta P_K}{P_K}$ is equal to inflation $\\pi$, giving $UC\\approx P_K(r+\\delta)$, where $r = i - \\pi$.\n\nWe will only invest in a capital good if the **value of marginal product of capital** (margin benefit) equals the **user cost of capital** (marginal cost), ie. when $VMPK=UC$.\n\n![[Knowledge/Economics/macroeconomics/assets/investment-demand-curve.png|200]]\n\n### Savings (in Closed Economies)\nThe amount of **savings** is the difference between income and consumption.\n- **Household savings** ‚Äî $\\text{gross household saving} = \\text{disposable income }- \\text{ consumption expenditure}$, where:\n    - Disposable income can be broken down as: $Y_\\text{disp. income} = Y_\\text{gross income} - \\text{taxes}+\\text{government transfers} + \\text{government interest payments} - \\text{business retained earnings}$.\n        - *Government transfers* is the money you receive from the government directly ‚Äòfor free‚Äô (eg. [youth allowance](https://www.servicesaustralia.gov.au/youth-allowance)).\n        - *Government interest payments* is the interest the government pays you for holding _government [[Knowledge/Economics/macroeconomics/Bonds|bonds]]_.\n        - Business retained earnings is the profit that a business won‚Äôt pay out as [[Knowledge/Investing/Dividends|dividends]] to [[Knowledge/Investing/Stocks|shareholders]].\n    - *Accumulation of wealth*: $W_1 = W_0 + \\text{household savings} + \\text{net capital gains}$. The change in wealth for a household is given by how much they saved and how much their assets have gained in value.\n-   **Business savings** ‚Äî savings are in the form of *retained earnings*, ie. the profit that businesses don‚Äôt distribute to owners and shareholders as dividends.\n-   **Government savings** ‚Äî $\\text{public savings} = \\text{taxes} - \\text{gov. transfers} - \\text{gov. interest payments}$ also called [[Knowledge/Economics/macroeconomics/Public Debt|government budget balance]]. \n\n**National Saving (Supply) and Investment Demand:**\n_National saving_ is the *sum* of all household, business and government savings: $NS(r)= S(r)+\\text{Business Savings} + \\text{Gov. Savings}$, where business and government savings are *exogenous* variables, that is, variables whose value is determined by factors outside the current model.\n\nCombining the national saving curve with the investment demand curve, we get an aggregate savings supply and aggregate investment demand graph curve for a closed economy. Remember, both curves depend on the real interest rate $r$. The equilibrium condition is when $NS(r) = I(r)$.\n\n![[Knowledge/Economics/macroeconomics/assets/national-savings-vs-investment-demand-curve.png|500]]\n\nWhen the [[Knowledge/Economics/macroeconomics/Central Bank|RBA]] sets a higher [[Knowledge/Economics/macroeconomics/Cash Rate|interest rate]], that means higher borrowing costs, so people will tend to save instead of invest. Likewise, setting a lower interest rate encourages households to consume more and businesses to invest more.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/macroeconomics/Sectors":{"title":"Sectors","content":"\n*Sectors* are partitions of the economy that contain similar business activities. They might produce similar goods or services such as mining or farming.\n\n![[Knowledge/Economics/macroeconomics/assets/sectors-of-the-economy.png|350]]\n\nIn macroeconomics, we often partition the economy into the **private sector** and **public sector**.\nThe *private sector* is the part of the economy that consists of households and businesses. The government and anything that's associated with the government constitutes the *public sector*.\n","lastmodified":"2022-10-14T06:51:53.862874789Z","tags":null},"/Knowledge/Economics/microeconomics/Externalities":{"title":"Externalities","content":"\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Economics/microeconomics/Market":{"title":"Market","content":"\nA market consists of all the buyers and sellers making transactions for a specific class of good or service. For instance, there is a wheat market, stock market, [[Knowledge/Economics/macroeconomics/Labour Market|labour market]], even dating market... and so on.\n\n### Perfectly Competitive Markets\nTODO.\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Economics/microeconomics/Opportunity-Cost":{"title":"Opportunity Cost","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Economics/microeconomics/Supply-and-Demand":{"title":"Supply and Demand","content":"\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Agile/Agile":{"title":"Agile","content":"\nAgile is a *philosophy* for project management that is particularly useful for software engineering teams. An alternative to Agile is the [[Knowledge/Engineering/Agile/Agile#Waterfall Methodology|Waterfall approach]].\n\nThere exists 'implementations' of Agile, which are called ***Agile methodologies***, such as:\n- [[Knowledge/Engineering/Agile/Scrum|Scrum]]\n- [[Knowledge/Engineering/Agile/Kanban|Kanban]]\n- [[Knowledge/Engineering/Agile/Extreme Programming|Extreme programming (XP)]]\n\nAgile has an old [[Knowledge/Engineering/Agile/Agile#Agile Manifesto|manifesto]] created by bunch of highly respected software engineers in 2001 due to frustrations over inefficient traditional project management methods (mainly [[Knowledge/Engineering/Agile/Agile#Waterfall Methodology|the waterfall approach]]). Overall, Agile puts great emphasis on:\n1. Constantly launching small sets of features and using the feedback to inform the next set of features to be developed and shipped.\n2. The idea that requirements and plans are constantly in flux, so we must crunch down our iteration timeline to respond quickly to those changes.\n\n### Waterfall Methodology\nIn the traditional 'waterfall' approach to project management, teams plan out everything first, then execute on the plan. Essentially, everything is done in phases which collectively span a long time.\n\n![[Knowledge/Engineering/assets/waterfall-methodology-diagram.png|500]]\n\nThe waterfall approach is named such because you cannot go to a previous phase, at least not in the short-term. It's a great management framework for projects that have fixed and clear requirements and a clear vision of what the end product will be. Sadly, software projects are rarely like that and benefit greatly from very quick development, deployment and feedback cycles which help the team re-orient the project scope so as to maximise the value delivered to customers.\n\n\n\n\n\n![[Knowledge/Engineering/assets/agile-meme.png|500]]\n\n\n### Epics\nEpics serve as a container for [[Knowledge/Engineering/Agile/Agile#User Stories|user stories]] and do not represent something that's deliverable in a single sprint, usually. They go by the same format of: *\"As a `userType`, I want `some behaviour`, so that `some reason`.\"*\n\n![[Knowledge/Engineering/assets/epic-user-story-task-hierarchy.png|700]]\n\nEpics are the starting point. You come up with the epics first, then recursively break it down into its constituent user stories.\n\n### User Stories\nUser stories are statements of the following form:\n```\nAs a      {user type}\nI want to {use some feature in some way}\nSo that   {goal or benefit to the user}\n```\n\nIt's worded this way to be extremely straightforward to technical/non-technical people, capture business value, and it does not assert anything about what the design should be.\n\nUser stories are usually placed into a project backlog in a project management app like Jira.\n\n#### User Acceptance Criteria\nUser stories should have a concrete set of conditions that must be satisified in order to consider a user story *implemented*. This is the *user acceptance criteria*.\n\nYou can specify a user acceptance criteria with the given-when-then format:\n```\nGiven {context}\nWhen  {a specific action is performed}\nThen  {a set of consequences should occur}\n```\n\n#### Examples\n\n- **For a music app like Spotify:**\n\t- \"As a user, I want to be able to make a playlist of my favourite songs so that I can find them easily.\"\n\t- \"As a user, I want to follow artists so that I can be notified of new songs.\"\n\n## Agile Manifesto\nSourced from [manifesto](https://agilemanifesto.org/principles.html):\n1. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.\n2. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage.\n3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.\n4. Business people and developers must work together daily throughout the project.\n5. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\n6. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.\n7. Working software is the primary measure of progress.\n8. Agile processes promote sustainable development. The sponsors, developers and users should be able to maintain a constant pace indefinitely.\n9. Continuous attention to technical excellence and good design enhances agility.\n10. Simplicity ‚Äî the art of maximising the amount of work not done ‚Äî is essential.\n11. The best architectures, requirements, and designs emerge from self-organising teams.\n12. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behaviour accordingly.\n\nThe Agile Manifesto is declarative, not imperative. It doesn't tell you how to do anything, it's up to you to apply their principles. You can do that through [[Knowledge/Engineering/Agile/Scrum|Scrum]], [[Knowledge/Engineering/Agile/Kanban|Kanban]], etc. or combining practices you like from any of them.\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Agile/Extreme-Programming":{"title":"Extreme Programming","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Agile/Kanban":{"title":"Kanban","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Agile/Requirements-Engineering":{"title":"Requirements Engineering","content":"\n### Software Requirement Specification (SRS)\nA *software requirement specification* is a document, written for engineers and stakeholders alike, that describes what the project's features are and its business model. \n\nGenerally, a requirements document should cover:\n1. Project scope (a summary of what the project is, its features, its target audience, its boundaries, deliverable deadlines, etc.).\n2. [[Knowledge/Engineering/Agile/Requirements Engineering#Functional Requirements|Functional requirements]] in the form of [[Knowledge/Engineering/Agile/Agile#Epic|epics]] and [[Knowledge/Engineering/Agile/Agile#User Stories|user stories]].\n3. System architecture.\n4. UI prototype.\n5. [[Knowledge/Engineering/Agile/Requirements Engineering#Non-Functional Requirements|Non-functional requirements]].\n\nCommunication should be the priority, not formality, so you should make liberal use of diagrams, graphs and images.\n\n### Functional Requirements\nFunctional requirements are product features that are implementable by developers. They define **what the system does** and roughly look like the following:\n1. Authentication system allows user to log in with their Google account.\n2. The user can create new blogs.\n3. The user can comment on existing blogs.\n\n### Non-Functional Requirements\nNon-function requirements are requirements on the product that aren't features. They roughly look like this:\n- Must support 10000 concurrent users.\n- Latency must be below 100ms.\n- The bundle size must be below 1mb.\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Agile/Scrum":{"title":"Scrum","content":"\nTODO.\n\n### Scrum Roles\nA Scrum team's member each adopts a role:\n- *Product owner*\n    - Understanding customer requirements\n    - Creates the vision for what the product should be\n    - Maintains the backlog\n- *Scrum master*\n    - The middleman between product owner and dev team\n    - Assists task breakdown and planning\n    - Ensures completion of tasks\n- *Scrum team* ‚Äî the developers\n    - Breaks down *epic* to *stories/tasks*, then into *subtasks*\n    - Implements features and writes tests\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Algorithms/Competitive-Programming":{"title":"Competitive Programming","content":"\n\n- Grind through Codeforces to get good quickly\n- Finish C++ textbook.\n- Read the CS4128 tips page.\n- Extract notes from Notion.\n\n1. Read the problem statement.\n    - Strip the 'flavour text'.\n    - Write the constraints.\n    - Write the inputs and outputs.\n2. Sample I/O test cases.\n3. Design.\n    - Estimate time complexity.\n4. Implement.\n\nSub max n into time complexity expression and if it evaluates to less than 10 million, then it can probably clear the time limit of 1 second.\n\n## Tips\n- Use a brute force algorithm to generated expected outputs to compare against your solution.\n\n## Questions\n- Do you generally start implementing the solution when you're very confident your solution is correct? Or do you jump into implementation earlier and then figure it out as you go?\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Architecture/Load-Balancer":{"title":"Load Balancer","content":"\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Architecture/Microservice":{"title":"Microservice","content":"\n*Microservice architecture* aims split off an application's set of functionalities into small, specialised [[Knowledge/Engineering/Cloud/SaaS|services]] that run inside [[Knowledge/Engineering/DevOps/Containers|containers]]. In this architecture, \"*change is a first-class design consideration*\" (from the 'Fundamentals of Software Architecture').\n\nMicroservice architectures try to solve scaling challenges faced by [[Knowledge/Engineering/Architecture/Monolith|monolithic]] applications.\n- When some functionality in your monolithic app receives significantly more traffic than another, you can't really scale that functionality up independently. You'd have to deploy another instance of your whole monolithic app. In microservice architectures, when service $A$ is experiencing a lot of traffic, you simply spawn another instance of service $A$.\n- If your monolithic app is written in Java, then new functionalities must also be written in Java. \n- When the codebase for your monolithic app is huge and everything is deeply intertwined with each other like spaghetti, it's harder for developers to add new things, fix bugs and maintain. In microservice architectures, the services are separated by and communicate through well-defined abstractions so developers can specialise in a smaller part of the overall application.\n- Failures in one part of the monolithic app might just crash the whole system. In microservice architectures, failures in one service are isolated to that service.\n- If you update one part of a monolithic app, the entire app needs to be re-released, basically. In microservice architectures, every service can go through an independent CI/CD pipeline and updates to services are independent of one another.\n\nIn essence, microservice architecture is just a way of decoupling the parts inside a monolithic architecture.\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Architecture/Monolith":{"title":"Monolith","content":"\nIn *monolithic architectures*, every part of the application is developed and shipped as a tightly coupled whole. \n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Architecture/Pub-Sub":{"title":"Pub-Sub","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Architecture/Reverse-Proxy":{"title":"Reverse Proxy","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Architecture/Serverless":{"title":"Serverless","content":"\n*Serverless computing* is basically about getting servers in the [[Knowledge/Engineering/Cloud/Cloud Computing|cloud]] to execute some code snippets ([[Knowledge/Engineering/Cloud/FaaS|FaaS]]) or utilise something like a database service with a pay-as-you-go pricing model (typically) and with no need to be concerned with capacity planning, horizontal scaling, hardware failure, etc.\n\n\u003e 'Serverless' is a bit of a misleading name because the code obviously still executes on actual servers, they're just not maintained by you so can essentially be oblivious to their existence from a black-box perspective.\n\n**Note**: for some reason I had always assumed serverless computing and [[Knowledge/Engineering/Architecture/Microservice|microservice]] had something to do with each other. They don't, but they're occasionally used in the same project. *Serverless* is about how you run an app, while *microservices* are about how you architect an app. They're both very frequently encountered in cloud computing.\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Cloud/BaaS":{"title":"BaaS","content":"\n*BaaS (backend as-a-service)* is a set of cloud services that you can use instead of writing your own backend for it. Standard features such as user authentication and cloud storage for user photos, videos shouldn't be an implementation priority since it's likely not central to your app's business value. BaaS vendors maintain all the infrastructure for the servers providing these standard backend services and give you SDKs that you can use to work with it directly from your frontend codebase.\n\nIt's a great option if you're a startup and must maintain very low operational costs while still building something that can eventually scale up to thousands of users.\n\n![[Knowledge/Engineering/Cloud/assets/what-is-backend-as-a-service.svg|700]]\n*(Sourced from [Cloudflare](https://www.cloudflare.com/learning/serverless/glossary/backend-as-a-service-baas/))*\n\nGoogle's [[Knowledge/Engineering/Technologies/Firebase|Firebase]] is one example of a BaaS platform.\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Cloud/CDNs":{"title":"CDNs","content":"\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Cloud/Cloud-Computing":{"title":"Cloud Computing","content":"\nCloud computing describes the usage of a network of remote computers managed by [[Knowledge/Engineering/Cloud/Cloud Provider|cloud providers]] to handle computing tasks like storing/serving files, running web servers, training machine learning models, etc. *instead* of provisioning your own on-premise computers.\n\nBy deploying your compute tasks in the cloud, you no longer have to worry about things like:\n- Buying and setting up dedicated computers.\n- Hiring an IT team to take care of those computers.\n- Dealing with inevitable hardware failures (backing up and restoring data, for example).\n- Paying for the physical space to put your computers and ensuring it's secure from adversaries.\n- [[Knowledge/Engineering/Cloud/Scaling|Scaling]] to meet unexpected gain/reduction in usage.\n\nCloud computing is generally divided into 3 groups:\n- [[Knowledge/Engineering/Cloud/SaaS|SaaS]], for user-facing, generally non-technical software products like Gmail or Google Drive.\n- [[Knowledge/Engineering/Cloud/PaaS|PaaS]], for developer teams who don't want to manage the hardware and software for running computing tasks.\n- [[Knowledge/Engineering/Cloud/IaaS|IaaS]], for admins to easily provision and monitor compute resources like storage, networking, RAM, etc.\n\n![[Knowledge/Engineering/Cloud/assets/SaaS-PaaS-IaaS.png|400]]\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Cloud/Cloud-Provider":{"title":"Cloud Provider","content":"\n**Cloud providers** are just companies who have set up this big network of remote computers and give you reasonable prices for running computing tasks on their computers. For lone developers or huge enterprises, it's almost always more cost-efficient and reliable to serve a web application on the cloud, for example, rather than acquiring and administrating the hardware resources themselves.\n\nCloud providers are able to give you reasonable prices because they leverage *economies of scale*, where the larger a company's production gets, the lower the average cost of producing their goods/services, in general.\n\nThe main cloud providers are AWS, Azure and GCP. There are also other cloud providers like DigitalOcean, Linode, Vultr, etc. but they aren't considered nearly as mature as the 'big 3' previously mentioned because they don't provide nearly as many services.\n\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Cloud/FaaS":{"title":"FaaS","content":"\n*FaaS* (functions as-a-service) is a class of [[Knowledge/Engineering/Cloud/Cloud Computing|cloud computing]] services which let you run a bit of code on a server somewhere in response to events or HTTP requests. The pay-as-you-go pricing is great when you don't want or need a [[Knowledge/Engineering/DevOps/Virtual Machines|VM]] running 24/7 that only occasionally needs to execute some routine. Cloud vendors like AWS or Google Cloud provide *FaaS* platforms like AWS Lambda and [[Knowledge/Engineering/Technologies/Google Cloud#Cloud Run|Cloud Run]] which can execute your code in response to events.\n\n![[Knowledge/Engineering/Cloud/assets/faas.png|800]]\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Cloud/IaaS":{"title":"IaaS","content":"\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Cloud/PaaS":{"title":"PaaS","content":"\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Cloud/SaaS":{"title":"SaaS","content":"\n# SaaS\n\n\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Cloud/Scaling":{"title":"Scaling","content":"\n","lastmodified":"2022-10-14T06:51:53.88687653Z","tags":null},"/Knowledge/Engineering/Cloud/aws/Availability-Zone":{"title":"Availability Zone","content":"\n### Availability Zones\n*Availability zones* (AZz) are basically just one or multiple physical [[Knowledge/Engineering/Cloud/aws/Data Center|data centers]] in a [[Knowledge/Engineering/Cloud/aws/Region|region]].\n- Availability zones \n\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Cloud/aws/CloudFront":{"title":"CloudFront","content":"\nAWS CloudFront is a [[Knowledge/Engineering/Cloud/CDNs|CDN]] service to help you serve cached static and dynamic content to users with minimal latency. It's great because you can trust in its very high availability, and it also handles things like DDoS attacks and other network attacks well.","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Cloud/aws/Data-Center":{"title":"Data Center","content":"\n![[Knowledge/Engineering/Cloud/aws/assets/Data center.png]]\nData centers are very large physical buildings that are dedicated to housing the computers that form the [[Knowledge/Engineering/Cloud/Cloud Computing|cloud]].\n- A data center's location is strategically chosen based on proximity to users (so as to minimise *round-trip times*, and therefore latency), proximity to workers, availability of land and electrical infrastructure, low natural disaster risks, and so on.\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Cloud/aws/Edge-Location":{"title":"Edge Location","content":"\n*AWS edge locations* are [[Knowledge/Engineering/Cloud/aws/Data Center|data centers]] owned by trusted 3rd party, called an *AWS Partner*, that uses [[Knowledge/Engineering/Cloud/aws/CloudFront|CloudFront]]. Together, the edge locations form the *edge network* between AWS and end users.\n\nWhen a user makes a network request to one of your services, the request goes to the edge location that has the lowest latency to reach. From there, cached content might be served back, or the edge location forwards the request to the *origin server* (which might be an S3 bucket, for example). This reduces the total **number of hops** between routers that a network request would otherwise need to go through in order to reach your service.\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Cloud/aws/Region":{"title":"Region","content":"\n### Regions\nA *region* is literally a geographic region which contains 1 or more [[Knowledge/Engineering/Cloud/aws/Availability Zone|availability zones]]. AWS ensures that there are a minimum of 2 AZs in every region.\n\n![[Knowledge/Engineering/Cloud/aws/assets/Region availability zone.png|500]]\n\nAWS has around 26 regions and 84 availability zones distributed across the world.\n- Regions typically have names like `us-east-1`, `us-east-2`, `ap-southeast-2` (Asia Pacific, Sydney), and so on. \n- Availability zones typically have names post-fixed with a character like `us-east-1a` and `us-east-1b`.\n\n![[Knowledge/Engineering/Cloud/aws/assets/AWS availability zone map.png|500]]\n\nNot all regions are equivalent. Some regions will access to services that are not available to others.\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Cloud/aws/assets/Regions":{"title":"","content":"","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Cloud/aws/assets/Untitled":{"title":"","content":"","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Cybersecurity/Certificate-Authority":{"title":"Certificate Authority","content":"\n\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Cybersecurity/SSL-and-TLS":{"title":"SSL","content":"\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Databases/ACID":{"title":"ACID","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Databases/NoSQL":{"title":"NoSQL","content":"\n\u003e In this set of notes, we only consider *document-oriented* databases such as MongoDB and [[Knowledge/Engineering/Technologies/Firebase|Firebase]]. There are also other types of NoSQL databases such as graph databases (like [Neo4j](https://neo4j.com/)) and simple key-value stores like [Redis](https://redis.io/) or [Memcached](https://memcached.org/).\n\n*NoSQL* (\"**n**ot **o**nly SQL\") databases are those that ditch the idea of defining data using relational theory involving tables, rows and columns and linking them together.\n\n**Why NoSQL over relational databases?**\nThe main two reasons are *flexibility* and *easier scaling*:\n1. NoSQL uses flexible data models that are easier to modify in response to changes in business requirements or the query patterns of the users compared to relational databases.\n2. Database servers are easier to scale horizontally through [[Knowledge/Engineering/Databases/Sharding|database sharding]]. It's challenging to shard relational databases.\n\n## Data Modeling\nAlthough non-relational databases don't have tables, rows and columns, and are often chosen in anticipation of changes to the data model, you still need to have a concrete idea of what the data model/schemas for your application look like. \n\n### Don't Nest Deeply\n*Don't nest deeply* is a usual best practice for designing document schemas.\n\nWhen you fetch a document or part of a document, *you fetch everything inside it*. In the case of managed databases like Firebase realtime db, the permissions applied to a document or a part of it also apply to the children. When your data actually belongs together all or most of the time, it's okay and encouraged to nest them to avoid having to do multiple queries. When this is not the case, you overfetch data. In fact, managed DBs might enforce a limit on document size (1MiB for Firebase).\n```json\n{\n  \"users\": {\n    \"Andrew\": {\n      \"email\": \"...\"\n      \"blogs\": {\n        \"Why I love C\": {...},\n        \"Why I hate JavaScript\": {...},\n        // ... and so on. This could be a huge list of blogs and all their contents!\n      }\n    }\n  }\n}\n```\nIf you fetched `Andrew`, you'd also fetch all his blogs regardless of whether you needed them to render your UI or not. To improve this model, see [[Knowledge/Engineering/Databases/NoSQL#Normalisation vs. Denormalisation|normalisation/denormalisation]].\n\n### Normalisation vs. Denormalisation\nSee [[Knowledge/Engineering/Databases/Normalisation|normalisation]]. *Denormalisation* is duplicating data to simplify queries. It's encouraged by [Firebase](https://www.youtube.com/watch?v=vKqXSZLLnHA\u0026ab_channel=Firebase) when you want to improve read performance.\n\nWhen you want to avoid nesting deeply, aim to **flatten** your data structures by extracting out nested JSON sub-structures in your document schema to separate collections, then linking them together through IDs or other fields. Doing this means that those two collections can be fetched independently, which improves read performance and query simplicity.\n```json\n{\n  \"users\": {\n    \"Andrew\": {\n      \"email\": \"...\"\n      // References to data elsewhere.\n      \"blogs\": [          \n        \"Why I love C\",\n        \"Why I hate JavaScript\",\n        // ...\n      ]\n    }\n  },\n  \"blogs\": {\n      \"Why I love C\": {...},\n      \"Why I hate JavaScript\": {...},\n      // ...\n  }\n}\n```\n\nWhen you flatten data structures however, you inevitably increase *data duplication* or *redundancy* where the same data appears in multiple locations in the database. This is very common and often unavoidable in non-relational databases. \n\nGenerally, when denormalising, you are **improving read performance at the cost of write performance** because it takes extra work to propagate updates to maintain [[Knowledge/Engineering/Databases/ACID|database consistency]] and correct stale data. The act of propagating updates to maintain consistency is called '*multi-path updates*' which helps to correct stale data/references or remove *orphaned references* (also called *dangling references*) which are references to deleted documents still held by other documents.\n\nYou must balance your usage of both normalisation and denormalisation. When deciding whether to nest or not to nest, you must think about your business requirements:\n- In displaying your UI, would flattening your document schema minimise frequent over-fetching of data? Or would nesting make more sense because the data is tightly coupled together and therefore should be fetched in one query?\n- How often users will need to perform a certain read query? If the answer is *very frequently*, then prefer denormalising.\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Databases/Normalisation":{"title":"Normalisation","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Databases/Sharding":{"title":"Sharding","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Design-Patterns/Builder-Pattern":{"title":"Builder Pattern","content":"\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Design-Patterns/Factory-Pattern":{"title":"Factory Pattern","content":"\nThe *Factory* pattern aims to give you a way to make objects... TODO.\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/DevOps/CI":{"title":"CI","content":"\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/DevOps/Containers":{"title":"Containers","content":"\nA *container* is a ***process* running in its own *isolated [[Knowledge/Engineering/Operating Systems/User Space and Kernel Space|user space]]***, that runs an app within. It contains everything required to run the app, which is basically the app's source code and all its dependencies.\n- You can have multiple containers running on the same machine, and they will share the same host operating system services and resources.\n- Containers are defined by a manifest file, which details everything necessary to get your app running within it. In [[Knowledge/Engineering/Technologies/Docker|Docker's]] case, that manifest file is the *Dockerfile*.\n- The best thing about containers, as developers using a containerisation technology like [[Knowledge/Engineering/Technologies/Docker|Docker]], is that it gives you a lot of confidence that your app will work exactly the same, regardless of what environment it's running in.\n\nRunning in an 'isolated' user space means that the container believes itself to be the only process running on the machine and has its own concept of CPU, memory, filesystem, network, etc., much like a [[Knowledge/Engineering/DevOps/Virtual Machines|virtual machine]]. Everything else, like what other processes are running on the machine, are not visible from within the container (try running `ps` from a shell within a container).\nBasically, from each container's point of view, they have an entire operating system to themselves.\n\u003e [Namespaces](https://en.wikipedia.org/wiki/Linux_namespaces) and [cgroups](https://en.wikipedia.org/wiki/Cgroups) (control groups) are what enable containers able to be run in an isolated user space and have their compute resources able to be monitored and restricted.\n\nAlthough containers are considered quite light on computing resources, it'll never match the performance of running the app as a process directly.\n\n### Containers vs. Virtual Machines\nContainers are pretty much like [[Knowledge/Engineering/DevOps/Virtual Machines|system virtual machines]], but they tend to use far fewer compute resources (like CPU, memory and disk space) and are quicker to spawn, making them great for on-demand [[Knowledge/Engineering/Cloud/Scaling|scaling]]. This is they're considered substantially more 'lightweight' than virtual machines.\n\nWhen multiple containers are running on the same host OS, they're sharing the same host OS services and compute resources. When multiple virtual machines are running on the same host OS, they won't \n\nDeploying multiple VMs onto a single machine will involve creating complete guest OSs and libs for each. There is no sharing of them.\n\nThe containers running on the same machine will share the host OS's resources. Deploying more containers will not mean duplicating guest OSs. You will be able to deploy more containers on a machine than VMs.\n\nSupposing you had 3 services to be deployed, you could either spin up 3 separate VMs, each with an entire OS contained within, or you could spin up 3 containers, each sharing the same host OS kernel services. Both ways would work, but opting for containers is a much more resource-efficient and quicker deployment strategy.\n![[Knowledge/Engineering/DevOps/assets/virtual-machine-vs-containers.png|600]]\n*(Image sourced from Nick Janetakis.)*\n\nPrior to the widespread adoption of the cloud, the traditional way to deploy an app is simply to set up a physical set of computers in a server room, then run the app on those computers without any virtualisation. This method has a very expensive upfront cost, challenging to scale, and will result in poor utilisation of compute resources. That's why microservice architectures deployed onto the cloud have become the standard.\n![[Knowledge/Engineering/DevOps/assets/traditional-virtualised-container-deployments.png|800]]\n\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/DevOps/DevOps":{"title":"DevOps","content":"\nTraditionally, companies considered the *operations team* as serving an independent function to the development team. It was even outsourced entirely to optimise costs.\n\n\u003e \"In many ways, the DevOps revolution occurred when operations adopted engineering practices originally espoused by XP: automation testing, declarative single source of truth, and others.\" ‚Äî Fundamentals of Software Architecture\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/DevOps/Hypervisor":{"title":"Hypervisor","content":"\nA *hypervisor*, in most contexts, is the *software* that creates and runs [[Knowledge/Engineering/DevOps/Virtual Machines|virtual machines]]. [VMWare](https://www.vmware.com/au.html) is an example of a hypervisor that you might use for running a different OS on a personal work computer (eg. running Ubuntu on a computer whose main OS is Windows 11). AWS has its own [Nitro](https://aws.amazon.com/ec2/nitro/) hypervisor that is being used to create EC2 instances. \n\nIn [[Knowledge/Engineering/Operating Systems/Kernel|kernels]], the position of highest privilege is called the supervisor. The prefix 'hyper-' is a stronger variant of the prefix 'super-', so the hypervisor is named such because it is basically the *supervisor of supervisors*.\n\nThe computer that runs a hypervisor is called a *host machine* while the virtual machines within are call *guest machines*. Hypervisors handle resource allocation to guests VMs, eg. it handles CPU scheduling among other things.\n\n![[Knowledge/Engineering/DevOps/assets/hypervisor.png|500]]\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/DevOps/VPC":{"title":"VPC","content":"\nVirtual private cloud.\nTODO.\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/DevOps/Virtual-Machines":{"title":"Virtual Machines","content":"\n## System Virtual Machine\n\n\u003e \"A 'virtual machine' was originally defined by¬†Popek and Goldberg¬†as 'an efficient, isolated duplicate of a real computer machine.''\"\n\nA *virtual machine* (VM) is a computer system that is created by software. It is meant to function indistinguishably from an actual discrete physical computer system would, meaning that a virtual machine has its own concept of what CPU it has, memory capacity, network interface, storage and so on.\n- A single physical computer can run multiple VMs.\n- Virtual machines are created and managed by [[Knowledge/Engineering/DevOps/Hypervisor|hypervisors]].\n- VMs are literally *just files*, called *images*, stored on the host machine.\n\nWhere virtual machines are used:\n- They make up a huge part of [[Knowledge/Engineering/Cloud/Cloud Computing|the cloud]].\n- Running [[Knowledge/Engineering/DevOps/CI|CI]] tasks, production web servers, and many cloud services.\n- When you need a Linux environment for your personal work computer, which unfortunately is using Windows ü§¢. You might need this to run apps that you otherwise couldn‚Äôt.\n- Malware testing and reverse engineering. You can take advantage of the isolation of the VM to execute malware and observe how it works. This is not foolproof, some sophisticated malware can detect that it‚Äôs in a VM!\n\n### VM Architecture\nA single physical computer can run multiple VMs. This is how its set up in the servers that make up the cloud:\n\n![[Knowledge/Engineering/DevOps/assets/hosted-virtual-machine-architecture.png|400]]\n\n## Process Virtual Machine\nIn most contexts, the usage of the term 'virtual machines' actually refers to the *system virtual machines* described above. Otherwise, it describes *process virtual machines* which is quite different.\n\nA *process virtual machine* is the software that is used to provide a platform-independent environment to execute a program.\n\nThe *JVM, Java Virtual Machine*, is an example of a process virtual machine. It is just a regular process on the computer, and its job is simply to execute Java bytecode.\n","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/DevOps/assets":{"title":"","content":"","lastmodified":"2022-10-14T06:51:53.890876821Z","tags":null},"/Knowledge/Engineering/Full-Stack/SPAs":{"title":"SPAs","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.894877111Z","tags":null},"/Knowledge/Engineering/Full-Stack/Server-Side-Rendering":{"title":"Server-Side Rendering","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.894877111Z","tags":null},"/Knowledge/Engineering/Full-Stack/State-Management":{"title":"State Management","content":"\n*State*, in this context, is just the read/write data that a UI project like a React app needs. State management is about avoiding making a mess of this data when you have a complex component hierarchy with some distantly related components that need to read/modify the same part of state.\n\nSuppose you have an app whose component hierarchy looks like this:\n![[Knowledge/Engineering/Technologies/assets/example-app-hierarchy.png|400]]\nWithout a state management framework, if you wanted to make it so that the `AddBlogBtn` adds a new blog that is then rendered in `BlogList`, you'd have to bubble up the event up to a common ancestor of `AddBlogBtn` and `BlogList` and then have new props be passed down to `BlogList`.\n\n![[Knowledge/Engineering/Technologies/assets/example-app-without-state-management.png|400]]\n\nIn this example, it's not so bad, but when the component hierarchy is much larger (which it often is in practice), then the 'sharing' and manipulation of common state between very distant relatives in the component tree quickly becomes complex because you'd have to pass data through many layers, across components that don't actually need that data, just to get that data to the component that needs it which is further down in the tree. This problem is called ['prop drilling'](https://kentcdodds.com/blog/prop-drilling). This is a very common problem in UI projects and so there exists many different strategies for avoiding this, each with their own tradeoffs to consider (which usually include short-term productivity vs. long-term productivity, elegance vs. comprehensiveness, etc.).\n\nBroadly, those strategies are:\n- Flux (eg. through [Vuex](https://vuex.vuejs.org/)).\n- [[Knowledge/Engineering/Technologies/Redux|Redux]] (eg. through [React Redux](https://react-redux.js.org/)).\n- [React Context](https://reactjs.org/docs/context.html).\n\nRedux, for example, centralises the app's state by extracting out all the main parts of state into a global 'store' and allows all components, regardless of where they are in the hierarchy, to read/write to that store. Any updates to the shared global state made by one component are immediately 'received' by other components dependent on the part of the global state that was updated.\n![[Knowledge/Engineering/Full-Stack/assets/redux-example.png|400]]\n\n\n","lastmodified":"2022-10-14T06:51:53.894877111Z","tags":null},"/Knowledge/Engineering/Full-Stack/Static-Site-Generation":{"title":"Static Site Generation","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.894877111Z","tags":null},"/Knowledge/Engineering/Full-Stack/Tree-Shaking":{"title":"Tree Shaking","content":"\n","lastmodified":"2022-10-14T06:51:53.894877111Z","tags":null},"/Knowledge/Engineering/Full-Stack/UI-Design":{"title":"UI Design","content":"\nSee https://tymz.notion.site/UI-UX-7fb9a728bfc946fcbe92ff640b371a2d.\n\nSee [[Knowledge/Engineering/Full-Stack/UI Inspiration|UI inspiration]].\n\n---\n## Note for Developers\nDesign is not fundamentally about making things pretty. The prettiness of a thing you design is often a side effect of making it usable, accessible, learnable and delightful to use. This makes design problems *engineering problems*.\n\u003e \"Most people make the mistake of thinking design is what it looks like, people think it's this veneer ‚Äî that the designers are handed this box and told, 'Make it look good!' That's not what we think design is. It's not just what it looks like and feels like. **Design is how it works**.\" ‚Äî *Steve Jobs*.\n\n**Always prototype designs before you code**. Never design from your code. Use a tool like [[Knowledge/Engineering/Technologies/Figma|Figma]], Photoshop, Illustrator, or just pen and paper.\n\n## Aesthetic-Usability Effect\nThe *aesthetic-usability effect* is a phenomenon where humans perceive more aesthetic designs as more intuitive/easier to use than those considered to be less aesthetically pleasing (even if it is *not* easier to use).\n\nThis is a well-studied phenomenon, not just a claim about human behaviour. If you focus on designing a product focusing heavily on usability, it will inevitably be seen as aesthetic. Conversely, if you polish your visuals, it will be seen as more usable and users will be more tolerant of poor usability.\n\nThis is related to the [Halo effect](https://en.wikipedia.org/wiki/Halo_effect).\n\n## Gestalt Principles\n[Gestalt theory](https://en.wikipedia.org/wiki/Gestalt_psychology) asserts that the human brain always seeks to group components and identify structures and patterns. Some useful practical principles from Gestalt theory:\n- *Similarity*. Group similar things together and the user will perceive them as similar without thought.\n- *Proximity*. Similar things are put closer together. Your UI should arrange things similar in purpose in close proximity and keep them far from things different in purpose.\n![[Knowledge/Engineering/Full-Stack/assets/gestalt-proximity-similarity.png|250]]\n(*[source](https://jackwestin.com/resources/mcat-content/perception/gestalt-principles)*)\n\n## Spacing\n**Negative spacing** is a useful weapon against visual noise. It helps the read scan for what they need. Consider using:\n- Larger padding and margin.\n- Larger line spacing and letter spacing.\n\n## Typography\n\u003e **Typography makes a huge difference**. Invest time in picking one that best expresses your frontend's 'personality'.\n\n**Font pairing** is a common practice where you pick two (or more) fonts that contrast with each other. For some reason, this looks better:\n![[Knowledge/Engineering/Full-Stack/assets/font-pairing.png|500]]\nUse generators online or [handpicked font pairings](https://www.fontpair.co/) rather than sticking to one font.\n\n## Colour\nFigma recommends to use black, white, one primary colour, one secondary and tones of each. Note that:\n- Tint ‚Äî the addition of white to a colour.\n- Shade ‚Äî the addition of black to a colour.\n- Tone ‚Äî the addition of grey to a colour (ie. tinting and shading).\n","lastmodified":"2022-10-14T06:51:53.894877111Z","tags":null},"/Knowledge/Engineering/Full-Stack/UI-Inspiration":{"title":"UI Inspiration","content":"\n## UI Elements\n### Top Navbar\nThings I like:\n- Lower contrast between navbar and the rest of the page.\n- When the navbar is seamlessly connected with the header/hero section.\n- When the navbar lifts off the screen as you scroll.\n\n|                                                                                                                                                   |                                                                                                                                                              |\n| ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| ![[Knowledge/Engineering/Full-Stack/assets/obsidian-topnav.png]] ([source](https://obsidian.md/))                                                 | ![[Knowledge/Engineering/Full-Stack/assets/topnav-light.png]] ([source](https://dribbble.com/shots/17722418-Top-Navigation-SaasBox))                         |\n| ![[Knowledge/Engineering/Full-Stack/assets/zeus-ui.png]] ([source](https://dribbble.com/shots/18363665-Navigation-bar-with-menu-Zeus-Web-UI-Kit)) | ![[Knowledge/Engineering/Full-Stack/assets/Pasted image 20220926091247.png]] ([source](https://dribbble.com/shots/14478136-Plants-boutique-website-concept)) |\n| ![[Knowledge/Engineering/Full-Stack/assets/mailtrap.png]] ([source](https://dribbble.com/shots/6251320-Mailtrap-Landing-Top-Sections-Design-1st-version))                                                                                                                                                  |    ![[Knowledge/Engineering/Full-Stack/assets/visage.png]] ([source](https://speckyboy.com/wp-content/uploads/2014/04/fixed_navigation_menu_04.jpg))                                                                                                                                                          |\n\n### Side Nav\nThings I like:\n- Highlighting the currently active item in the sidebar.\n- Subtle SVG icon animation.\n- Collapsible.\n- Minimal, but can access all the things you need to access and know where everything is without thinking.\n\n|     |      |\n| --- | --- |\n|![[Knowledge/Engineering/Full-Stack/assets/hr-dashboard-design.png\\|200]] ([source](https://dribbble.com/shots/17350060-HR-Dashboard-design))     | ![[Knowledge/Engineering/Full-Stack/assets/dark-mode-sidebar-navigation.png\\|600]] ([source](https://dribbble.com/shots/18369866-Dark-mode-sidebar-navigation-Untitled-UI))    |\n| ![[Knowledge/Engineering/Full-Stack/assets/light-sidenav.png\\|200]] ([source](https://dribbble.com/shots/16252715-Sidebar-navigation/attachments/8118635?mode=media))     | ![[Knowledge/Engineering/Full-Stack/assets/dark-sidenav.png\\|400]] ([source](https://dribbble.com/shots/15827363-Sidebar-Navigation-Dark))    |\n\n### Login\n\n|                                                                                                                                                                                                 |                                                                                                                                                                                            |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| ![[Knowledge/Engineering/Full-Stack/assets/mobile-login-1.png\\|200]] ([source](https://dribbble.com/shots/15889044-Login-Register-Mobile-App))                                                  | ![[Knowledge/Engineering/Full-Stack/assets/mobile-login-2.png\\|200]] ([source](https://dribbble.com/shots/15889044-Login-Register-Mobile-App))                                             |\n| ![[Knowledge/Engineering/Full-Stack/assets/stylish-login-page-1.png\\|500]] ([source](https://dribbble.com/shots/16029811-AUTH-Login-Register-screen-for-Phylum/attachments/7872310?mode=media)) | ![[Knowledge/Engineering/Full-Stack/assets/stylish-login-page-2.png\\|500]] ([source](https://dribbble.com/shots/16029811-AUTH-Login-Register-screen-for-Phylum/attachments/7872309?mode=media)) |\n| ![[Knowledge/Engineering/Full-Stack/assets/stylish-login-page-4.png\\|500]] ([source](https://dribbble.com/shots/16753965-Login-Sign-up-Dark-Mode-AW-Universal-Page))                            | ![[Knowledge/Engineering/Full-Stack/assets/stylish-mobile-login-1.png\\|200]] ([source](https://dribbble.com/shots/7861676-Sign-in-Sign-up-UI))                                                  |\n| ![[Knowledge/Engineering/Full-Stack/assets/stylish-login-page-5.png\\|500]] ([source](https://dribbble.com/shots/16705889-Login-Sign-up-AW-Universal-Page))                                                                                                                                                                                               |  ![[Knowledge/Engineering/Full-Stack/assets/stylish-login-page-6.png\\|500]] ([source](https://dribbble.com/shots/10009224-Daily-UI-001-Linked-Spaces-Sign-up))                                                                                                                                                                                           |\n\n### Modals\n\n|     |      |\n| --- | --- |\n| ![[Knowledge/Engineering/Full-Stack/assets/dark-modals.png\\|500]] ([source](https://dribbble.com/shots/16838613-Dark-Light-UI-for-Cards-Components))     | ![[Knowledge/Engineering/Full-Stack/assets/light-modals.png\\|500]] ([source](https://dribbble.com/shots/16838613-Dark-Light-UI-for-Cards-Components))    |\n|  ![[Knowledge/Engineering/Full-Stack/assets/modal-with-curves.png\\|400]] ([source](https://dribbble.com/shots/7037565-Register-Illustration))     |  ![[Knowledge/Engineering/Full-Stack/assets/complex-modal-with-forms.png\\|400]] ([source](https://dribbble.com/shots/15544255-Modals-collection))    |\n|  ![[Knowledge/Engineering/Full-Stack/assets/complex-modal-dark.png\\|400]] ([source](https://dribbble.com/shots/15169672-VSX-Share-Modal))     |  ![[Knowledge/Engineering/Full-Stack/assets/stylish-simple-modal.png]] ([source](https://dribbble.com/shots/16083490-Pop-Up-Overlay))    |\n| ![[Knowledge/Engineering/Full-Stack/assets/stylish-simple-modal-cactus.png\\|400]]  ([source](https://dribbble.com/shots/13878518-Daily-UI-016-Pop-up-Overlay))     |  ![[Knowledge/Engineering/Full-Stack/assets/bug-report-modal.png\\|400]] ([source](https://dribbble.com/shots/13024008-Report-Problem-Modal-UI-Design/attachments/4625329?mode=media))    |\n\n## Tools\n- [Shape Divider](https://www.shapedivider.app/) for curvy SVGs.\n- [Haikei](https://app.haikei.app/) for beautiful SVG wallpapers.\n\n## Beautiful Websites\n- [Obsidian.md](https://obsidian.md/)\n- [Space Engine](https://spaceengine.org/)\n\n### Portfolios and Blogs\n-  [Kent C. Dodds](https://kentcdodds.com/about#about-me).\n-  [Brittany Chiang](https://brittanychiang.com/)\n- [Caferati](https://caferati.me)\n-   [Kuon Yagi](https://kuon.space/)\n- [Jack](https://jacekjeznach.com/)\n- [Cory Hughart](https://coryhughart.com/)\n- [Robb Owen](https://robbowen.digital/)\n- [Josue Espinosa](https://ejosue.com/)\n- [Kyle Ledbetter](https://kyleledbetter.com/)\n- [Simon Evans](https://sii.im/#!/)\n- [Amelia Wattenberger](https://wattenberger.com/)\n- [Julia Johnson](https://www.juliacodes.com/)\n- [Craig Roush](https://craig-roush-portfolio-template.webflow.io/)\n- [Basil](https://gbasil.dev/)\n- [CSESoc](https://media.csesoc.org.au/tag/articles/)\n- [Rayanfam](https://rayanfam.com/topics/hypervisor-from-scratch-part-1/)\n- [Josh Comeau](https://www.joshwcomeau.com/blog/how-i-built-my-blog/)\n\n","lastmodified":"2022-10-14T06:51:53.894877111Z","tags":null},"/Knowledge/Engineering/Graphics/SVGs":{"title":"SVGs","content":"\nSVG (*scalable vector graphics*) is an image format that defines images using vectors in XML on a cartesian plane rather than pixels, like PNG or JPEG, which we call *bitmapped* or *raster* image formats.\n\nSome advantages SVGs have over other image formats:\n- Retains image quality at any zoom level, unlike .png files. This is the main advantage.\n- For simple SVGs, it's easy to modify the image by tweaking the source code (which is just XML, usually).\n- They are sometimes more performant if the image is not visually complex. For example, they're great for displaying icons on webpages.\n- You can manipulate SVGs elements on a webpage with JavaScript and apply CSS styles to them, like regular HTML elements.\n\n![[Knowledge/Engineering/Graphics/assets/raster-vs-vector.png|400]]\n\nYou can define any image using vectors or pixels, however which choice is better depends on how you expect to use the image. \n- For logos, SVGs are better.\n- For diagrams, charts, figures, SVGs are better.\n- For images with 'clean lines' and simple shapes, SVGs are probably better.\n- For photographs, wallpapers and other images composed of very complex visuals, then SVGs aren't ideal because they'll be huge in size. \n\n## Drawing SVGs\nIt's hard to create SVGs by manually writing the XML code for the individual vectors that comprise an image. Instead, you should be using tools like Figma, Illustrator, Photoshop, etc. and you can also use some of these tools to convert between SVG and raster image formats. You can even use javascript libraries like [[Knowledge/Engineering/Technologies/D3|D3.js]] to create SVGs.\n\n## SVG Elements\nJust as HTML provides elements like `\u003cp\u003e`, `\u003cdiv\u003e`, `\u003ctable\u003e` for describing documents, SVG provides elements like `\u003cg\u003e`, `\u003ccircle\u003e`, `\u003cline\u003e` for defining images.\n\nThere are lot of SVG elements. See this [full reference on MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Element).\n\n### Important Details\n- In XML, you should specify the `xmlns` attribute which sets the XML namespace. Doing this is to [prevent name collisions](https://stackoverflow.com/questions/1181888/what-does-xmlns-in-xml-mean) where, for example, `\u003cg\u003e` might appear in a context outside of the SVG definition. Specifying the namespace removes the ambiguity about what `\u003cg\u003e` and other SVG elements are meant to do.\n- Element ordering matters, just like in HTML. Elements defined later are rendered on top of previous elements.\n- Basic styling of SVG elements can be done with the `fill`, `fill-*` and `stroke`, `stroke-*` attributes.\n\n### \\\u003csvg\\\u003e\n`\u003csvg\u003e` is the root element of an image, just like how `\u003chtml\u003e` is the root element of a document. You must always bind the `xmlns` to a namespace URI, eg. `\u003csvg xmlns=\"http://www.23.org/2000/svg\"\u003e`.\n\nUsing this element, we define the coordinate system:\n![[Knowledge/Engineering/Graphics/assets/svg-coordinate-system.png|220]]\n**Attributes**:\n- `width` and `height` of the SVG container on an HTML document.\n- `viewBox` defines the portion of the SVG 'canvas' to display.\n\n### \\\u003cg\\\u003e\n`\u003cg\u003e` doesn't draw anything, it just groups together other basic shapes. The point of doing this is to be able to apply transformations to a whole group of elements, and set attributes like `fill` that should be inherited by all of its children.\n\n### \\\u003crect\\\u003e\n- `x` and `y` set the coordinate of where the top left corner of the rectangle sits.\n- `width` and `height` set the dimensions.\n- `rx` and `ry` set the horizontal and vertical border radii.\n\n### \\\u003ccircle\\\u003e, \\\u003cellipse\\\u003e\n- `cx`, `cy` set the center coordinates.\n- `r` sets the radius\n- `rx`, `ry` set the x and y radius for an ellipse.\n\n### \\\u003cline\\\u003e\nLines are defined based on a starting coordinate $(x_{1}, y_1)$ and ending coordinate $(x_{2},y_2)$.\n\n**Attributes**:\n- `x1`, `y1`\n- `x2`, `y2`\n\n### \\\u003cpath\\\u003e\nPath elements can draw any shape, including the default ones like rect, circle, line, etc. You define them by specifying the `d` (data) attribute, which is a sequence of commands.\n\n**[Path commands](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#path_commands)**:\n- **Move-to**:\n    - `M 3 5` ‚Äî moves from to the absolute coordinate $(3, 5)$.\n    - `m 3 5` ‚Äî moves 3 units right and 5 units down relative to the current coordinate.\n- **Line-to**:\n    - `H 10` ‚Äî draws a horizontal line from the current point until `x=10` on the coordinate system.\n    - `V 10` ‚Äî draws a vertical line from the current point until `y=10` on the coordinate system.\n- **Closing the path**:\n    - `Z` ‚Äî this just draws a line back to the initial point, closing the path. This is usually used as the last command.\n- **Quadratic B√©zier**. You define them with a starting point, a control point and an ending point. The starting point is simply where the current coordinate is, so you don't have to specify it.\n    - $\\texttt{Q }x_c,y_{c}\\texttt{  }x_2,y_2$\n    ![[Knowledge/Engineering/Graphics/assets/quadratic-bezier.gif|300]]\n- **Cubic B√©zier**. They're like quadratic bezier curves, but with another control point.\n    - $\\texttt{C }x_{c1},y_{c2}\\texttt{  }x_{c2},y_{c2}\\texttt{  }x_2,y_2$\n    ![[Knowledge/Engineering/Graphics/assets/cubic-bezier.gif|300]]\n- **Arc**. These are just the sections of circles or ellipses. See [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths#arcs).\n\n### \\\u003cpolygon\\\u003e\nPolygons are all n-sided shapes. You define them by simply specifying a list of points.\n- `points` ‚Äî a list of coordinate points. A list of coordinates $(0, 1), (2, 5), (3, 2)$ looks like `\u003cpolygon points=\"0, 1 2, 5 3, 2\"`.\n\n### \\\u003ctext\\\u003e\nYou can also add text to any SVG. You control its location with `x` and `y` attributes, and just like for regular HTML text, you can apply CSS style rules like `font-family`, `font-weight`, etc.\n\nAdditional attributes specific to `\u003ctext\u003e` include:\n- [`text-anchor`](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-anchor)\n- [`alignment-baseline`](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/alignment-baseline)\n\n\n","lastmodified":"2022-10-14T06:51:53.930879724Z","tags":null},"/Knowledge/Engineering/Languages/C":{"title":"C","content":"\n\n### Spiral Rule\nSee [the Clockwise/Spiral Rule](https://c-faq.com/decl/spiral.anderson.html).\nTODO.\n","lastmodified":"2022-10-14T06:51:53.930879724Z","tags":null},"/Knowledge/Engineering/Languages/C++":{"title":"C++","content":"\n![[Knowledge/Engineering/Languages/assets/cpp-wallpaper.png|800]]\n\nC++ is a [[Knowledge/Engineering/Programming/Type System#Static Typing|statically-typed]], low-level programming language that supports [[Knowledge/Engineering/Programming/Object Oriented Programming|object-oriented programming]]. It's frequently used in any software system that requires resource efficiency such as operating systems, game engines, databases, compilers, etc.\n\nC/C++'s high performance is attributed to how closely it's constructs and operations match the hardware.\n\nThe **[ISO C++ standard](https://isocpp.org/std/%20the-standard)** defines:\n- Core language features ‚Äî data types, loops, etc.\n- Standard library components ‚Äî `vector`, `map`, `string`, etc.\n\nAlso see [[Knowledge/Engineering/Languages/C++ Standard Library|C++ standard library]].\n\n# Core\n## Variable Initialisation\nThere are many ways to initialise a variable with a value.\n1. **Copy initialisation**: using `=`. It implicitly calls a constructor.\n2. **List initialisation**, also called **uniform initialisation**: using `{ }`.\n3. **Direct initialisation**: using `( )`. Think of the parentheses as being used to *directly* invoke a specific constructor.\n    ```cpp\n    int b(1);     // Direct initialisation.\n    int a{1};     // List initialisation.\n    int c = 1;    // Copy initialisation.\n    int d = {1};  // Copy/List initialisation.\n    ```\n\n\u003e Prefer uniform initialisation over copy initialisation.\n\n### Details\n- *List initialisation* does not allow *narrowing*. Try to use list initialisation `{ }` more often.\n    ```cpp\n    int i = 7.8;  // Gets floored to 7\n    int i{7.8};   // Error: narrowing conversion from 'double' to 'int'\n    ```\n- `explicit` constructors are *not invokable* with copy initialisation.\n\n## Pointers and References\nPointers and references are really the same thing under the hood, however they have different semantics to the programmer. You can consider references as syntactic sugar for pointers whose main purpose is to help you write cleaner code, compared to if you were to use pointers for the same use case.\n\n\u003e  Unlike other languages, in C++, arguments ***are always passed by value [by default](https://www.learncpp.com/cpp-tutorial/passing-arguments-by-value)*** *unless the function signature explicitly says it takes in a pointer or reference*. This means functions will **entirely copy** all the objects you pass in, unless you pass in a pointer/reference.\n\n\u003e  `*` and `\u0026` have different meanings depending on whether they appear in a type declaration (LHS) or whether they appear in an expression that is to be evaluated (RHS).\n\nIn a *type* *declaration*:\n- `*` defines a **pointer type**. `int* arr;`\n- `\u0026` defines a **reference variable**.\n    ```cpp\n    int i = 1;\n    int\u0026 ref = i;\n    ```\n\nIn an *expression*:\n- `*` is the unary **dereference** **operator** that dereferences an address to evaluate to the contents at that address.\n- `\u0026` is the unary **address-of operator** that evaluates to the address of a variable. `\u0026` always expects an [[Knowledge/Engineering/Languages/C++#L-Values and R-Values|lvalue]].\n    ```cpp\n    int i = 1;\n    \u0026i         // ‚Üí Eg. 0x7FFEF2BA1884\n    \u0026\u0026i        // ‚Üí Illegal operation. \u0026(0x7FFEF2BA1884) doesn't make sense.\n    ```\n\n### Pointers\nPointers are just memory addresses, often to the contents of an object allocated on the heap.\n```cpp\nint x = 2;\nint y = 3;\nint* p = \u0026x;\nint* q = \u0026y;\np = q;          // p now contains the memory address of y.\n```\n![illustration of pointers|590](Knowledge/Engineering/Languages/assets/pointers-illustrated.png)\n\n- `nullptr`. C++ requires that `NULL` is a constant that has value `0`. Unlike in C, `NULL` cannot be defined as `(void *)`\n    - `nullptr` therefore exists to distinguish between 0 and an *actual null* for pointer types. People would otherwise mistakenly use `NULL` and not realise it is just 0\n- **Note**: [Stroustrup prefers](https://stackoverflow.com/questions/6990726/correct-way-of-declaring-pointer-variables-in-c-c/6990753) the pointer declaration style `int* p` in C++ and `int *p` in C.\n\n### References\nYou can think of a reference variable as an alias for another variable. They don‚Äôt occupy any memory themselves, once your program is compiled and running.\n```cpp\nint x = 2;\nint y = 3;\nint\u0026 r = x;\nint\u0026 r2 = y;\nr = r2;      // Remember, you can think of references as aliases. This assignment is basically just `x = y`\n```\n![illustration of references|600](Knowledge/Engineering/Languages/assets/references-illustrated.png)\n\n- References are useful as function parameters to avoid copying the entire argument\n    ```cpp\n    void sort(vector\u003cint\u003e\u0026 sequence);    // Inplace sort\n    ```\n- Const references are useful for when you don't want to modify an argument and **just want to read its contents**. It prevents the need to make a copy of that argument for the function's scope. This is really common practice:\n    ```cpp\n    void getAverage(const vector\u003cint\u003e\u0026 sequence);\n    ```\n- References must be initialised and can‚Äôt be reassigned afterwards\n\n## Auto\nWhen specifying the data type of something as `auto`, C++ automatically infers the type.\n- Use `auto` for concision, especially when long generic types are involved.\n- It's fine to use [[Knowledge/Engineering/Languages/C++#Variables|copy initialisation]] if you use `auto` since type narrowing won't be a problem. E.g. `auto x = 1`.\n- Always assume that `auto`, by itself, will make a copy of the RHS. Use `auto\u0026` if copying is undesirable (such as when copying large vectors).\n\n## Const\nThe `const` qualifier makes it 'impossible' to assign a new value to a variable after it's initialised. There is 0 negative performance impact of enforcing `const` since it's all done at compile-time. Using const can actually allow the compiler to make optimisations.\n\n\u003e Prefer making things const by default. See [const correctness](https://isocpp.org/wiki/faq/const-correctness) for a pitch on why.\n\n- `const` and `constexpr`‚Äî immutable variables. Declaring and initialising a `const` variable will make the compiler guarantee that its value is never modified, ever.\n    ```cpp\n    const int i = 1;      \n    const auto j {2};      // You can put **const** before pretty much any variable declaration\n    \n    // With **const**, you can assign it a value that is determined during runtime.\n    // With **constexpr**, you can only assign it values known at compile-time\n    constexpr int x = 8; \n    constexpr int x = cube(2);    // Error, *unless cube is defined as a [**constexpr function**](https://www.ibm.com/docs/es/xl-c-and-cpp-aix/16.1?topic=functions-constexpr-c11)*\n    ```\n\n### Const Pointers\n```cpp\nconst int *p;               // A pointer to an immutable int.\nconst int * const q = ...;  // An immutable pointer to an immutable int. It must be initialised with a memory address.\nint * const r = ...;        // An immutable pointer to an int. It must be initisalised with a memory address.\n```\nIf this is hard to read, see the [[Knowledge/Engineering/Languages/C++#Clockwise Spiral Rule|clockwise-spiral rule]].\n\n### Const References\nTyping a variable as a const reference makes it a read-only alias. It's especially helpful for function parameters.\n\u003e Prefer typing function parameters as const references. This gives the caller confidence that what they pass in is not modified in any way.\n\nIf you don't want a function to modify a caller's argument, you have these options:\n```cpp\nvoid foo1(const std::string\u0026 s);   // Preferred approach.\nvoid foo2(const std::string* s);   // A pointer to a const also works.\nvoid foo3(std::string s);          // Since pass-by-value is the default, `s` is an independent copy of what the caller passed in.\n\n// If you want a parameter to be modifiable:\nvoid bar1(std::string\u0026 s);         // This might modify the caller's string directly.\nvoid bar1(std::string* s);         // So can this.\n```\n\nYou can't have 100% certainty that what you pass as a const reference is unchanged. See [this example from isocpp](https://isocpp.org/wiki/faq/const-correctness#return-const-ref-from-const-memfn):\n\n### Constexpr\nThe `constexpr` type specifier is like `const`, except the RHS value must be able to be determined at compile-time. \n```cpp\nconst int a = some_val;\nconstexpr int b = 42;\n```\n\n### Const Methods\nConst methods can only read `this` and never mutate anything about it. To specify a const method, the `const` qualifier *must* be placed after the parameter list.\n```cpp\nclass Foo {\npublic:\n    void inspect() const;\n};\n```\n\n\u003e What about making methods **return const values**, eg. `const Foo bar();`? [It's *mostly* pointless](https://stackoverflow.com/questions/8716330/purpose-of-returning-by-const-value). However, it is *not* pointless if you're returning a pointer or reference to something that is const.\n\n### Constexpr Functions\nConstexpr functions are those than *can* be executed at compile-time, meaning all its state and behaviour is determinable at compile-time.\n\n## Clockwise-Spiral Rule\n[Clockwise-Spiral Rule](http://c-faq.com/decl/spiral.anderson.html) is a trick for reading variable types.\n1. Start at the variable name.\n2. Follow an outwards clockwise spiral from that variable name to build up a sentence.\n\n**Example**:\n![clockwise-spiral rule example|400](Knowledge/Engineering/Languages/assets/clockwise-spiral.png)\nStarting at the name `fp`:\n1. `fp` is a pointer.\n2. `fp` is a pointer to a function (that takes in an `int` and a `float` pointer).\n3. `fp` is a pointer to a function (that takes in an `int` and a `float` pointer) that returns a pointer.\n4. `fp` is a pointer to a function (that takes in an `int` and a `float` pointer) that returns a pointer to a char.\n\nMore examples:\n```cpp\nint *myVar;                     // pointer to an int.\nint const *myVar;               // pointer to a const int.\nint * const myVar = ...;        // const pointer to an int.\nint const * const myVar = ...;  // const pointer to a const int.\n```\n\n## Static\n### Static Variables\nInside functions, static variables let you share a value across all calls to that function.\n```cpp\nvoid foo() {\n    static int a = 42;    // All calls to **foo** will see **a = 42**.\n    ...                   // If **a** changes, then all calls to **foo** will see that change too\n}\n```\n\u003e Static function variables are¬†**generally considered bad**¬†because they represent global state and are therefore much more difficult to reason about[\\*](https://stackoverflow.com/questions/7026507/why-are-static-variables-considered-evil#:~:text=Static%20variables%20are%20generally%20considered,assumptions%20of%20object%2Doriented%20programming.).\n\n## If-Statements\nIn C++, you can declare variables inside `if` statements and follow it up with a condition: `if (init; condition) { ... }`.\n```cpp\nvector\u003cint\u003e vec = { 1, 2, 3 };\n\nif (int size = vec.size()) {\n    cout \u003c\u003c \"Vector size is not 0\" \u003c\u003c endl;\n}\nif (int size = vec.size(); n \u003e 2) {\n    cout \u003c\u003c \"Vector size is \u003e 2\" \u003c\u003c endl;\n}\n```\n\n## IO\n`\u003c\u003c` ‚Äî the **'put to'** operator. In `arg1 \u003c\u003c arg2`, the `\u003c\u003c` operator takes the second argument and writes it into the first.\n```cpp\ncout \u003c\u003c \"Meaning of life: \" \u003c\u003c 42 \u003c\u003c \"\\n\";\n```\n\n`\u003e\u003e` ‚Äî the **'get from'** operator. In `arg1 \u003e\u003e arg2`, the `\u003e\u003e` operator gets a value from `arg1` and assigns it to `arg2`.\n```cpp\nint a, b;\ncin \u003e\u003e a \u003e\u003e b;\n```\n\n`std::endl` is a newline that flushes the output buffer, which means it is less performant than `\"\\n\"`.\n```cpp\ncout \u003c\u003c \"Hello\" \u003c\u003c endl;             // Adds a \"\\n\" and flushes the output buffer.\ncout \u003c\u003c \"Hello\" \u003c\u003c \"\\n\";             // Adds a \"\\n\".\ncout \u003c\u003c \"Hello\" \u003c\u003c \"\\n\" \u003c\u003c flush;    // Adds a \"\\n\" and flushes the output buffer.\n```\n\nSee [[Knowledge/Engineering/Languages/C++ Standard Library#IO|C++ Standard Library IO]] for more complex IO operations.\n\n## Arrays\nThe many ways of initialising arrays:\n```cpp\nint arr[4];                    // [?, ?, ?, ?] ‚Äì array is full of garbage values, often zeroes.\nint arr[4] = {  };             // [0, 0, 0, 0] ‚Äì all elements set to 0.\nint arr[4] = { 1, 2, 3, 4 };   // [1, 2, 3, 4].\nint arr[4] = { 1 };            // [1, 0, 0, 0] ‚Äì the rest of array is zeroed.\n\nint arr[] = { 1, 2, 3, 4 };    // Array size can be omitted if it can be inferred from RHS.\nint arr[] { 1, 2, 3, 4 };      // You can use uniform initialisation instead of copy initialisation.\n```\nThe size of the array must be able to be determined during compile-time.\n\n## L-Values and R-Values\nAn **lvalue** is a memory location that identifies an object. **Variables are lvalues**.\n\u003e In C: an *lvalue* is an expression that can appear on the LHS ***or*** RHS of an assignment.\n\nAn **rvalue** is a value stored at some memory address. Rvalues are different from lvalues in that **they cannot have a value assigned to it**, which means it can‚Äôt ever be on the LHS part of an assignment. **Literals are typically rvalues**.\n\u003e In C: an *rvalue* is an expression that can only appear on the RHS of an assignment.\n```cpp\nint i = 10;    // i is an lvalue, 10 is an rvalue.\nint j = i * 2  // i * 2 is an rvalue.\n2 = i;         // error: expression must be a modifiable lvalue.\n```\n\n- Rvalues are important because they **enable move semantics** in C++. There are many instances in C++ code where it‚Äôs not necessary to copy a value or object from one place to another. E.g. when passing arguments into a function or when saving the returned value on the caller‚Äôs side. Implementing move semantics, where appropriate, is great for performance because it prevents expensive copies.\n\n### L-value and R-value References\nAn **lvalue reference** uses a single ampersand `\u0026`, eg. `string\u0026 s = \"...\"`\n- Const lvalue reference types (eg. `const string\u0026 s`) as a function parameter allow the caller to **pass both an l-value or r-value, equivalently**.\n\nAn **rvalue reference** uses double ampersand `\u0026\u0026`, eg. `string\u0026\u0026 s`. You‚Äôd use this to receive rvalues in functions, like literals and temporary objects. Doing this means you can avoid unnecessarily copying a value that is a ‚Äòthrowaway‚Äô on the caller‚Äôs side.\n- You can define a *move constructor* and *move assignment operator* that take in an rvalue reference instead of a const lvalue reference. It‚Äôll behave the same way, but it won‚Äôt guarantee the source to be unchanged.\n\n```cpp\n// Takes in an l-value reference which forces the caller to pass in variables.\nvoid **GreetLvalue**(string \u0026name) {    \n  cout \u003c\u003c name \u003c\u003c endl;\n}\n\n// Takes in an r-value reference which forces the caller to pass in literals \n// or temporary objects.\nvoid **GreetRvalue**(string \u0026\u0026name) {   \n  cout \u003c\u003c name \u003c\u003c endl;             \n}\n\n// Const references let the caller pass both lvalues and rvalues alike\nvoid **Greet**(const string \u0026name) {    \n  cout \u003c\u003c name \u003c\u003c endl;             // Note: `const string \u0026` will create a temporary variable behind the\n}                                   // scenes and then assign it to `name`. This is why you can pass both\n                                    // lvalues and rvalues to a const l-value reference like this.\nint main() {\n  string myName = \"Tim\";\n  GreetLvalue(myName);     // ‚úì\n  GreetLvalue(\"Andrew\");   // Error: cannot bind **non-const lvalue reference**\n\n  GreetRvalue(myName);     // Error: cannot bind **rvalue reference**\n  GreetRvalue(\"Andrew\");   // ‚úì\n\n  Greet(myName);           // ‚úì\n  Greet(\"Andrew\");         // ‚úì\n}\n```\n\n## Standard Library\nSee [[Knowledge/Engineering/Languages/C++ Standard Library|C++ Standard Library]].\n\n---\n# Old Notes\n\n\u003e TODO: This is a huge mess that I'll slowly clean up...\n### Others:\n- `new` operator ‚Äî for instantiating classes and creating arrays.\n    The `new` operator denotes a request for memory allocation on the heap. If the request can be granted, then it'll evaluate to the memory address of the newly allocated memory and then the constructor will be called.\n    An object allocated for on the heap will need to be explicitly freed with C++'s `delete` keyword.\n    ```cpp\n    class Human {\n        public:\n            Human() {\n                cout \u003c\u003c \"Constructor has been called\" \u003c\u003c endl;\n            }\n    };\n    \n    int main() {\n    \t\t// **Creating an object** whose memory will be allocated on the heap\n        Human* me = new Human();\n        delete me;\n    \n    \t\t// Creating an array whose memory will be allocated on the heap\n    \t\tint* A = new int[3];\n    \t\tdelete A;\n    \n    \t\tint B[3];             // This array will have its memory allocated on the stack, so no **delete** operation is necessary\n    \t\t\n    }\n    ```\n    - Being allocated on the heap means that it is independent of the scope that it was created in and that it'll persist until it is explictly destroyed or until the program ends\n    - You should [always prefer stack allocations](https://stackoverflow.com/questions/333443/c-object-instantiation) rather than heap allocations\n        - This helps avoid memory leaks because when the variable is allocated for in the stack, its *destructor* is automatically called when leaving its scope\n    - The user of your class should never have to use `new` and `delete` in their consuming code\n    - If you need to allocate a resource like a file handle, socket, etc. it should be wrapped in a class where the constructor acquires the resources, then the destructor frees the resources (guranteeing resource release)\n        - This is the basic idea behind [RAII](https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization) ‚Äî *resource allocation is initialisation*\n    - Avoid using `malloc` like you would in C\n- `delete` operator ‚Äî for deallocating objects and arrays allocated on the heap.\n\n    There's two delete operators, `delete` and `delete[]`.\n    - `delete` ‚Äî for individual objects. It calls the destructor of that single object\n    - `delete[]` ‚Äî for arrays. It calls the destructor on each object\n    \n    ```cpp\n    public:\n        string* courses;\n        string* zId;\n    \n        Student() {\n            courses = new string[3];\n            zId = new string(\"z5258971\");\n        }\n    \n        ~Student() {\n            **delete[] courses**;       // Deleting an array\n            **delete zId**;             // Deleting an individual string\n        }\n    };\n    ```\n- `::` *scope resolution operator* ‚Äî for unambiguously referencing a name [TODO]\n\n\n## Functions\n\n- Overloading\n    \n    For functions with the same name, the appropriate function is called depending on which signature matches the call.\n    \n    ```cpp\n    void print(int);\n    void print(string);\n    \n    void print(int i) {\n        cout \u003c\u003c i \u003c\u003c \"\\n\";\n    }\n    \n    void print(string s) {\n        cout \u003c\u003c s \u003c\u003c \"\\n\";\n    }\n    \n    int main() {\n        print(1);\n        print(\"Tim Zhang\");\n    }\n    ```\n    \n- Default parameter values\n    \n    ```cpp\n    void func(int value = 10) {\n    \t\tstd::cout \u003c\u003c value \u003c\u003c endl;\n    }\n    ```\n    \n- *Pass-by-value* vs. *pass-by-reference* for function parameters\n    \n    ```cpp\n    void func(vector\u003cint\u003e vec, vector\u003cint\u003e\u0026 refVec) {\n    \t\tvec[1] = 99;         // Only modifies the copied **vec** and does not affect anything on the caller's side\n    \t\trefVec[1] = 42;      // Directly modifies the original vector passed in\n    }\n    ```\n    \n    - It's preferred to pass larger values by reference to avoid copying them into the function\n        - If a function is only ever expected to read a vector's values, for instance, then it's common to declare it with `const vector\u003cint\u003e\u0026`\n- `auto` return type\n    \n    You can also use `auto` in function return types\n    \n    ```cpp\n    auto add(int a, int b) {\n        return a + b;\n    }\n    ```\n    \n    - It can be convenient for lambdas and functions that return generic types\n- `inline` functions\n    \n    You can prefix a function or method signature with the inline keyword. This makes it so the compiler places a copy of the code in that function at each point where the function is called at compile time, meaning that the code is basically copied into the calling function.\n    \n    - Doing this offers a marginal performance improvement because you avoid allocating a new [[Knowledge/Engineering/Operating Systems/Stack Frame|stack frame]] that‚Äôs usually associated with making a function call\n        - This performance improvement is done at the cost of a marginally bigger executable size\n        - [Why not make everything inline?](https://softwareengineering.stackexchange.com/questions/254688/why-dont-compilers-inline-everything)\n    - You should mainly consider using inline on functions that are very small but called several times in a program\n    \n    ```cpp\n    **inline** void Func() {\n        cout \u003c\u003c \"Hello world\" \u003c\u003c endl;\n    }\n    ```\n    \n\n---\n\n- *Hoisting* does not exist in C++ or C\n\n### Functors (Function Objects):\n\n*Functors*, or *function objects*, are instances of a regular class that **implements the function call operator method**, `operator()`, which means that they can called as if they were functions themselves.\n\n- Example\n    \n    ```cpp\n    class **DrinkingLaw** {\n    public:\n        DrinkingLaw(int requiredAge) : requiredAge(requiredAge) {}\n    \n        **bool** **operator()(int age)** {         // Implementing this method is what makes this class a functor\n            return age \u003e= requiredAge;\n        }\n    private:\n        int requiredAge;\n    };\n    \n    int main() {\n        DrinkingLaw canDrink(18);\n        cout \u003c\u003c \"I can drink: \" \u003c\u003c (canDrink(20) ? \"Yup\" : \"Nope\") \u003c\u003c endl;\n    }\n    ```\n    \n\n**Functors vs functions/methods:**\n\n- Functors can contain state, since they‚Äôre just instances of a class\n    - Useful in cases where you want to calculate a running value of some kind\n- Functors are way more customisable since you get them by calling the constructor, where you could pass in different arguments to get a functor that behaves differently\n\n### Lambda Functions (Anonymous Functors):\n\nYou can think of lambda functions as syntactic sugar for *inline*, *anonymous functors*. \n\n```cpp\n[_] (params) -\u003e RetType    // You can omit the return type if it can be implicitly inferred\n{\n\t\t// Function body\n}\n```\n\n- You can use the capture clause (the¬†`[]`¬†of the expression) to access variables from the outer scope\n    - `[\u0026foo, bar]` ‚Äî capture foo by reference and bar by value\n    - `[\u0026]` ‚Äî capture all variables by reference\n        - `[\u0026, foo]` ‚Äî capture all variables by reference apart from `foo`\n    - `[=]` ‚Äî capture all variables by value\n        - [=, \u0026foo] ‚Äî capture all variables by value apart from `foo`\n\nLambda functions are great for concise, localised customisation of *predicate functions* (which are functions which given inputs, returns true/false). \n\nA classic use of lambda functions is passing it as the comparator function to `std::sort` to define the the ordering of the sorted collection.\n\n```cpp\nstd::sort(c.begin(), c.end(), **[[]] {**\n    **return a.key \u003c b.key;\n}**);\n```\n\n## Classes\n\nA class has a set of public or private *members*, which can be variables, functions or subtypes.\n\n```cpp\n**class Human** {\n**public:**\n    int age;\n    string name;\n\t\tstatic string scientific_name;\n\t\t\n\t\t// **Default constructor**\n\t\t**Human**() { ... }\n\n    **Human**(int age, string name) { ... }\n};\n\n// Static class variables must be initialised outside the class definition:\nstring Human::scientific_name = \"homo sapiens\";\n\nint main() {\n\t\t// **Allocating the object on the heap**\n    Human* me1 = new Human(20, \"Tim\");\n    delete me1;\n\n\t\t// **Allocating the object on the stack** (meaning there's not need to call delete)\n\t\tHuman me2(20, \"Tim\");\n\t\tHuman me3{20, \"Tim\"};     // An equivalent way of instantiating a class\n\t\tHuman me4;                // Implicitly calls the default constructor\t\n}\n```\n\n### Instantiating Classes: [TODO]\n\n```cpp\nvoid func() {\n    // Allocated on the stack \n    Foo f1;              // Implicitly calls the default constructor Foo()\n    Foo f2 = Foo(1);     // Copy initialisation\n\t\tFoo f3 = 1;          // TODO:\n\t\tFoo f4(1);           // Direct initialisation\n\t\tFoo f5{1};           // List initialisation      (Generally preferred, unless **auto** is used)\n\t\tFoo f6 = {1};        // TODO:\n\n\t\tFoo f7();            // You'd think this is calling the default constructor, but it's not. See '[most vexing parse](https://en.wikipedia.org/wiki/Most_vexing_parse)'\n\n    // Allocated on the heap (avoid when posssible)\n    Foo* f8 = new Foo();\n    delete f8;\n}\n```\n\n**General Guidelines for Choosing the Initialisation Method[*](https://stackoverflow.com/questions/9976927/when-to-use-the-brace-enclosed-initializer):**\n\n- Use `=` if the (single) value you are initialising with is intended to be the¬†*exact value*¬†of the object\n    - Prefer using `=` when assigning to `auto` variables\n    - Prefer when initialising variables with primitive types (eg. int, bool, float, etc.)\n- Use `{ }` if the values you are initialising with are a list of values to be¬†*stored in the object*¬†(like the elements of a vector/array, or real/imaginary part of a complex number)\n    - Prefer using { } in the majority of cases because it can be used in every context and is less error-prone than the alternatives\n- Use `( )` if the values you are initialising with are¬†*not*¬†values to be stored, but¬†*describe*¬†the intended value/state of the object, use parentheses\n    - Essentially, if the intent is to call a particular constructor, then use parentheses `( )`\n    - Eg. good example with `vector`\n        \n        ```cpp\n        vector\u003cint\u003e **v(10)**;          // Empty vector of 10 elements\n        cout \u003c\u003c v.size() \u003c\u003c endl;   // Prints **10**\n        \n        vector\u003cint\u003e **u{1, 2, 3}**;     // Vector with elements 1, 2, 3\n        cout \u003c\u003c u.size() \u003c\u003c endl;   // Prints **3**\n        ```\n        \n\n[There are MANY reasons to use brace initialization, but you should be aware that¬†**the¬†`initializer_list\u003c\u003e`¬†constructor is preferred to the other constructors**, the exception being the default-constructor. This leads to problems with constructors and templates where the type¬†`T`¬†constructor can be either an initializer list or a plain old ctor.](https://stackoverflow.com/questions/18222926/why-is-list-initialization-using-curly-braces-better-than-the-alternatives)\n\n```cpp\nstruct Foo {\n    Foo() {}\n    Foo(std::initializer_list\u003cFoo\u003e) { std::cout \u003c\u003c \"initializer list\" \u003c\u003c std::endl; }\n    Foo(const Foo\u0026) { std::cout \u003c\u003c \"copy ctor\" \u003c\u003c std::endl; }\n};\n\nint main() {\n    Foo a;\n    Foo b(a); // copy ctor\n    Foo c{a}; // copy ctor (init. list element) + initializer list!!!\n}\n\n```\n\nAssuming you don't encounter such classes there is little reason not to use the intializer list.\n\n- Ways to construct an object\n    ```cpp\n    Foo f;            // Just calls Foo's default constructor, **Foo()**. In Java/C#, this would be an uninitialised object, but in C++ it has implicitly called the default constructor\n    Foo f = Foo(1);    // **Copy initialisation**:   calls Foo(), *then the **copy constructor***\n    Foo f = Foo(1);\t\t// Direct initialisation\t\t\t\t\t\t\t\n    Foo f();           // **Direct initialisation**: calls Foo()\n    ^WARNING This doesn't do what you think it does. This is actually interpreted as a function prototype. What you want is just **Foo f;** which just invokes the default constructor \n    ```\n\n                       \n                       \n### OOP:\n\n- ***Operator overloading*** ‚Äî lets you define what operators like `++`, `[ ]`, `()`, etc. do when used on an instance of your class.\n    \n    The compiler converts something like `a != b` to a function call `operator!=(a, b)`\n    \n    - Example\n        \n        ```cpp\n        class Human {\n            public:\n                Human(int age, string name) {\n                    this-\u003eage = age;\n                    this-\u003ename = name;\n                }\n        \n                // Defines the subscript operator []'s behaviour. Returns a reference to the age property, regardless of the index (which is pretty dumb)\n        \t\t\t\t// Eg. **me[123]** will evalute to **this-\u003eage**\n                int\u0026 **operator[]**(int i) { return this-\u003eage; }\n        \t\t\t\t\n        \t\t\t\t// Defines the *prefix* incrementor operator ++'s behaviour. It just increases the age\n                void **operator++**() { this-\u003eage++; }\n        \n            private:\n                int age;\n                string name;\n        };\n        \n        int main() {\n            Human me(20, \"Tim\");\n            ++me;\n            cout \u003c\u003c me[42] \u003c\u003c endl;     // Prints 21\n        }\n        ```\n        \n- ***Destructors***\n    \n    A method that's called when the object goes out of scope. It's main purpose is to ensure memory allocated resources on the heap are freed to prevent memory leaks.\n    \n    - Example\n        \n        You define a destructor the same way you define a constructor, except you prefix the classname with `~`\n        \n        ```cpp\n        \n        ```\n        \n    - **RAII** ‚Äî the technique of acquiring resources in the constructor and then freeing them in the destructor is called *RAII (Resource Acquisition is Initialisation)*. The idea is about coupling the use of a resource to the lifetime of an object\n        - This also works well for mutexes where you can acquire the lock in the constructor and unlock in the destructor\n- **Virtual methods** ‚Äî a function that has an implementation but which may be redefined later by a class deriving from this one\n    - ***Pure virtual method*** ‚Äî where a function ***must*** be defined by a class deriving from this one\n        \n        ```cpp\n        class Foo {\n        public:\n        \t\tvirtual void Bar() **= 0**;\n        }\n        ```\n        \n    - ***Abstract class*** ‚Äî a class that has at least 1 *pure virtual method*. It cannot be instantiated\n        - C++ doesn't have an `abstract` keyword like Java. To make a class abstract, you just define 1 pure virtual method\n    - ***Concrete class*** ‚Äî a class that has no *pure virtual functions* and can be directly instantiated\n    - `override` keyword ‚Äî is an *optional* qualifier that tells programmers that a method is meant to provide a definition for a virtual method from a base class\n    - Any class with virtual functions should always provide a virtual *destructor*\n- **Inheritance [TODO]**\n- Polymorphism [TODO]\n    \n    I think you can only access polymorphic objects through pointers and references\n    \n\n---\n\n### Misc:\n\n- `const` methods\n    \n    \u003caside\u003e\n    üí° Methods that don't modify object state should be declared `const`. See this [const-correctness article](http://www.gotw.ca/gotw/006.htm)\n    \n    \u003c/aside\u003e\n    \n    When you add the¬†`const`¬†keyword to a method the¬†`this`¬†pointer will essentially become a pointer to¬†`*const`¬†object*, and you cannot therefore change any member data (unless you use¬†`mutable` for class fields).\n    \n    Declaring a method with `const` will cause a compiler error to be raised for when that method attempts to change a class variable.\n    \n    ```cpp\n    class Student {\n    public:\n      ...\n      **void myConstFunction() const** {       \n        this-\u003ename = \"Overriden\";         // Compiler error!\n      }\n    \n    private:\n      string name;\n    };\n    ```\n    \n    You can add the `mutable` keyword to allow exceptions for what class variables can be modified by const member functions.\n    \n    ```cpp\n    class Student {\n    public:\n    \t...\n      Student(string name) {\n        cout \u003c\u003c \"Constructor\" \u003c\u003c endl;\n        this-\u003ename = name;\n      }\n    \n      **void myConstFunction() const** { \n        this-\u003ename = \"Overriden\";       // This is now fine ‚úì\n      }\n    \n    private:\n      **mutable** string name;              // Permit `name` to be mutated by const member functions \n    };\n    ```\n    \n- `const` objects\n    \n    An object declared with `const` means that mutating its fields is not allowed. You can't set class variables directly and you can't call methods that set class variables either.\n    \n    ```cpp\n    class Student {\n    public:\n        string name;\n    \n        Student() {\n            this-\u003ename = \"Andrew\";\n        }\n    \n        void setName(string name) {\n            this-\u003ename = name;\n        }\n    };\n    \n    int main() {\n        Student s1;\n        s1.name = \"Taylor\";     // ‚úì\n    \n        **const Student s2**;        \n        s2.name = \"Taylor\";     // ‚úò not fine because this modifies a class variable\n        s2.setName(\"Taylor\");   // ‚úò not fine because this modifies a class variable\n    }\n    ```\n    \n- `final` methods\n    \n    Postfixing a method signature with the `final` keyword will make it so that it cannot be implemented by a deriving class.\n    \n    - [Why final exists](https://stackoverflow.com/questions/8824587/what-is-the-purpose-of-the-final-keyword-in-c11-for-functions)\n    \n    ```cpp\n    class **BaseFoo** {\n    public:\n        virtual void Info() = 0;\n    };\n    \n    class **Foo** : public **BaseFoo** {\n    public:\n        void Info() override final {}\n    };\n    \n    class **DerivingFoo** : public **Foo** {\n    public:\n        void Info() override {}            // **Error**: cannot override **final** funtion\n    };\n    ```\n    \n- `explicit` methods\n    \n    You can put explicit in front of constructors or methods to prevent implicit type conversions from other types to your class.\n    \n    - It‚Äôs good practice to make constructors explicit by default, unless an implicit conversion makes sense semantically. [Source](https://stackoverflow.com/questions/3716453/is-it-a-good-practice-to-make-constructor-explicit)\n    \n    ```cpp\n    class MyVector {\n    public:\n      **MyVector(int num)** {\n        size = num;\n      }\n    \n      void Show() {\n        cout \u003c\u003c \"Size: \" \u003c\u003c size \u003c\u003c endl;\n      }\n    \n    private:\n      int size;\n    };\n    \n    int main() {\n      MyVector v = 2;      // Without an **explicit** constructor, this actually calls **MyVector(2)**. \n    \t\t\t\t\t\t\t\t\t\t\t // When you define **`explicit MyVector(int num)`**, this call would cause an error.\n      v.print();\n    }\n    ```\n    \n- Access modifiers ‚Äî `public`, `private`, `protected`\n    \n    `public` ‚Äî members are visible and usable anywhere in the program\n    \n    `private` ‚Äî members are visible and usable only within the class itself and to *friend classes*\n    \n    `protected` ‚Äî like *private,* but derived classes are also allowed to access the members\n    \n- ***Member initialiser list** ‚Äî* for 'properly' initialising class variables in the constructor [TODO]\n    \n    \u003caside\u003e\n    ‚ö†Ô∏è This is not to be confused with **list initialisation**!\n    \n    \u003c/aside\u003e\n    \n    ```cpp\n    // **Member initialiser list**\n    Foo(int num)**: bar(num)** {};\n    \n    // **Simple assignment**\n    Foo(int num) {\n    \t\tbar = num;\n    }\n    ```\n    \n    There is a significant difference between initialising a class variable with member initialiser list and simple assignment in the constructor body\n    \n    - Member initialiser list ‚Äî the constructor for each member will be called and initialised in one operation\n    - Simple assignment in the body\n        - There is the additional overhead of creation *and* assignment when you do this\n        - You can't initialise `const` class variables this way\n    \n    ---\n    \n    - Class members are initialised in the **order that they are declared in the class**, not the order they appear in the actual member initialiser list\n        - It's good practice to keep the order of class variable declarations and the order they appear in member initialiser lists the same\n    \n- `friend` ‚Äî granting full internal access to other classes and functions\n    \n    A class can declare who their *friends* are in their body. Friends are then able to access everything within that class, including private members.\n    \n    - You can only declare who‚Äôs allowed to access you, not who you can have access to. Eg. in real life, you can‚Äôt grant yourself access to someone else‚Äôs privates, but you can grant others access to yours üòè\n    - You can declare other classes or standalone functions as your friends\n    - Example\n        \n        ```cpp\n        class Baby {\n        public:\n            Baby(const string\u0026 name) {}\n        private:\n            **friend class Mother;**        // Makes it so that methods of **Mother** will be able to see everything in **Baby**\n            string name;\n        };\n        \n        class Mother {\n        public:\n            Mother(const string\u0026 babyName) : baby(babyName) {}\n        \n            void RenameBaby(const string\u0026 newName) {\n                **baby.name = newName;**    // This is only possible because of `**friend class Mother**`\n            }\n        private:\n            Baby baby;\n        };\n        \n        int main() {\n            Mother mum(\"Andrew\");\n            mum.RenameBaby(\"Andy\");\n        }\n        ```\n        \n    \n    **Use cases:**\n    \n    - When you want to write white-box unit tests, then you can declare the unit test class as a friend. It‚Äôs good for unit testing private methods\n        - It‚Äôs [debatable](https://stackoverflow.com/questions/4171310/what-is-wrong-with-making-a-unit-test-a-friend-of-the-class-it-is-testing/4171331#4171331) whether it‚Äôs good practice to test private methods. Testing a public method will indirectly test a private method anyway\n- Class prototypes\n    \n    Class prototypes: just like function prototypes, you can declare all your classes upfront and then use them wherever you want throughout the code:\n    \n    ```cpp\n    // Declare my classes\n    class A;\n    class B;\n    class C;\n    \n    // Define my classes (any order will do)\n    class A { ... };\n    class B { ... };\n    class C { ... };\n    ```\n    \n    - Remeber, *hoisting* does not exist in C++\n- *Deleted* *functions* (`= delete`)\n    \n    Just like how you can use `= 0` to declare a function to be a pure virtual function, you can use `= delete` to declare a function to be a *delete function*.\n    \n    A *delete function* is one that has been explicitly disabled. It‚Äôs useful for disabling certain operators from being usable on your class, for example. Any attempts to call a deleted function raises a compile-time error.\n    \n    ```cpp\n    class Foo {\n    \t\tBar(const Foo \u0026) **= delete**;\n    }\n    ```\n    \n\n---\n\n- In general, prefer allocating on the stack rather than the heap, unless you need the object to persist after the function terminates\n    - When allocating on the heap, you have to explicitly call `delete` on that object to prevent memory leaks. Making the caller responsible for remembering to call `delete` themselves is bad practice\n        - Every `new` must have a corresponding `delete`, just like how every `malloc(...)` must have a corresponding `free(...)` in C\n        - With stack-allocated objects, the destructor is automatically called when the scope ends\n    - Allocating on the heap is less performant than allocating on the stack\n        - **The stack is faster**¬†because the access pattern makes it trivial to allocate and deallocate memory from it (a pointer/integer is simply incremented or decremented), while the heap has much more complex bookkeeping involved in an allocation or free[*](https://stackoverflow.com/questions/24057331/is-accessing-data-in-the-heap-faster-than-from-the-stack)\n    - Very large objects should still be on the heap to prevent stack overflow (the heap is larger than the stack)\n- Note: In Java/C#, you can‚Äôt allocate objects on the stack, they‚Äôd all be allocated on the heap. You could use a `struct` instead\n\n## Enums\n\nIn addition to structs and classes, you can also use enums to declare new data types. Enums are used to represent small sets of integer values in a readable way.\n\nThere are two kinds of enums in C++, *plain enums* and *enum classes* (which are preferred over plain enums because of their type safety).\n\n- **Plain Enum:**\nDeclared with just `enum`. The enum's values can be implicitly converted to integers\n    \n    ```cpp\n    **enum Mood** { happy, sad, nihilistic };\n    \n    int main() {\n    \t\tMood currMood = Mood::happy;  \n    \t\tint val = currMood;           // No error, the **Mood** value is implicitly converted to an integer type\n    }\n    ```\n    \n- **Enum Classes:**\nWhen you declare an enum with `enum class`, it is strongly typed such that you won't be able to assign an enum value to an integer variable or to another enum type. It reduces the number of 'surprises' which is why it's preferred\n    \n    ```cpp\n    **enum class Mood** { happy, sad, nihilistic };\n    \n    int main() {\n    \t\tMood currMood = Mood::happy;  \n    \t\tint val = currMood;            // Error, **Mood::happy** is not an **int**\n    }\n    ```\n    \n\n## Namespaces\n\nNamespaces ***define a scope for a set of names***. It's used to organise your project into logical groups and to prevent name collisions when you're using libraries, for example.\n\n```cpp\n**namespace UNSW** {\n    **class Student** {\n        public:\n            string id;\n\n            Student(string id) {\n                this-\u003eid = id;\n            }\n    };\n}\n\nint main() {\n    **UNSW::Student** me(\"z5258971\");\n    std::cout \u003c\u003c me.id \u003c\u003c \"\\n\";\n}\n```\n\n- To access a name in another namespace, use the *scope resolution operator* `::`\n    - If specifying the namespace an identifier comes from is tedious, you can use `using` to bring in a specific identifier\n        - Example\n            \n            ```cpp\n            using std::cout;\n            \n            int main() {\n                cout \u003c\u003c \"Hello world\\n\";\n            }\n            ```\n            \n- Any identifier you bring in that's not within a namespace will be in the *global namespace*\n\n## Exception Handling [TODO]\n\n- `try`-`catch`\n    \n    ```cpp\n    try {\n    \t\t\n    } catch(out_of_range\u0026 err) {\n    \n    } catch(...) {\n    \n    }\n    ```\n    \n    - The last try block with condition `(...)` catches all exceptions that weren't matched by previous `catch` conditions\n- `throw` [TODO]\n- `noexcept` functions [TODO]\n    \n    Turns `throw` statements into `std::terminate()`\n    \n\n## Modules [TODO]\n\nThis looks like a C++20 feature, which isn't really out yet (at least not stably in Nov 2021).\n\n\n\n### Using [TODO]\n`using` keyword ‚Äî what are all the uses of it?\n- question: are there performance impacts to this?\n- Can be used for type aliasing instead of typedef\n    - It‚Äôs generally more preferred to use `using` over C-style `typedef`. It also supports a little more extra functionality that is not available with `typedef` [Source](https://stackoverflow.com/questions/10747810/what-is-the-difference-between-typedef-and-using-in-c11)\n- Can be used to inherit constructors:\n    \n    ```cpp\n    class D : public C {\n     public:\n      using C::C;  // inherit all constructors from C\n      void NewMethod();\n    };\n    ```\n    \n- Is using namespace std; bad practice?\n    - It's bad because it pollutes your namespace with lots of new identifiers that could collide with whatever identifiers you try to bring in. Your code could be silently calling the wrong function for instance\n    - using namespace should never be used in header files because it forces the consumer of the header file to also bring in all those identifiers into their namespaces\n    - You can always do `using std::cout` so that you don't have to always type `std::cout`\n- [Translation units](https://stackoverflow.com/questions/1106149/what-is-a-translation-unit-in-c) (basically just a c or cpp file *after*¬†it's finished including all of the header files)\n\n### Exception Handling [TODO]\n- Exception handling\n    - And the built-in exception types that C++ defines in [stdexcept](https://en.cppreference.com/w/cpp/header/stdexcept)\n\n### Asserts [TODO]\n- `assert` and `static_assert` (runtime vs compile time assertions)\n\n### Casts [TODO]\n- static_cast and const_cast and dynamic_cast and regular C-style casting\n\n### Initializer List [TODO]\n- `std::initializer_list\u003cT\u003e` ‚Äî seems like it allows an object to be initialised using curly brace syntax and has\n    \n    NOT TO BE CONFUSED WITH ‚ÄòMember initialiser lists‚Äô used in constructors to initialise its fields.\n    \n    Apparently, an instance of std::initializer_list\u003c...\u003e is automatically constructed when:\n    \n    1. {} is used to construct a new object: `Person person{\"Tim\", \"Zhang\"}`\n        - Note: I think it‚Äôs a bit confusing. From experimentation, this will call the constructor of signature `Person(std::initializer_list\u003cstring\u003e l) {...}` if it exists. Else it will look for `Person(string firstName, string lastName) { ... }`.\n    2. {} is used on the RHS of an assignment.\n        - Note: I think this will look for the = operator (assignment) overload method that takes in an instance of `std::initializer_list` and call that.\n    3. {} is bound to auto. Eg.\n        \n        ```cpp\n        for (auto i : { 2, 5, 7 }) {\n            cout \u003c\u003c i \u003c\u003c endl;\n        }\n        ```\n        \n    \n    Note: `std::initializer_list` is an iterable.\n    \n    For some reason, you cannot subscript an instance of std::initializer_list like you would a vector or array ([SO discussion](https://stackoverflow.com/questions/17787394/why-doesnt-stdinitializer-list-provide-a-subscript-operator)). It seems that it‚Äôs just not a desired enough use case?\n    \n    [**Notes from cplusplus.com](https://www.cplusplus.com/reference/initializer_list/initializer_list/):**\n    \n    The compiler automatically converts { ... } to objects of type std::initializer_list. For example: \n    \n    ```cpp\n    auto il = { 10, 20, 30 };  // the type of il is an initializer_list\n    ```\n    \n    Constructors taking only one argument of this type are a special kind of constructor, called¬†*initializer-list constructor*. Initializer-list constructors take precedence over other constructors when the initializer-list constructor syntax is used:\n    \n    ```cpp\n    struct myclass {\n    \t  myclass (int,int);\n    \t  myclass (initializer_list\u003cint\u003e);\n    \t  /* definitions ... */\n    };\n    \n    myclass foo {10,20};  // calls initializer_list ctor\n    myclass bar (10,20);  // calls first constructor\n    ```\n    \n- constructor initialiser list (member initialiser list) ‚Äî the list of stuff that follows the colon : in a constructor implementation.\n    - Call base class constructors here\n    - Initialise member variables before the constructor body executes (const members MUST be initialised this way, you can‚Äôt set them in the body)\n\n### Extern [TODO]\n- `extern` keyword\n    - [Good explanation](https://stackoverflow.com/questions/10422034/when-to-use-extern-in-c)\n    - `extern int x;`¬†tells the compiler that an object of type¬†`int`¬†called¬†`x`¬†exists¬†*somewhere*. It's not the compilers job to know where it exists, it just needs to know the type and name so it knows how to use it. Once all of the source files have been compiled, the linker will resolve all of the references of¬†`x`¬†to the one definition that it finds in one of the compiled source files. For it to work, the definition of the¬†`x`¬†variable needs to have what's called ‚Äúexternal linkage‚Äù, which basically means that it needs to be declared outside of a function (at what's usually called ‚Äúthe file scope‚Äù) and without the¬†`static`¬†keyword.\n\n### Volatile [TODO]\n- `volatile` keyword\n\n### Decltype [TODO]\n- `decltype` keyword\n\n### Templates\n- Templates\n    - They‚Äôre quite similar to generics in managed languages like Java or C#, but they‚Äôre much more powerful. A template is basically you getting the compiler to write code for you, based on a couple rules.\n        - You can kind of think of template functions as things that are created on demand ‚Äî kind of like a code generator. If there are no calls to it, then it actually doesn‚Äôt exist after compilation. You could leave syntax errors inside template functions that aren‚Äôt called and the compiler just ignores them entirely (but this is compiler-dependent)!\n        - Some companies literally ban the use of templates in their source code. It‚Äôs because overusing templates can make the code very unreadable. There‚Äôs a delicate tradeoff between having to do manual, repetitive coding and accessing the powerful abstracted-away code-generation magic that templates offer\n        - *Metaprogramming* is basically about when a program has knowledge of itself and can manipulate itself.\n            - C#‚Äôs reflection feature is a form of metaprogramming (where it can examine its own static types)\n            - C++ gives us template metaprogramming, where the templates you program are used by the compiler to generate more source code.\n\n\n\n\n    \n- Copy elision ‚Äî the compiler is ‚Äò*allowed*‚Äô to *elide* copies where results are ‚Äúas if‚Äù copies were made. Ie. the compiler can decide to skip the copy/move construction of an object. Return value optimisation (RVO) is one such instance.\n    - Note: in English/linguistics, to *elide* means to merge and therefore omit something in language. Eg. dunno == don‚Äôt know, kinda == kind of, etc\n    - It‚Äôs an optimisation technique implemented by most C++ compilers to prevent extraneous copy operations. It is because of copy elision that return-by-value and pass-by-value usually remain quite performant in C++ (assuming the certain criteria to allow for it are met).\n    - Calls to the copy or move constructors can be entirely skipped!\n- Wtf can curly braces be used for?\n    - Defining anonymous scope blocks\n        - Yep, wrote notes on this\n    - Initialising arrays and vectors, and possibly other objects?\n        - Yep. It‚Äôs generally preferred. You wrote notes on this\n    - Constructor initialiser lists\n        \n        ```cpp\n        Vector::Vector(int s) :elements{new double[s]}, capacity{s} { ...constructor body... }\n        \n        // ^\n        // According to https://stackoverflow.com/questions/36212837/member-initializer-list-notation-curly-braces-vs-parentheses\n        // this is pretty much equivalent to:\n        Vector::Vector(int s) :elements(new double[s]), capacity(s) { ...constructor body... }\n        \n        // Google's style guide's section on constructor initialiser lists shows examples with parentheses instead of curly braces \n        // Scott Meyer in 'Effective Modern C++': There‚Äôs no consensus that either approach is better than the other, so my advice is to pick one and apply it consistently.\n        ```\n        \n- Delegating constructors\n    - You can call other constructors from a constructor in the initialiser list. Doing this however means you can‚Äôt use a member initialiser list\n    - You cannot call constructors from the body of another constructor ‚òπÔ∏è\n    - Often, you‚Äôd have to resort to defining a SharedInit() method\n\nConstructors and assignments for copy or move semantics:\n\n```cpp\nclass X {\npublic:\n\t\tX(Sometype);            // 'Ordinary constructor' for creating an object\n\t\tX();                    // Default constructor\n\t\tX(const X \u0026);           // Copy constructor. Takes in a const l-value reference\n\t\tX(X \u0026\u0026);                // Move constructor. Takes in an r-value reference\n\n\t\tX\u0026 operator=(const X\u0026); // Copy assignment\n\t\tX\u0026 operator=(X\u0026\u0026);      // Move assignment\n\t\t\n\t\t~X();                   \n\t\t...\n};\n```\n\n- Switch-case statements in C++ are a bit different. They‚Äôre like this? (They have curly braces around the cases)\n    \n    ```cpp\n    switch (tag) {\n        case 1: { \n            // ...\n            break;\n        }\n        case 2: {  \n            // ...\n            break;\n        }\n        case 3: {  \n            // ...\n            break;\n        }\n    }\n    ```\n    \n- Iterators\n    - It‚Äôs up to the implementation to define what iteration means. It‚Äôs kind of like operator overloading, you could make the ++ operator do literally anything.\n        - To support range-based for loops, your class has to implement the `begin()` and `end()` methods and make them return an iterator\n        \n        ```cpp\n        std::vector\u003cint\u003e values = {1, 2, 3};\n        \n        // Equivalently\n        for (std::vector\u003cint\u003e::iterator it = values.begin(); it != values.end(); it++) {\n        \t\tcout \u003c\u003c *it \u003c\u003c endl;\n        }\n        \n        // Syntactic sugar for the above\n        for (int value : values) {\n        \t\tcout \u003c\u003c value \u003c\u003c endl;\n        }\n        ```\n        \n        - end() isn‚Äôt the last element, it‚Äôs one beyond the last element, meaning it‚Äôs an invalid iterator\n        - Should you always use range-based for loops?\n            - In general yes, but with exceptions. Eg. you should not use it when you are erasing values, inserting something into the middle of something, etc., basically anytime you need to manipulate the position of the iterator, you‚Äôd have to fall back to the ugly for loop.\n    - Looping with indexes vs iterators\n        - Indexes work for arrays, vectors, etc. but for other data structures like sets, you have no choice but to use iterators .\n    - const_iterator is for read-only iteration ‚Äî making sure you don‚Äôt mutate the collection.\n    - When mutating a container, you must keep in mind that changing the container has an impact on existing iterators that point at elements in the container.\n        \n        ```cpp\n        // BUGGY CODE, DO NOT USE\n        for (auto it = c.begin(); it != c.end(); ++it) {\n        \t  if (BadValue(*it)) {\n        \t\t    c.erase(it);\n        \t  }\n        }\n        ```\n        \n        - Although this seems simple enough, there is a fatal flaw: erasing an element in an associative container invalidates all iterators that point to that element. Thus, in the above¬†`for`loops continuation step, the iterator¬†`it`¬†will be invalid whenever¬†`c.erase(it)`¬†was just invoked, resulting in undefined behaviour. To remedy this issue, we can leverage the post-increment operator like so:\n        \n        ```cpp\n        for (auto it = c.begin(); it != c.end(); ) {\n          if (BadValue(*it)) {\n            c.erase(it++);\n          } else {\n            ++it;\n          }\n        }\n        ```\n        \n        - This time, our loop behaves as expected. While¬†`it`¬†is incremented before calling¬†`erase`, the post-increment operator returns the previous (unincremented) value, which is then passed to¬†`erase`. For¬†`vector`s,¬†`deque`s, and¬†`list`s, we can leverage the fact that¬†`erase`¬†returns an iterator that points at the next value in the container and write:\n        \n        ```cpp\n        for (vector\u003cint\u003e::iterator it = c.begin(); it != c.end(); ) {\n        \t  if (BadValue(*it)) {\n        \t\t    it = c.erase(it);\n        \t  } else {\n        \t\t    ++it;\n        \t  }\n        }\n        ```\n        \n- `#include` tells the preprocessor to copy the contents of the included file and directly paste it into the current file, that‚Äôs literally all that happens.\n    - `#include \u003cpath\u003e`\n        - With `\u003c\u003e`, the preprocessor searches for the thing to include in directories defined by the compiler. You would use \u003c\u003e often for including standard library headers\n        - On Linux, you can find all the libraries stored on the path `/usr/include/c++/\u003cversion_num\u003e`\n    - `#include ‚Äúpath‚Äù`\n        - With `‚Äú‚Äù`, the preprocessor searches first in the same directory as the file first, and then searches through the same directories that `#include \u003cpath\u003e` would search through\n- Header guards are used inside header files to ensure that the contents of the file are not copied and pasted more than once to any single file. They have the form:\n    \n    ```cpp\n    #ifndef YOUR_HEADER_NAME_H\n    #define YOUR_HEADER_NAME_H\n    \n    ...\n    \n    #endif\n    ```\n    \n- The entire purpose of namespaces is to avoid naming conflicts (and as a logical container for classes, further namespaces, etc.)\n- About std::swap:\n    - Often, `std::swap(T\u0026 a, T\u0026 b)` is horribly inefficient because it could involve copies or moves three times\n- Constexpr methods ‚Äî declared with the `constexpr` qualifier\n    - Constexpr methods are also implicitly `inline` methods\n    - Can be used to initialise constants at compile time\n- What is external linkage? [https://stackoverflow.com/questions/1358400/what-is-external-linkage-and-internal-linkage#:~:text=External linkage refers to things,units (or object files)](https://stackoverflow.com/questions/1358400/what-is-external-linkage-and-internal-linkage#:~:text=External%20linkage%20refers%20to%20things,units%20(or%20object%20files)).\n    - Linkage has to do with how many instances (or copies) of a named object there are in a program. it is usually best for a constant with one name to refer to a single object within the program.\n    - When you write a .cc file, the compiler generates a translation unit from it. This is basically the source file, plus all the headers that you #included.\n        - Internal linkage refers to everything **only in scope of a translation unit**\n        - External linkage refers to things that exist beyond a particular translation unit. Ie. accessible through the whole program, which is the combination of al translation units\n- You can do namespace aliases to shorten namespaces. Never do this in header files\n    \n    ```cpp\n    namespace testing = ::my::testing::framework;\n    ```\n    \n- TODO: Copy over the stuff in the cheatsheet that are missing in this set of notes\n    - Eg. bitsets, `\u003calgorithm\u003e` functions, etc.\n- Still can‚Äôt fully understand `const`.\n    - I think I‚Äôm really confused with combinations of qualifiers: static, const, constexpr in a class definition and outside of it, and whether you can initialise the member/variable when declared or if it must be defined in the .cc file.\n    Could list out all possibilities.\n- regular array literal vs using std::array\n- [https://www.google.com/search?q=references+as+members\u0026oq=references+as+members\u0026aqs=chrome..69i57.4024j0j7\u0026sourceid=chrome\u0026ie=UTF-8](https://www.google.com/search?q=references+as+members\u0026oq=references+as+members\u0026aqs=chrome..69i57.4024j0j7\u0026sourceid=chrome\u0026ie=UTF-8)\n\n## **Templates:**\n\n- Templates vs. generics [TODO]\n    \n    Templates are massively different from generics like in Java.\n    \n    In Java, generics are mainly syntactic sugar that help programmers avoid boilerplate casting code.\n    \n    Some main differences that developers should know:\n    \n    - Java doesn‚Äôt let you pass primitive types like `int` as type parameters... yup. You can‚Äôt do this\n        \n        ```cpp\n        ArrayList\u003cint\u003e myList = new ArrayList\u003cint\u003e();\n        ```\n        \n\n[CppCon talk](https://www.youtube.com/watch?v=LMP_sxOaz6g\u0026ab_channel=CppCon) \n\n### Function Templates:\n\nSuppose you‚Äôre writing multiple overloads for a method, and each overload does essentially the same thing but just takes in different types.\n\n```cpp\nvoid **swap**(int\u0026 i, int\u0026 j) {\n\t\tint tmp = i;\n\t\ti = j;\n\t\tj = tmp;\n}\n\nvoid **swap**(string\u0026 s1, string\u0026 s2) {\n\t\tstring tmp = s1;\n\t\ts1 = s2;\n\t\ts2 = tmp;\n}\n...\n```\n\nClearly there‚Äôs a lot of duplicated code in each overload, and this approach would not scale well in practice. A solution to this is to use ***function templates*** to define a generalised algorithm and let the compiler generate all the overloads for you on compilation.\n\n- Strictly speaking, a function template is not really a function. It‚Äôs a generalisation of an algorithm that is used as a tool by the compiler for generating similar but distinct functions.\n    - The act of generating a function from a function template by the compiler is called ***template instantiation***\n\n```cpp\n**template \u003ctypename T\u003e**      // Start of T's scope\n****void swap(T\u0026 a, T\u0026 b) { \n\t\tT tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n}                          // End of T's scope\n```\n\n`T` is a ***type argument***. Its scope is limited to the function body.\n\n- Using `class` instead of `typename`\n    \n    You can also use the `class` keyword instead of `typename`. The behaviour is exactly the same in template definitions... there‚Äôs historical reasons why they‚Äôre interchangeable. \n    \n    ```cpp\n    template \u003ctypename T\u003e  is the same as  template \u003cclass T\u003e\n    ```\n    \n    They both have *very* different meanings in different contexts though.\n    \n\n![Untitled](Knowledge/Engineering/Languages/assets/Untitled.png)\n\nWhen you invoke `**swap\u003cint\u003e(i, j)**`, the compiler will *instantiate* a function with signature `**void swap\u003cint\u003e(int\u0026 a, int\u0026 b)**` for you by plugging in the types into the template function you defined. Template instantiation is done on-demand when you compile.\n\n- The compiler is smart enough to avoid instantiating duplicate functions\n\n### Class Templates:\n\nMuch like how a function template is a generalisation of an algorithm, a class template is a generalisation of a type, *but it‚Äôs not an actual type*.\n\n```cpp\ntemplate \u003ctypename T\u003e\nclass MyContainer {\npublic:\n\t\tMyContainer(T n);\n}\n\n// In member implementations *done outside of the class*, you must fully qualify with the prefix `MyContainer\u003cT\u003e::`.\n// Anything following :: will adopt the class' scope, meaning that specifying \u003cT\u003e becomes optional again. \ntemplate \u003ctypename T\u003e\nMyContainer\u003cT\u003e::MyContainer(T n) {\n\n}\n```\n\n- Note: when in the scope of the class body, you can use `MyContainer` and `MyContainer\u003cT\u003e` interchangeably. Essentially, you can consider `\u003cT\u003e` optional inside the class body. However, when outside the class, you have to fully qualify the name with `MyContainer\u003cT\u003e::`\n    - Once you specify `MyContainer\u003cT\u003e::`, you can imagine that you‚Äôre basically re-entering the class scope, and then everything you could access within the class become available again.\n        \n        ![Untitled](Knowledge/Engineering/Languages/assets/Untitled%201.png)\n        \n\n \n\n**Container Class Templates:**\n\nA container is an object that contains other objects. Examples include arrays, linked lists, etc.\n\nThe standard C++ library provides various container class templates like:\n\n- `list\u003cT\u003e`\n- `vector\u003cT\u003e`\n- `set\u003cT\u003e`\n\nTODO: should learn more about move semantics. Specifically copy and move constructors as well as std::move\n\n\n# C++ Appendix:\n\nAll the notes under this section are meant to be topics or details you don‚Äôt need to care much about to program effectively with C++ but which are important background information.\n\n### How C++ Compilation Works:\n\nCompilation of C++ programs follow 3 steps:\n\n1. **Preprocessing** \n    \n    Preprocessor directives like `#include`, `#define`, `#if`, etc. transforms the code before any compilation happens. At the end of this step, a pure C++ file is produced.\n    \n2. **Compilation**\n    \n    The compiler (eg. g++, the GNU C++ compiler) takes in pure C++ source code and produces an object file. This step doesn‚Äôt produce anyting that the user can actually run ‚Äî it just produces the machine language instructions.\n    \n3. **Linking**\n    \n    Takes object files and produces a library or executable file that your OS can use.\n    \n\n### Separate Compilation\n\nC++ supports separate compilation to decouple parts of a project and minimise compilation time.\n\n- Example ‚Äî using header files to separate the users of an interface and the implementation for that interface\n    \n    ![Untitled](Knowledge/Engineering/Languages/assets/Untitled%209.png)\n    \n    ```cpp\n    // **Vector.h ‚Äî the header file defining the Vector class and its properties and methods (but without implementation)**\n    \n    class Vector {\n        public:\n            Vector(int size);\n            double\u0026 operator[[]];\n            int size();\n        private:\n            double* elements;\n            int capacity;\n    };\n    ```\n    \n    ```cpp\n    // **Vector.cpp ‚Äî the implementation for Vector.h**\n    \n    #include \"Vector.h\"\n    \n    Vector::Vector(int s) :elements{new double[s]}, capacity{s} {}   // Implementing the constructor outside of the class definition\n    \n    double\u0026 Vector::operator[[]] {\n        return elements[i];\n    }\n    \n    int Vector::size() {\n        return capacity;\n    }\n    ```\n    \n    ```cpp\n    // **user.cpp ‚Äî the user of Vector.h who has know idea about how it's implemented**\n    \n    #include \u003ciostream\u003e\n    #include \"Vector.h\"\n    \n    using namespace std;\n    \n    int main() { \n        Vector v(10);\n        cout \u003c\u003c \"Vector size: \" \u003c\u003c v.size() \u003c\u003c endl;\n    }\n    ```\n    \n\n\n### Curly Braces in C++:\n\nThis section exists because I keep seeing curly braces appearing in different contexts and having totally different semantics.\n\n- Defining ***scope blocks***\n    \n    ```cpp\n    //***CODE****\n    {\n    \t  // A smaller scope containing some statements\n    }\n    //****MORE CODE****\n    ```\n    \n    - Doing this within a function is useful when you want a destructor to be called as soon as possible. Eg. often when dealing with mutexes, you‚Äôd want to acquire and release a lock as soon as possible.\n- \n\n### Union:\n\nA `union` is data structure like a `class` or `struct`, except all its members share the same memory address, meaning it can only hold 1 value for one member at a time. The implication is that a union can only hold **one value at a time**, and its total allocated memory is equal to $\\texttt{max(sizeof each member)}$.\n\n- It‚Äôs mainly used when you really need to conserve memory\n- They‚Äôre largely useless in C++ and more useful in C\n\n```cpp\nunion Numeric {\n    short  sVal;\n    int    iVal;\n    double dVal;\n};\n\nint main() {\n    cout \u003c\u003c \"Unions\" \u003c\u003c endl;\n\n    Numeric num = { 42 };\n    cout \u003c\u003c num.sVal \u003c\u003c endl;    // Prints **42**\n    cout \u003c\u003c num.iVal \u003c\u003c endl;    // Prints **42**\n    cout \u003c\u003c num.dVal \u003c\u003c endl;    // Interprets the bits of 42 using floating point representation (IEEE 754)\n}\n```\n\n### Struct:\n\n- **Structs vs. Classes:** There are very few differences between a `struct` and a `class` in C++.\n    \n    \n    | Struct | Class |\n    | --- | --- |\n    | Members are public by default | Members are private by default |\n    | Are value types | Are reference types |\n- **Structs in C vs. C++**\n    \n    \n    | C | C++ |\n    | --- | --- |\n    | Can only have fields | Can have methods and fields |\n    | No class features | Has constructors, inheritance, private/protected/public members, literally everything you expect in a class |\n- You should use structs when you need a plain-old-data structure that doesn‚Äôt require any class-like features[*](https://stackoverflow.com/questions/54585/when-should-you-use-a-class-vs-a-struct-in-c)\n\n### Structured Binding:\n\n**Structured binding** is syntactic sugar for declaring variables initialised with items/fields of a data structure.\n\n- JavaScript calls this ***destructuring***, Python calls this *unpacking*, C# calls this *deconstructing*\n- Unfortunately, you have to specify as many identifiers as there are things to unpack\n\n**Use Cases:**\n\n- Array destructuring\n    \n    ```cpp\n    int arr[3] = { 1, 2, 3 };\n    auto [a, b, c] = arr;\n    ```\n    \n- Ranged for-loop\n    \n    ```cpp\n    map\u003cstring, int\u003e m;\n    m.insert(pair\u003cstring, int\u003e(\"Hello\", 42));\n    m.insert(pair\u003cstring, int\u003e(\"World\", 24));\n    \n    for (**const auto\u0026 [key, val]** : m) {\n        cout \u003c\u003c \"Key: \" \u003c\u003c key \u003c\u003c \", val: \" \u003c\u003c val \u003c\u003c endl;\n    }\n    ```\n    \n- Class/struct destructuring\n    \n    ```cpp\n    Foo f(42, 24);\n    auto [u, v] = f;\n    ```\n    \n- Tuple destructuring\n    \n    ```cpp\n    tuple\u003cint, bool, double\u003e tup(1, false, 3.14);\n    auto [x, y, z] = tup;\n    ```\n    \n\nContinue at 5.2 in Tour of C++\n\n# C++ Primer:\n\n- Any variable with the following properties will be placed into *static memory*:\n    - Declared with `static`\n    - Has namespace scope\n    \n    ![Untitled](Knowledge/Engineering/Languages/assets/Untitled%2010.png)\n    \n- Variable with *static storage duration* have their address and size known at compile time. They‚Äôll live for as long as the program lifetime.\n- There is a `thread_local` keyword in C++. When a variable is declared with `thread_local`, it is brought into existence when the thread starts and deallocated when the thread ends. In that sense, the thread sees it as a *static storage duration* variable.\n    \n    ```cpp\n    thread_local int myInt = ...;\n    ```\n    \n\nContinue at ‚ÄòRAII (The \"Resource Acquisition Is Initialization\" Idiom)‚Äô\n\n# C++ Style\n\n### Style Guide\n\n[Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html)\n\nNote: there are many decisions in the Google C++ style guide that many people protest against, for example, the lack of exceptions. It generally has good style rules otherwise.\n\n### Soruce Code Documentation\n\nThe advice here is sourced from [Google‚Äôs C++ style guide](https://google.github.io/styleguide/cppguide.html).\n\n**File Comments**\n\nFile comments are preferred but not always necessary. Function and class documentation, on the other hand, must be present with exceptions only for trivial cases.\n\n- Start with licence boilerplate, then broadly describe what abstractions are introduced by the file.\n- Don‚Äôt duplicate comments across a class‚Äô `.h` and `.cc` file.\n\n[Example](https://github.com/google/googletest/blob/main/googletest/src/gtest-all.cc)\n\n```cpp\n// Copyright 2008, Google Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted\n// ... and so on\n// \n// Google C++ Testing and Mocking Framework (Google Test)\n//\n// Sometimes it's desirable to build Google Test by compiling a single file.\n// This file serves this purpose.\n```\n\n**Variable comments**\n\nGenerally not required if the name is sufficiently descriptive. Often for class variables, more context is needed to explain the purpose of the variable.\n\n```cpp\nprivate:\n\t // Used to bounds-check table accesses. -1 means\n\t // that we don't yet know how many entries the table has.\n\t int num_total_entries_;\n```\n\n**TODO comments**\n\n```cpp\n// TODO(kl@gmail.com): Use a \"*\" here for concatenation operator.\n// TODO(Zeke) change this to use relations.\n// TODO(bug 12345): remove the \"Last visitors\" feature.\n```\n\n**Function comments**\n\nAlways write a comment to explain what the function/method accomplishes unless it is trivial. This includes private functions.\n\n- Start with a verb. Eg. ‚ÄúOpens a file...‚Äù or ‚ÄúReturns an iterator for...‚Äù\n- Which arguments can be `nullptr` and what that would mean.\n- Performance implications of how the function is used.\n\n```cpp\n// Returns an iterator for this table, positioned at the first entry\n// lexically greater than or equal to `start_word`. If there is no\n// such entry, returns a null pointer. The client must not use the\n// iterator after the underlying GargantuanTable has been destroyed.\n//\n// This method is equivalent to:\n//    std::unique_ptr\u003cIterator\u003e iter = table-\u003eNewIterator();\n//    iter-\u003eSeek(start_word);\n//    return iter;\nstd::unique_ptr\u003cIterator\u003e GetIterator(absl::string_view start_word) const;\n```\n\n**Class comments**\n\nAlways write a comment to explain what the class‚Äô purpose is and when to correctly use it. Always do this in the `.h` file, leaving comments about implementation detail to the implementing `.cc` file.\n\n- Good place to provide a code snippet illustrating a simple use case.\n- About documenting the `.h` header file vs. documenting the `.cc` source file\n    - Document how to use the function in the header file, or more accurately close to the declaration\n    - Document how the function works (if it's not obvious from the code) in the source file, or more accurately, close to the definition\n    \n    [Source](https://softwareengineering.stackexchange.com/questions/84071/is-it-better-to-document-functions-in-the-header-file-or-the-source-file).\n    \n\n```cpp\n// Iterates over the contents of a GargantuanTable.\n// \n// Example:\n//    std::unique_ptr\u003cGargantuanTableIterator\u003e iter = table-\u003eNewIterator();\n//    for (iter-\u003eSeek(\"foo\"); !iter-\u003edone(); iter-\u003eNext()) {\n//        process(iter-\u003ekey(), iter-\u003evalue());\n//    }\nclass GargantuanTableIterator {\n\t  ...\n};\n```\n\n# Abseil:\n\nBasically Google‚Äôs standard library\n\n[https://abseil.io/](https://abseil.io/)\n\n[[Knowledge/Engineering/Languages/C++ Cheatsheet]]\n","lastmodified":"2022-10-14T06:51:53.930879724Z","tags":null},"/Knowledge/Engineering/Languages/C++-Cheatsheet":{"title":"C++ Cheatsheet","content":"\n# C++ Cheatsheet\n\n### Vector\n\n```cpp\n// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Initialisation ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\** \nvector\u003cint\u003e v;\nvector\u003cint\u003e v(5);        // Size 5 vector populated with 0s\nvector\u003cint\u003e v(5, 10);    // Size 5 vector populated with 10s\n\n****// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Adding Elements ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\** \n// When inserting at a position, you have to give an iterator\n**insert**(posIter, value)\n**insert**(posIter, { v1, v2, ... })\n**insert**(startPos, other.startPos, other.endPos)   // Useful for concatenating vectors.\n\n// Examples:\ninsert(v.begin() + 2, 10)            // Inserts 10 at index 2\ninsert(v.begin() + 2, {10, 10, 10})  // Inserts 10, 10, 10 starting from index 2\n\n****// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Reading/Updating Elements ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\** \n// Use the subscript operator [].\nv[i]         \nv[i] = n;     \n\n****// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Deleting Elements ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\** \n**erase**(posIter)             // Deletes a single element\n**erase**(startIter, endIter)  // Deletes a range of elements, **[start, end)**\n\n**clear**()         // Removes everything, makes size 0\n\n****// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Operators ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\ \n\nv1 == v2**        // Does an equality on the contents, not the memory address!\n                // This will first check the sizes match, then loop through each element and check each of those match.\n                // This also works when comparing matrices!\n```\n\n### Matrix\n\n```cpp\nvector\u003cvector\u003cint\u003e\u003e **M(10, vector\u003cint\u003e(5))**    // Creates a matrix with **10** rows, **5** columns, **all values set to 0**\n\n**M == N**     // Matrix equality: check all contents of M and N are equal with the **==** operator.\n```\n\n### String\n\n`std::string`'s methods are a superset of the `std::vector`‚Äôs methods. These are some specific methods to know:\n\n```cpp\n**substr**(startIndex, runLen)     // Returns a new string from startIndex onwards for runLen characters.\n\ns1 == s2       // String equality works.\ns1 += s2       // String concatenation works.\n```\n\n### Map\n\nFor unordered maps:\n\n```cpp\n// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Reading/Updating/Adding ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\** \nm[k] = v;\n\n// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Deleting Elements ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\** \nm.erase(k)     // Returns number of deleted entries. This is can be 0 if k doesn't exist in m\nm.clear()\n\n// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Iterate ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\** \nfor (const auto\u0026 [k, v] : m) {\n    // ...\n}\n\n// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Key Exists ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\**\nif (m.find(k) != m.end()) {\n\t\t// k exists in map\n}\n```\n\nInitialising a map\n\nInitialising a static member of a class.\n\n### Stack, Queue\n\n```cpp\ns.push(val);     // Basically vector::push_back(val)\ns.pop();         // Does not return anything. Just removes to elem\ns.top();         // Peek top, but don't pop\ns.size();        \ns.empty();       // Whether stack is empty\n```\n\n```cpp\nq.push(val);\nq.pop();\nq.front();\nq.back();\nq.size();\nq.empty();\n```\n\n### Set\n\n```cpp\n// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Adding Element ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\**\ns.insert(val);\n\n// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Exists ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\**\nif (s.find(val) != s.end()) {\n    // val exists\n}\n\n// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Deleting Elements ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\**\ns.erase();\ns.clear();\n```\n\n### Reading Input\n\n```cpp\nint i;\ndouble j;\ncin \u003e\u003e i \u003e\u003e j;     // Expects an int, then a double after 1 or more of \\s characters (space, tab, newline)\n\n// ...\n\nstring message;\ngetline(cin, message)    // Reads an entire line up to **but not including** the newline character\n```\n\n- On failure to read, they‚Äôll just be uninitialised\n\nWhen reading formatted input and then unformatted input, you‚Äôll need to call the `ignore` method, `std::cin.ignore()`, in between.\n\n```cpp\ncin \u003e\u003e age;\ncin.ignore();\ngetline(cin, name);\n```\n\n### Algorithm\n\n```cpp\n#include \u003c**algorithm**\u003e\n\n// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Frequent Methods ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\** \n**sort**(start_iter, end_iter);                    // Works with strings as well.\n**stable_sort**(start_iter, end_iter);\n\n**fill**(start_iter, end_iter, 10);                // Fills a vector range with 10s\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t         // Note: vectors give you a constructor that lets you fill it with values.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t         //       This is mainly useful for arrays.\n\n**find**(start_iter, end_iter, target_value);      // Note: maps, sets, etc. would have their own find method.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //       These are useful when working with vectors.\n**find_if**(start_iter, end_iter, predicate);      // Where predicate is a function that takes in an element of the     \n                                               // container and returns true/false for whether it should be returned.\n                                               // `find_if` returns an iterator.\n\n**iter_swap**(start_iter, end_iter)                // Swaps the element at the given iterator positions. Saves you some time\n                                               // from writing a swap function yourself.\n\n// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Functional Programming ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\** \nvector\u003cint\u003e v = {1, 2, 3, 4, 5, 6, 7, 8};\nvector\u003cint\u003e u;\n\n// **Map**\n**transform**(v.begin(), v.end(), **back_inserter(u)**, **[[]] { return val + 1; }**);\n\n// **Filter**\n**copy_if**(v.begin(), v.end(), **back_inserter(u)**, **[[]] { return val % 2 == 0; }**);\n\n// Note: for **reduce**, see either **std::accumulate** or **std::reduce**.\n\n// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ **Binary Search ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê \\\\** \n// These should be executed on **sorted** ranges.\n\n**lower_bound**(start_iter, end_iter, target)      // If `target` exists, returns the index of `target`.\n                                               // Else, return the index where we would expect it to be.\n                                               // Ie. this function gives you the index of the **greatest value less than `target`**.\n\n**upper_bound**(start_iter, end_iter, target)      // If `target` exists, returns the index of `target` + 1.\n                                               // Else, return the index where we would expect it to be.\n                                               // Ie. this function gives you the index of the **smallest value greater than `target`**.\n```\n\n### Iterators\n\n```cpp\n\nvector\u003cint\u003e A = {5, 3, 7, 6, 2};\nvector\u003cint\u003e::iterator it1;\nvector\u003cint\u003e::iterator it2;\n\nit1 = A.begin() **+ 2**;           // You can + ints to an iterator.\n                               // `it1` points to index 2.\nit2 =   A.end() **- 1**;           // You can - ints to an iterator.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // `it2` points to index 4.\n\nint index_diff = **it2 - it1**;    // You can subtract 2 iterators to get the difference in position.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // Here, `it2 - it1` gives 2\n\nif (it1 **\u003c=** it2)                // You can compare the position of two iterators. Here, `it1` is 2 positions earlier than `it2`.\n\t\tcout \u003c\u003c \"it1 before it2\" \u003c\u003c endl;\n\nit1**++**;                         // ++ also works.\nit1**--**;                         // -- also works.\n\nint value = *****it;               // Dereferencing an iterator gives you the value the iterator 'points' to.\n```\n\n### Missing String Functions\n\n```cpp\n// C++ has no split function... this is one option you can take:\n//     Put the string into an istringstream and use formatted extraction to taken\n//     out the tokens and append them to the end of a vector.\nvoid **split**(const string\u0026 str, vector\u003cstring\u003e\u0026 tokens) {\n    stringstream iss(str);\n    copy(istream_iterator\u003cstring\u003e(iss), istream_iterator\u003cstring\u003e(), back_inserter(tokens));\n}\n\n```\n\n### Typecasting \u0026 Data Structure Conversion\n\n```cpp\n// **string** ‚Üí **int**        **Use stoi**\nstring s = \"123\";\nint val = stoi(s);\n\n// **char** ‚Üí **int          Subtract ASCII base**\nchar c = '5';\nint val = c - '0';\n\n// **int** ‚Üí **string        Use to_string**\nint val = 123;\nstring s = to_string(val);\n\n**// char ‚Üí string       Use initialiser list**\nchar c = 'a';\nstring s = {c};\n\n// **vector** ‚Üí **set                 Use the range constructor of set**\nvector\u003cint\u003e v = {1, 2, 3};\nunordered_set\u003cint\u003e s**(v.begin(), v.end())**;\n\n// **set** ‚Üí **vector                 Use the range constructor of vector**\nunordered_set\u003cint\u003e s = {1, 2, 3};\nvector\u003cint\u003e v**(s.begin(), s.end())**;\n```\n\n## **Tidbits**\n- Under the hood, `vector::clear` may not actually clear out values from the vector.\n- Careful, you‚Äôll get a segfault when the iterator is out of bounds. Eg. v.begin() + 1 in an empty vector.\n- The reason this doesn't return a value is because of exception safety.\n- Vector, map and set all share some common method names: insert, erase, clear, size, etc.\n","lastmodified":"2022-10-14T06:51:53.930879724Z","tags":null},"/Knowledge/Engineering/Languages/C++-Standard-Library":{"title":"C++ Standard Library","content":"\nThis section contains notes about some of the most useful things in the `std` namespace. [C++ Standard Library headers](https://en.cppreference.com/w/cpp/header)\n\n## IO\n- Printing to a specific number of decimal points\n    ```cpp\n    #include \u003ciostream\u003e\n    #include \u003ciomanip\u003e\n    #include \u003ccmath\u003e\n    \n    using namespace std;\n    \n    int main() {\n        cout \u003c\u003c setprecision(6) \u003c\u003c fixed;\n        cout \u003c\u003c M_PI \u003c\u003c endl;\n    }\n    \n    Outputs: 3.141593   \n    ```\n    \n    `std::fixed` sets the default formatting for stdout\n    \n    `std::setprecision` sets the precision to be expected in a given i/o stream\n\n## Strings [TODO]\n\n- String formatting with `**std::stringstream**` from `\u003csstream\u003e`\n    \n    ```cpp\n    std::stringstream fmt;\n    fmt \u003c\u003c \"hello \" \u003c\u003c 10;\n    std::string formatted_str \u003c\u003c fmt.str();\n    ```\n    \n\nstr.find_first_of\n\nstd::string::npos\n\nstd::string_view vs std::string\n\n- You can do `constexpr std::string_view s = \"‚Ä¶\"`, but not `constexpr std::string s = \"‚Ä¶\"`\n\n## CType [TODO]\n\nisspace\n\n## I/O Stream\n\nIn computer science, a stream is an abstraction that represents a sequence of data that arrives over time (much like a conveyor belt delivering items). In C++, this stream abstraction is how we work with reading/writing characters coming from an input stream (eg. user input on the terminal or a file in read mode) or being written to an output stream (eg. the terminal or a file in write mode).\n\n![Untitled](Knowledge/Engineering/Languages/assets/Untitled%206.png)\n\n### **`ostream`**\n\nAn `ostream` serialises typed values as bytes and dumps them somewhere. \n\n- The ‚Äòput to‚Äô operator `\u003c\u003c` is used on objects of type `ostream`.\n- `std::cout` and `std::err` are both objects of type `ostream`.\n\n![Untitled](Knowledge/Engineering/Languages/assets/Untitled%207.png)\n\n---\n\n- You can chain the put-to operator `\u003c\u003c` because the result of an expression like `cout \u003c\u003c ‚ÄúHello‚Äù` is itself an `ostream`.\n    \n    ```cpp\n    cout \u003c\u003c \"Hello, \" \u003c\u003c \"world.\\n\";\n    ```\n    \n- You can overload the \u003c\u003c operator for your own classes. Example\n    \n    ```cpp\n    class Person {\n    public:\n        Person(std::string name, int age) : name_(name), age_(age) {\n        }\n    \n        std::string Serialise() const {\n            return \"(name: \" + name_ + \")\";\n        }\n    \n    private:\n        std::string name_;\n        int age_;\n    };\n    \n    ostream\u0026 operator\u003c\u003c(ostream\u0026 os, const Person\u0026 person) {\n        os \u003c\u003c person.Serialise();\n        return os;\n    }\n    \n    int main() {\n        Person person(\"Andrew\", 42);\n        std::cout \u003c\u003c person \u003c\u003c std::endl;\n        return 0;\n    }\n    ```\n    \n\n### `iomanip` [TODO]\n\n### `istream`\n\nAn `istream` takes in bytes and converts it to typed values.\n\n- The ‚Äòget from‚Äô operator `\u003e\u003e` is used as an input operator\n- `std::cin` is the standard input stream\n\n![Untitled](Knowledge/Engineering/Languages/assets/Untitled%208.png)\n\n---\n\n- **Formatted extraction:**\nThe type of the RHS of the ‚Äòget from‚Äô operator determines what input is accepted\n    \n    ```cpp\n    int i;\n    cin \u003e\u003e i;    // Expects an integer value to be supplied\n    \n    double j;\n    cin \u003e\u003e j;    // Expects a floating point value to be supplied\n    ```\n    \n    - You can chain the get-from operator `\u003e\u003e` just like for put-to `\u003c\u003c`.\n        \n        ```cpp\n        cin \u003e\u003e i \u003e\u003e j;   // Expects an integer, and then a double\n        ```\n        \n    - The user input can be space-separated, new-line-separated or tab-separated integers. There can be any number of ' ', '\\n', '\\t' characters between the integers\n    - If what the user types in cannot be casted to the expected type, nothing happens. The program continues execution and the variable ends up being uninitialised\n- **Unformatted line extraction with** `**std::getline**`\nWhen you want to read an entire line up to and not including the newline character, you should use `getline` rather than directly read from `cin` (which always considers space characters ' ', '\\n', '\\t' to be terminating)\n    \n    ```cpp\n    string msg;\n    std::cin \u003e\u003e msg;\n    \n    // If the user types: **hello world**, then msg will only be \"**hello**\".\n    // If you want to capture the entire line instead, use ***getline***\n    std::**getline**(cin, msg);\n    ```\n    \n- Common pitfall: when you do formatted execution followed by unformatted extraction, you‚Äôll skip over the unformatted extraction. \nThis is fixed with `std::cin.ignore()`\n    \n    [Source](https://stackoverflow.com/questions/21567291/why-does-stdgetline-skip-input-after-a-formatted-extraction)\n    \n    Suppose you have:\n    \n    ```cpp\n    std::cin \u003e\u003e age;                     // You type: 10\n    std::getline(std::cin, name);        // You type: Andrew\n    ```\n    \n    You are actually typing ‚Äú10\\n‚Äù for the first input prompt. The ‚Äú\\n‚Äù unfortunately remains in the buffer when we get to the next `getline` call, which terminates immediately upon seeing the newline, thereby skipping input extract.\n    \n    To solve this, you need to call `std::cin.ignore()` to skip over the newline.\n    \n    ```\n    std::cin \u003e\u003e age;\n    std::cin.ignore();\n    std::getline(std::cin, name);\n    ```\n    \n\n## File Manipulation (`fstream`)\n\nThe `fstream.h` header defines `ifstream`, which you use to open a file in read mode, `ofstream`, which you use to open a file in write mode, and `fstream` which you can use to create, read and write to files. \n\n```cpp\n// ‚ïê‚ïê‚ïê‚ïê‚ïê Opening a file for reading ‚ïê‚ïê‚ïê‚ïê‚ïê\nifstream test_file(\"test.txt\");\nstring line;\nwhile (std::getline(test_file, line)) {\n    cout \u003c\u003c \"Read line: \" \u003c\u003c line \u003c\u003c endl;\n}\ntest_file.close();\n\n// ‚ïê‚ïê‚ïê‚ïê‚ïê Opening a file for writing (truncating) ‚ïê‚ïê‚ïê‚ïê‚ïê\nofstream test_file(\"out.test.txt\");\nstring line;\ntest_file \u003c\u003c \"Hello world\\n\";\ntest_file.close();\n\n// ‚ïê‚ïê‚ïê‚ïê‚ïê Opening a file for writing (appending) ‚ïê‚ïê‚ïê‚ïê‚ïê\nofstream test_file(\"out.test.txt\", ios::app);\nstring line;\ntest_file \u003c\u003c \"Hello world\\n\";\ntest_file.close();\n```\n\n\u003caside\u003e\n‚ÑπÔ∏è Note that `ofstream` is a subclass of `ostream` and `ifstream` is a subclass of `istream`, meaning that you get to use `\u003c\u003c` to write and `\u003e\u003e` to read and work with them in the same way that you work with `cout` and `cin`.\n\n\u003c/aside\u003e\n\n```cpp\n// ifstream member methods:\nin.eof();      // Returns true if EOF has been reached.\n```\n\n## String Streams (`sstream`)\n\nString streams let you treat instances of `std::string` as stream objects, letting you work with them in the same way that you‚Äôd work with `cin`, `cout` of file streams.\n\n```cpp\n// You can use `**istringstream**` anywhere you use `**istream**`. You can use this to feed strings to something that expects input.\nstd::istringstream str_in(\"42 12 24\");\nint a, b, c;\nstr_in \u003e\u003e a \u003e\u003e b \u003e\u003e c;\n\n// Similarly, `**ostringstream**` can substitute for `**ostream**` instances. You can use this to capture output into a string.\nstd::ostringstream str_out;\nstr_out \u003c\u003c \"Hello world\";\nstd::string extracted = str_out.**str**();\n```\n\n## Filesystem\n\nC++17 gives us the `std::filesystem` API which finally lets us basically do `ls` on directories and traverse the filesystem, create symbolic links, get file stats, etc.\n\n```cpp\n// Loops through all files in the given directory.\nfor (const std::filesystem::directory_entry\u0026 each_file : std::filesystem::directory_iterator(\"/usr/bin\")) {\n    cout \u003c\u003c each_file.path() \u003c\u003c endl;\n}\n```\n\n## Smart Pointers [TODO]\n\n## Tuple\n\n```cpp\n// Construct tuples with `std::make_tuple`   \n**std::tuple\u003cstring, int\u003e** person(\"Andrew\", 42);\n\n// Access tuple values with `std::get`. Tuples don't work with the subscript operator [] unfortunately. Reason: https://stackoverflow.com/questions/32606464/why-can-we-not-access-elements-of-a-tuple-by-index.\ncout \u003c\u003c **std::get\u003c0\u003e**(person) \u003c\u003c endl;\ncout \u003c\u003c **std::get\u003c1\u003e**(person) \u003c\u003c endl;\n\n// You can also construct tuples with `std::make_tuple`. This is better\n// when you want to pass a tuple r-value to a function because `make_tuple`\n// can infer types. See: https://stackoverflow.com/questions/34180636/what-is-the-reason-for-stdmake-tuple\nstd::tuple\u003cstring, int\u003e person = **std::make_tuple**(\"Andrew\", 42);\n```\n\n## Multithreading\n\n### Thread (`std::thread`)\n\n\u003caside\u003e\n‚ÑπÔ∏è On Linux, you have to compile with the flag `-pthread` to link the POSIX thread library: `g++ -pthread -o term term.c`\n\n\u003c/aside\u003e\n\n```cpp\nvoid func() {\n\t\t...\n}\n\nint main() {\n\t\t// When you construct a thread, it starts running the given function in a separate thread immediately.\n\t\tstd::thread my_worker(func);\n\n\t\tmy_worker.join();      // A synchronous statement that blocks the current thread until `my_worker` has terminated.\n\t\treturn 0;\n}\n```\n\n- Simple full example\n    \n    ```cpp\n    #include \u003ciostream\u003e\n    #include \u003cthread\u003e\n    \n    using namespace std::literals::chrono_literals;   // Allows you to use time literals like `1s`, `1500ms`, etc.\n    \n    static bool finished = false;\n    \n    void DoWork() {\n        while (!finished) {\n            std::cout \u003c\u003c \"Working...\\n\";\n            std::this_thread::sleep_for(1000ms);\n        }\n    }\n    \n    int main() {\n        std::thread worker(DoWork);\n    \n        std::cin.get();\n        std::cout \u003c\u003c \"Interrupted!\\n\";\n        finished = true;\n    \n        worker.join();\n        std::cout \u003c\u003c \"Worker thread has finished execution.\\n\";\n        return 0;\n    }\n    ```\n    \n\n### Futures (`std::future`) [TODO]\n\n### Async (`std::async`) [TODO]\n\n### Mutex (`std::mutex`)\n\n`std::mutex` is a very simple lockable object used to synchronise access to a resource shared by parallel threads.\n\n```cpp\nlock()\nunlock()\n```\n\n- Race condition example and how to solve it with mutexes\n    \n    ```cpp\n    #include \u003ciostream\u003e\n    #include \u003cthread\u003e\n    \n    **static int count = 0;**    // This is a shared resource that parallel threads will try to read/write to\n    \n    void **IncrementCount**() {\n        while (count \u003c 100) {\n            std::cout \u003c\u003c \"Thread with ID \" \u003c\u003c std::this_thread::get_id() \n                      \u003c\u003c \" sees count as \" \u003c\u003c count \u003c\u003c \"\\n\";\n            count++; \n        }\n        return;\n    }\n    \n    int main() {\n        **std::thread t1(IncrementCount);\n        std::thread t2(IncrementCount);**\n    \n        **t1.join();\n        t2.join();**\n        return 0;\n    }\n    ```\n    \n    The following is the output of running the program. You can see the lines being printed are also jumbled because `cout` is also a ‚Äòresource‚Äô being accessed by both threads. We need to lock access to `count` and `cout`.\n    \n    ```cpp\n    Thread with ID 140123004860160 sees count as 82\n    Thread with ID 140123004860160 sees count as 83\n    \n    Thread with ID 140123013252864 sees count as 85\n    Thread with ID Thread with ID 140123004860160 sees count as 14012301325286486 sees count as \n    Thread with ID 140123004860160 sees count as 87\n    Thread with ID 140123004860160 sees count as 88\n    86Thread with ID \n    Thread with ID 140123013252864 sees count as 90\n    Thread with ID 140123013252864 sees count as 91\n    ```\n    \n    **Solution:**\n    \n    ```cpp\n    #include \u003ciostream\u003e\n    #include \u003cthread\u003e\n    #include \u003cmutex\u003e\n    \n    static int count = 0;\n    **std::mutex count_mutex;**\n    \n    void IncrementCount() {\n        while (count \u003c 100) {\n            **count_mutex.lock()**;\n            std::cout \u003c\u003c \"Thread with ID \" \u003c\u003c std::this_thread::get_id() \n                      \u003c\u003c \" sees count as \" \u003c\u003c count \u003c\u003c \"\\n\";\n            count++; \n            **count_mutex.unlock()**;\n        }\n        return;\n    }\n    \n    int main() {\n        std::thread t1(IncrementCount);\n        std::thread t2(IncrementCount);\n    \n        t1.join();\n        t2.join();\n        return 0;\n    }\n    ```\n    \n    ```cpp\n    Thread with ID 140367027558144 sees count as 82\n    Thread with ID 140367027558144 sees count as 83\n    Thread with ID 140367027558144 sees count as 84\n    Thread with ID 140367027558144 sees count as 85\n    Thread with ID 140367027558144 sees count as 86\n    Thread with ID 140367027558144 sees count as 87\n    Thread with ID 140367027558144 sees count as 88\n    Thread with ID 140367027558144 sees count as 89\n    Thread with ID 140367027558144 sees count as 90\n    Thread with ID 140367027558144 sees count as 91\n    ```\n    \n\n## Regex\n\nNote: using raw string literals, $\\texttt{R\"(...)\"}$, makes writing regex patterns easier because you won‚Äôt be confused about backslashes escaping things that you didn‚Äôt mean to escape.\n\n```cpp\n#include \u003cregex\u003e\n\n**std::regex** pattern(R\"()\");\n**std::smatch** matches;        // A container for storing std::string matches (capture groups). There are also other containers like std::cmatch for storing string literal matches. \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// These are all instances of std::match_results and can be indexed with the subscript operator [].\n\n// **‚ïê‚ïê‚ïê‚ïê‚ïê Functions ‚ïê‚ïê‚ïê‚ïê‚ïê**\n**std::regex_match**(haystack, pattern);            // Returns true if matched.\n\n**std::regex_search**(haystack, matches, pattern);  // Returns true if matched. Populates the std::smatch object with capture group matches that you can extract.\n\t\tmatches[i]                                  // Accesses the i-th match. Note: matches[1] accesses the first match, matches[2] accesses the second match, and so on.\n```\n\n## Chrono [TODO]\n\n# C++ Data Structures \u0026 Algorithms:\n\nThis is a summary of the highly efficient general-purpose data structures and algorithms provided by the standard library. Refer to this section for interview preparation and learning competitive programming with C++.  \n\n## Vector:\n\n'Vector' is a misleading name. It should be called '[ArrayList](https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html)' or 'DynamicArray'. It is implemented with an array under the hood.\n\n- To resize the underlying array, a larger memory block is allocated and all items in the original array are copied over to the new larger one. This is an $O(n)$ operation\n- Vectors consume more memory than arrays, but offers methods for runtime resizing\n\n```cpp\n#include \u003cvector\u003e\n\n// ***Initialisation***\nvector\u003cint\u003e a = { 1, 2, 3 };    \n\n// ***Main methods***\na.**insert**(posIter, b)           // **O(1)** - Inserts **b** at **posIter**   \na.**insert**(posIter, it1, it2)    //        Inserts elements from **it1** to **it2** at **posIter**\n\na.**erase**(posIter)               // Deletes item at **posIter**\na.**erase**(startIter, endIter)    // Deletes all elements in range from inclusive **startIter** to exclusive **endIter**\n\na.**push_back**(b)                 // **O(1)** - Append\na.**pop_back**()                   // **O(1)** - Pop from end\n\na.**front**()                      // **O(1)** - Peek front\na.**back**()                       // **O(1)** - Peek back\n\na**[**i**]**                           // **O(1)** - Access item at an index (the same way you would for arrays)\na.**at**(i)                        //        Alternative to []. It throws an exception for out of bounds access\n\n// ***Iterators***\na.**begin**()               // Iterator starting from first element (index 0)\na.**end**()                 // Iterator starting from last element\n\na.**rbegin**()              // Reversed\na.**rend**()                \n\na.**cbegin**()              // Read-only iterator\na.**cend**()                \n\n// ***Properties***\na.**size**()\na.**empty**()\na.**max_size**()\na.**capacity**()\n\n```\n\n- Slicing and splicing\n    \n    ```cpp\n    \n    // ***Slicing***\n    template\u003ctypename T\u003e\n    vector\u003cT\u003e **slice**(vector\u003cT\u003e vec, int start, int end) {     \n    \t\t// Returns a new vector from inclusive start to exclusive end\n        auto first = vec.cbegin() + start; \n        auto last = vec.cbegin() + end;\n        vector\u003cT\u003e sliced(first, last);\n        return sliced;\n    }\n    \n    // ***Splicing***\n    vector\u003cint\u003e a = { 1, 2, 3};\n    vector\u003cint\u003e b = { 4, 5 };\n    a.insert(a.begin() + 1, b.begin(), b.end());     // a is now { 1, **4**, **5**, 2, 3 }\n    a.erase(a.begin() + 2, a.begin() + 3);           // a is now { 1, 4, 2, 3 } \n    ```\n    \n\n## Set:\n\n### `set`\n\nStores elements in ***sorted order*** without duplicates. For most use cases, you probably want to use `unordered_set` instead, which has more favourable time complexities.\n\n```cpp\n**set\u003cT\u003e s**;\n\ns.**insert**(T elem)      // **O(logn)** - Inserts element\ns.**find**(T elem)        // **O(logn)** - Gets an element\n                      //           Returns an iterator which points to the value if it was found, otherwise it points to **s.end()** \ns.**size**()              // **O(1)**    - Cardinality\n```\n\n- The underlying implementation uses a balanced tree\n\n### `unordered_set`\n\nSame \n\n```cpp\nunordered_set\u003cT\u003e s;\n\n// **CRUD:**\ns.insert(T elem)      // O(1) \ns.find(T elem)        // O(1)\ns.erase()\n\n// **Properties:**\ns.size()              // O(1)\ns.empty()\n```\n\n- Uses a hash table as the underlying data structure\n\n## Map:\n\n### `map`\n\n```cpp\nmap\u003cstring, int\u003e m;\n\n// ***Main operations***\nm.insert(pair)      // Takes in **std::pair\u003ckeyT, valT\u003e**\nm[key] = val        // More straightforward way to add key-value pairs\nm.erase(key)        // Deletes key-value pair by key. Doesn't fail if the key doesn't exist\n\n// ***Iterators***\nm.begin()\nm.end()\n// ... and all the other ones available to classes like **std::vector**\n\n// ***Properties***\nm.size()\nm.max_size()\nm.empty()\n```\n\n- Usage example\n    \n    ```cpp\n    // ***Adding key-value pairs***\n    map\u003cstring, int\u003e frequencies;\n    frequencies[\"Hello\"] = 4;\n    frequencies[\"World\"] = 3;\n    int val = frequencies[\"World\"];\n    \n    // ***Iterating through key-value pairs***\n    for (auto it = frequencies.begin(); it != frequencies.end(); ++it) {\n        cout \u003c\u003c it-\u003efirst \u003c\u003c \" : \" \u003c\u003c it-\u003esecond \u003c\u003c endl;\n    }\n    ```\n    \n\n---\n\n- There are [multiple ways](https://stackoverflow.com/questions/17172080/insert-vs-emplace-vs-operator-in-c-map) to insert key-value pairs into a map, eg. `insert()`, `[ ]` operator, `emplace()`, etc.\n\n### `unordered_map`\n\nThe interface is very similar to `std::map`, however it offers a few more lower-level methods like `bucket_count()`, `load_factor()`, etc.\n\n```cpp\n\n```\n\n## Strings:\n\nThe set of methods available to the `std::string` class is similar to the methods available to `std::vector`, plus a few more special string manipulation methods and operator support like `+`, `\u003c\u003c`, `\u003e\u003e`. \n\n```cpp\n\n// ***Main operations***\ns1 + s2              // Concatentation\ns1.append(s2)        // Alternative to + operator\n\n// TODO: https://www.cplusplus.com/reference/string/string/compare/\ns1.compare(s2)\ns1.compare(s2, pos\n\ns.substr(startPos, runLen)   // Returns the substring from inclusive **startPos** onwards for **runLen** characters\n\n//TODO: more string ops https://www.cplusplus.com/reference/string/string/\ns.find\ns.find_first_of\ns.find_first_not_of\ns.find_last_of\ns.find_last_not_of\n\u003e\n// ***Others***\ns.copy()\n\nchar c;\nstd::isdigit(c)    // Returns true if the string consists of a valid digit.\nstd::isalnum(c)\nstd::isspace(c)\n```\n\n**Raw Strings:**\n\nThere are raw string literals just like in Python where everything inside the string is treated as raw characters, not special characters. This means you won‚Äôt have to escape any special characters with backslash and they‚Äôll all lose their meaning. This is especially useful when defining strings containing regex patterns which contain a bunch of backslashes.\n\nThe format for defining a raw string literal is: $\\texttt{R\"(...)\"}$. \n\n```cpp\nstd::string my_raw_str = R\"(my raw string)\";   // ‚Üí \"my raw string\"\n```\n\n\n## Arrays:\n\n```cpp\n// ***Initialisation***\nint nums[3];\nint nums[3] = { 1, 2, 3 };     // [1, 2, 3]\nint nums[]  = { 1, 2, 3 };     // [1, 2, 3]\nint nums[3] = { 1 };           // [1, 0, 0]\nint nums[3] = {  };            // [0, 0, 0]\n\n// TODO: ***Utility functions***\nstd::fill_n(nums, 3, -1);\n\n```\n\n- To get the size of an array, you‚Äôd need to do $\\texttt{sizeof(arr) / sizeof(arr[0])}$. It is almost always recommended to use `std::vector` over regular arrays[*](https://stackoverflow.com/questions/2037736/how-to-find-the-size-of-an-int).\n\n### Matrices:\n\n## Priority Queue:\n\n```cpp\n#include \u003c**priority_queue**\u003e\n\n```\n\n## Stack \u0026 Queue:\n\n### std::stack:\n\n```cpp\n#include \u003c**stack**\u003e\n\nstack\u003cint\u003e s;\n\n// ***Main methods***\ns.**push**(item);      \ns.**top**()          // Reads the top element\ns.**pop**()          // Removes the top element. *Doesn't actually return anything*\ns.**empty**()\ns.**size**()\n```\n\n### std::queue:\n\n```cpp\n#include \u003c**queue**\u003e\n\nqueue\u003cint\u003e q;\n\n// ***Main methods***\nq.**push**()   \nq.**front**()          // Reads the next element\nq.**back**()           // Reads the last element\nq.**pop**()            // Removes the top element. Doesn't actually return anything\nq.**empty**()\nq.**size**()\n```\n\n### std::deque:\n\n```cpp\n#include \u003c**deque**\u003e\n\n```\n\n\n### Smart Pointers [TODO]\n\nSmart pointers ‚Äî wraps a naked pointer. Preferred over naked pointers, mainly because it handles the deletion of objects that would cause a memory leak otherwise.\n    - Smart pointers are 'smart' because they enforce ownership semantics.\n        - Objects owned by a `unique_ptr` will have `delete` invoked on them when the `unique_ptr` goes out of scope\n        - Smart pointers are preferred in C++ just because they offer better memory management\nNaked pointers, also called *dumb pointers*, are regular C-style pointers.\n        \n```cpp\nint* p;   // A naked pointer\n```\n\n- Use `#include \u003cmemory\u003e`\n- Makes it so that you never have to call `new` or `delete` in your code\n- C++ code should prefer smart pointers (most commonly¬†`std::unique_ptr`) instead of raw pointers when dynamically allocating objects. The `delete` operator is used on the allocated object in `std::unique_ptr`‚Äôs destructor\n- `std::unique_ptr` ‚Äî the simplest smart pointer. When it goes out of scope, the object gets deleted. They‚Äôre called unique because they cannot be copied ‚Äî because if you were to have two pointers to the same memory address, then if delete is called on one pointer, then the other pointer would be pointing to invalid memory.\n    - If you only have one reference to an object and you want it to be freed once out of scope, then use unique_ptr\n    - There‚Äôs also stuff like `std::make_unique` that is apparently a [replacement for the new operator when initialiser std::unique_ptr?](https://stackoverflow.com/questions/37514509/advantages-of-using-stdmake-unique-over-new-operator)\n        - It is recommended to use the 'make_unique/make_shared' function¬†**to create smart pointers**\n- `std::shared_ptr`\n    - Unlike `std::unique_ptr`, shared_ptr lets you have multiple references to the same object. You can assign a `std::shared_ptr` to another variable that is type `std::shared_ptr`\n    - Uses reference counting. When you assign std::shared_ptr to a variable of type std::shared_ptr, it‚Äôll increment the count\n    - You **have to** use `std::make_shared` to instantiate shared_ptr. It is important to do this because shared_ptr needs to manage bookkeeping around the counting of references. If you were to use new, then you‚Äôve created a separate instance that won‚Äôt be counted as a reference.\n- `std::weak_ptr`\n    - When you assign `std::shared_ptr` to a variable of type `std::weak_ptr`, it won‚Äôt increment the underlying references count managed by the shared_ptr.\n- [Return smart pointers by value](https://www.internalpointers.com/post/move-smart-pointers-and-out-functions-modern-c#:~:text=Return%20smart%20pointers%20from%20functions)","lastmodified":"2022-10-14T06:51:53.930879724Z","tags":null},"/Knowledge/Engineering/Languages/CSS":{"title":"CSS","content":"\n![[Knowledge/Engineering/Languages/assets/css-wallpaper.png|800]]\n\n*CSS* (Cascading Style Sheets) is a declarative language for describing document styling. Also see [[Knowledge/Engineering/Languages/CSS Cookbook|CSS Cookbook]] and [[Knowledge/Engineering/Languages/SCSS|SCSS]].\n\n## Core\nCSS files are just a sequence of **rule sets** which consists of a **[[Knowledge/Engineering/Languages/CSS#Selectors|selector]]** and a **declaration block**:\n![[Knowledge/Engineering/Languages/assets/css-rule-set.png|400]]\nCSS can be applied in a few ways:\n1. Inline on an element, such as `\u003ch1 style=\"color: green;\"\u003e`.\n2. Inside a `\u003cstyle\u003e` element.\n3. Linked externally with `\u003clink ref=\"stylesheet\" href=\"...\"\u003e`.\n\n### Selectors\nA *selector* is a string that targets the HTML element you want to apply some styling rules to. A selector has a *specificity* value. When two styles conflict (which often happens because of [[Knowledge/Engineering/Languages/CSS#Inheritance|inheritance]], which style is chosen is based on which selector has a higher specificity.\n| Selector                    | Syntax                           | Result                                                                                                          | Specificity |\n| --------------------------- | -------------------------------- | --------------------------------------------------------------------------------------------------------------- | ----------- |\n| Element                     | `div`                            | All `div`s.                                                                                                     | 1            | \n| Class                       | `.className`                     | All elements with `class=\"className\"`.                                                                          | 10            |\n| ID                          | `#id`                            | Element with `id=\"id\"`                                                                                          | 1000            |\n| Universal                   | `*`                              | All elements.                                                                                                   | 0            |\n| Attribute                   | `div[attr]` or `div[attr=\"val\"]` | All divs with `attr` or `attr=\"val\"`.                                                                           | 10            |\n| Pseudo-class                | `div:pseudo-class`               | All `div`s that satisfy a certain state ([[Knowledge/Engineering/Languages/CSS#Pseudo-Classes\\|pseudo-class]]). | 10 but depends.            |\n| Pseudo-element              | `div:pseudo-element`             | The specific [[Knowledge/Engineering/Languages/CSS#Pseudo-Element\\|pseudo-element]] of all `div`s.              | 1.            |\n| Descendant combinator       | `div p`                          | All `p`s inside a `div`.                                                                                        |             |\n| Child combinator            | `div \u003e p`                        | All `ps` that are direct children of a `div`.                                                                   |             |\n| Adjacent sibling combinator | `div + p`                        | All `p`s that follow directly after a `div`.                                                                    |             |\n| General sibling combinator  | `div ~ p`                        | All `p`s that follow after a `div`.                                                                             |             |\n\n#### Inheritance\nWhen you apply `div { color: green; }`, all children also implicitly have the rule `color: green;` set.\n\n### Box Model\nEvery element follows the box model below.\n![[Knowledge/Engineering/Languages/assets/css-box-model.png|600]]\n\u003e `height` and `width` affect **only the inner content box**, so the actual dimensions of the element will take up more space if you have padding, border and margin. To change this, set `box-sizing: border-box` to use the [alternative CSS box model](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model#the_alternative_css_box_model).\n\n#### Display\nBoxes are either block-level or inline-level. You change this by setting:\n```css\ndisplay: block;        \ndisplay: inline;        \ndisplay: inline-block;  /* Lets you set the width, height and padding/margins. */\n```\n\u003e When you do `display: flex` or `display: grid`, you're changing the *[inner display type](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model#inner_display_type)*, meaning that the children will behave according to the [[Knowledge/Engineering/Languages/CSS#Flexbox|Flexbox]] or [[Knowledge/Engineering/Languages/CSS#Grid|Grid]] specification.\n\nAlso, when you do `display: inline-flex`, you are *making the container display inline rather than block, not the children*.\n\n### At-Rules\n*At-rules* are special instructions.\n| Name      | Example                                                                                                               | Description                                                                                                |\n| --------- | --------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------- |\n| import    | `@import \"path\"` or `@import url(...)`                                                                                | Brings in another stylesheet.                                                                              |\n| font-face | `@font-face { font-family: \"My Font\"; src: url(...) format('truetype'); }`                                            | Defines a custom font.                                                                                     |\n| media     | `@media screen and (min-width: 300px) { ... }`                                                                        | Executes a [[Knowledge/Engineering/Languages/CSS#Media Query\\|media query]] to conditionally apply styles. |\n| keyframes | `@keyframes myAnim { from {...} to {...} }`. See [docs](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes). | Defines `myAnim` which you can attach to an element by doing `animation: myAnim 1s infinite;` for example.      | \n[There are way more at-rules](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule).\n\n### Pseudo-Class\nPseudo-classes represent special states of an element that you can select for using `selector:pseudo-class`. [See all of them on MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n| Pseudo-class selector | Description                                                            |\n| --------------------- | ---------------------------------------------------------------------- |\n| `:hover`              | When `mouseover` on an element. |\n| `:active`             | When `mousedown`-ed on an element.                                                                        |\n| `:focus`             | After an element is clicked on, or when focused on by tab.                                                                       |\n| `:first-child`        | The first element in a group of siblings. Eg. `li:first-child` selects the first `li`.                                                                       |\n| `:last-child`         | Like `first-child` but selecting the last.                                                                       |\n| `:nth-child`          | Given a linear function of `n`, selects every `f(n)` element for `n = 0, 1, ...`. Eg. `li:nth-child(2n+3`) selects 3rd, 5th, etc.                                                                        |\n\n### Pseudo-Element\nPseudo-elements are some specific parts of an element. They're selectable with `::pseudo-element`. [See all of them on MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n| Pseudo-element selector | Description |\n| ----------------------- | ----------- |\n| `::before`              |             |\n| `::after`               |             |\n| `::first-letter`        |             | \n\n### Position\n```css\nposition: static;    /* Default val. Properties: `top`, `left`, `right`, `bottom` have no meaning. */\n          relative;  /* Like static, but the positioning properties do have meaning. */\n          absolute;  /* Takes this element out of the normal document flow. \n                        It's positioned relative to the nearest `relative` ancestor. */\n          fixed;     /* Like absolute, but relative to the viewport. */\n          sticky;    /* Like relative and fixed. When scrolling past a sticky element,\n                        it 'becomes' fixed, otherwise it stays as relative.\n                        It 'sticks' around on the viewport after you've scrolled past it. */\n```\n\n### Media Query\nMedia queries let you conditionally apply styles based on the user's screen size ([among other things](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries)). This, [[Knowledge/Engineering/Languages/CSS#Flexbox|Flexbox]] and [[Knowledge/Engineering/Languages/CSS#Grid|Grid]] are the main tools for implementing [responsive web designs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Responsive_Design). \n```css\n/* If screen width \u003e= 400px, apply style rules within. */\n@media screen and (min-width: 400px) { ... }\n@media (width \u003c= 400px) { ... }                /* Alternative syntax. */\n\n/* Clamped dimensions. */\n@media screen and (min-width: 100px) and (max-width: 400px) { ... }\n@media (100px \u003c= width \u003c= 400px) { ... }       /* Alternative syntax. */\n```\n\n**Note**: a big part of responsive design is just making elements shrink in width when the viewport shrinks in width. You can accomplish this with media queries, however it's cleaner to just something like this:\n```css\nwidth: clamp(200px, 50%, 600px);\n                    ^ preferred\n```\nHere, an element will default to a preferred width of `50%` but will fall back to 200px if the viewport is too small.\n\n## Flexbox\nFlexbox is a layout model for getting things neatly arranged on a row or column. For layout in 2-dimension, use [[Knowledge/Engineering/Languages/CSS#Grid|Grid]].\n![[Knowledge/Engineering/Languages/assets/flexbox-model.png|450]]\nTo make a flex container, give it `display: flex`. \n```css\nflex-direction: row | row-reverse | column | column-reverse;\nflex-wrap: nowrap | wrap;\njustify-content: flex-start      /* Push items to left. */\n                 flex-end        /* Push items to right. */\n                 center          /* Push items to middle. */\n                 space-between   /* Spread out with max distance between. */\n                 space-around    /* Spread out with max distance around. */\nalign-items: flex-start          /* Anchor items to top of row. */\n             flex-end            /* Anchor items to bottom of row. */\n             center              /* Anchor items along a central line. */\n             baseline            /* Anchor items along the text baseline. */\n             stretch             /* Make items occupy full height. */\nalign-content: flex-start        /* Anchor to top. */ \n               flex-end          /* Anchor to bottom. */\n               center            /* Anchor to middle. */\n               space-between     /* Spread out rows with max distance between. */\n               space-around      /* Spread out rows with max distance around. */\nrow-gap: 10px;\ncolumn-gap: 10px;\n```\n![[Knowledge/Engineering/Languages/assets/flexbox-properties.png|1000]]\n([images sourced from css-tricks](https://css-tricks.com/snippets/css/a-guide-to-flexbox/))\n\n## Grid\nTo make a **grid container**, do `display: grid` and set the number of rows and columns with `grid-template-rows` and `grid-template-columns`.\n```css\n/* üõ†Ô∏è Rows/cols of the grid. */\ngrid-template-columns: 100px 100px 100px;      /* Defines 3 columns. */\ngrid-template-rows:    25% 40rem 123px 10vw;   /* Defines 4 rows. You can mix units. */\n                       repeat(20%, 5);         /* Expands to 20% 20% 20% 20% 20%. */\n                       100px 1fr 4fr;          /* The `fr` unit takes a fraction of the available space. */\n                       minmax(100px, auto) minmax(50px, auto); \n                                               /* ^ `minmax` sets the min-height of the row while allowing\n                                                    larger elements to take up the space they need (auto). */\n\ngrid-template: rows / cols;                    /* Shorthand for the above 2 properties. */\n\ngrid-auto-columns: ...;     /* Specifies size of auto-generated columns. */\ngrid-auto-rows: ...;        /* Specifies size of auto-generated rows. */\n\n/* ü§è Gap sizes. */\n/* Just like Flexbox's `row-gap` and `column-gap`. */\ngrid-row-gap: 10px;\ngrid-column-gap: 10px;\n\n/* üìè Alignment. */\n/* Just like Flexbox, Grid has `justify-content`, `align-items`, `align-content`.\n   Grid additionally has `justify-items` that Flexbox ignores. */\njustify-content: start;          /* Behaves analogously to Flexbox. Aligns along x-axis. */\n                 end;\n                 center;\n                 space-around;\n                 space-between;\n                 stretch;\nalign-content:   start;          /* Behaves analogously to Flexbox. Like `justify-content`, */\n                 end;            /* but along the y-axis.                                   */\n                 center;\n                 space-around;\n                 space-between;\n                 stretch;\nalign-items:     stretch;        /* Behaves analogously to Flexbox. Aligns along y-axis. */\n                 start;\n                 end;\n                 center;\n                 baseline;\njustify-items:   start;          /* Like `align-items`, but aligns along the x-axis. */\n                 end;\n                 center;\n                 stretch;\n```\n\nAny direct child element of the grid container is a **grid item** and can be positioned on the grid using the following properties:\n```css\n/* Positioning in the grid. */\ngrid-column-start: n;    /* Pushes the item to the n-th column (starting from n = 1, not n = 0) */\ngrid-column-end: m;     \ngrid-row-start: n;\ngrid-row-end: m\n              span l;    /* Instead of specifying the start/end with an index, you can specify how many cells are spanned. */\n\ngrid-area: row1 / col1 / row2 / col2;   /* Shorthand for the above 4 properties, spanning an area on the grid. */\n```\n\n![[Knowledge/Engineering/Languages/assets/css-grid.png|1200]]\n([graphics sourced from css-tricks](https://css-tricks.com/snippets/css/complete-guide-grid/))\n\n\u003e Just remember:\n\u003e - 'justify' is for horizontal/x-axis, 'align' is for vertical/y-axis.\n\u003e - 'content' is for container, 'items' is for items.\n\n## CSS Code Style\nSome simple guidelines for writing maintainable CSS code. See [MaintainableCSS](https://maintainablecss.com/).\n- Prefer semantic class names.\n    ```html\n    \u003c!-- Semantic --\u003e\n    \u003cdiv class=\"searchResults\"\u003e\n    \u003c!-- Not semantic --\u003e\n    \u003cdiv class=\"red pull-down m-2\"\u003e\n    ```\n    \u003e \"... use values that describe the nature of the content, rather than values that describe the desired presentation of the content\"\n- Stick with a naming convention like this:\n    ```css\n    .module[-component][-state] { ... }\n\n    /* Examples: */\n    .breadcrumbs-link { ... }\n    .breadcrumbs-link-disabled { ... }\n    .breadcrumbs-separator { ... }\n    ```\n- Avoid using IDs just as hooks for styling.\n- Avoid undoing styling rules, eg. resetting styles provided by bootstrap or by another one of your CSS rules elsewhere.\n- Write comments as if you were documenting regular program source code, *especially if you write rules that are meant to solve an issue*. CSS is usually a huge pain for people, so please remember to help your future self, and especially others working with your code.\n","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Languages/CSS-Cookbook":{"title":"CSS Cookbook","content":"\nA collection of tricks and common things to achieve with [[Knowledge/Engineering/Languages/CSS|CSS]].\n\n## Centering\n[Complete guide to centering](https://css-tricks.com/centering-css-complete-guide/).\n- **Centering horizontally**:\n    - Inline? `text-align: center` on the parent.\n    - Block? `margin: 0 auto; width: 200px`.\n    - Multiple blocks? `display: flex; justify-content: center`.\n    - Hack: \n        ```css\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%);\n    ```\n- **Centering vertically**:\n    - Inline (text)?: \n    ```css\n    .center-text {\n        height: 100px;\n        line-height: 100px;\n        white-space: nowrap;\n    }\n    ```\n    - Block?\n    ```css\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    ```\n    - Hack: \n        ```css\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    ```\n\n## Images\n- [Fluid images](https://unstoppablerobotninja.com/entry/fluid-images/) to prevent images from ever overflowing: `img { max-width: 100%; }`. \n- To make background images fit neatly into cards:\n    ```css\n    aspect-ratio: 16/9;\n    background-image: ...;\n    background-size: cover;\n    background-position: center;\n    ```\n- To make `\u003cimg\u003e` keep its aspect ratio despite its dimensions:\n    ```css\n    width: 100px;\n    height: 100px;\n    object-fit: cover;      /* Image is clipped along its width. */\n                contain;    /* Image changes its dimension to fully fit inside the dimensions. */\n    ```\n\n## Misc\n- You can combine different units in a `calc` expression, for example: `height: calc(100vh - 100px)`.\n```css\ndisplay: grid\ngrid-template-columns: repeat(auto-fit, minmax(150px, 1fr))\n```\n","lastmodified":"2022-10-14T06:51:53.930879724Z","tags":null},"/Knowledge/Engineering/Languages/Dart":{"title":"Dart","content":"\n![[Knowledge/Engineering/Languages/assets/dart-wallpaper.png|700]]\n\nDart is a [[Knowledge/Engineering/Programming/Type System#Static Typing|statically-typed]] and [[Knowledge/Engineering/Programming/Object Oriented Programming|object-oriented]] programming language, designed specifically for building cross-platform apps/frontends that can be run on Android, iOS, native desktop (Windows, macOS, Linux) and web browsers. Its syntax is similar to a merging of Java, JavaScript and TypeScript. Although it's intended to be used for building frontends, Dart can also be used on the server, just like JavaScript.\n\n## Compilation Model\nThe Dart [[Knowledge/Engineering/DevOps/Virtual Machines#Process Virtual Machine|virtual machine]], which ships with the [Dart SDK](https://dart.dev/get-dart), enables Dart code to be compiled to the native (machine) code for mobile devices or desktops.\n\nDart source code can also be transpiled to [[Knowledge/Engineering/Languages/JavaScript|JavaScript]] for the web browser (using [dart2js](https://dart.dev/tools/dart2js), which also ships with the Dart SDK).\n\nJIT compilation. \n\nAOT compilation.\n\n## Core\n\n**Questions**\n- ' vs \"\n- When invoking functions, you can set named parameters like `color: Colors.red`\n- Callbacks: `(params) { ... }` and `(params) =\u003e ...`?\n- `const`\n---\n\n`final`\nFloored division: `5 ~/ 2 == 2`\n\nTernary operator: `() ? () : ()`.\n\n\nAny identifier whose name starts with `_` becomes privately scoped to the file it's in. No other file in the project can access that identifier.\n\n\nSet: `\u003cType\u003e{}`\n\nArray: `\u003cType\u003e[]`\n \n## Dart Libraries\nTODO core libraries: https://dart.dev/guides/libraries/library-tour\n\nTODO: pub.dev\n","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Languages/Go":{"title":"Go","content":"\n![[Knowledge/Engineering/Languages/assets/go-wallpaper.png|800]]\n\nGo is a [[Knowledge/Engineering/Programming/Programming Paradigm|statically-typed]] *compiled* language inspired by [[Knowledge/Engineering/Languages/C|C]] in design, but aims to provide memory safety, ease of usage, and the high performance of close-to-metal languages like [[Knowledge/Engineering/Languages/C++|C++]] and [[Knowledge/Engineering/Languages/Rust|Rust]], which Go is often compared to. The main overarching difference is that Go makes language design decisions that favour ease of usage over speed.\n\nNotably, Go is credited for improving the developer experience in writing [[Knowledge/Engineering/Programming/Concurrency|concurrent]] code with concurrency constructs built into the language. It's also credited with very fast compilation/build times, which is one reason why Go is prevalent in DevOps.\n\nGo is general-purpose, but it's typically used for building:\n- Backend servers in combination with a framework like [Gin](https://gin-gonic.com/).\n- Complex scripts and CLIs. For one-off scripts, [[Knowledge/Engineering/Languages/Python|Python]] is quicker to write, but for long-lived scripts used frequently, Go might be better.\n- Data-intensive algorithms.\n\n---\n\n\u003e I learned Go mainly from the official ['A Tour of Go'](https://go.dev/tour/) tutorial and official docs.\n\n## Packages\nAll Go programs consist of *packages*, which consist of source files defining a bunch of functions, variables, etc. Program execution starts in the `main` package. \n\nOutside of the standard library, there is a rich Go packages ecosystem searchable at [pkg.go.dev](https://pkg.go.dev). This is an [awesome community list](https://awesome-go.com/) of packages.\n\n### Imports\nImport statements like `import fmt` creates a binding `fmt` that lets you access the package's functions.\n- If you do `import math/rand`, it uses the last name in the path to create the binding, creating the `rand` binding in this case.\n- It's preferred to group import statements into parentheses:\n\t```go\n\timport (\n\t    \"fmt\"\n\t    \"math\"\n\t)\n\t```\n\n### Exports\nA binding is exported if it starts with a capital letter, otherwise, it remains only accessible within its package. It's that simple.\n\n## Variables\nVariables are declared with `var` and can be done at the package-level or function-level.\n```go\n// Package-level variables.\nvar foo string = \"Hi\"\n\nfunc main() {\n\t// Function-level variables.\n\tvar bar int = 42\n\n\t// An equivalent short-hand syntax using :=\n\t// Note how the type of `baz` is inferred.\n\tbaz := 24\n}\n```\n- Types always come *after* the variable/parameter name, like [[Knowledge/Engineering/Languages/TypeScript|TypeScript]]. **Why?** In short, with C-style type declaration, complex types quickly become unreadable, eg. `int (*foo)(int (*)(int, int), int)`. By specifying the type after the symbol name, you have significantly more readable complex types: `foo func(func(int, int) int, int) int` ([official blog](https://go.dev/blog/declaration-syntax)).\n- Uninitialised variables will take on a default value defined by the language standard: `0` for numeric types, `false` for boolean, `\"\"` for strings.\n\n### const\nLike in JavaScript, you can make bindings `const` which prevents them from being reassignable after being declared.\n```go\nconst Pi = 3.14\n```\n\n## Type System\nGo is statically-typed, so the type of every symbol should be known at compile-time.\n\n### Primitive Types\nGo's primitive types include: `bool`, `string`, `int` (and all its variants like `uint` and `int64`), `float32`,`float64`, `complex64` and `complex128` for complex numbers.\n\n## Functions\nFunctions declarations look like this in Go. \n```go\nfunc foo(a int) int {   // \n\treturn a + 42;\n}\n```\n\n### Multiple Return Values\nUnlike most languages, you can return multiple values without needing to wrap it in a data structure.\n```go\nfunc foo() (int, int) {\n\treturn 42, 24\n}\n\nfunc main() {\n\ta, b := foo()    // a ‚Üí 42, b ‚Üí 24.\n}\n```\n\n## Basic Constructs\n### Looping\nAll looping is done with `for`. You never use parentheses.\n```go\n// Regular for-loop.\nfor i := 1; i \u003c 42; i++ {\n\t// ...\n}\n\n// While loops.\nfor i \u003c 42 {\n\t// ...\n}\n```\n\n### If-Else\nGo has regular `if`, `else if`, `else` like most languages, but you never use parentheses.\n```go\nfunc main() {\n\ttheme := \"dark\"\n\tif theme == \"dark\" {\n\t\tfmt.Println(\"üåô\")\n\t} else if theme == \"light\" {\n\t\tfmt.Println(\"‚òÄÔ∏è\")\n\t} else {\n\t\tfmt.Println(\"üé®\")\n\t}\n}\n```\n\n### Switch\nGo has a switch-case construct like most languages, but it's unnecessary to `break` after each case to prevent 'running through' each case.\n```go\nswitch theme {\n\tcase \"dark\":\n\t\tfmt.Println(\"üåô\")\n\tcase \"light\":\n\t\tfmt.Println(\"‚òÄÔ∏è\")\n\tdefault:\n\t\tfmt.Println(\"üé®\")\n}\n\n// Switch-case blocks don't need a switch condition. You can omit it to write a cleaner\n// version of a long if-else-if sequence.\nswitch {\n\tcase x \u003e 0:    // if \n\t\t// ...\n\tcase x \u003c 0:    // else if\n\t\t// ...\n\tdefault:       // else\n\t\t// ...\n}\n```\n","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Languages/HTML":{"title":"HTML","content":"\n## SVGs\nSee [[Knowledge/Engineering/Graphics/SVGs|SVGs]]. You can put SVGs into an HTML document in the following ways:\n1. You can just put the `\u003csvg\u003e` element in directly.\n2. You can link to an SVG file with `\u003cimg src=\"my.svg\"\u003e`.\n3. You can link to an SVG file with a raster fallback with `\u003cobject data=\"my.svg\" type=\"image/svg+xml\"\u003e\u003cimg src=\"fallback.png\" /\u003e\u003c/object\u003e\"`\n","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Languages/Instantiating-Objects":{"title":"","content":"","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Languages/Java":{"title":"Java","content":"\n","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Languages/JavaScript":{"title":"JavaScript","content":"\nTODO.\n\nThere's also [[Knowledge/Engineering/Languages/TypeScript]].\n\n\n\n### Rest Operator\nTODO.\n\n\n### Generators\nTODO.\n\n## Object Oriented Programming\n### Classes\nTODO.\n\n### Inheritance\nTODO.\n\n### Prototypes\nTODO.\n\n\n## Modules\nFirst, a brief timeline of JavaScript's weird module system development:\n- **1995**: JavaScript was born, but there was no concept of modules which made building complex applications extremely hard. Without modules, a single huge javascript file might be shipped to the user.\n- **2009ish**: people introduced a module system to take advantage of the [[Knowledge/Engineering/Programming/Code Splitting|code splitting]] optimisation technique where modules are lazily loaded.\n- **2009ish**: Node.js was developed and introduced the [[Knowledge/Engineering/Languages/JavaScript#CommonJS|CommonJS]] module standard, but this was only usable in server-side environments.\n\t- **2011**: [Browserify](https://browserify.org/) made it possible to use `require` in frontend projects.\n- **2009ish**: the [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) module standard was popularised.\n- **2015**: ES2015 standardised the [ES Modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) `import`/`export` syntax.\n\n### CommonJS\nTODO.\n\n\n### Dynamic Import\n`import(path)`\n\n## Asynchronous Programming\n\n### Event Loop\nTODO.\n\n\n\n.. multiplexing tasks over a single thread, which means there is no need for mutexes, semaphores and other concurrency helpers.\n\nan event-looped model is different from a multithreaded model.\n\nWhen you *do use real multithreading* in JavaScript (through [[Knowledge/Engineering/Languages/JavaScript#Web Workers|Web Workers]] in a browser environment or forking to create child processes in a server environment), you rarely use shared memory, meaning there's no need to coordinate concurrent access to shared resources.\n\n### Web Workers\nTODO.\nWeb workers are background threads. They can \n","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Languages/Node.js":{"title":"Node.js","content":"\nTODO.\n\n\n\n\n## Filesystem APIs\n\n**Note**: In Node.js, the convention is generally for functions like `fs.readFile`, `fs.appendFile`, etc. to take in a callback as their *last argument* which has the signature `(error, data) =\u003e {...}`.\n\n","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Languages/Python":{"title":"Python","content":"\n![[Knowledge/Engineering/Languages/assets/python-wallpaper.png|700]]\n\nPython is a [[Knowledge/Engineering/Programming/Type System#Dynamic Typing|dynamically-typed]] high-level programming language whose design philosophy centres around readability and terseness. It's used frequently for data science and machine learning, backend development, scripts and CLIs.\n\n\u003e Code is sometimes described as *pythonic*, which just means it exploits Python's language features and design to produce something very readable and elegant.\n\n---\n\n### Dunder Methods\nTODO.\n\n### Context Manager\n`with`\n\nTODO: see https://www.pythoncheatsheet.org/cheatsheet/context-manager.\n\n## Virtual Environments\n\u003e Always use a virtual environment. [source](https://csguide.cs.princeton.edu/software/virtualenv)\n\nTo prevent bloating the base Python installation with project dependencies and have reproducible/portable setups, use virtual environments.\n```bash\npip install virtualenv\npython -m venv ./venv     # Create a virtual environment in the new folder called `venv`.\nsource venv/bin/activate  # Use the virtual environment's Python installation.\ndeactivate                # Deactivate the current virtual environment.\n\npip freeze \u003e requirements.txt   # Dumps all the current dependencies into `requirements.txt`.\n```\n\n## Import and Export\n- **Modules** ‚Äî any Python file.\n- **Packages** ‚Äî directories containing `__init__.py`. A package *contains* one or multiple modules or further nested packages.\n\n```python\nimport foo\n```\n- Searches for the `foo` module in the paths in `sys.path`.\n- Creates a [module object](https://github.com/python/cpython/blob/3.9/Objects/moduleobject.c) and assigns it to the `foo` variable.\n\n```python\nimport foo.bar\n```\n- Searches for the `foo` package in the paths in `sys.path`, and then finds the `bar` module in that package.\n- Creates a module object and assigns it to the `foo` variable. \n\n```python\nfrom foo import bar, baz\nfrom a import (            # Syntax for splitting a long from-import statement into multiple lines.\n    b,\n    c\n)\n```\n- Searches for `foo` in the paths in `sys.path`.\n- Creates a module object and assigns it to the `foo` variable. \n- Declares and initialises variables `bar = foo.bar` and `baz = foo.baz`.\n    - **Note**: if the exported binding `foo.bar` doesn't exist, then Python attempts to interpret `bar` as a submodule, so it tries `import foo.bar` as a fallback.\n- Deletes the `foo` variable.\n\n### Relative Imports\n\u003e Relative imports are generally discouraged since they're less readable, less understood, and easy to break.\n\nAll relative imports are done with `from _ import _`. The `import _` statement is always absolute.\n```python\nfrom . import foo     # From the current package, import `foo`.\nfrom .bar import baz  # From the `bar` module in the current package, import `baz`.\n```\n- `.` is the *current package*, which is what `__package__` is set to.\n- `..` is the parent package.\n\n**Having trouble?**\nSome crucial details to note:\n- Python files are loaded as either a *module* or a *top-level script*. When you do `python app.py`, you are loading `app.py` as a top-level script.\n- Top-level scripts have `__name__` set to `__main__`. There is only ever 1 top-level script.\n- Modules have `__name__` set to a dot-separated string of their package path.\n- The `__name__` is used to determine where the current file is in a package, **not the filesystem structure** like in other languages. If `__name__` is `__main__`, then you'll get the `no known parent package` error.\n\n### `__init__.py`\nThe presence of this file (even if empty) indicates that the containing folder is a **package**, not a regular directory. This rule was dropped for subpackages, however, [to improve developer experience](https://mail.python.org/pipermail/python-dev/2006-April/064400.html).\n\nWhatever you import inside `__init__.py` becomes accessible directly under the package name for consumers. Eg. in the example below, consumers can just do `from foo import baz`. This works a bit similarly to the `index.js` file exporting variables in JavaScript.\n```python\n# foo/__init__.py\nfrom foo.bar import baz\n```\n\n## Classes\n\nTake notes from here: https://stackoverflow.com/questions/9056957/correct-way-to-define-class-variables-in-python\n\nTo make a member private, prefix its name with an underscore `_`. This doesn't actually do anything, it's just an agreed upon standard for documenting something  should be private. There's nothing stopping users of the class from invoking private methods.\n- **Name mangling** ensures that subclasses don't unknowingly override a private function with the same name.\n\nTODO: `@classmethod` decorator. See https://stackoverflow.com/questions/54264073/what-is-the-use-and-when-to-use-classmethod-in-python\n\n#### Getter and Setter\n```python\nclass Foo:\n    def __init__(self):\n        self._foo = \"\"\n\n    @property\n    def foo(self):\n        \"\"\" Getter. \"\"\"\n        return self._foo\n\n    @foo.setter\n    def foo(self, new_foo):\n        \"\"\" Setter. \"\"\"\n        self._foo = new_foo\n```\n\n## Type System\nPython is [[Knowledge/Engineering/Programming/Type System#Dynamic Typing|dynamically-typed]] and [will always stay that way](https://peps.python.org/pep-0484/#non-goals), however you can still opt to add static types wherever you find it useful, like how you might mix JavaScript and TypeScript code. Static typing is massively helpful in large projects as opposed to one-off scripts.\n\n### Type Hints\n\u003e Type hints **do nothing** at runtime. You have to use a static type checker such as [Mypy](https://realpython.com/python-type-checking/), or [PyLance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) with VSCode, for example.\n\nTyping variables and functions in Python is very similar to [[Knowledge/Engineering/Languages/TypeScript#Functions|how it's done in TypeScript]]. \n```python\ndef make_greeting(name: str, age: int = 42) -\u003e str:\n    return f\"{name} {age}\"\n\ngreeting: str = make_greeting(\"Andrew\")    # Although the type can be inferred, annotating the type is still great for documentation.\nprint(greeting)\n```\n\n### typing Module\nPython 3.5 supplies the [`typing`](https://docs.python.org/3/library/typing.html) built-in module brings in a lot of advanced static typing utilities such as those seen in TypeScript. \n\n## Standard Built-In Modules\nSee [standard built-in modules](https://docs.python.org/3/py-modindex.html).\n\n### File Manipulation\nPython has built-in top-level functions for file manipulation:\n```python\n# Reading.\nmy_file = open(filename, \"r\")\nlines: List[str] = my_file.readlines()\nmy_file.close()\n\n# Alternatively, using `with`:\nwith open(filename, \"r\") as my_file:\n    lines: List[str] = my_file.readlines()\n\n# Writing.\nwith open(filename, \"w\") as my_file:\n    my_file.write(\"Hi.\")\n    my_file.writelines([\"Hello\", \"World\"])\n```\n\n### OS\n[`os`](https://docs.python.org/3/library/os.html) provides a bunch of useful functions for working with the filesystem.\n```python\nos.getcwd()\nos.path.exists(path)\nos.path.isdir(path)\nos.path.join(*path_fragments)   # Forms a complete path in a cross-OS way (since Windows uses backslash separators).\nos.makedirs(path)                 # Like `mkdir -p`, which creates all non-existent directories along the path.\n```\n\n### Regex\nSee [[Knowledge/Engineering/Languages/Regex|regex]].\n\n\u003e Use raw strings `r\"...\"` when specifying regex patterns to avoid being confused about what characters are being escaped.\n\n```python\nregex = re.compile(r\"...\")\nmatch = regex.search(haystack)  # `re.Match` object contains info about the search. If no match was found, then `match == None`.\n\n# Equivalent to the above, but you can't reuse the compiled regex.\nresult = re.match(r\"...\", haystack)\n```\n\n**Capture Groups**:\n```python\nmatch = re.match(r\"(\\w+) (\\w+)\", \"Linus Torvalds\")\n\nmatch[0]        # The original string, \"Linus Torvalds\".\nmatch.group(0)  #   Equivalent to above.\n\nmatch[1]        # First capture group, \"Linus\".\nmatch.group(1)  #   Equivalent to above.\n\nmatch[2]        # Second capture group, \"Torvalds\".\nmatch.group(2)  #   Equivalent to above.\n```\n\n### Dates\nUse [`datetime`](https://docs.python.org/3/library/datetime.html) to work with dates. Use [`time`](https://docs.python.org/3/library/time.html) for lower-level operations involving time.\n\n**Convert between strings and dates**:\n```python\nfrom datetime import datetime\n\n# strptime: str ‚Üí datetime\ndate_str = \"2022-09-20\"\ndate_obj = datetime.strptime(date_str, \"%Y-%m-%d\")\n\n# strftime: datetime ‚Üí str\ndate_obj = datetime.now()\ndate_str = date_obj.strftime(\"%Y-%m-%d\")   # ‚Üí YYYY-MM-DD\n```\n\n**Date arithmetic and comparison**:\nUse `timedelta` to add/subtract time from a date. You can directly use comparison operators on `datetime` objects.\n```python\nfrom datetime import datetime, timedelta\n\ntoday = datetime.now()\nyesterday = today - timedelta(days=1)\n\nassert(yesterday \u003c today)\n```\n","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Languages/Regex":{"title":"Regex","content":"\nRegex pattern matching is supported in most modern programming languages, however they each might have their own regex engine implementing a custom 'flavour' of regex.\n\n\u003e Use [this regex engine comparison table](https://gist.github.com/CMCDragonkai/6c933f4a7d713ef712145c5eb94a1816) to check if the syntax you're trying to use is supported.\n\n\u003e Use [regex101](https://regex101.com/) to sanity check the correctness of your regex pattern.\n\n| Metacharacter  | Description                                                                             |\n| -------------- | --------------------------------------------------------------------------------------- |\n| `.`            | Any character.                                                                          |\n| `*`            | 0 or more times.                                                                        |\n| `?`            | 0 or 1 time.                                                                            |\n| `+`            | 1 or more times.                                                                        |\n| `^`            | Match from the start of the string.                                                     |\n| `$`            | Match up to the end of the string.                                                     |\n| `{n,m}`        | `n` (inclusive) to `m` (inclusive) times.                                               |\n| `[a-zA-Z0-9]`  | Alphanumeric characters, lowercase and uppercase.                                       |\n| `[^a-zA-Z0-9]` | Anything *apart from* alphanumeric characters.                                          |\n| hello\\|world   | Matches `hello` or `world`.                                                             |\n| hell(o\\|w)orld | Matches `helloorld` or `hellworld`. We use parentheses for grouping among other things. |\n\n| Character Class | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| `\\w`            | Any word, which is basically a shorthand for `[a-zA-Z_0-9]`. |\n| `\\W`            | Anything *not* a word.                                       |\n| `\\d`            | Any digit, which is basically a shorthand for `[0-9]`. |\n| `\\D`            | Anything *not* a digit.                                       |\n| `\\s`            | Any whitespace character (space, tabs, newlines, etc.)       |\n| `\\S`            | Anything *not* a whitespace.                                 |\n\n## Non-Greedy Matching\nRegex matching is typically *greedy*, meaning that `(Ha){3,5}` will match the longest string possible, which would be `HaHaHaHaHa` if that exists. Using `(Ha){3,5}?` will perform non-greedy matching, preferring to match `HaHaHa`.\n\nYou can use non-greedy matching by appending a `?` qualifier. For example, `.*?` matches 0 or more of any character non-greedily.\n\n### Example\nSuppose we want to interpolate values into the string: `\"Hi {{world_type}}. I am {{name}}.\"`. We'd might use the regex: `{{(.*)}}` and extract out the capture group. Since greedy matching is the default, this would extract the capture group: `world_type}}. I am {{name`. To fix this, use the regex `{{(.*?)}}`.\n","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Languages/Rust":{"title":"Rust","content":"\nTODO: continue at chapter 3 in The Rust Programming Language book: https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html.\n\n![[Knowledge/Engineering/Languages/assets/rust-wallpaper.png|800]]\n\u003e \"Rust's greatest ambition is to eliminate the trade-offs that programmers have accepted for decades by providing safety *and* productivity, speed *and* ergonomics.\" ‚Äî *The Rust Programming Language*\n\nRust is a [[Knowledge/Engineering/Programming/Type System#Strong Typing|strong]] [[Knowledge/Engineering/Programming/Type System#Static Typing|statically typed]] low-level programming language that supports many [[Knowledge/Engineering/Programming/Programming Paradigm|programming paradigms]]. It's designed to have comparable performance to C/C++ while offering great developer experience and preventing pitfalls in low-level programming such as memory leaks, security vulnerabilities, etc.\n\n\u003e Rust is named after [a fungus](https://en.wikipedia.org/wiki/Rust_(fungus)) that is robust, distributed, and parallel.\n\nWhen you install Rust, you also get the following CLIs:\n- `rustup` ‚Äî a Rust version manager.\n- `rustc` ‚Äî the [[Knowledge/Engineering/Programming/AOT|ahead-of-time]] Rust compiler, similar to `gcc` for C/C++. For bigger projects, you'd use `cargo` to compile and run the project, not `rustc`.\n- `cargo` ‚Äî the dependency manager *and* build tool.\n- `rustfmt` ‚Äî a formatter for enforcing code style.\n\n## Core\nEvery Rust program must implement one `main` function as the entrypoint to the program.\n\n### Variables\nDeclare variables with `let`.\n- All variables are immutable by default.\n    - In languages like JavaScript or C++, you'd explicitly specify this with the `const` qualifier.\n- Use the `mut` qualifier to allow a variable to be assigned to another value after initialisation.\n    ```rust\n    let mut i = 0;\n    ```\n- Rust implements type inference, similar to TypeScript.\n- *Variable shadowing* is allowed. Instead of getting a 'variable redefinition' error, Rust lets you reuse the same binding which is useful for when you need to typecast.\n    ```rust\n    let mut meaningOfLife: String = \"Forty two\";\n    let meaningOfLife: u32 = 42;\n    ```\n\n#### References\nYou can pass a reference to a variable in function calls so that they read/write to the same variable's memory. Like variables, *references are immutable by default*, even if it's a reference to a mutable variable.\n\n```rust\nlet mut buffer = String::new();\nio::stdin()\n    .read_line(\u0026mut buffer)\n    .expect(\"Failed to read from stdin.\");\n```\n\n### Functions\n### Macros\nYou invoke macros the same way as invoking functions, but you append `!` to the macro name.\nEg. `println!(\"Hello world\")` invokes the `println` macro.\n\n### Strings\n\nExpressions can be interpolated into strings with `{}`. For example: `\"Hello {name}\"`.\n\n### Imports\n\nLike C++, Rust has a standard library accessible under the `std` namespace. \n\nWrite `use` statements to bring new bindings into scope in the current file. For example: `use std::io`.\n\n### Memory Management\nRust does not use a garbage collector to implement memory safety like in most languages. Instead, it achieves memory safety through *ownership and borrowing*.\n\n### Pattern Matching\n`match` expressions consist of *arms*, each of which contain a pattern/condition and the code to execute when that pattern/condition is matched. \n\n### Traits\n\n### Error Handling\nError handling is done through `std::result::Result`. \n... `Result` is an enum that can exist in multiple states, eg. `Ok` and `Err`.\n- `Ok` wraps around the successful path's expected value.\n- `Err` contains information about the failure.\n\n### Cargo\nRust projects using Cargo must go by a standard directory structure where all source code is kept in `src`. \n```bash\ncargo new \u003cproject_name\u003e  # Creates a new directory, boilerplate and `Cargo.toml` file.\ncargo build               # Compiles the project, dumping to output to a `target` directory.\n    --release             #   ‚Üí builds and optimised executable for production.\ncargo run                 # Compiles and runs the project.\ncargo check               # Sanity-checking that compilation works. Doesn't produce executables.\n\ncargo doc --open          \n``` \n\nWe call dependencies 'crates'. They can either be *binary crates*, which build to an executable, or *library crates*, which contain code that is to be consumed by other crates. External dependencies are fetched from the registry: [crates.io](https://crates.io/).\n\n## WebAssembly\n\n","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Languages/SCSS":{"title":"SCSS","content":"\n*SCSS* (Sassy CSS) is a superset of [[Knowledge/Engineering/Languages/CSS|CSS]] with more quality of life language features such as:\n- Variables.\n- Nested rules.\n- Mixins.\n- Modules.\n- Partials.\n\nSCSS is transpiled into CSS that the browser can interpret by a preprocessor.\n\n**SCSS vs. Sass**:\nThey're actually two different syntaxes. SCSS is the newer syntax, while Sass is an older syntax that uses Python-like indentation:\n![[Knowledge/Engineering/Languages/assets/scss-vs-sass.png|500]]\nSCSS is more commonly used.\n","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Languages/SQL":{"title":"SQL","content":"\n\nTODO.","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Languages/TypeScript":{"title":"TypeScript","content":"\n![[Knowledge/Engineering/Languages/assets/javascript-wallpaper.png|600]]\n\nTypeScript is a programming language made by Microsoft that is *superset* of [[Knowledge/Engineering/Languages/JavaScript|JavaScript]]. The reason that TypeScript exists is to make complex JavaScript projects more maintainable and less error-prone by introducing a [[Knowledge/Engineering/Programming/Type System#Static Typing|static]] and [[Knowledge/Engineering/Programming/Type System#Strong Typing|strong]] type system. Essentially, it just gives developers a lot of quality-of-life improvements over JavaScript.\n\n*Note*: TypeScript gets compiled (or more precisely, '*transpiled*') to JavaScript in the end. This is not new, languages like CoffeeScript, Dart, Scala, etc. can all have JavaScript as what we call a *compilation target*.\n\n\u003e I learned TypeScript from the official docs and from the 'Programming TypeScript' textbook by Boris Cherny.\n\n**Why TypeScript is [loved](https://survey.stackoverflow.co/2022/#most-loved-dreaded-and-wanted-language-love-dread)**\n- Your IDE/editor gets more information about your code and give you very helpful intellisense and code-completion that is not possible with JavaScript. This reason alone, in my experience, pretty much negates any loss in developer velocity from using TypeScript over JavaScript.\n- Many errors will surface *as you're developing* rather than after your code is deployed to production and angry customers complain to you.\n- Types serve as a useful concise form of documentation for how your functions are to be used and what fields an object contain.\n- Complex objects are much *less unpleasant* to work with. You'll know what its *shape* is (basically what properties it has and what its nested objects look like), what properties are compulsory or optional and you'll actually know when you've mispelt a property name.\n- You'll *almost* never have `cannot read property '...' of undefined` again.\n\n## Setup\nInstall Node.js, `npm` or `yarn`. Then, install `tsc`, the open-source typescript compiler, as a dev dependency in a javascript project:\n```bash\nyarn init   # Inside the project root directory, if it's a new project.\nyarn add --dev typescript @types/node ts-node\n```\n### tsconfig.json\nEvery typescript project should have a `tsconfig.json` file at the root of the project directory. It tells `tsc` which files to compile, where to dump the resulting javascript, and so on. A basic config looks like this (but there are so many [more options](https://www.typescriptlang.org/tsconfig)):\n```json\n{\n\t\"compilerOptions\": {\n\t\t\"lib\": [   // Which APIs are available to the transpiled JS code? Eg. es2015 has Function.prototype.bind, etc.\n\t\t\t\"es2015\"\n\t\t],\n\t\t\"module\": \"commonjs\", // Which module system should be used by the transpiled JS code?\n\t\t\"outDir\": \"dist\",     // Where should the output JS files go?\n\t\t\"sourceMap\": true,    // Whether to generate a source map.\n\t\t\"strict\": true,       // All code must be properly typed.\n\t\t\"target\": \"es2015\"    // What JS version to compile to.\n\t},\n\t\"include\": [   // Directories containing .ts files we want to transpile.\n\t\t\"src\"\n\t]\n}\n```\nAlternatively, you can generate a `tsconfig.json` with `tsc --init`.\n\nSome recommended flags include:\n- `noImplicitThis` ‚Äì forces a type to be explicitly assinged to `this` inside functions. See [[Knowledge/Engineering/Languages/TypeScript#this|TypeScript this]].\n- `noImplicitOverride` ‚Äì you must always use the `override` modifier for method overriding.\n- `noFallthroughCasesInSwitch` ‚Äì every case must either `break` or `return`.\n- [`esModuleInterop`](https://www.typescriptlang.org/tsconfig#esModuleInterop) ‚Äì makes it more smooth to consume JavaScript modules that use CommonJS, AMD or other module systems.\n\n## Typing\nBroadly speaking, in programming languages, a *type* is a [[Knowledge/Engineering/Maths/discrete-maths/Set Theory#Sets|set]] of values, plus the properties/methods available to them.\n\n### Assigning Types\nAssigning types is straightforward in TypeScript, you just postfix a variable or parameter with a colon and a type. \n```typescript\n// Typing variables.\nlet a: number = 42;\nlet b: string;\n```\n\n### Defining Types\nRemember, types are just [[Knowledge/Engineering/Maths/discrete-maths/Set Theory#Sets|sets]] of values. When you define a *type*, you are just defining a set of values. The following are all examples of custom types you can define:\n```typescript\ntype TwoOrFour = 2 | 4;                           // The set consisting of 2 and 4.\ntype Value = string | number;                     // The set of all strings and all numbers.\ntype RandomThings = \"Hello\" | 42 | null | RegExp; // The set consisting of \"Hello\", 42, null and all instances of `RegExp`.\n```\n\nAn important thing to understand about TypeScript (and many other statically-typed languages) is that it has separate namespaces for *values* and *types*. This means that in the following example, a variable identifier with the same name as a type alias are not in conflict. TypeScript can infer if you meant the *value* or the *type*.\n```typescript\ntype hello = \"world\";\nconst hello: hello = \"world\";\n```\n\n#### Type Alias\nYou can declare *type aliases* in a very similar way as to how you define variables. Type aliases are block-scoped, just like local variables.\n```typescript\ntype Person = { age: number, name: string };\n\n// Typescript will never infer that `me` is of type `Person` unless you explicitly say.\nconst me: Person = {\n\tage: 21,\n\tname: \"Tim\"\n};\n```\n\n### Interface\nInterfaces are basically an alternative to [[Knowledge/Engineering/Languages/TypeScript#Type Alias|type aliases]], but are mostly better suited for defining object shapes. You can't use `\u0026` or `|` for interfaces, but you can use `extends`.\n```typescript\n// With type aliases, to add additional fields on top another type, you'd use `\u0026`.\ntype Employee = { id: string; }\ntype SoftwareEngineer = Employee \u0026 { techStack: string[]; }\n\n// With interfaces, you just use `extends`, similar to how you do class inheritance.\ninterface Employee { id: string }\ninterface SoftwareEngineer extends Employee { techStack: string[]; }\n```\n\n#### Classes vs. Interfaces\nUsing `interface` does not actually generate any javascript code when transpiled. Using `class`, however, will generate JavaScript code, which enables `instanceof` to work at runtime. A `class Foo { ... }` definition actually creates a *value* `Foo` that can be used in expressions, and a *type* `Foo` that can be used as a type. \n\nInterfaces don't let you use [[Knowledge/Engineering/Languages/TypeScript#Access Modifiers|access modifiers]]. You can't supply implementations either.\n\nKeep these critical differences in mind when deciding between `class` or `interface`.\n\n### Assignability\nAssignability is about what the rules are around an assignment like this: `const a: A = b;`, where `b` is of type `B`. For assignment to be valid, it must be the case that:\n1. `B` is a subtype of `A` (basically that $B \\subseteq A$),\n2. ... or `B` is `any`. *Note*: this rule only exists to make it easier to interoperate with javascript code.\n\n#### Union and Intersection\nAgain, types are just *sets* of values. To expand the size of a set, you can union it with other sets, and to narrow the size of a set, you can intersect it other sets. In TypeScript, we use `|` to union two types and `\u0026` to intersect two types.\n```typescript\ntype Student = { id: string; degree: string };\ntype Tutor = { id: string; courses: string[] };\n\ntype StudentOrTutor = Student | Tutor;    // Set of all objects that are either `Student`, `Tutor`, or both.\ntype StudentAndTutor = Student \u0026 Tutor;   // Set of all objects containing all fields of `Student` AND `Tutor`.\n\nconst student: Student = { id: '111', degree: 'Bachelor of Science' };\nconst tutor: Tutor = { id: '222', courses: ['CS101'] };\nconst studentTutor: StudentAndTutor = {\n\tid: '333',\n\tdegree: 'Bachelor of Computer Science',\n\tcourses: ['CS201'],\n};\n\n// For `Student | Tutor`: you can assign any of: `Student`, `Tutor`, or `Student \u0026 Tutor`\nconst uniGoers: StudentOrTutor[] = [student, tutor, studentTutor];\n\n// For `Student \u0026 Tutor`: you can only have people who are simultaneously `Student` and `Tutor`.\nconst studentTutors: StudentAndTutor[] = [studentTutor];\n```\nTo make a type nullable, you can union it with `null` like this: `type MiddleName = string | null;`\n\n### TypeScript Built-In Types\nTypeScript introduces some new built-in data types that aren't present in JavaScript. These are: `any`, `unknown`, `void`, [`never`](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-never-type).\n#### any\nThe `any` type represents the set of *all* values. You can assign a variable of type `any` to a number, a string, a WebServer object, etc. Only use `any` as a last resort ‚Äì always prefer assigning the most specific type that you can. Often, people treat `any` as a way to 'opt' out of TypeScript for a small part of the code. When something is `any`, you are free to do erroneous things on it such as invoking methods on it that don't exist, using in arithmetic expressions, accessing undefined properties, etc.\n\n#### unknown\nThe `unknown` type represents the set of *all* values, just like `any`. The difference is that TypeScript does not allow you to use an `unknown` value until you perform [[Knowledge/Engineering/Languages/TypeScript#typeof and instanceof|type checks]] \nor [[Knowledge/Engineering/Languages/TypeScript#Refinement|refinement]] to narrow down what specific type the `unknown` value is. For this reason, `unknown` is considered the type-safe version of `any`.\n```typescript\nconst a: unknown = 30;\nif (typeof a === 'number') {\n\tconst b: number = a + 1; // Now that we are certain `a` is a number, we can use it as one.\n} else {\n\tconst b: number = a + 1; // Error.\n}\n```\n```typescript\nconst a: any = \"Hello\";\nconst b: unknown = \"World\";\n\na.toLowerCase();   // This is fine since `a` is `any`.\nb.toLowerCase();   // Error. We need a type check before \n```\n\n\u003e A useful way to think about `any` and `unknown` is: `any` means \"I don't care\", `unknown` means \"I don't know (yet)\". \n\n### Object Shape\nAn important part of using TypeScript effectively is in defining the *shape* of object values, or in other words, what properties they have and which ones must be assigned a value or are optional.\n```typescript\n// Let typescript infer the object shape.\n// `person` will be of type: { age: number, name: string }.\nconst person = {\n\tage: 42,\n\tname: \"Andrew\"\n};\n\n// You can also explicitly specify the object type. You might do this if you want to set narrower types for the properties.\nconst person: { age: number, name: \"Andrew\" } = {\n\tage: 42,\n\tname: \"Andrew\"\n};\n\n// Or more cleanly, define a type:\ntype Andrew = { age: number, name: \"Andrew\" };\nconst person: Andrew = {...};\n```\n**Note**: the built-in `object` type is the set of all objects, whether it's `{}`, `{hello: \"world\"}`, `[]`, `new Date()`, etc. It's only slightly more restrictive than `any`.\n\n#### Optional Properties\nBy default, all properties are treated as compulsory. To allow an object to not define a property, just postfix the property name with `?`.\n```typescript\ntype Person = {\n\tfirstName: string;\n\tlastName: string;\t\n\tmiddleName?: string;   // Objects of type `Person` can optionally set the `middleName` property.\n};\n```\n\n#### Immutable Properties\nYou can make properties immutable by prefixing the property name with the `readonly` property. It's like as if you declared a property as `const`, so once it's assigned for the first time, it cannot be reassigned.\n```typescript\ntype Person = {\n\tname: string;\n\treadonly dateOfBirth: string;\n};\n\nconst me: Person = { name: 'Tim', dateOfBirth: '09/03/2001' };\nme.name = 'Andrew';             // This is fine.\nme.dateOfBirth = '01/01/1970';  // Error.\n```\n\n#### Index Signatures\nWhen you want the flexibility for an object to contain more arbitrary properties with a certain key-value pair type, you can use the index signature syntax, `[key: K]: V`, where `key` can be any name you choose.\n```typescript\ntype FruitRatings = {\n\t[fruitName: string]: number;\n};\n\nconst myFruitRatings: FruitRatings = {\n\tapple: 6,\n\tbanana: 7,\n\tcherry: 9\n};\n```\n\n#### Indexed Access Types\nSee [indexed access types](https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html). When you define a type for an object shape, if you want to access a nested part of that shape as a type, you can just use the subscript operator `[]`.\n```typescript\ninterface Theme {\n\tcolour: {\n\t\tmode: 'light' | 'dark';\n\t\tpalette: {\n\t\t\tprimary: ['#0000FF', '#0044FF', '#0066FF', '#3388FF'];\n\t\t\tsecondary: ['#464646', '#616161', '#7E7E7E', '#AAAAAA'];\n\t\t};\n\t};\n}\n\ntype ColourOptions = Theme['colour'];\ntype Palette = Theme['colour']['palette'];\n```\nNope, you can't use the `.` operator as if you were accessing object properties.\n\n#### keyof\nThe `keyof` unary operator evaluates to the union of a type's keys.\n```typescript\ninterface Theme {\n\tcolour: {\n\t\tmode: 'light' | 'dark';\n\t\tpalette: {\n\t\t\tprimary: string[];\n\t\t\tsecondary: string[];\n\t\t};\n\t};\n}\n\ntype ColourProperties = keyof Theme['colour'];              // ‚Üí 'mode' | 'palette'\ntype PaletteProperties = keyof Theme['colour']['palette'];  // ‚Üí 'primary' | 'secondary'\n```\nThis is helpful for writing getter functions that retrieve values nested in an object:\n```typescript\nconst theme: Theme = {\n\tcolour: {\n\t\tmode: 'dark',\n\t\tpalette: {\n\t\t\tprimary: ['#0000FF', '#0044FF', '#0066FF', '#3388FF'],\n\t\t\tsecondary: ['#464646', '#616161', '#7E7E7E', '#AAAAAA'],\n\t\t},\n\t},\n};\n\nconst getPalette = (theme: Theme, palette: keyof Theme['colour']['palette']): string[] =\u003e {\n\treturn theme['colour']['palette'][palette];\n};\n\nconsole.log(getPalette(theme, 'primary'));\n```\n\n### Arrays\nTo denote a type as an array of items of type `T`, you can do `T[]` or `Array\u003cT\u003e` (they're [exactly the same](https://stackoverflow.com/questions/36842158/arraytype-vs-type-in-typescript)). \n```typescript\n// Array type declaration examples.\ntype Names = string[];\ntype People = { name: string; }[];\ntype Values = (string | number)[];\n```\nIn general, try to keep arrays *homogenous*, that is, of a singular type, otherwise you'd have to do type-checking before TypeScript can let you use the items of the array.\n```typescript\n// When arrays are not homogenous, that is, of one type, you'd have to do some type checking to work with its items.\nconst arr: (string | number)[] = [42, \"Hello\"];\n\narr.forEach(item =\u003e {\n\tif (typeof item === 'number') {\n\t\t// You can use `item` as a number after you've type-checked it.\n\t\tconst num = item * 3;\n\t\tconsole.log('Number: ', num);\n\t} else {\n\t\t// `item` must be a string\n\t\tconst s = item + \" world\";\n\t\tconsole.log('String: ', s);\n\t}\n})\n```\n\nArrays are always mutable by default in TypeScript, that is, you can reassign the value at any index and invoke methods that make in-place modifications like `push` or `reverse`. To make them immutable, you would prefix them with the `readonly` modifier.\n```typescript\ntype Names = readonly string[];\nconst radioheadMembers: Names = ['Thom', 'Johnny', 'Colin', 'Phil', 'Ed'];\n\nradioheadMembers[1] = 'Tim';  // Error.\n```\n\n### Tuples\nRemember, tuples are just *fixed-length arrays*. In typescript, we define a tuple by specifying the type of each item like: `[T1, T2, ...]`:\n```typescript\ntype FullName = [string, string, string?];  // You can make items optional in a tuple, just like for objects.\n                                            // Note: this is basically the same as: `[string, string] | [string, string, string]`.\nconst elon: FullName = [\"Elon\", \"Reeve\", \"Musk\"];\nconst jeff: FullName = [\"Jeff\", \"Bezos\"];\n```\nYou can also make use of the [[Knowledge/Engineering/Languages/JavaScript#Rest Operator|rest operator]], `...`, to allow for tuples of arbitrary lengths.\n```typescript\ntype FullName = [string, string, ...string[]];\nconst queenElizabethII = ['Elizabeth', 'Alexandra', 'Mary', 'Windsor'];\n```\n\n**Caveat**: *tuples are not immutable by default*.\nUnlike in other languages like Python, the items of a tuple in TypeScript *can* be mutated, that is, reassigned after definition. To make tuples immutable, you would do the same thing as you would for making arrays immutable: prefix it with the `readonly` modifier.\n```typescript\ntype Coordinate = readonly [number, number];\nconst point: Coordinate = [1, 2];\n\npoint[0] = 3;   // Error.\n```\n\n### Enums\nEnums are data types that have a *fixed set* of constant values. They're a great way to group together a lot of related constants. *Note*: JavaScript doesn't have enums.\n```typescript\nenum Theme {\n\tLight,\n\tDark,\n\tHighContrastLight,\n\tHighContrastDark\n};\n\n// You access the fields of the enum in the same way that you'd access an object.\nconst theme: Theme = Theme.Dark;\n```\nIn the example above, every enum value gets implicitly assigned a counter value starting from 0. It's equivalent to doing the following:\n```typescript\nenum Theme {\n\tLight = 0,\n\tDark = 1,\n\tHighContrastLight = 2,\n\tHighContrastDark = 3\n}\n```\nYou can also map enum keys to string values instead of integers. \n```typescript\nenum Theme {\n\tLight = '#CCCCCC',\n\tDark = '#333333',\n\tHighContrastLight = '#FFFFFF',\n\tHighContrastDark = '#000000',\n}\n```\n\n#### Caveats\nOne annoying issue is that you can freely assign numbers to enum types that are clearly outside the bounds of the enum values.\n```typescript\nenum Theme {\n\tLight,\n\tDark,\n\tHighContrastLight,\n\tHighContrastDark,\n}\nconst theme: Theme = 6; // No complaints from TypeScript.\n```\nIn general, the official docs advise you to avoid enums unless they help significantly with readability. Alternatives to enums include string literals, eg. `type Theme = \"Light\" | \"Dark\" | ...`, or object literals, eg. `const Theme = { Light: \"Light\", Dark: \"Dark\", ... }`.\n\n### Type Inference\nYou don't have to always supply an explicit type. Often, there'll be enough context for TypeScript to figure it out without ambiguity. In general, we prefer type inference over explict assigning types to varaibles/parameters/etc. for conciseness.\n```typescript\nlet a: number = 42;   // There is no need to do this. It's clear what type `a` is from the RHS of the assignment.\nlet b = 42;           // Equivalent to above, but it lets typescript assign the type implicitly.\n```\nThis extends to functions as well, meaning that often you won't have to specify the return value.\n\n#### Type Widening/Narrowing\nAn important implicit rule in TypeScript is that when you let type inference happen for `const` variables, TypeScript will assign it the *narrowest type possible* since it knows that a `const` variable cannot possibly take any other value after its defined. Otherwise, TypeScript will infer the type to be wider than it might be.\n```typescript\nlet a = 2;    // `a` is of type `number`.\nconst b = 2;  // `b` is of type `2`, a specific member of `number`.\n```\n\n### typeof and instanceof\nAlthough type checking is done for you statically, there are times when you must perform run-time type checks such as when you're fetching external data. In these times, rely on JavaScript's operators: `typeof` and `instanceof`.\n1. Use the `instanceof` binary operator to check some value is of a custom type, or a complex built-in type like `RegExp`.\n\t- Note that `val instanceof T` works by checking if `T` exists anywhere along `val`'s [[Knowledge/Engineering/Languages/JavaScript#Prototypes|prototype chain]]. This is why you get unintuitive results when you use `instanceof` on primitive types. For example, `42 instanceof Number` is `false`, but `new Number(42) instanceof Number` is `true`.\n2.  Use the `typeof` unary operator to check some value is some built-in primitive type such as `undefined`, `number`, `string`, `boolean`, etc.\n\n### Type Assertions\nWhen you're confident that some value should be a certain type but TypeScript isn't, you can make a type assertion with the `as` keyword. \n```typescript\nlet someVal: any = 123;\n\n// Here, you're basically telling TypeScript: \"I am 100% sure this is a number. Trust me.\"\nconst val = someVal as number;\n```\nYou can also make type assertions by prefixing an expression with `\u003cT\u003e`, eg. `\u003cPerson\u003eperson` which is exactly the same as `person as Person`.\n\u003e Aim to minimise your usage of type assertions like above. They're considered 'escape hatches' from the language and can prevent you from maximising the benefits of using a type system.\n\n#### Const Assertion\nUse `as const` to tell TypeScript to infer the value to its narrowest possible type.\n```typescript\nconst a = [1, 2, 3];           // ‚Üí Type: `number[]`\nconst b = [1, 2, 3] as const;  // ‚Üí Type: `readonly [1, 2, 3]`\n```\n\n#### Nonnull Assertion\nWhen you're confident a value is not null, you can postfix that value with `!` to assure TypeScript. If you cannot be confident, then just use a standard null-check: `if (_ === null) ...`.\n```typescript\ntype NullableString = string | null;\nconst s: NullableString = 'Hello';\n\n// This is basically saying: \"Don't worry TypeScript, I'm 100% sure `s` is not null.\"\nconsole.log(s!.toUpperCase());\n```\n\n### Refinement\nTypeScript's static analysis can handle *refinement* where, based on the control flow logic, TypeScript can narrow the type of the variable. Refinement can happen when you use `if`, the optional chaining operator `?.`, `||`, `switch`, `typeof`, `instanceof`, `in`, etc.\n```typescript\ntype CssWidth = number | string | undefined;\n\nconst getPixelWidth = (width: CssWidth): number =\u003e {\n\t// At this point, TypeScript knows `width` is `number | string | undefined`.\n\tif (typeof width === 'undefined') return 0;\n\n\t// At this point, TypeScript knows `width` is `number | string`.\n\tif (typeof width === 'number') return width;\n\n\t// At this point, TypeScript knows `width` is `string`. We can therefore use\n\t// string methods on `width` with confidence.\n\treturn Number(width.slice(0, width.search('px')));\n};\n\nconsole.log(getPixelWidth(undefined)); // 0\nconsole.log(getPixelWidth(10));        // 10\nconsole.log(getPixelWidth('480px'));   // 480\n```\n\nRefinement works with unioned objects, but it's best to use unique strings to help TypeScript infer types properly.\n```typescript\ninterface UserTextEvent {\n\ttype: 'TextEvent';\n\tvalue: string;\n\ttarget: HTMLInputElement;\n}\ninterface UserMouseEvent {\n\ttype: 'MouseEvent';\n\tvalue: [number, number];\n\ttarget: HTMLElement;\n}\n\ntype UserEvent = UserTextEvent | UserMouseEvent;\n\nconst handle = (event: UserEvent): void =\u003e {\n\tif (event.type === 'TextEvent') {\n\t\t// At this point, TypeScript is certain that `event` is `UserTextEvent`.\n\t\t// ...\n\t} else {\n\t\t// At this point, TypeScript is certain that `event` is `UserMouseEvent`.\n\t\t// ...\n\t}\n};\n```\nThis kind of type refinement is very useful when working with [[Knowledge/Engineering/Technologies/Redux#Reducers|Redux reducers]].\n\n#### Type Guards\nRefinement doesn't work as expected when you use a function to do the type-checking. Any type-checking only contributes to refinement if it's in the same scope.\n```typescript\nconst isString = (s: unknown): boolean =\u003e {\n\treturn typeof s === 'string';\n}\n\nconst refinementTest = (val: string | number) =\u003e {\n\tif (isString(val)) {\n\t\tval.toLowerCase();   // Error. TypeScript still thinks `val` is `string | number`.\n\t\t// ...\n\t} else {\n\t\tconst num = val * 2; // Error. TypeScript still thinks `val` is `string | number`.\n\t\t// ...\n\t}\n}\n```\nTo fix this, you'd need to define a **type guard** which is a *predicate* function that confirms an argument is a given type. It looks like this:\n```typescript\nconst isString = (s: unknown): s is string =\u003e {\n\treturn typeof s === 'string';\n};\n```\n\n### Variance\nIt's useful to think of types as just *sets*. When $A$ is a subtype of $B$, it is basically just saying that $A \\subseteq B$.\n\n*Variance*, in programming language theory, is how subtyping works for generic types. It is concerned about the idea of whether a generic type like `List\u003cCat\u003e` is a subtype of `List\u003cAnimal\u003e`.\n\nThere are 4 kinds of variance:\n- *Invariance* ‚Äî says that `List\u003cT\u003e` is not a subtype of `List\u003cU\u003e` regardless of whether `T extends U`.\n- *Covariance* ‚Äî says that `List\u003cT\u003e` is a subtype of `List\u003cU\u003e` if `T extends U`.\n- *Contravariance* ‚Äî says that `List\u003cT\u003e` is a subtype of `List\u003cU\u003e` if `U extends T`, ie. going the other way of covariance.\n- *Bivariance* ‚Äî says that `List\u003cT\u003e` is a subtype of `List\u003cU\u003e` if either `T extends U` or `U extends T`.\n\nEvery language's type system has different rules around *variance*. As a programming language designer, if you were to allow covariance or contravariance over invariance, then you're allowing for greater flexibility in the type system, but it exposes programmers to greater risk of runtime type errors.\n\nTypeScript tends to be more relaxed by allowing functions to take in covariant arguments. For example, you can pass an argument so long as it is a subtype of the expected parameter, ie. covariant to the expected parameter, but this makes it possible to create run-time type errors like this:\n```typescript\ninterface EngineeringStudent {\n\tname: string;\n\tdiscipline: string;\n}\ninterface FirstYearEngineeringStudent {\n\tname: string;\n\tdiscipline?: string;   // This is basically: `string | undefined`.\n}                          // This makes `EngineeringStudent` a subtype of `FirstYearEngineeringStudent`!\n\n// Here, `student` can be `FirstYearEngineeringStudent` or any subtype of it.\nconst clearDiscipline = (student: FirstYearEngineeringStudent) =\u003e {\n\tdelete student.discipline;\n};\n\n// The dangers of accepting a covariant argument:\n// We can delete the non-optional `discipline` field and TypeScript will not complain.\nconst csStudent: EngineeringStudent = { name: 'Linus', discipline: 'Computer Science' };\nclearDiscipline(csStudent);\n\nconsole.log(csStudent.discipline);  // ‚Üí undefined\n```\n\n## Functions\n**Typing Function Declarations**\nTo type a function declaration, you just assign types for each parameter it takes in and then specify the return type by postfixing the parameter list with a colon and a type.\n```typescript\n// Typing function parameters and return values.\n// To assign a return type to a function, you postfix the parameter list with a colon and a type.\n\n// Regular functions:\nfunction increment(num: number): number {\n\treturn num + 1;\n}\n\n// Arrow functions:\nconst decrement = (num: number): number =\u003e num - 1;\n```\n**Typing Function Expressions or Arrow Functions**\nWhat if you want to specify the type of a callback rather than a function declaration? You would use the syntax: `(param: Type, ...) =\u003e RetType`. Although the syntax is inspired by arrow functions, it is not actually defining a function.\n```typescript\ntype Greeting = (a: string, b: string) =\u003e void;\n\n// Note that the parameter names above don't need to match that of the assigned\n// callback's parameter names, they're purely for documentation.\nconst callback: Greeting = (name, message) =\u003e {\n\tconsole.log(`Hi, I'm ${name}. ${message}`);\n}\ncallback(\"Linus\", \"F*** you, Nvidia.\");\n```\n\n### Optional \u0026 Default Parameters\nJust like how you can make [[Knowledge/Engineering/Languages/TypeScript#Optional Properties|object properties optional]] and [[Knowledge/Engineering/Languages/TypeScript#Tuples|tuple items optional]], you can make function parameters optional by postfixing the parameter name with a `?`. Alternatively, you can set a default value for a parameter by assigning a value directly after the parameter name, which is pretty much the same as making it optional.\n```typescript\n// Optional parameter.\nconst greet = (name: string, message?: string) =\u003e {\n\tconsole.log(`Hi ${name}!`);\n\tif (message) console.log(message);\n}\n\n// Default parameter. Notice that the parameter type can often be inferred from the\n// default value that you supply.\n// You can also choose to explicitly set the type anyway like: \n//   `message: string = \"You rock.\"`\nconst greet = (name: string, message = \"You rock.\") =\u003e {\n\tconsole.log(`Hi ${name}! ${message}`);\n}\n```\n\n### Variadic Functions\nA **variadic function** is just one that takes in an arbitrary number of arguments. The vast majority of functions take in a fixed list of parameters, we call these 'fixed-arity' functions. Normally in JavaScript, defining a variadic function requires you to make use of the implicit [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) array in the function body. In TypeScript, it's way more intuitive and can be done in a type-safe way with the rest operator, `...`.\n```typescript\nconst max = (...nums: number[]): number =\u003e {\n\tif (!nums || nums.length === 0) return -Infinity;\n\treturn nums.reduce((maxSoFar, currNum) =\u003e (maxSoFar \u003e currNum) ? maxSoFar : currNum, -Infinity);\n}\n```\n\n### this\nIn JavaScript, `this` is a nightmare for most programmers to work with because its value is different depending on how it is called. In TypeScript, you can minimise surprises around the value of `this` by assigning a type to it as the first function parameter.\n\nTo illustrate the problem:\n```typescript\ntype Person = { name: string, greet: () =\u003e void };\nconst person: Person = {\n\tname: \"Linus Torvalds\",\n\tgreet: function() {\n\t\tconsole.log(`Hi, I'm ${this.name}`);\n\t}\n}\nperson.greet(); // This works as expected since `this` is bound to `person`.\n\nconst greet = person.greet;\ngreet();        // This fails since the `this` is lost and is no longer bound to `person`.\n```\nThe 'solution' is to assign a type for `this` so that the developer is warned when `this` takes on the wrong type when they invoke a function that uses it.\n```typescript\ntype Person = { name: string, greet: (this: Person) =\u003e void };\nconst person: Person = {\n\tname: \"Linus Torvalds\",\n\tgreet: function(this: Person) {\n\t\tconsole.log(`Hi, I'm ${this.name}`);\n\t}\n}\n```\n\n### Generators\nSee [[Knowledge/Engineering/Programming/Generators|generators]]. In JavaScript, you can create a [[Knowledge/Engineering/Languages/JavaScript#Generators|generator function]] by postfixing `function` with an asterisk, `*`. *Note*: you cannot define arrow functions as generator functions (at least as of 2022's ES standard).\n```typescript\nfunction* fooGenerator() {\n\tyield 42;\n\tyield 24;\n}\n\nconst fooNums = fooGenerator();\nconsole.log(fooNums.next());    // ‚Üí { value: 42, done: false }\nconsole.log(fooNums.next());    // ‚Üí { value: 24, done: false }\nconsole.log(fooNums.next());    // ‚Üí { value: undefined, done: false }\n\n// You can loop through a generator's values with JavaScript's for-of loops.\nfor (const item of fooGenerator()) {\n    console.log(item);\n}\n```\nTypeScript automatically infers the return type of the generator to be `IterableIterator\u003cnumber\u003e`. To assign an explicit type for what gets yielded, do it the same way that you'd specify the return value, but wrap it around with `IterableIterator`.\n```typescript\nfunction* fooGenerator(): IterableIterator\u003cnumber\u003e {\n\t...\n}\n```\n\n### Iterators\nSee [[Knowledge/Engineering/Programming/Iterators|iterators]]. In JavaScript, an *iterable* is an object containing the `Symbol.iterator` property with the value being a function that returns an *iterator* (which can be done by defining Symbol.iterator to be a [[Knowledge/Engineering/Languages/TypeScript#Generators|generator function]], which always returns an iterator). An *iterator* is an object that defines a `next` method which returns an object of shape: `{ value: any, done: boolean }`.\n\nAn object can be both an *iterable* and an *iterator* at the same time. When you invoke a generator function, for example, you get an object \nof type `IterableIterator` which is both, meaning it has a `Symbol.iterator` property, whose value is a function that returns an iterator, and the `next` method.\n```typescript\nconst favouriteNums = {\n\t*[Symbol.iterator]() {\n\t\tyield 42;\n\t\tyield 2;\n\t\tyield 4;\n\t}\n}\n\nfor (const item of favouriteNums) {\n\tconsole.log(item);\n}\n```\n**Note**: the syntax for defining `Symbol.iterator` as a generator function might seem strange. See this post for clarifications. As for the square brackets around `Symbol.iterator`, it's called the [computed property name syntax](https://stackoverflow.com/questions/32515598/square-brackets-javascript-object-key), introduced in ES6.\n\n### Function Overloading\nYou can define a function type that actually consists of multiple function signatures. See the [Function Overloads](https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads).\n\n## Generic Functions\nSee [[Knowledge/Engineering/Programming/Generics|generics]]. In TypeScript, you can define generic functions by specifying a comma-separated list of generic type parameters in angle brackets `\u003c\u003e` right before the parameter list of function. You would use generic functions if you wanted a function to be reusable across multiple types without giving up type safety by resorting to `any`.\n```typescript\ntype Filter = \u003cT\u003e(array: T[], predicate: (elem: T) =\u003e boolean) =\u003e T[];\n\nconst filter: Filter = \u003cT\u003e(array: T[], predicate: (elem: T) =\u003e boolean) =\u003e {\n\tconst arr: T[] = [];\n\tarray.forEach((elem) =\u003e {\n\t\tif (predicate(elem)) arr.push(elem);\n\t});\n\treturn arr;\n};\n\n// TypeScript can infer that `T` should be `number`.\nconsole.log(filter([1, 2, 3, 4, 5], (num) =\u003e num % 2 === 0));\n\n// To explicitly set `T`, use angle brackets after the function name.\nconsole.log(filter\u003cnumber\u003e([1, 2, 3, 4, 5], (num) =\u003e num % 2 === 0));\n```\nTo make regular function declarations generic, you also place the generic type parameters between angle brackets right before the parameter list:\n```typescript\nfunction filter\u003cT\u003e(array: T[], predicate: (elem: T) =\u003e boolean) =\u003e { ... }\n```\n\n### Bind on Reference\nIn the above example, `T` gets *bound* when the function gets invoked, but you could also bind `T` whenever the type alias gets referenced by placing the generic type parameters *after* the type name instead of before the function parameter list:\n```typescript\ntype Filter\u003cT\u003e = (array: T[], predicate: (elem: T) =\u003e boolean) =\u003e T[];\n\n// Wherever you use `Filter`, you have to explicitly bind `T` like `Filter\u003cT\u003e`.\nconst filter: Filter\u003cnumber\u003e = (array, predicate) =\u003e ...;\n```\n\n### Bounded Polymorphism\nSometimes, saying that a generic function takes in type parameter of `T` is too permissive. Instead, we might want `T` to be a subtype of `U`, that is, we should accept type parameters that are 'at least' `U`. This is called *bounded polymorphism* or *constrained genericity*.\n```typescript\ntype Enemy = { health: number };\ntype Alien = Enemy \u0026 { galaxy: string };\ntype Cyborg = Enemy \u0026 { model: string };\n\ntype AttackEnemy = \u003cT extends Enemy\u003e(enemy: T, damage: number) =\u003e void;\nconst attackEnemy: AttackEnemy = \u003cT extends Enemy\u003e(enemy: T, damage: number) =\u003e {\n\tenemy.health -= damage;\n\tconsole.log(`Dealt ${damage}. Enemy now has ${enemy.health} HP left.`);\n};\n\nconst enemy: Enemy = { health: 20 };\nconst alienEnemy: Alien = { health: 50, galaxy: 'Andromed' };\nconst cyborgEnemy: Cyborg = { health: 100, model: 'Terminator Mk. II' };\n\nattackEnemy(enemy, 15);\nattackEnemy(alienEnemy, 10);\nattackEnemy(cyborgEnemy, 8);\nattackEnemy(\"Hello world\", 5);  // Fails because \"Hello world\" is not a subtype of `Enemy`.\n```\n![[Knowledge/Engineering/Languages/assets/bounded-polymorphism.png|250]]\n\n## Object-Oriented Programming\nSee [[Knowledge/Engineering/Programming/Object Oriented Programming|Object Oriented Programming]].\n\n### Access Modifiers\nSee [[Knowledge/Engineering/Programming/Object Oriented Programming#Encapsulation|encapsulation]]. TypeScript offers 3 access modifiers, which can be prefixed to any class field declaration:\n- `private`.\n- `protected` (which makes a member accessible to subclasses as well).\n- `public` .\nIf no access modifier is specified, then fields are `public` by default, unlike most languages which default to `private`.\n\nWhen prefixing a constructor's parameter with an access modifier, it'll declare the field and assign the given value implicitly. \n```typescript\nclass Person {\n\tconstructor(public name: string) {}\n}\n// ... is a shorthand that's equivalent to:\nclass Person {\n\tpublic name: string;\n\tconstructor(name: string) { this.name = name; }\n}\n\nconst person: Person = new Person('Linus Torvalds');\nconsole.log(person.name);\n```\n\n### Inheritance\nSee [[Knowledge/Engineering/Programming/Object Oriented Programming#Inheritance|inheritance]]. In TypeScript, inheritance works in the same way and uses the same syntax as [[Knowledge/Engineering/Languages/JavaScript#Inheritance|JavaScript's inheritance]].\n\n### Method Overriding\nSee [[Knowledge/Engineering/Programming/Object Oriented Programming#Method Overidding|method overriding]]. By default, every method is '[[Knowledge/Engineering/Programming/Object Oriented Programming#Virtual Method|virtual]]', so you can override them all. To override a method in TypeScript, just copy the method signature and supply the new method body. As good practice, use the optional `override` modifier so that you're warned when you've got the base class' method signature wrong.\n```typescript\nclass Base {\n    // Methods are virtual by default.\n\tpublic foo(): void {\n\t\tconsole.log('Foo');\n\t}\n}\n\nclass Sub extends Base {\n    // Explicitly re-implementing the parent's `foo` method.\n\tpublic override foo(): void {\n\t\tconsole.log('Bar');\n\t}\n}\n```\n\n#### Abstract Classes\nSee [[Knowledge/Engineering/Programming/Object Oriented Programming#Abstract Class|abstract classes]]. To make a class abstract, just prefix it with the `abstract` keyword.\n```typescript\nabstract class Employee { ... }\nclass SoftwareEngineer extends Employee { ... }\n```\n\n### Abstract Methods\nSee [[Knowledge/Engineering/Programming/Object Oriented Programming#Abstract Method|abstract methods]]. Abstract methods must be inside abstract classes. To make a method abstract, use the `abstract` modifier, explicitly type the method signature and do not provide a body.\n```typescript\nabstract class Employee {\n\tconstructor(public salary: number) {}\n\tpublic getSalary(): number { return this.salary; }\n\tpublic abstract slackOff(): void;\n}\n\nclass SoftwareEngineer extends Employee {\n\tconstructor() { super(100000); }\n\tpublic override slackOff() { console.log('Time to browse r/ProgrammerHumor...'); }\n}\n\nconst linus: Employee = new SoftwareEngineer();\nlinus.slackOff();\n```\n\n### Generic Types in Classes/Interfaces\nYou can set class-scoped or interface-scoped generic type parameters:\n```typescript\nclass HashMap\u003cK, V\u003e { ... }\ninterface HashMap\u003cK, V\u003e { ... }\n```\n\n\n## Modules\nSee [[Knowledge/Engineering/Languages/JavaScript#Modules|JavaScript modules]]. With TypeScript, you can additionally import/export type aliases and interfaces.\n\n**Note**: in import statements, you don't need to specify the `.ts` file extension. This means you can easily import [[Knowledge/Engineering/Languages/TypeScript#Type Declaration Files|type declaration files]] with the extensionless name.\n\nIn `thing.ts`:\n```typescript\n// Notice that this file exports a value `Thing` and a type `Thing`, but\n// no name collision happens because 'values' and 'types' are tracked in\n// separate namespaces by the TypeScript compiler.\nexport type Thing = {\n\tval: number;\n};\nexport const Thing = {\n\tval: 42,\n};\n```\nIn `main.ts`:\n```typescript\n// Notice that you don't need to write the extension in the path: './thing.ts'.\nimport { Thing } from './thing';\n\nconst thing: Thing = Thing;\nconsole.log(thing);\n```\n\n## Error Handling\nSee [[Knowledge/Engineering/Languages/JavaScript#Error Handling|JavaScript error handling]]. TypeScript doesn't introduce any new syntax for error handling over JavaScript, but the type system allows for streamlining how errors are treated in a project by developers.\n\n### Ways of Error Handling\nThere are 4 common patterns for handling errors in TypeScript projects, which are also mostly applicable to non-TypeScript projects:\n1. *Just return `null`.*\n   This reveals the least information in the event of an error, but it's the easiest to do. Constant null-checking is required throughout the code however, which can be laborious and verbose.\n2. *Throw an exception.*\n   When an exception is thrown, it must be caught by the caller in a try-catch block (or a `catch` callback if using promises) otherwise a full crash occurs. Making and throwing custom subclasses of `Error` would offer specific information to help with debugging and informing the user about the problem.\n   The main issue is that it's hard to enforce that programmers write the error-handling try-catch logic when they're lazy.\n3. *Return exceptions (rather than throw them)*.\n   This means a function will specify in its return type a union of the expected return type *and* the error classes that it could throw, such as in the following:\n   ```typescript\n\tconst getData = (): Data | NetworkError =\u003e {};\n   ```\n   By putting the error as part of the return type, the user of the function is unlikely to ignore error cases.\n   The idea here is very similar in spirit to [Java's `throws`](https://www.javatpoint.com/throws-keyword-and-difference-between-throw-and-throws) keyword.\n   The downside to this approach is that it'll lead to more verbose function signatures, especially if errors are simply 'bubbled' up the call stack.\n4. *Define and use the `Option` type*.\n  The idea comes from languages like Rust and Haskell. See Rust's documentation on [`std::option`](https://doc.rust-lang.org/std/option/).\n\n## Utility Types\nTypeScript gives you a bunch of [very useful built-in utility types](https://www.typescriptlang.org/docs/handbook/utility-types.html) that you can use to make working with complex types a breeze üå¨Ô∏è.\n\n### Mapping Types\nHere are some of the most useful utility types for sourcing types from other types:\n- `Partial\u003cT\u003e` ‚Äî T, but every property is optional.\n- `Omit\u003cT, Keys\u003e` ‚Äî T, but without the property in `Keys`, which is a union of string property names.\n- `Pick\u003cT, Keys\u003e` ‚Äî a type with properties `Keys`, a union of string property names, sourced from `T`.\n- `Readonly\u003cT\u003e` ‚Äî T, but every property is read-only.\n\nUsage examples:\n```typescript\ninterface Human {\n    limbs: string[];\n    organs: string[];\n    memories: string[];\n    soul: boolean;\n}\n\ntype SubHuman = Partial\u003cHuman\u003e;                                 // Human, but all properties are optional.\ntype Husk = Omit\u003cHuman, 'soul' | 'memories'\u003e;                   // Human, but without the soul or memories.\ntype SentimentalProperties = Pick\u003cHuman, 'soul' | 'memories'\u003e;  // Only the soul and memories of a human.\ntype FrozenHuman = Readonly\u003cHuman\u003e;                             // Human, but every property is immutable.\n\n// After experiencing Java programming, I am just a husk ;(\nconst me: Husk = {\n    limbs: [\"arms\", \"legs\", \"...\"],\n    organs: [\"half a brain\", \"heart\", '...'],\n};\n```\n\n**Note**: behind the scenes, utility types such as the ones above are realised through ['mapped types'](https://www.typescriptlang.org/docs/handbook/2/mapped-types.html).\n```typescript\n// This is the `Partial` type, implemented using mapped types.\n// Many other utility types are implemented in a very similar manner!\ntype MyPartial\u003cT\u003e = {\n    [K in keyof T]?: T[K];\n};\n```\n\n### Conditional Types\nHere are some of the most useful utility types that leverage [conditional typing](https://www.typescriptlang.org/docs/handbook/2/conditional-types.html), a TypeScript innovation.\n- `Exclude\u003cT, U\u003e` ‚Äî removes values in the set `U` from the set `T`.\n- `Extract\u003cT, U\u003e` ‚Äî picks out elements in `U` that are in `T`.\n- `NonNullable\u003cT\u003e` ‚Äî excludes `null` from the set `T`.\n- `ReturnType\u003cF\u003e` ‚Äî the return type of a function's typed signature.\n\n**Note**: just like how you can use the ternary operator, `(condition) ? expr1 : expr2` for conditional expression evaluation, you can use the ternary operator for conditional type evalution. This is what's used to implement those conditional utility types above.\n\n## Asynchronous Programming\nSee [[Knowledge/Engineering/Languages/JavaScript#Asynchronous Programming|JavaScript asynchronous programming]]. \n\n## JavaScript Interoperability\nAn excellent reason to adopt TypeScript is that you don't have to rewrite your JavaScript codebase to begin benefiting from a type system.\n\n### Type Declaration Files\nA type declaration file, which goes with the extension `.d.ts`, associates types to JavaScript code. It's a file consisting **only** of *type-level* code, meaning you can't use expressions in there (which means no function implementations, variables, class implementations, etc. can be defined within). As a very loose analogy, `.d.ts` files are kind of like the `.h` header files in C or C++.\n\nIf you have a `hello-world.js` file, then the type declaration file must have the name, `hello-world.d.ts`.\n\n\u003e A type declaration is a way to tell TypeScript, ‚ÄúThere exists this thing that‚Äôs\ndefined in JavaScript, and I‚Äôm going to describe it to you.‚Äù (Programming TypeScript). \n\nNPM packages that once were intended only for JavaScript developers (eg. jQuery) can be made consumable by TypeScript developers by having these type declaration files. As a TypeScript dev, you'd be able to use pure JS libraries as if they were written in TypeScript.\n\nWhen type declarations don't ship with an NPM package, they can usually be install individually in the [@types organisation](https://www.npmjs.com/~types) on npm. The type declarations in [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped), a big community effort to bring types to popular JS libraries, are automatically published to the @types organisation.\n\nEg. to bring jQuery into a TypeScript frontend project, you'd do:\n```bash\nnpm install jquery --save              \nnpm install @types/jquery --save-dev  # Brings in all the type declaration files.\n```\n\n\n","lastmodified":"2022-10-14T06:51:53.934880014Z","tags":null},"/Knowledge/Engineering/Maths/Maths":{"title":"Maths","content":"\n\u003e \"Mathematics is the language with which God has written the universe.\" ‚Äî Galileo Galilei.\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Maths/discrete-maths/Set-Theory":{"title":"Set Theory","content":"\n## Sets\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Networking/DNS":{"title":"DNS","content":"\n\n## DNS Resource Records\nTODO.\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Networking/OSI-Model":{"title":"OSI Model","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Operating-Systems/Kernel":{"title":"Kernel","content":"\nThe *kernel* is the part of the OS that is closer to hardware and provides abstractions such as system calls, memory management, process management, device driving, etc. The operating system, on the other hand, is the kernel *plus* the [[Knowledge/Engineering/Operating Systems/User Space and Kernel Space|userland]] things like standard libraries, [GNU core utilities](https://en.wikipedia.org/wiki/List_of_GNU_Core_Utilities_commands), etc.\n![[Knowledge/Engineering/Operating Systems/assets/os-and-kernel.png|350]]\n*(Sourced from Tutorialspoint)*\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Operating-Systems/Program-Memory":{"title":"Program Memory","content":"\n\n\n### Stack\nTODO.\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Operating-Systems/Stack-Frame":{"title":"Stack Frame","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Operating-Systems/User-Space-and-Kernel-Space":{"title":"User Space \u0026 Kernel Space","content":"\nMost operating systems will divide the computer's [[Knowledge/Engineering/Operating Systems/Virtual Memory|virtual memory]] into two parts: the *user space* (or *userland*) and the *kernel space*. The kernel space is a partition of virtual memory whose contents are protected from direct access by non-operating system software like your regular scripts, apps and daemons. Only the kernel, device drivers and other critical OS software can freely read/write to the kernel space. Everything else can read/write only to user space.\n\n![[Knowledge/Engineering/Operating Systems/assets/userland-and-kernel-space.png|400]]\n\nThe main motivation for this is to prevent malicious or unintentionally destructive programs from wrecking havoc on the computer system by manipulating critical operating system data.\n\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Operating-Systems/Virtual-Memory":{"title":"Virtual Memory","content":"\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/AOT":{"title":"AOT","content":"\n*AOT (ahead-of-time) compilation* involves compiling an entire application's source code into an executable (or some other target) before running the application. This is the traditional type of compilation model for [[Knowledge/Engineering/Languages/C|C]], [[Knowledge/Engineering/Languages/C++|C++]], [[Knowledge/Engineering/Languages/Go|Go]] and similar languages. Compilers like `gcc` are AOT compilers.\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/Actors":{"title":"Actors","content":"\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/Code-Splitting":{"title":"Code Splitting","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/Concurrency":{"title":"Concurrency","content":"\nTODO:\nconcurrency vs. asynchronous\nconcurrency vs. multithreading\nconcurrency vs. parallelism\n\nWhen talking about concurrency issues, it often involves concurrent access to the same shared data in memory, however, it can involve concurrent access to other resources such as files and databases.\n\n*Concurrency* and *parallelism* have very similar meanings in English, but there is a distinction to be clarified about their meanings in computer science contexts:\n1. **Concurrency** is just when 2+ parts of the code of a program **can** run at the same time on different cores of a CPU, different CPUs of a computer, or different computers connected to each other. \n2. **Parallelism** is when they **do** run at the same time.\n\n\u003e \"Concurrency is a software mechanism, and parallelism is a hardware concern.\" - *Pragmatic Programmer*.\n\n\nTODO:\nCritical region.\n\nSee [[Knowledge/Engineering/Programming/Actors|actors]]\n\nSee [[Knowledge/Engineering/Programming/Mutex|mutex]].\n\nSee [[Knowledge/Engineering/Programming/Semaphore|semaphores]].\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/Functional-Programming":{"title":"Functional Programming","content":"TODO.\n\nA [[Knowledge/Engineering/Programming/Programming Paradigm|programming paradigm]]\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/Generators":{"title":"Generators","content":"\nGenerators are *just functions* which, when invoked, will give you a single value from a list of values. They're *stateful* functions which return the next value in a list of values for each successive invocation.\n\nUsually, programming languages will give you a `yield` keyword which works basically the same way as `return`, but when the function is invoked again, execution resumes after the last `yield`. For example, below is a generator in Python.\n```python\ndef foo_generator():\n\tyield 2\n\tyield 3\n\tyield 5\n\ng = foo_generator()\nprint(next(g))      # ‚Üí 2\nprint(next(g))      # ‚Üí 3\nprint(next(g))      # ‚Üí 5\n```\nAt each `yield` statement, execution is suspended at that line and exeuction resumes at the line right after until the next `yield` or until the function terminates.\n\n**Note**: normally, when you invoke a function, a [[Knowledge/Engineering/Operating Systems/Stack Frame|stack frame]] gets allocated on the [[Knowledge/Engineering/Operating Systems/Program Memory#Stack|stack]] section of memory. When you invoke a generator function, the 'stack' frame actually gets allocated in the [[Knowledge/Engineering/Operating Systems/Program Memory#Heap|heap]] instead (at least in [CPython](https://github.com/python/cpython)) and so they persist separately from the regular function call stack.\n\n### Generators \u0026 Iterator\nAll *generators* are [[Knowledge/Engineering/Programming/Iterators|iterators]]. When you invoke a generator function, it returns an *iterator* which you can loop through by invoking some function/method like `next` on them (in the case of Python).\n\n### Why Use Generators?\nNormally, when you need a list of values of some kind, you'd call a function which returns that entire list of values back to you. Generators are *lazy*, so they only return one value of a stream of values at a time. In other words, you get values from a stream of values *on-demand* rather than getting all values upfront. This is great when you don't know how many values from a stream of values you might need. If you really needed the first 10 values, but you loaded all 1000 values upfront, for example, you're hogging an **unnecessarily large amount of memory**. With generators, you only really hold the memory for a single value of the list, so it's a really common way to optimise for memory usage.\n\nGenerators are also a great way to represent streams of infinite values. For example, it might make sense to write a prime numbers generator function only get the next prime number, on-demand.\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/Generics":{"title":"Generics","content":"Generic programming is about writing reusable functions, classes, etc. without compromising on [[Knowledge/Engineering/Programming/Type System|type safety]]. The primary motivation behind them is to keep code DRY, that is, to avoid code duplication.\n\nThe basic idea behind generic programming is that you can make functions and classes take a *generic type parameter*.\n\nTODO.\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/Interpreter":{"title":"Interpreter","content":"\nInterpreters are programs that take in source code and executes it directly *without* compiling it to machine code. Instead, a common way interpreters are implemented is to parse source code, compile it to an intermediate representation (often called *bytecode*), then hands that off to a [[Knowledge/Engineering/DevOps/Virtual Machines#Process Virtual Machine|virtual machine]] to execute.\n\nInterpreters may or may not use a [[Knowledge/Engineering/Programming/JIT|JIT]] compiler.\n\n## Interpretation vs Compilation\n\u003e Interpretation and compilation are not mutually exclusive and are not simply alternatives of each other. Likewise, *interpreted languages* and *compiled languages* don't necessarily mean that they must be only put through an interpreter or compiler respectively. \n\n*Interpretation* is just \"given this source code, do what it says\", which is basically just executing the source code directly (from the programmer's perspective). *Compilation* is a mapping from language A to language B, like converting C++ code into x86 machine code.\n\nWhen we say a language is a *compiled language* or *interpreted language*, it really just means that the canonical or official compilation model intended by the language designers is to have the language be fed through a compiler or interpreter, respectively. Whether or not a language is compiled/interpreted is *not* a property that's tied to the programming language, but rather **how it's implemented**. A *compiled language* like C++ does actually have interpreters you can use for it, and an *interpreted language* like Python does have compilers.\n\n\u003e You can have both compilers and interpreters for the same programming language. \n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/Iterators":{"title":"Iterators","content":"\nAn **iterator** is an *object* that lets you loop through an **iterable**, usually by invoking, implicitly or explicitly, a `next` method.\n- In Python, iterators are objects that expose the `__next__`  [[Knowledge/Engineering/Languages/Python#Dunder Methods|dunder method]] which can be invoked to retrieve the next value in the **iterable**.\n\nAn **iterable** is an object containing a collection of items that you can *get an **iterator** from*, usually, via a method. Iterables are stateless and have no concept of what element is the 'current' element in a traversal ‚Äì that is what the iterator handles.\n- In Python, that method is `__iter__`.\n- In C++, that method is usually `begin`.\n\nMany programming languages give you a for-loop variant that basically serves as syntactic sugar in using looping through the items in an **iterable**.\n- In Python, when you say `for item in iterable`, what happens behind the scenes is the iterable's `__iter__` method gets called to get an iterator, then `item` is assigned to whatever the iterator's `__next__` method returns. The for loop stops when `__next__` raises a `StopIteration` exception.\n- In C++, they're called *range-based for* loops with the syntax `for (T item : iterable) statements`.\n- In C#, they're called *foreach* loops with the syntax `foreach (T item in iterable) statements`.\n- In JavaScript, they're called *for of* loops with the syntax `for (let item of iterable) statements`\n- ... and so on.\n\n### Iterator Design Pattern\nThe purpose of iterators is to let the user access the elements of a data structure through a consistent interface, regardless of whether they're iterating through items in a vector, a binary search tree, a graph, a hash map, etc. All these data structures will provide a way for the user to get an iterator from them that can be used in a for loop, for example.\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/JIT":{"title":"JIT","content":"\n*JIT (just-in-time) compilation* is when source code (or *bytecode*) gets compiled on-demand at runtime *as it executes* rather than prior to being executed. JIT compilation is a feature of an [[Knowledge/Engineering/Programming/Interpreter|interpreter]]. Traditionally, source code is compiled to machine code directly by an [[Knowledge/Engineering/Programming/AOT|AOT compiler]] like `gcc` for C and C++, meaning no further compilation is done during execution.\n\n## JIT vs. AOT\n- JIT tends to be better during development. AOT tends to be better during production, but not necessarily always since a JIT compiler works at runtime, it can make optimisations like inlining functions that are invoked frequently (which minimises the overhead in the low level operation of setting up a function context).\n    - In languages like Dart and TypeScript, it's common to use a JIT compiler during development and then compile everything for production using an AOT compiler.\n- JIT tends to be less secure than AOT because of [JIT spraying exploits](https://en.wikipedia.org/wiki/JIT_spraying).\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/Mutex":{"title":"Mutex","content":"\n\u003e \"Tip 59: Use actors for concurrency without shared state.\" ‚Äî *Pragmatic Programmer*.\n\n\n\n\n\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/Object-Oriented-Programming":{"title":"Object Oriented Programming","content":"Object-oriented programming is a [[Knowledge/Engineering/Programming/Programming Paradigm|programming paradigm]] that sees programs as a collection of *objects* interacting with each other. *Objects* are just containers for some data (called 'fields') and functions (called 'methods').\n\nObject-oriented programming involves heavy usage of [[Knowledge/Engineering/Programming/Object Oriented Programming#Classes|classes]] and enable us to make use of concepts like [[Knowledge/Engineering/Programming/Object Oriented Programming#Encapsulation|encapsulation]], [[Knowledge/Engineering/Programming/Object Oriented Programming#Inheritance|inheritance]], [[Knowledge/Engineering/Programming/Object Oriented Programming#Polymorphism|polymorphism]], etc.\n\n### Classes\nTODO.\n\n#### Static Classes\nTODO.\n\n### Encapsulation\nEncapsulation is about *hiding the implementation details* of a class as much as possible. Doing so will tend to minimise [[Reading/Clean Code|coupling]].\n\n**Access modifiers**\nAccess modifiers are used to explicitly apply different levels of visibility to the members of a class. OO programming languages will usually give you the following 3 access modifiers.\n- `private` ‚Äì only accessible within the class.\n- `protected` ‚Äì accessible within the class *and* within its subclasses.\n- `public` ‚Äì accessible by any class in the program.\n\nLanguages might have variations on how these access modifiers behave, as well as what the default visibility is when you omit the access modifier. Eg. In Java, a `protected` member is also visible to classes in the same package. \n\nIn general, prefer the most restricted visibility possible.\n\n### Inheritance\nInheritance (also called 'subclassing') is when you make one class derive from a base class, causing the child class to *inherit* the parent class' non-private members.\n\n**Differences between languages**\nLanguages will have different syntax for inheritance and ways for subclasses to access their parent class. They may also differ in whether they support [**multiple inheritance**](https://en.wikipedia.org/wiki/Multiple_inheritance) or not.\n- In C++, the inheritance might look like `class Sub : public Base`. *Note*: C++ has concepts like private/public inheritance that other languges don't have.\n- In JavaScript, inheritance looks like `class Sub extends Base`. Within the `Sub` class, you have access the base class' constructor and methods via the `super` keyword.\n- In C#, inheritance looks like `public class Sub : Base`. Subclasses can access the base class' members through the `base` keyword (which is similar to JavaScript's `super` keyword).\n\n### Polymorphism\nTODO.\n\n#### Static Polymorphism\nTODO.\n\n#### Dynamic Polymorphism\nTODO.\n\n### Method Overidding\nMethod overriding is when you make a subclass provide an implementation for a method that's defined in its base class. Method overriding enables **[[Knowledge/Engineering/Programming/Object Oriented Programming#Dynamic Polymorphism|runtime polymorphism]]**.\n\n**Differences between languages**\nIn many languages, overriding is implicitly done, but it's recommended to explicitly label it.\n- In TypeScript and C++, you can optionally add the `override` modifier.\n- In Java, you can optionally annotate overridden methods with `@Override`.\n- In C#, you must use the `override` modifier.\n\n### Abstract Class\nAn abstract class is just one you can't instantiate, *forcing* the user to choose and instantiate a specific concrete subclass that inherits from the abstract class. \n\nAbstract classes let you define **both** *concrete methods* and *abstract methods*. If you find that you don't need to define concrete methods, which is usually the majority of the time, then consider using an [[Knowledge/Engineering/Programming/Object Oriented Programming#Interface|interface]] instead.\n\n**Differences between languages**\nMaking a class abstract differs between programming languages.\n- In TypeScript, prefix a class with `abstract`.\n- In C#, prefix a class with `abstract`.\n- In C++, give the class at least one [[Knowledge/Engineering/Languages/C++|pure virtual function]], eg. `virtual void foo() = 0;`. There is no `abstract` keyword.\n\n#### Abstract Method\n*You can only define abstract methods inside an abstract class*. Abstract methods are ones that **must be overridden** and implemented by the subclasses. If you want to provide a default implementation and allow for subclasses to optionally override a method, use [[Knowledge/Engineering/Programming/Object Oriented Programming#Virtual Method|virtual methods]] instead.\n\nYou cannot make abstract methods static.\n\n**Differences between languages**\nTo define abstract methods:\n- In TypeScript, you'd use the `abstract` modifier.\n- In C#, you'd use the `abstract` modifier.\n- In C++, define a pure virtual function: `virtual void foo() = 0;`.\n\n### Virtual Method\nVirtual methods are methods that can be overridden by subclasses. To force subclasses to implement a method, use [[Knowledge/Engineering/Programming/Object Oriented Programming#Abstract Method|abstract methods]] instead.\n\nYou cannot make virtual methods static.\n\n**Differences between languages**\nTo define virtual methods:\n- In some languages like C# and TypeScript, methods are virtual by default.\n- In C++, you'd use the `virtual` modifier, but it's a little complicated because you can still override methods without it. See [this StackOverflow post](https://stackoverflow.com/questions/2391679/why-do-we-need-virtual-functions-in-c).\n\n### Interface\nAn interface is a 'contract' that defines what a user can do with the classes that *implement* that interface. You define the methods (and sometimes constants) that the interface supports, and then leave the implementation details to the subclasses. An interface is not a class, so you cannot instantiate it.\n\nYou **cannot supply any implementation** inside interfaces. If you want to provide *some* concrete methods, then consider using an [[Knowledge/Engineering/Programming/Object Oriented Programming#Abstract Class|abstract class]] instead. That being said, some programming languages like C# let you implement a static members inside an interface.\n\n**Differences between languages**\n- In TypeScript, you define an interface like this: `interface Blog { ... }`, but it's also used generally outside of OO design.\n- In C#, you define an interface like this: `public interface IFoo { ... }`.\n- In C++, there is no native concept of interfaces, but you can simulate it by making an abstract class whose methods *are all* abstract, ie. all of them are pure virtual functions. Implementing an interface is therefore the same as inheritance.\nAll interface members are public by default.\n\n## Criticisms of OOP\nSee [Object-Oriented Programming is Bad](https://www.youtube.com/watch?v=QM1iUe6IofM).\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/Programming-Paradigm":{"title":"Programming Paradigms","content":"A *programming paradigm* describes a general *strategy* for how to write software. Formally, a 'paradigm' in everyday English is:\n\u003e A set of assumptions, concepts, values, and practices that constitutes a way of viewing reality for the community that shares them.\n\nBelow is a hierarchy of very popular, battle-tested programming paradigms, each with their own pros and cons. You can solve pretty much *any* software problem in *any* paradigm, really, but the solution will differ in terms of scalability, maintainability, difficulty, etc.\n![[Knowledge/Engineering/Programming/assets/programming-paradigms.png]]\n**Note**: there are more paradigms than shown here.\n\nProgramming languages often support multiple programming paradigms. For example, JavaScript supports both [[Knowledge/Engineering/Programming/Object Oriented Programming|object-oriented programming]] and [[Knowledge/Engineering/Programming/Functional Programming|functional programming]] (and more).\n\n### Imperative\nPrograms are a set of precise instructions for the machine to perform that mutate program state.\n- **Procedural** ‚Äì programs are just a sequential collection of data and functions (procedures) acting on that data. C is a classic example of a procedural language.\n- **Object-oriented** ‚Äì programs are just objects interacting with each other. Objects are just a container that groups together some data and methods (functions). \n\n### Declarative\nPrograms should be written descriptively, meaning that your code should always express the 'what' rather than the 'how'. SQL, for example, is a declarative language, since the statement `SELECT * FROM Table` expresses what you want, but the 'how' is delegated tot he SQL engine. Ultimately, \n- **Functional** ‚Äì programs are made by calling and composing functions.\n\nUltimately, languages that support a declarative paradigm are just abstractions over an imperative 'backend'.\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/Semaphore":{"title":"Semaphores","content":"\nA semaphore is something that only one thread can own. It's used to coordinate access to a shared resource by forcing threads to first acquire the semaphore before accessing the resource. If a thread sees that the semaphore has already been acquired, then it must wait for it to be unlocked by the thread that is currently holding it.\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/Programming/Type-System":{"title":"Type System","content":"\nA *type system* is a set of rules defined by a programming language specification that assigns a *type* to every variable, expression, function, and possibly other things beyond those. \n\n### Why Type Systems Exist\nType systems exist for one reason: to help you write less buggy code in a more self-documenting way.\n- Giving variables, values, functions, etc. a *type* restricts the set of things you can do with them which helps us by minimising the chance of creating situations where the program tries to add the integer `3` to an instance of `C[]()at`. \n- It forces users of an interface to always supply an expected value.\n\n### Static Typing\nA *statically typed language* is one where the type system's rules are checked when you run the compiler (ie. at compile-time). It's called 'static' because any type system violations are caught before you execute a single line of your program.\n- Languages like [[Knowledge/Engineering/Languages/C|C]] and [[Knowledge/Engineering/Languages/Java|Java]] are statically typed. Every valid C or Java program will always know what type an expression, variable, function has before execution.\n\n### Dynamic Typing\nA *dynamically typed language* is one where the type system's rules are checked during the execution of the program rather than at compile-time. In other words, nothing has a type until you run the program, and only then do the types get assigned to expressions, variables, functions, etc.\n- [[Knowledge/Engineering/Languages/Python|Python]] is a dynamically typed language. You could code up some very obvious type errors like `x = 1 + \"hi\"` but the program will run fine until it actually executes that line.\n- There is an important trade-off to recognise between static typing and dynamic typing: you would get fewer run-time errors with static typing, however dynamic typing affords you far more flexibility, which generally helps you implement things faster (at least in the short-term).\n\n### Strong Typing\nThere's a lack of a formal definition for this, but a *strongly typed* language is basically one where it is *not possible* for the developer to bypass the type system's rules. In other words, a value's type never changes in unexpected ways, such as through *implicit casts*.\n- [[Knowledge/Engineering/Languages/Python|Python]] is a strongly typed language. It's not possible to implicitly typecast values.\n- **Note**: a language can be both strongly and dynamically typed.\n\t```python\n\tx = 42\n\tx = \"Hello\"\n\t```\n\n### Weak Typing\nJust like *strong typing*, there is a lack of a formal definition, but in general: weakly typed programming languages are ones that have a more relaxed enforcement of its type system's rules, meaning that it's possible to violate/bypass them.\n- [[Knowledge/Engineering/Languages/C|C]] is a classic weakly typed language. Pointers and integers are pretty much fully interchangeable, and you can freely convert a pointer of any type to a pointer of any other type.\n\t\u003e \"C is not a strongly-typed language, but as it has evolved, its type checking has been strengthened. \" - Dennis Ritchie.\n- [[Knowledge/Engineering/Languages/JavaScript|JavaScript]] is also a weakly typed language. It's notorious for silently producing (sometimes hilariously) unintuitive results.\n\t```javascript\n\t\"11\" + 1 === \"111\"\n\t\"11\" ‚Äî 1 === 10\n\n\t('b' + 'a' + + 'a' + 'a').toLowerCase() === \"banana\"   // See an explanation: https://stackoverflow.com/questions/57456188/why-is-the-result-of-ba-a-a-tolowercase-banana\n\t```\n \nSometimes, we talk about the relative *weakness* of the type system between different programming languages. Eg. C++ is not strongly typed, however it is consider 'stronger' than C.\n\n**Note**: people often confuse *weak* typing to mean *dynamic* typing, and *strong* typing with *static* typing. They're completely separate. For example, C is both weakly typed and statically typed, while Python is both strongly typed and dynamically typed.\n","lastmodified":"2022-10-14T06:51:53.998884659Z","tags":null},"/Knowledge/Engineering/SRE/Monitoring":{"title":"Monitoring","content":"\nTODO\n\nTODO: observability vs. APM vs. monitoring\n","lastmodified":"2022-10-14T06:51:54.002884949Z","tags":null},"/Knowledge/Engineering/Technologies/Cypress":{"title":"Cypress","content":"\n![[Knowledge/Engineering/Technologies/assets/cypress-wallpaper.png|500]]\n\nCypress is an [[Knowledge/Engineering/Testing/End To End Testing|end-to-end testing]] library for testing the entirety of a web app, including its frontend and backend, in a way that closely simulates how real users would use the app. It also has an API for writing [[Knowledge/Engineering/Testing/Integration Testing|integration tests]] and [[Knowledge/Engineering/Testing/Unit Testing|unit tests]]. \n\nCypress tests aim to simulate the user experience as closely as possible. This means that tests you write will usually start up a real browser process, navigate to the URL of your web app, then execute a series of user interactions (eg. clicking on links, buttons, sending keystrokes, etc.) and let you make assertions on how the document should respond and what its contents should have.\n\nThe purpose of end-to-end testing this way is to give you confidence that the user can perform critical actions without error. For example, you might have a test that verifies your web app's authentication system, the purchase of an item, the sending of a message, etc. Unit tests with [[Knowledge/Engineering/Technologies/Jest]], for example, wouldn't be sufficient for that purpose.\n\n### Writing Tests\nIn general, the [[Knowledge/Engineering/Testing/Arrange, Act, Assert|arrange, act, assert]] pattern for writing unit tests is also a useful way to structure e2e Cypress tests.\n\n#### Example\nA simple test suite I wrote for my portfolio website.\n```typescript\ndescribe(\"Portfolio page tests\", () =\u003e {\n    beforeEach(() =\u003e {\n        // A wait exists just to allow for page-load animations to complete.\n        cy.visit(\"/\").wait(1000);\n    });\n\n    it(\"should render the about page after the 'about' link is clicked\", () =\u003e {\n        // Click 'About' from the homepage.\n        cy.contains(\"About\").click().wait(1000);\n\n        // The window should show and the URL should change.\n        cy.url().should(\"include\", \"/about\");\n        cy.contains(\"Who am I?\");\n    });\n\n    // ...\n});\n```\n**Note**: `describe` and `it` are sourced from [Mocha](https://mochajs.org/) and `expect` is sourced from [Chai](https://www.chaijs.com/), two core dependencies of Cypress. Also, Mocha provides `context` which is just an alias for `describe`.\n\n### API\nSee [Cypress API Documentation](https://docs.cypress.io/api/table-of-contents). You'll be frequently chaining many methods together in a single statement.\n- Methods like `cy.get` return a DOM element that can be further chained with methods like `type`, `click`, `contains`, etc.\n- Some methods like `cy.clearCookies` do not yield anything that you can chain further methods on.\n\n**Top-Level Methods**\n```typescript\ncy.visit(url)\ncy.get(cssSelector)    // This works just like jQuery's `$()` selector. In fact, jQuery is one of Cypress' dependencies.\ncy.url()               // Gets the current URL as a string.\ncy.wait(milliseconds)\n\ncy.wrap(subject)       // Yields the given subject. Useful for resolving promises or repeating tests using the same\n                       // array containing test data.\n```\n**Note**: all of these `cy.*` statements execute asynchronously.\n\n**Chained Methods**:\n```typescript\n.then((elem) =\u003e ...)        // You can access the 'subject' inside `then`. You'd chain this with `cy.get`, for example.\n.should(chainer: string)    // Make an assertion. \n.and(chainer: string)       // An alias for `should`.\n\n// Input methods:\n.type(text: string)\n.submit()\n.click()\n```\nThe `chainer` argument is a stringified *chainer* from [Chai](https://docs.cypress.io/guides/references/assertions#Chai), [Chai-jQuery](https://docs.cypress.io/guides/references/assertions#Chai-jQuery), [Sinon-Chai](https://docs.cypress.io/guides/references/assertions#Sinon-Chai), which are dependencies of Cypress.\n\n### Aliases\nYou must always chain commands off of an invocation on `cy.*` otherwise commands won't be properly enqueued. Eg. if you're doing `const elem = cy.get(...); elem.then(...)`, then you need to use an alias instead, as shown below.\n```typescript\ncy.get('.blog').as('blog');  // Create the 'blog' alias.\ncy.get('@blog');             // Retrieve the subject that 'blog' is assigned to.\n```\n\n### Fixtures\nIn Cypress, *fixtures* are a collection of static test data that can be used by tests. They're located at `cypress/fixtures` and are typically .json files, but can also be .js, image files, etc. The common usage of fixtures is in [[Knowledge/Engineering/Technologies/Cypress#Mocking Network Requests|stubbing network requests]].\n\n```typescript\n// Loads `cypress/fixtures/blogs.json` and uses it as the response\n// when an API endpoint is hit.\ncy.fixtures('blogs').as('blogsJson').then((blogs) =\u003e {\n\tcy.intercept('GET', '/blogs', blogs);\n})\n```\n\n### Reusuable Custom Commands\nCypress gives you many useful [[Knowledge/Engineering/Technologies/Cypress#API|commands]], however you might need some custom reusable helper functions to help with stubbing network requests, for example. You define custom helpers in `cypress/support/commands.ts` by doing the following:\n```typescript\nCypress.Commands.add(\"helperName\", () =\u003e {\n\t// ...\n});\n```\nThis makes your helpers available under the `cy` object, eg. from the above example, we'd be able to access `cy.helperName()` from any test.\n\n### Mocking Network Requests\nOften, you'll want to test the frontend independently of the backend, that is, you might not actually want your frontend to make requests to your backend server. You can do this by stubbing API requests with responses using [`cy.intercept`](https://docs.cypress.io/api/commands/intercept).\n```typescript\ncy.intercept('GET', '/blogs', [{ ... }, { ... }])\n```\n\n#### Tradeoffs\nWhen you stub network requests, you're no longer writer 'true' end-to-end tests. Your tests are more isolated and generally less flaky since it has fewer points of failure, however you are straying away from testing the real user experience.\n\nIf you write true end-to-end tests, then:\n- If you have a database, you'd have to seed it to generate state.\n- Tests are possibly much slower since they'll actually go through the full backend request-handling logic.\n- It'll be hard to test for edge cases like network failure.\n\nIt's recommended to maintain a balance of both stubbed tests and true end-to-end tests (especially for the *critical user actions* in your application like authentication).\n\n### Seeding the Database\n\n### Cypress CLI\nThe Cypress package ships with a powerful CLI. [Official reference](https://docs.cypress.io/guides/guides/command-line).\n\nSome basic commands to know and consider adding to the NPM scripts inside `package.json`:\n```bash\ncypress open                                       # Opens Cypress' Electron binary.\ncypress run --headed --no-exit --browser chrome    # Opens a Chrome browser to run Cypress tests.\ncypress run --browser chrome                       # Runs Cypress tests in a headless Chrome process.\n```\n\n### Cypress CI\nI used the GitHub Actions workflow YAML file [provided by the official docs](https://docs.cypress.io/guides/continuous-integration/github-actions) to run Cypress in a CI pipeline.\n","lastmodified":"2022-10-14T06:51:54.002884949Z","tags":null},"/Knowledge/Engineering/Technologies/D3":{"title":"D3","content":"\n\n## D3 Force\n[d3-force](https://github.com/d3/d3-force) is an official D3 module.\n\nIt runs a physics simulation where it moves each particle every tick until it reaches its equilibrium state.\n","lastmodified":"2022-10-14T06:51:54.002884949Z","tags":null},"/Knowledge/Engineering/Technologies/Docker":{"title":"Docker","content":"\n![[Knowledge/Engineering/Technologies/assets/docker-wallpaper.png|800]]\n\nDocker is a [[Knowledge/Engineering/DevOps/Containers|containerisation]] tool, or *container runtime*, that packages up an app's source code and dependencies into portable containers that can be run in many different environments. Since a Docker container packages *all* the app's dependencies, just distributing the **Docker image** for that container is sufficient for anyone to run the app anywhere without needing to install anything else. You define everything an app needs inside a manifest file, called a *Dockerfile*. There are alternative container runtimes like [Rocket](https://www.redhat.com/en/topics/containers/what-is-rkt) or [LXD](https://linuxcontainers.org/lxd/).\n\nWhen you *Dockerise* an app, you get portability. That's the main reason people use it. This means you can have a lot of confidence that the app will work on anything that has a *Docker daemon* running on it, whether it's your laptop, your co-worker's laptop, a VM in a data center, a computer in your office, and so on (with some caveats like not being able to run Windows containers on Linux hosts). Docker is especially great for deploying [[Knowledge/Engineering/Architecture/Microservice|microservices-based]] applications.\n\n**Terms:**\n- ***Image*** ‚Äî a read-only ***file*** containing the source code, libs, dependencies and tools for an application. Images are sometimes called *snapshots* because they capture an application and their environment at some point in development. Images are templates for creating *containers*\n- ***Containers*** ‚Äî a running instance of an image that is a runtime environment for an application. You can think of creating a container as just adding a writable layer on top of an image (which is read-only).\n    - Containers just *processes*, they have a PID, a parent process, can be killed, etc.\n    - A virtual machine virtualises the hardware to run multiple OS instances. A container virtualises an OS to run multiple workloads and multiple containers can share the same OS kernel, making them lightweight\n    - Containers are isolated environments meaning that they have their own filesystem, network, CPU and memory limits, etc.\n    - You can think of a Docker image as a class and a Docker container as an instance of that class\n- ***Dockerfile*** ‚Äî a file that contains step-by-step instructions for building an image that gets sent to the *Docker engine*. Dockerfiles document the exact environment as a snapshot. The dockerfile is the starting point ‚Äî a dockerfile's commands are executed, creating an image, then a container is built from that image.\n\t![[Knowledge/Engineering/Technologies/assets/dockerfile-to-docker-image.png|340]]\n- ***Tags*** ‚Äî mutable named references to images. They should generally be human-readable\n    - Eg. the Debian image has a tag called 'buster', a name for Debian 10. You would pull this specific image with `docker pull debian:buster`\n- ***Container orchestration*** ‚Äî the automated running of multiple containers across multiple machines, including their deployment, scaling, load balancing, etc.\n    - You can always run multiple containers manually, but tools like [[Knowledge/Engineering/Technologies/Kubernetes|Kubernetes]] can automate a lot of it for you.\n\n**Setting Up Docker**\nJust install Docker on your system, then enable and start the service. On Arch Linux the setup looks like this:\n```bash\nsudo pacman -S docker\nsudo systemctl enable docker\nsudo systemctl start docker\ndocker info   # Confirms whether the Docker daemon is running.\n\n# If you get a 'permission denied' error as a non-root user, then you need to add\n# $USER to the `docker` group.\nsudo groupadd docker\nsudo usermod -aG docker $USER   # Add the current user to the docker group.\nnewgrp docker                   # Log in to the docker group.\ndocker info                     \n# Might need to reboot if the above steps are insufficient.\n```\n\n## Docker Architecture\nDocker follows a client-server architecture where you have a Docker client that sends requests to a Docker daemon using a REST API. Both the client and daemon may run on the same host or on different machines and communicate over the network.\n- **Docker daemon**\nA background process listening for API requests. It manages images, containers, and more\n- **Docker client**\nIssues commands to the Docker daemon. This can be through the [[Knowledge/Engineering/Technologies/Docker#Docker CLI|CLI]], through Docker Desktop, [[Knowledge/Engineering/Technologies/Docker Compose|Docker Compose]], etc.\n- **Docker registries**\nDocker registries store *images*. [[Knowledge/Engineering/Technologies/Docker#DockerHub|Docker Hub]] is the default public registry that images can be pushed to and pulled from (but there exists other registries like GitHub Container Registry and Amazon ECR which has great integrations with ECS for deploying containers)\n\n![[Knowledge/Engineering/Technologies/assets/docker-architecture.png|700]]\n\n## Using the Docker CLI\nThe `docker` CLI needs to talk to the Docker daemon, so make sure that is running on the system first. Usually, the workflow goes like this:\n1. [[Knowledge/Engineering/Technologies/Docker#Dockerfile|Write a Dockerfile]] for the app first.\n2. Make an *image* from the Dockerfile using `docker build`. All images that have been built or pulled exist as files somewhere under `/var/lib/docker/` on Linux. They take up quite a lot of space ‚òπÔ∏è (hundreds of MBs or a few GBs).\n   - If you're aiming to push the built image to DockerHub, for example, then you should tag the image with a name like `\u003cusername\u003e/\u003cimage_name\u003e` using `docker build -t \u003cusername\u003e/\u003cimage_name\u003e`.\n   - When you make a new image, the previous image will become a dangling image, ie. one that is not referenced. These will stick around in your filesystem and suck up space unless you [remove them](https://stackoverflow.com/questions/32723111/how-to-remove-old-and-unused-docker-images).\n3. Run the image to spawn a *container* process on the system using `docker run`.\n4. If manually managing the container, then use `docker ps` to see all the containers that are currently running and use `docker stop`, `docker start`, `docker rm`, etc. to manage them.\n```bash\n# ‚ï†‚ïê‚ïê‚ïê‚ïê Fundamental Commands ‚ïê‚ïê‚ïê‚ïê‚ï£\n# Note: having a .dockerignore file will let you exclude large and unnecessary files from being sent to the daemon\n\ndocker build \u003cpath\u003e           # Creating images, where \u003cpath\u003e tells Docker where to find the Dockerfile to use.\n    -t \u003ctag\u003e                  # Assign a human-readable name (tag) to the image we're going to create\n    -f \u003cfile\u003e                 # Path of the Dockerfile. Without this flag, docker build will use look for a file named exactly Dockerfile in the cwd\n\ndocker run \u003cimage\u003e            # Running a command in a new container. MAKE SURE THE IMAGE NAME COMES LAST IF YOU USE ARGUMENTS!\n    -d                        # Run in detached mode, as a background process\n    -p 8080:80                # Exposes a container port by mapping the host's port 8080 to the container's 80, for instance. \n                              # -p 8080:80 says \"forward any traffic coming to my port 8080 to the container's port 80\"\n    --name \u003ccontainerId\u003e      # Giving an ID to the container. Useful when looking at `docker ps` output. If no name is specified, a random one will be generated\n    -v \u003cvolName\u003e:\u003cpath\u003e       # Use the given volume \u003cvolName\u003e and mount it to \u003cpath\u003e\n    -w \u003cpath\u003e                 # Sets the working directory (which is necessary if you're going to run commands that depend on being on a certain path)\n    --network \u003cnetworkName\u003e\n    --networkalias=\u003cname\u003e\t\n    -e key=val                # Set an environment variable\n    --env-file \u003cfile\u003e         # Use a .env file for setting environment variables\n\ndocker stop \u003ccontainerId\u003e   # Stopping a running container. It'll no longer appear in `docker ps`\ndocker start \u003ccontainerId\u003e  # Starting a stopped container\ndocker rm \u003ccontainerId\u003e     # Removing a container\n                            # Note: to get rid of a container, it must first be stopped with `docker stop \u003ccontainerId\u003e` and then removed with `docker rm \u003ccontainerId\u003e`\n                            #       Container IDs can be found in `docker ps` output\ndocker tag \u003csrc\u003e \u003cdest\u003e     # Create an alias to another image (like a symbolic link). This is useful for `docker push \u003cimage\u003e`\n\ndocker images                  # `ls` for images\n    -a                         # Shows intermediary images for each intermediary layer in the build.\n    --filter \"dangling=true\"   # Shows all images that aren't referenced by any other image.\n    \ndocker ps                      # `ps` for container processes\n    -a                         # Shows all running and stopped containers\n    \ndocker logs                    # Shows container's output log\n    -f                         # 'follow' the output rather than just printing the output once\n\ndocker exec \u003ccontainerId\u003e \u003ccommand\u003e     # Runs a command in the given container\n```\n\n### DockerHub\nMany container runtime systems have a big public repo of container images, called a registry. In Docker's case, we have [DockerHub](https://hub.docker.com/). There you'll find images for containers that run, for example, [PostgreSQL](https://hub.docker.com/_/postgres/), [NGINX](https://hub.docker.com/_/nginx), [Node.js](https://hub.docker.com/_/node), [Ubuntu](https://hub.docker.com/_/ubuntu/), etc.\n\nTo push/pull images to a repo under your DockerHub account, use the commands:\n```bash\ndocker push \u003cimage\u003e   # Pushes an image to Docker Hub (you must have logged in earlier with `docker login -u \u003cusername\u003e`\ndocker pull \u003cimage\u003e   # Downloads an image from Docker Hub (which is the default registry)\n```\n\n### Frequent Operations\nSome command snippets for things I want to do frequently in my workflow.\n```bash\n# ‚ï†‚ïê‚ïê‚ïê‚ïê Frequent Operations ‚ïê‚ïê‚ïê‚ïê‚ï£\ndocker exec -it \u003ccontainerId\u003e bash      # Starts up a Bash shell in your container. Use `sh` if Bash isn't available.\n\ndocker kill $(docker ps -q)             # Stopping all containers.\ndocker rm $(docker ps -a -q)            # Removing all containers.\ndocker rmi $(docker images -q)          # Removing all images.\ndocker rmi -f $(docker images -f \"dangling=true\" -q)   # Remove all dangling images (images that aren't referenced by any other).\n```\n\n## Dockerfile\nA Dockerfile is a file that contains a list of sequential commands that can be executed (with `docker build`) along with the ***build context*** to create new Docker images. There are lots of [best practices](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) for building images efficiently. Building good images and orchestrating them are complex topics by themselves and require effort and experience.\n\n### Docker Layers\nDocker images consist of read-only *layers*, each of which corresponds to `RUN`, `COPY` and `ADD` Dockerfile instruction. Each layer stores the set of changes to the filesystem and metadata from the previous layer. Layers exist to be cached and therefore optimise build times. At each instruction in a Dockerfile, the daemon will check its build cache to see if it can skip the current instruction.\n- *An image is basically a diff*. It just stores what changes from the image it is based on. Every image always has a base image that it derives from.\n\t- An image *is* a layer. You could use them interchangeably, mostly.\n\t- Each layer is a complete image in itself. When you see output like `Step 1/4 : ___` while building an image, each of the steps correspond to the building of an *intermediary image*. Every intermediary image has an ID associated with it that you can spawn containers from.\n    ```bash\n    Step 4/7 : ENV PORT=5678\n     ---\u003e Running in 967bbecf48fa   # The ID of the container that this intermediary image is being built in (I think).\n    Removing intermediate container 967bbecf48fa\n     ---\u003e f8d66c96b15a              # This is the ID of the intermediary image\n    ```\n    See all intermediary images with `docker images -a` .\n\t- Image layers exist to reuse work and save space.\n- You can reduce several layers into one with the squash flag `--squash` in [`docker build`](https://docs.docker.com/engine/reference/commandline/build/).\n- When you run an image to spawn a container (with `docker run`), you are adding a *read-writable layer on top of all the underlying read-only layers*, called the *container layer*. All changes such as newly created files are written to this writable container layer.\n\t![[Knowledge/Engineering/Technologies/assets/docker-layers.png|400]]\n### [Dockerfile Commands](https://docs.docker.com/engine/reference/builder/)\nGenerally, writing a simple Dockerfile goes like this:\n1. Choose a base image to start with (eg. [Node](https://hub.docker.com/_/node), [Alpine](https://hub.docker.com/_/alpine)) and specify it with `FROM`. You must specify a base image. There's no one 'correct' choice, you're free to experiment with different images (eg. using Debian instead of Alpine).\n    - Ideally, the base image should be well-maintained, slim, and up to date.\n1. Determine the (ideally) minimal set of steps necessary to get your app running after bootstrapping from the base image, then map each of those steps to a Dockerfile instruction. This is kind of a try-and-fail process.\n\n#### From\nDockerfiles must begin with a `FROM` instruction. It specifies what base image to start building on top of. You can also specify a tag, otherwise it defaults to the tag with the name: 'latest'.\n```dockerfile\nFROM \u003cbaseImage\u003e[:tag]\n\n# In multi-stage builds, you can use AS to give a name to a build and then be able to have one stage \n# reference another.\nFROM \u003cbaseImage\u003e AS \u003cstageName\u003e\t\n```\n#### Workdir\nSets what the current working directory is within the container's filesystem. Creates the folder if it doesn't exist. You might want to use this before subsequent `RUN`, `CMD`, `ENTRYPOINT`, `COPY`/`ADD` instructions.\n```dockerfile\nWORKDIR \u003cpath\u003e\n```\nAs recommended by the [official docs](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#workdir), prefer `WORKDIR` over `RUN mkdir -p ...`.\n\n#### Run\nRuns a shell command. It uses `/bin/sh` as the default shell in Linux. \n```dockerfile\nRUN [\"command\", \"arg1\", \"arg2\", ...]\n\n# Or:\nRUN command arg1 arg2 ...\n```\n\n#### Cmd\nLike `RUN`, but it runs a default shell command to start up the application. Unlike `RUN`, it DOES NOT execute anything when the image is being built!\n- There can only exist 1 `CMD` in a Dockerfile. If multiple exist, only the last one is used.\n- The `CMD` can be overwritten by `docker run` if is specifies a command. If you want to guarantee a startup command is always run, then use `ENTRYPOINT`.\n```dockerfile\nCMD [\"command\", \"arg1\", \"arg2\", ...]\nCMD command arg1 arg2 ...\n```\n\n#### Copy\nCopies local files (`\u003csrc\u003e`) to the container filesystem (`\u003cdest\u003e`). It's recommended to use `COPY` instead of `ADD`. \n- `\u003cdest\u003e` is either absolute or relative to `WORKDIR`.\n- Dockerfile supports file globbing like in bash.\n- If `\u003csrc\u003e` is a URL, then the file at that URL will be download to the container's `\u003cdest\u003e`.\n```dockerfile\nCOPY \u003csrc\u003e \u003cdest\u003e\n\n# For multi-stage builds, you use **--from** to source files from a previous stage in the build\nCOPY --from=\u003cstageName\u003e \u003csrc\u003e \u003cdest\u003e\n```\n\n#### Add\nAlmost identical to `COPY`, but the main difference is that it supports URL sources and other things, making it a bit more unpredictable.\n```dockerfile\nADD \u003csrc\u003e \u003cdest\u003e\n```\n\n#### Env\nSet an environment variable in the container. You can reference this variable in subsequent Dockerfile instructions.\n```dockerfile\nENV key=\"value\"\n```\n\n#### Entrypoint\nLike `CMD`, but the command is always run, whereas `CMD`'s command doesn't get run if the user supplies their own command. `ENTRYPOINT ` is preferred over `CMD ` when you need a command to always be executed instead of just being the default.\n```dockerfile\nENTRYPOINT [\"command\", \"arg1\", \"arg2\", ...]\n\n# Or:\nENTRYPOINT command arg1 arg2 ...   \n```\n\n#### Volume\n(Not completely sure) Creates a new empty directory at `/var/lib/docker/volumes` on the host machine (assuming you're using Linux). The `\u003cpath\u003e` is the container filesystem path whose contents should be linked to the volume directory created on host.\n```dockerfile\nVOLUME \u003cpath\u003e\n```\n\n#### Label\nAdds a key-value pair custom metadata field to the image that are viewable with `docker inspect`. Third party tools around Docker may make use of Labels in your Dockerfiles to organise/manage them.\n```dockerfile\nLABEL maintainer=\"admin@timz.dev\"\n```\n\n#### Expose\nDefines which port to listen on at runtime. Uses TCP by default.\n```dockerfile\nEXPOSE \u003cport\u003e\n```\n\n#### **Example Dockerfile**\nThis is an example Dockerfile for a simple Express server, to be used in a development environment. Sourced from [official Docker YouTube](https://www.youtube.com/watch?v=iqqDU2crIEQ\u0026ab_channel=Docker).\n```dockerfile\n# You usually start from a base image with `FROM`\n# This is using `node` as a base image with the tag, 12.16.3, which is the target version.\nFROM node:12.16.3\n\n# Creating a directory. All subsequent commands will use this as the working directory\nWORKDIR /code\n\n# Setting up an environment variable \nENV PORT 80\n\nCOPY package.json /code/package.json\n\n# Installs all dependencies in package.json\nRUN npm install\n\nCOPY . /code\n\n# The default command to be run when the container is started.\n# This would run `node src/server.js`\nCMD [ \"node\", \"src/server.js\" ]\n```\n\n### Parser Directives\nParser directives are special comments with the form `# directive=val`\n```dockerfile\n# This defines the location of the Dockerfile syntax that should be used to build the image\n# Note: this has no effect unless you are using the [BuildKit](https://docs.docker.com/develop/develop-images/build_enhancements/) backend\n# syntax=docker/dockerfile:1\n\n# Tells Docker what characters should be used to escape characters. It defaults to be \\\n# escape=`\n```\n\n### Variables\nEnvironment variables defined with `ENV` can be used in other commands. It's similar to how `bash` variables work\n```dockerfile\nFROM ___\nENV MY_DIR=/home/tim/Projects\nWORKDIR ${MY_DIR}\nADD . $MY_DIR\n```\n\n### Dockerfile Optimisation \u0026 Best Practices\nThe goal is to produce lightweight images.\n- Add unnecessary files to `.dockerignore`. This prevents sending unnecessary data to the Docker daemon when you run `docker build`. A good thing to ignore is the `node_modules` directory.\n- Pick a lightweight base image. Eg. prefer choosing smaller Linux distributions like Alpine over Ubuntu.\n    \u003e Note: the [Alpine Linux](https://alpinelinux.org/about/) distribution is a popular choice for deploying production containers since it's designed for security, resource efficiency and is a lot smaller than other Linux distributions (eg. Ubuntu 16.04 is around 100MB while Alpine's image is around 4MB because it only ships with the most essential production tools). Use this to minimise your image sizes. There are also [good reasons *not* to use Alpine](https://pythonspeed.com/articles/alpine-docker-python/), especially for Python apps where you might end up with slower builds, larger images, and a brittle environment!\n- Merge multiple Dockerfile commands into one. Remember that individual Dockerfile commands correspond to an [[Knowledge/Engineering/Technologies/Docker#Docker Layers|intermediary image]] that is built and cached.\n    ```dockerfile\n    # Have the following single command:\n    RUN apk update \u0026\u0026 apk add curl\n    \n    # Instead of multiple commands:\n    RUN apk update\n    RUN apk add curl\n    ```\n- Start the Dockerfile with steps that are least likely to change in the future. This is because changes to the intermediary images built earlier will invalidate later images. \n    ```dockerfile\n    # Do this:\n    RUN [\"yarn\", \"install\"]\n    RUN apk add vim         \n    \n    # Rather than\n    RUN apk add vim\n    RUN [\"yarn\", \"install\"]\n    ```\n\n## .dockerignore\nWhen you run `docker build`, the Docker CLI also sends the *build context*, which is the set of files located at the specified path or Git repo URL, over to the Docker daemon. Before that, the CLI checks if a `.dockerignore` is present and ensures that any files declared in there will not be sent to the Docker daemon. It's purpose is similar to `.gitignore`\n\n- `COPY` or `ADD` will also ignore the files in `.dockerignore`\n- The syntax is very similar to `.gitignore`. File globbing is also supported\n\nA typical `.dockerignore` for a React project might looks like this, for example:\n\n```docker\nnode_modules\nDockerfile\n.git\n.gitignore\n.dockerignore\n.env*\n```\n\nAfter adding this, you'll notice that `docker build` is *way faster* because node_modules isn't being sent to the Docker daemon.\n\n## Volumes (Shared Filesystems)\n*A problem*: containers can do file manipulation, however any created or updated files are lost when that container process is killed. When a containerised backend server writes to a database, for example, then all the objects in that database are gone after the container process terminates.\n\nWith [volumes](https://docs.docker.com/storage/volumes/), you can connect paths of a container's filesystem to paths of the host machine so that files created or updated in that path are also shared with the host. This lets containers persist their filesystem changes. \n\n### Named Volumes\nDocker lets you manage *named volumes*. It hides away the physical location of where the volume is stored so you, as the programmer, just need to work with the name of the volume.\n```bash\ndocker volume create \u003cvolumeName\u003e     # Creates a new named volume\ndocker volume inspect \u003cvolumeName\u003e    # Shows info about the volume such as where its mount point (actual path) is\n```\n\n### Bind Mounts\nUnlike *named volumes*, bind mounts let you control exactly where the *mount point* (the *path* to the directory of the shared files) is between the host and container.\nIt can be used where named volumes are used, but being able to set where the mount point is lets us mount our host's source code into the container to set up *hot reloading*\n- In [this example](https://docs.docker.com/get-started/06_bind_mounts/) which uses [nodemon](https://www.npmjs.com/package/nodemon) to watch for code changes, you *bind mount* the directory that you are currently developing in and the container's working directory so that edits made to the code from the host's side also affect the code being run in the container's side.\n\t\n\tBy bind mounting your project's directory and the directory where the container is running your app, you are basically syncing the files you're editing and the files that are in 'production' on the container.\n\t\n\tBind mounting is done by passing in a few extra options to your usual `docker run` command:\n\t```bash\n\tdocker run -dp 3000:3000 \\\n\t\t -w /app **-v \"$(pwd):/app\"** \\               # Setting the container's cwd to /app and then bind mounting the host side's (your side's) dev directory to the container side's\n\t\t node:12-alpine \\\n\t\t sh -c \"yarn install \u0026\u0026 yarn run dev\"     # Running a command to kick off the **nodemon** (which is what `yarn run dev` does) after the container starts up\n\t```\n- Differences between *bind mounts* and *named volumes*:\n\t![[Knowledge/Engineering/Technologies/assets/bind-mounts-vs-named-volumes.png|400]]\n\n## Multiple Containers\n### Why Use Multiple Containers?\nAlthough it's possible to run multiple processes in a single container, in general each container should focus on one thing. If you have a container that runs both a backend server *and* a database server like MySQL, then it's generally considered better practice to run both in separate containers because:\n- API servers, database servers and other components scale differently. Keeping them in separate containers lets you scale each component independently of each other. Eg. you might have a low-traffic but data-intensive app which might mean needing twice as many database containers than backend server containers.\n- You can rollout a new version to your web server without affecting the database.\n- For production, it doesn't make sense to ship the database server with the app.\n- Each container is less complex.\n\n### Container Networking\nContainers are isolated processes that have no awareness of other containers running on the same machine. How are they able to talk to each other?\n- Containers are able to communicate iff they are connected to the same network.\n- Containers can be connected to non-Docker workloads.\n- Under the hood, [Docker manipulates `iptables`](https://docs.docker.com/network/iptables/) rules on Linux to create network isolation.\n```bash\ndocker network create \u003cnetworkName\u003e       # Creates a new isolated network.\ndocker network ls                         # List all networks being managed by Docker\ndocker run\n\t--network \u003cnetworkName\u003e    # Connects a container to the isolated network\n\t--network-alias \u003cname\u003e     # Gives the container a name that can be used by other containers on the same network to communicate with\n                               # The alias to IP mapping is managed by Docker, so you only ever have to work with aliases\n```\n\n## Multi-Stage Builds\nDockerfiles can actually have multiple `FROM` statements. Every `FROM` statement marks the beginning of a new *build stage*. This just means you can create images which derive from multiple bases.\n- Stages are built in the order they appear in the Dockerfile.\n- You can copy some output of one layer to the next, across stages. All unneeded *artifacts* produced from an earlier stage won't be saved in the final image.\n    - It's common to run a build in an early stage, then only copy the build results to the next stage (eg. running `npm build` in 1 stage, then transferring the build files to a directory for [[Knowledge/Engineering/Technologies/NGINX|NGINX]] to serve in the next stage).\n\n### Example\nSuppose you are trying to deploy a React project with NGINX to serve the files resulting from `npm build`.\n```dockerfile\n# ===== Stage 1 =====\n\n# Naming the stage so that it can be referenced by later stages.\nFROM node:14.18.1 AS build \nWORKDIR /app\nCOPY package.json .\nRUN yarn install\nCOPY . .\n\n# Creating the production-ready files to be served by NGINX in stage 2.\nRUN [\"yarn\", \"build\"]      \n\n# ===== Stage 2 =====\n\nFROM nginx\n\n# From Stage 1, copy the build files into the default directory that NGINX serves files from.\nCOPY --from=build /app/build /usr/share/nginx/html\n```\n\n**How was this Dockerfile made?**\nSuppose we're working on a React project. Here would be a simple Dockerfile to start with:\n```dockerfile \nFROM node:14.18.1\nWORKDIR /app\nCOPY package.json .\nRUN yarn install\nCOPY . .\nEXPOSE 3000\nCMD [\"yarn\", \"start\"]\n```\nWhen you run `yarn start`, a dev server is spun up which listens to traffic on port 3000 and serves your app. This is not a production-grade server and should not be used in deployment. \n![[Knowledge/Engineering/Technologies/assets/docker-react-container-example.png|250]]\nFor production, we'd actually want to run `yarn build` to get a bunch of optimised, production-ready files, and then get NGINX to serve them:\n![[Knowledge/Engineering/Technologies/assets/docker-react-container-for-prod-example.png|250]]\nWe can write a production Dockerfile for the React app by using a first stage that builds the files, and a second stage that spins up an NGINX server to serve those files:\n![[Knowledge/Engineering/Technologies/assets/multi-stage-docker-build-example.png|400]]\n\n## FAQ\n### You can run an operating system in a container??\nMost Docker examples you see will involve using a base container image containing a Linux distribution like the [official DockerHub image for Ubuntu](https://hub.docker.com/_/ubuntu/).\n\nDocker containers do not contain a complete OS like a virtual machine, it just has a snapshot of the filesystem of a 'donor' OS. This idea is powerful enough that you can run a Linux distribution's entire application layer inside a container, eg. the package manager (`apt`, `pacman`, etc.), spawning a shell, etc.\n\nNot every container 'has' an operating system. You won't be able to launch a shell in a container that doesn't have one.\n\n### Under the hood\nTODO.\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Docker-Compose":{"title":"Docker Compose","content":"\n![[Knowledge/Engineering/Technologies/assets/docker-compose.png|300]]\n\n[Docker Compose](https://docs.docker.com/compose/) is a CLI tool for running and coordinating the communication of multiple [[Knowledge/Engineering/Technologies/Docker|Docker]] containers. It's a *container orchestrator*, like [[Knowledge/Engineering/Technologies/Kubernetes|Kubernetes]]. You just have to supply a YAML config file with all the info needed for running each container, then with a single command they'll all get created and started. You can also tear everything down instantly.\n- `docker-compose.yml` is kept at the root of the project\n- It can create networks and attach containers to them and create volumes\n\n```bash\ndocker-compose up      # Starts up all services using `docker-compose.yml`\n    -d                 # Run in the background (detached)\n    --build            # Force-trigger a build\n    -f \u003cfile\u003e          # Path of the compose file. By default, `docker-compose.yml` is expected in the cwd\n\ndocker-compose down    # Tear down all services\n    --volumes          # Also remove volumes\n\ndocker-compose logs\n    -f                 # Follow the live output rather than just dumping it all out on the terminal once\n                       # It'll interleave the output of all the running services \n```\n\nDocker Compose supports the concatenation of multiple YAML compose files to get a 'merged' compose file where more specialised compose files will overwrite rules in the one before it.\n\nIt's common practice to have multiple compose files with slight variations. Eg. in addition to a 'shared' compose file, `docker-compose.yml`, which contains all the config common to both dev and prod, you might also have `docker-compose-dev.yml` and `docker-compose-prod.yml` defining specific setups for development and production. In development for example, you might have a bind mount set up so that you can have hot reloading in the container. But for production, you wouldn't want this\n\n### Example\nIn the [official Docker tutorial](https://docs.docker.com/get-started/08_using_compose/), we're using these 2 commands to startup our app server and database server:\n```bash\n# Backend server container startup:\ndocker run -dp 3000:3000 \\\n  -w /app -v \"$(pwd):/app\" \\\n  --network todo-app \\\n  -e MYSQL_HOST=mysql \\\n  -e MYSQL_USER=root \\\n  -e MYSQL_PASSWORD=secret \\\n  -e MYSQL_DB=todos \\\n  node:12-alpine \\\n  sh -c \"yarn install \u0026\u0026 yarn run dev\"\n\n# Database server container startup:\ndocker run -d \\\n\t--network todo-app \\\n\t--network-alias mysql \\ \n\t-v todo-mysql-data:/var/lib/mysql \\\n\t-e MYSQL_ROOT_PASSWORD=secret \\\n\t-e MYSQL_DATABASE=todos \\\n\tmysql:5.7                  \n```\n\nFrom this, we can create the following `docker-compose.yml` file:\n```yaml\n# Docker Compose version: *https://docs.docker.com/compose/compose-file/* \nversion: \"3.7\"\n\n# The list of containers we want to run\nservices:\n\tapp:    # You can pick any name for the service. This will later become the network alias. See https://docs.docker.com/engine/reference/commandline/network_connect/#create-a-network-alias-for-a-container.\n\t\timage: node:12-alpine                        # Base image\n\t\tcommand: sh -c \"yarn install \u0026\u0026 yarn dev\"    # Command to run on startup. Note that the `-c` tells `sh` to run the given string\n\t\tports:\n\t\t\t- 3000:3000\n\t\tworking_dir: /app\n\t\tvolumes:                       # Volume mapping\n\t\t\t- ./:/app\n\t\tenvironment:\n\t\t\tMYSQL_HOST: mysql          # This should be the same as the **network alias** of the database server\n\t\t\tMYSQL_USER: root \n\t\t\tMYSQL_PASSWORD: secret\n\t\t\tMYSQL_DB: todos\n\tmysql:                            \n\t\timage: mysql:5.7\n\t\tvolumes:\n\t\t\t- todo-mysql-data:/var/lib/mysql\n\t\tenvironment:\n\t\t\tMYSQL_ROOT_PASSWORD: secret\n\t\t\tMYSQL_DATABASE: todos\n\n# Named volumes *aren't automatically created* with Docker-Compose. They need to be listed:\nvolumes:\n\ttodo-mysql-data:\n```\n**Note**: Docker Compose *does not replace* your Dockerfile. See this relevant [StackOverflow post](https://stackoverflow.com/questions/44036337/how-to-convert-a-dockerfile-to-a-docker-compose-image).\n\nNow you just need to run `docker-compose up -d` and both these containers will be created, along with an isolated network and the volumes you listed:\n![[Knowledge/Engineering/Technologies/assets/docker-compose-example-output.png|400]]\n\n## Docker Compose vs. Kubernetes\nThe main difference is that Kubernetes can run and scale containers across multiple computers, but Docker Compose runs containers on a single host machine.\n\u003e If you are networking containers within the same host go for¬†**docker compose**. If you are networking containers across multiple hosts go for¬†**kubernetes**. ([source](https://stackoverflow.com/questions/47536536/whats-the-difference-between-docker-compose-and-kubernetes))\n\n![[Knowledge/Engineering/Technologies/assets/docker-compose-vs-kubernetes.png|400]]\n*(Sourced from [theserverside](https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/What-is-Kubernetes-vs-Docker-Compose-How-these-DevOps-tools-compare))*\n","lastmodified":"2022-10-14T06:51:54.002884949Z","tags":null},"/Knowledge/Engineering/Technologies/Figma":{"title":"Figma","content":"\n![[Knowledge/Engineering/Technologies/assets/figma-wallpaper.png|800]]\n\nFigma is a real-time collaborative UI design tool, extremely useful for frontend development.\n\n---\n\n![[Knowledge/Engineering/Technologies/assets/figma-ui-anatomy.png|700]]\n\n## Shortcuts\n```shell\nv   # Move tool    (same as in Photoshop)\nf   # Frame tool\np   # Pen tool\nt   # Text tool   \nh   # Hand tool\nc   # Comment tool\n\n# Panel\nalt + 1            # Switch to layers tab\nalt + 2            # Switch to assets tab\nshift + e          # Quickly toggle betweeen design and prototype tabs\n\n# Layer\nctrl + r           # Rename layer\n\n# Group\nctrl + g           # Creates a group that contains all highlighted elements\nctrl + shift + g   # Ungroup highlighted elements\n\n# Frame\nctrl + alt + g     # Creates a frame that contains all highlighted elements\nctrl + shift + g   # Unframes highlighted elements (same shortcut as ungrouping)\n\n# Component\nctrl + alt + k     # Creates a component that contains all highlighted elements\n```\n\n## Left Panel\n![[Knowledge/Engineering/Technologies/assets/figma-left-panel.png|300]]\n### **Layers**\nAll your design elements appear in the layers panel and will be nested within other elements such as *frames*. Each design element has a symbol that tells you what type of element it is:\n- ***Frames** ‚Äî* usually the top-level container for everything else\n    ![[Knowledge/Engineering/Technologies/assets/frame.svg|40]]\n- **[*Groups*](https://www.figma.com/best-practices/groups-versus-frames/)** ‚Äî  a container for multiple elements, letting them be moved and resized uniformly and organise your layers\n    ![[Knowledge/Engineering/Technologies/assets/group.svg|40]]\n- ***Components*** ‚Äî reusable design elements in your *assets*\n    ![[Knowledge/Engineering/Technologies/assets/instance.svg|40]]\n- ***Instance*** ‚Äî instantiations of components\n    ![[Knowledge/Engineering/Technologies/assets/component.svg|40]]\n- **Text**\n    ![[Knowledge/Engineering/Technologies/assets/text.svg|40]]\n- **Shape**\n    ![[Knowledge/Engineering/Technologies/assets/shape.svg|40]]\n- **Image**\n    ![[Knowledge/Engineering/Technologies/assets/image.svg|40]]\n- **GIF**\n    ![[Knowledge/Engineering/Technologies/assets/gif.svg|40]]\nYou can have multiple *[pages](https://help.figma.com/hc/en-us/articles/360038511293)* in a single Figma file. Each page has its own canvas.\n\n## Right Panel\n- **Design** ‚Äî lets you view and tweak properties of any design element. What is shown in this panel is determined by what you currently have selected\n    - If no element is selected, then you'll see some local styles and canvas properties\n        ![[Knowledge/Engineering/Technologies/assets/figma-right-panel-no-frame.png|200]]\n- **Prototype** ‚Äî lets you set up interactive user-flow logic\n- **Inspect** ‚Äî shows you a summary of properties and how the design maps to real CSS code (or Android/iOS code)\n\n## Components\nComponents are reusable design elements. You can create them from layers, groups and frames.\n- **Master component** ‚Äî or just component, defines the base properties of a component.\n- **Instance** ‚Äî a copy of the master component where you can *override* properties.\n    - Copy and pasting a master component will create an *instance* of a master component.\n    - Updating the master component's properties will cause its instances to 'sync' with that change.\n    - Useful operations:\n        - Jump to master component\n        - Reset instance ‚Äî clear all overrides\n        - Detach from master\n\n## Libraries\nLibraries are groups of [[Knowledge/Engineering/Technologies/Figma#Components|components]] that can be published or imported.\n\n## Prototyping\nLets you set up interactive logic in presentation mode. Examples of common use cases:\n- Setting up transitions between frames based on user events like clicking, hovering, etc.\n- Overflow behaviour ‚Äî lets you set up scrolling, good for demonstrating carousels for example\n\nYou can create *connections* between any element and any top-level frame.\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Firebase":{"title":"Firebase","content":"\n![[Knowledge/Engineering/Technologies/assets/firebase-wallpaper.webp|750]]\nFirebase is a [[Knowledge/Engineering/Cloud/BaaS|BaaS]] platform which gives you set of services that help you start and scale your apps. It shares the same underlying infrastructure as [[Knowledge/Engineering/Technologies/Google Cloud|Google Cloud]] and is placed on the same bill.\n\nFirebase consists of the following array of products:\n- [Firebase Auth](https://firebase.google.com/products/auth) for setting up end-to-end user authentication without writing and maintaining the backend for it yourself.\n- [Firebase DB](https://firebase.google.com/products/realtime-database), a realtime database (described as a giant JSON tree that bidirectionally communicates with clients, meaning updates can be pushed to connected clients).\n- [Cloud Firestore](https://firebase.google.com/docs/firestore), a NoSQL database.\n- [Firebase Hosting](https://firebase.google.com/docs/hosting) for deploying web apps and static content to a CDN.\n- [Cloud Storage for Firebase](https://firebase.google.com/docs/storage) for storing files/blobs.\n- [Cloud Functions for Firebase](https://firebase.google.com/docs/functions) for running backend code in response to events without having to maintain your own servers or cloud VMs. It's essentially a thin wrapper around [[Knowledge/Engineering/Technologies/Google Cloud#Cloud Functions|Google Cloud Functions]] (see [StackOverflow](https://stackoverflow.com/questions/42854865/what-is-the-difference-between-cloud-functions-and-firebase-functions)).\n- [Firebase Remote Config](https://firebase.google.com/docs/remote-config).\n... and a few more. They all have 'client-first' SDKs for JavaScript, Android, iOS, Flutter, Unity, etc. which means you can directly interact with Firebase products from your frontend without a backend.\n\nThe main concern of adopting Firebase is [vendor lock-in](https://en.wikipedia.org/wiki/Vendor_lock-in). Don't worry too much about it though.\n\n#### Web Quick Setup\n```javascript\n// 1. Create a Firebase project, then register your web app at:\n//    console.firebase.google.com.\n\n// 2. In your project, get the JavaScript Firebase SDK\nyarn add firebase\n\n// 3. In your project, initialise firebase and the services you\n//    intend to use. Grab all credentials from the Firebase console.\n\n    import { initializeApp } from \"firebase/app\";\n    import { getAuth } from \"firebase/auth\";\n    import { getDatabase } from \"firebase/database\"; \n    // ... import more Firebase product SDKs as required.\n    \n    const firebaseConfig = {\n      apiKey: \"...\",\n      authDomain: \"\u003cproject_id\u003e.firebaseapp.com\",\n      projectId: \"\u003cproject_id\u003e\",\n      databaseURL: \"https://\u003cdb_name\u003e.firebaseio.com\",\n      ...\n    };\n\n    // Initialising Firebase and the services you intend to use.\n    const app = initializeApp(firebaseConfig);\n    const db = getDatabase(app);\n    const auth = getAuth(app);\n```\n\n## Firebase Auth\nFirebase Auth provides a bunch of services for implementing user registration, sign in, and sign out for your app in just a few lines of code. It also becomes painless to set up multiple auth providers like Google, Facebook, GitHub, etc.\n\n### Snippets\nSome code snippets to demonstrate Google sign-in, sign-out and grabbing Google profile information (sourced from the [official Codelab](https://firebase.google.com/codelabs/firebase-web)):\n```javascript\nimport {                 // Firebase SDK auth functions.\n    getAuth,\n    onAuthStateChanged,\n    GoogleAuthProvider,\n    signInWithPopup,\n    signOut,\n} from 'firebase/auth';\n\n// Signing in and out.\nconst signIn = async () =\u003e {\n    var provider = new GoogleAuthProvider();\n    await signInWithPopup(getAuth(), provider);\n}\nconst signOutUser = () =\u003e signOut(getAuth())\nconst isUserSignedIn = () =\u003e !!getAuth().currentUser;\n\n// Adding an event listener to when the auth state changes (ie. when the user\n// signs in and out). This can be used to affect the UI, like the top nav.\nconst listenToAuthChange = () =\u003e onAuthStateChanged(getAuth(), (user) =\u003e {\n    if (user) alert(\"Signed in\");\n});\n\n// Retrieving things accessible in the user's Google profile like their name and display picture.\nconst getProfilePicUrl = () =\u003e getAuth().currentUser.photoURL || '/images/profile_placeholder.png';\nconst getUserName = () =\u003e getAuth().currentUser.displayName;\n```\n\n## Firebase Realtime Database\nFirebase DB is a [[Knowledge/Engineering/Databases/NoSQL|NoSQL]] *realtime* database, credited with low latencies. Being a 'realtime' database just means that any updates from one client can be pushed to subscribed clients within milliseconds. In other words, it's like a pubsub system for quickly syncing and notifying clients with small bits of data. Firebase DB is a great choice compared to 'normal' databases like Cloud Firestore or PostgreSQL if you have a simple data model, small amount of data, and expect low-latency access. For more heavyweight use cases and longer term data storage, pick Cloud Firestore instead.\n\nAll data is stored as JSON, in fact a Firebase DB instance is described as just [\"a cloud-hosted JSON tree\"](https://firebase.google.com/docs/database/web/structure-data). It looks like this, for example:\n```json\n{\n  \"users\": {\n    \"alovelace\": {\n      \"name\": \"Ada Lovelace\",\n      \"contacts\": { \"ghopper\": true },\n    },\n    \"ghopper\": { ... },\n    \"eclarke\": { ... }\n  }\n}\n```\n\nWhen users lose network connection, the changes they'd otherwise push to the database are persisted locally in a cache, and then when they reconnect, those changes are automatically merged with the database.\n\n### Usage\n[[Knowledge/Engineering/Technologies/Firebase#Web Quick Setup|Initialise the Firebase SDK]], create a Firebase database instance through the web console, then specify the `databaseURL` field in the initialisation config object.\n\n```javascript\nimport { getDatabase, push, ref, onValue } from 'firebase/database';\n\nconst addUser = async () =\u003e {\n    // Get a database handle (ie. a reference to it).\n    const db = getDatabase();   \n    const dbPath = ref(db, `users`);\n\n    // Write a new user object to `users`.\n    const reference = await push(dbPath, { name: \"Andrew\" });\n    return reference.key;\n};\n\nconst watchUsers = async () =\u003e {\n    const usersRef = ref(getDatabase(), `users`);\n\n    // Whenever the remote list of users changes, do something.\n    onValue(usersRef, (snapshot) =\u003e {\n        const currUsers = snapshot.val();\n        // ... do something with the users.\n    });\n}:\n```\n\n### Local Realtime DB Emulator\nSince you likely don't want to read/write data to a production database server while you're developing, you should use the local emulator for the realtime db, provided by Firebase. You'd also want to use this to integration or e2e tests.\n\n```bash\n# Run the init command to set up how the emulator runs, and what services should be emulated.\nfirebase init emulators\n\n# Start the local emulator suite, which includes the DB emulator.\nfirebase emulators:start\n```\n\nThen in your client-side code, connect to it if you're locally hosting your website:\n```javascript\nimport { connectDatabaseEmulator } from 'firebase/database';\n\nif (location.hostname === \"localhost\") connectDatabaseEmulator(db, \"localhost\", 9000);\n```\n\n### Security Rules \nSecurity rules let you set the conditions that have to be passed to allow read or write access to a certain node in the database. You can also set [data validation rules](https://firebase.google.com/docs/reference/security/database) that enforce simple checks such as making sure that a field is a string with a certain length. They're specified in a file called `database.rules.json` by default. Applying the rules in `database.rules.json` is done with `firebase deploy --only database`.\n\n**Example `database.rules.json`:**\n```json\n{\n  \"rules\": {\n    // Allow any read/write attempt:\n    \".read\": true,\n    \".write\": true,\n    \"users\": {\n      // '$user' is a wildcard for all keys under 'users'. The value is accessible through references to `$user`.\n      // You can give it any name you want.\n      \"$user\": {   \n        \"name\": {\n          \".validate\": \"newData.isString() \u0026\u0026 newData.val().length \u003e 0 \u0026\u0026 newData.val().length \u003c= 255\"\n        },\n      }\n    }\n  }\n}\n```\n\n## Firebase CLI\nThe Firebase CLI is for deploying and managing projects from the terminal.\n```bash\n# Setup:\nyarn global add firebase-tools\nfirebase --version\n```\n\nSome useful commands:\n```bash\nfirebase init    # Creates `firebase.json` in the current directory and proceeds with\n                 # a guided setup of your services.\nfirebase use     # View project aliases.\nfirebase serve   # Locally host the project so you can test it out before deploying to production.\nfirebase deploy  # Deploy resources to your Firebase project. Eg. use this to set configuration and security rules.\n```\n\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Flutter":{"title":"Flutter","content":"\nFlutter is a framework for building frontends that work natively on Android, iOS, Windows, macOS, Linux and web browsers, all from a single codebase. Although you can target many different platforms, it's hard to build a unified experience on all of them and the codebase will become more complex, so it's common for people to exclusively use Flutter for mobile development and then build out a web frontend separately, for example.\n\nFlutter ships with a comprehensive widget library and Google maintains many of its plugins.\n\u003cmark style=\"background: #ADCCFFA6;\"\u003e\u003c/mark\u003e \nFlutter has its own rendering engine built with C++ and [Skia](https://skia.org/) which is credited with being highly performant (substantially better rendering performance than [React Native](https://reactnative.dev/)). This means your Dart code renders custom UI elements to the screen, not native elements like React Native would.\n\n\n\n## Core\nFlutter's UI component hierarchy is similar to [[Knowledge/Engineering/Technologies/React|React's]]. In Flutter, we call UI components *widgets*. Every widget has a `build` method that declares how the widget is displayed and what it's composed of (this is similar to the `render` method in React components).\n\n**TODO**:\n- `Colors` class\n- `Icon` class\n- `BuildContext`. Every widget's `build` method takes in a BuildContext. Things like `Navigator`, `MediaQuery`, `ListView.builder` all need it.\n- `ThemeData`\n\n### Stateful Widgets\nStateless widgets are immutable.\nStateful widgets maintain state over time and is create through extending `StatefulWidget` which creates an instance of `State`.\n```dart\nclass MyWidget extends StatefulWidget {\n  const MyWidget({Key? key}) : super(key: key);\n\n  @override\n  State\u003cMyWidget\u003e createState() =\u003e _MyWidgetState();\n}\n\nclass _MyWidgetState extends State\u003cMyWidget\u003e {\n  @override\n  Widget build(BuildContext context) {\n    return ...;\n  }\n}\n```\n\n**TODO**:\n- `setState`\n\n### Routing\n\n**TODO**:\n- `Navigator` contains a stack of routes. Pushing to this stack changes the route. Popping navigates back.\n\n### Theming\n\n\n## Widgets Reference\n\n`ListView`\n`Scaffold`\n`AppBar`\n`IconButton`\n\n\n\n## Flutter Architecture\nTODO. https://www.google.com/search?q=flutter+architecture\u0026oq=flutter+architecture\u0026aqs=chrome..69i57.1890j0j9\u0026sourceid=chrome\u0026ie=UTF-8\n\n## Flutter CLI\n```bash\nflutter doctor    # Sanity checks the Flutter installation.\nflutter devices   # List all connected devices.\n\nflutter clean\nflutter run\n\nflutter pub add \u003cpackage_name\u003e\n\n```\n\n## Flare\nTODO: https://www.youtube.com/watch?v=hwBUU9CP4qI\u0026ab_channel=Fireship\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Google-Cloud":{"title":"Google Cloud","content":"\nTODO.\n\n## Cloud Functions\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/GoogleTest":{"title":"GoogleTest","content":"\nTODO.\n\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Grafana":{"title":"Grafana","content":"\n![[Knowledge/Engineering/Technologies/assets/grafana-wallpaper.png|800]]\n[Grafana](https://grafana.com/) is an open-source dashboard for data visualisation. It's commonly used in tandem with [[Knowledge/Engineering/Technologies/Prometheus|Prometheus]], using [[Knowledge/Engineering/Technologies/Prometheus#PromQL|PromQL]] to query its data.\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Jest":{"title":"Jest","content":"\n\nTODO.\n\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Kubernetes":{"title":"Kubernetes","content":"\n![[Knowledge/Engineering/Technologies/assets/kubernetes-wallpaper.png|700]]\n\nKubernetes is an open-source *container orchestrator*, ie. a system for automating the deployment and [[Knowledge/Engineering/Cloud/Scaling|scaling]] of [[Knowledge/Engineering/DevOps/Containers|containers]]. The rise in popularity of microservice architectures gave rise to the need for container orchestration tools because microservices often need to be containerised. Container orchestrators like Kubernetes are meant to solve challenges arising from scaling [[Knowledge/Engineering/DevOps/Containers|containers]]. Some other technologies similar or related to Kubernetes include [OpenShift](https://docs.openshift.com/), [Amazon ECS](https://aws.amazon.com/ecs/), [Rancher](https://rancher.com/), [Apache Mesos](http://mesos.apache.org/) and more.\n\n*Note*: Kubernetes and [[Knowledge/Engineering/Technologies/Docker|Docker]] are completely independent technologies. You can use Docker without Kubernetes. Kubernetes, however, needs a container runtime to orchestrate, which may or may not be Docker. It's just common for Docker and Kubernetes to be used together.\n\n**Some background:** 'Kubernetes' originates from Greek, meaning 'helmsman', the person who steers a ship. K8s is an abbreviation for Kubernetes. The '8' is just a count of the letters between k and s.\n\n**Kubernetes Features:**\n- Automated *rollout* and *rollback* ‚Äî updates are deployed automatically with care and when things go wrong, the system is rolled back to a stable state.\n- *Failover* ‚Äî when one container dies, another container is able to take its place, automatically.\n- *Horizontal scaling* ‚Äî when the load is high, then K8s will automate the creation of new containers to meet demand, and when the load is low, then containers are removed\n- *Load balancing* by distributing work across a set of *pods*.\n\n## K8s Cluster Architecture\n![[Knowledge/Engineering/Technologies/assets/kubernetes-architecture.png|800]]\n### Nodes, Control Planes\nKubernetes clusters consist of 2 types of resources: *nodes* and *control planes*.\n1. **Node** ‚Äî also called *worker nodes*. They're the [[Knowledge/Engineering/DevOps/Virtual Machines|VMs]] running the app's containers. Each node has a **Kubelet** running inside them.\n    - **Kubelet** ‚Äî a process running inside a node that makes it possible to talk for the node to talk to the *control plane*. They're responsible for telling the control plane about the health of the worker node.\n2. **Control plane** ‚Äî also called the *master node*. It's responsible for managing all activities in the cluster like scheduling, scaling, rolling out updates, etc. \n\n\tA bunch of critical Kubernetes processes run within the control plane, one of which is an HTTP [Kubernetes API](https://kubernetes.io/docs/concepts/overview/kubernetes-api/) server which the nodes use to communicate with the control plane. It's basically the entrypoint to the K8s cluster and Kubernetes clients talk to this server (eg. through a Kubernetes dashboard, scripts, CLIs, etc.)\n\n### Kubernetes Components\n- **Pods** ‚Äî a logical grouping of one or multiple containers with shared storage and network. They're the *smallest deployable units* of computing that you can create and manage inside¬†a worker node, which can run multiple pods within.\n\t- It's common practice to run 1 container per pod.\n\t- Each pod gets its own virtual internal IP address.\n\t- Pods are ephemeral. When they die, another takes its place.\n\t![[Knowledge/Engineering/Technologies/assets/Pasted image 20220805091942.png|400]]\n- **API server** ‚Äî the entrypoint to the K8s cluster. It serves the [Kubernetes HTTP API](https://kubernetes.io/docs/concepts/overview/kubernetes-api/)\n- **Controller Manager** ‚Äî tracks activities in cluster\n- **Scheduler** ‚Äî ensures intelligent *pod* placement based on workload and available resources\n- **etcd** ‚Äî key-value store for config and backups\n- **ConfigMap** ‚Äî contains config like database URLs that the pod can use. Makes it so that you just have to change stuff at the configmap level rather than at the application code level. It's not secure enough for confidential info though\n- **Secret** ‚Äî like ConfigMap, but for secret credentials\n- **Volumes** ‚Äî for data persistence. Think of it as an external hard drive plugged into the cluster\n\t![[Knowledge/Engineering/Technologies/assets/kubernetes-node-volume.png|300]]\n\n## Service Discovery\nTODO.\n\nEvery *pod* gets assigned an internal IP address like `192.*.*.*`.\n\nYou can group the replicas of a service and put them behind a [[Knowledge/Engineering/Architecture/Load Balancer|load balancer]], for example, to expose a single cluster IP address that all other services use to talk to it.\n\nThere's even a DNS service that maps symbolic names to those IP addresses.\n\n## Kubectl\nTODO.\n\nThis is the Kubernetes CLI.\n\nYou can\n- `kubectl exec -it \u003cpod\u003e -- /bin/bash` to launch a shell in a pod. Useful for debugging.\n\n## Under the hood\nTODO.\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/NGINX":{"title":"NGINX","content":"\n![[Knowledge/Engineering/Technologies/assets/nginx-wallpaper.png|800]]\n\nNGINX is a production-grade web server that sits between the external web and your backend infrastructure. It can be configured to be a simple web server that just serves static content, or it can be used in more sophisticated architectures as a [[Knowledge/Engineering/Architecture/Load Balancer|load balancer]], [[Knowledge/Engineering/Architecture/Reverse Proxy|reverse proxy]], HTTP cache, and other roles. An alternative to Nginx is [Apache HTTP Server](https://httpd.apache.org/).\n\n\u003e This page assumes that NGINX is installed on a Linux machine.\n\n## Directives\nNginx configuration files contain a custom language consisting of *directives*. See the [list of all directives](https://nginx.org/en/docs/dirindex.html). Directives can reference *variables*. See the [list of all variables](https://nginx.org/en/docs/varindex.html).\n\nThe primary Nginx configuration file is available at `/etc/nginx/nginx.conf`. \n\n### Example nginx.conf\nMultiple `server` blocks mean you're hosting multiple services (websites, for example). \n```nginx\nhttp {\n    # Serving content for a static website, my-web-app.com\n    # Listens on port 80 (by default).\n    server {\n        server_name my-web-app.com www.my-web-app.com\n        root /home/tim/my-web-app/build;\n        index index.html\n\n        location / {\n            try_files $uri /index.html\n        }\n    }\n\n    # Serving an API with the URL, my-api.com. Here, Nginx reverse proxies\n    # requests by sending it to the process listening at port 3000 on the\n    # same machine, then responds to the client with the response.\n    server {\n        server_name my-api.com www.my-api.com\n\n        location / {\n            proxy_pass http://localhost:3000;\n        }\n    }\n}\n```\n\n## NGINX Architecture\n\u003e Notes taken from the [official blog on Nginx's architecture](https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/).\n\nNginx follows an event-driven master-slave architecture. Running Nginx involves spawning a master process and worker processes (which you can see via `ps -ax | grep -i nginx`). Nginx also manages a set of caches which it will check before actually sending the request through to the backend infrastructure.\n\n![[Knowledge/Engineering/Technologies/assets/nginx-architecture.png|500]]\n\nThe worker processes are responsible for listening to and establishing new connections, and handling requests by talking to the upstream services in the backend infrastructure (eg. your API server). Ever worker process is single-threaded which reduces context switching on the CPU. This is an important design decision because a multi-threaded process at very high traffic would cause so much constant context switching that it seriously degrades performance. Allocating one worker process per CPU core is the most resource-efficient configuration and can be done through the directive: `worker_processes auto;`.\n\nThe worker processes implement the following state machine:\n![[Knowledge/Engineering/Technologies/assets/nginx-request-flow-state-machine.png|600]]\n\n## NGINX CLI\nNginx installations ship with a simple `nginx` CLI that lets you send signals the the nginx master and worker processes. I mainly find these commands useful:\n```bash\nnginx -t         # Checks whether NGINX configuration files are valid.\nnginx -s reload  # Restart NGINX for updates to any configuration files to take effect.\n```\n\n## LetsEncrypt\n[Let's Encrypt](https://letsencrypt.org/) is a non-profit [[Knowledge/Engineering/Cybersecurity/Certificate Authority|CA]], trusted by most major browsers, that provides digital certificates for free! It relies on donations/sponsorships. Essentially, it makes [[Knowledge/Engineering/Cybersecurity/SSL and TLS|SSL/TLS]] available to everyone for free.\n\nUsing the `certbot` CLI, you can provision or renew SSL certificates and have them automatically write in the nginx configuration for you:\n```bash\nsudo certbot --nginx -d example.com -d www.example.com\n```\n**Note**: make sure you've:\n- Have ownership over the domain `example.com`.\n- Created [[Knowledge/Engineering/Networking/DNS|DNS records]] that point `example.com` and `www.example.com` to the nginx server's host machine's IP address.\n- Have a `server` block in your nginx config files that specify `server_name example.com www.example.com` because that is what certbot uses to find the configuration file to write to.\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Next":{"title":"Next.js","content":"\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Nuxt":{"title":"Nuxt.js","content":"\n![[Knowledge/Engineering/Technologies/assets/Nuxt.js-logo.png|300]]\n\nNuxt.js is a production-ready Vue.js framework that also provides excellent developer experience. It's inspired by [[Knowledge/Engineering/Technologies/Next|Next.js]], hence the naming, and exists for a similar purpose as Next.js but does a few things differently.\n\nNotable features of Nuxt.js:\n- *Auto-importing*, where every file has access to every component, meaning you never have to import a component again.\n- Automatic [[Knowledge/Engineering/Programming/Code Splitting|code splitting]].\n- Ships with pre-configured packages like [Vuex](https://vuex.vuejs.org/), [Vue Router](https://router.vuejs.org/) and [vue-meta](https://vue-meta.nuxtjs.org/). \n- Gives you a standard folder structure with special purposes associated with each folder. For example, the `pages/` directory gives you filesystem routing where each of the `.vue` files inside are mapped into web pages, similar to what Next.js does.\n- Nuxt.js uses [Nitro](https://v3.nuxtjs.org/guide/concepts/server-engine/), a server-side program that enables you to use [[Knowledge/Engineering/Full-Stack/Static Site Generation|SSG]], use [[Knowledge/Engineering/Full-Stack/Server-Side Rendering|SSR]], build APIs, deploy to the [[Knowledge/Engineering/Cloud/CDNs|edge]], etc. You can still opt for a pure [[Knowledge/Engineering/Full-Stack/SPAs|SPA]].\n\n---\n\n## Setup\nNuxt.js has a `create-vue-app` CLI that sets up everything.\n```bash\nnpx create-nuxt-app \u003cproject_name\u003e\nyarn create nuxt-app \u003cproject_name\u003e \n```\n\n## Core Things to Know\nThis section contains a tl;dr of basic things to know to work with Nuxt.js projects.\n\n### Directory Structure\nThe basic directory structure is pretty similar to that of Next.js.\n```bash\n.\n‚îú‚îÄ‚îÄ components/       # All your UI components live here. They're always available through Nuxt.js' auto-import.\n‚îú‚îÄ‚îÄ pages/            # Filesystem routing. Every .vue file here becomes available at a client-side URL with the corresponding path.\n‚îú‚îÄ‚îÄ static/           # Publicly accessible unchanging content.\n‚îú‚îÄ‚îÄ store/            # For Vuex.\n‚îú‚îÄ‚îÄ test/             # For unit tests.\n‚îî‚îÄ‚îÄ nuxt.config.js    \n```\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/PostgreSQL":{"title":"PostgreSQL","content":"\n![[Knowledge/Engineering/Technologies/assets/postgresql-wallpaper.png|750]]\n\nPostgreSQL is an *object-relational* DBMS that is [[Knowledge/Engineering/Languages/SQL|SQL]]-compliant. Postgres being an 'object-relational' DBMS means that it supports table inheritance and function overloading, inspired by [[Knowledge/Engineering/Programming/Object Oriented Programming|OOP]]. It's an open-source successor to the proprietary [Ingres DBMS](https://en.wikipedia.org/wiki/Ingres_(database)), hence the name '*Post*gres'.\n\n## PSQL CLI\nLaunching `psql` and connecting to a local or remote database server:\n```bash\npsql -h localhost -p 5432 -U \u003cuser\u003e -d \u003cdb_name\u003e\n\n# Or you can use the probably friendlier standard database connection URI string:\npsql \"postgresql://\u003cuser\u003e:\u003cpassword\u003e@\u003chost+port\u003e/\u003cdb_name\u003e\"\n\n# For example, connecting to the 'techsuite' database at localhost:5432 with the\n# username 'tim' whose password is '1989'.\npsql \"postgresql://tim:1989@localhost:5432/techsuite\"\n```\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Prometheus":{"title":"Prometheus","content":"\n![[Knowledge/Engineering/Technologies/assets/prometheus-wallpaper.png|700]]\n\n[Prometheus](https://prometheus.io/) is an open-source real-time monitoring and alerting tool. It's a popular choice for monitoring [[Knowledge/Engineering/Technologies/Kubernetes|Kubernetes]] clusters, Linux servers, Raspberry Pis, etc. It's commonly combined with [[Knowledge/Engineering/Technologies/Grafana|Grafana]] to make a nice dashboard UI available for us to quickly understand a software system's metrics.\n\nPopular programming languages have a Prometheus client library that lets you track and expose metrics.\n\n## Usage\n### Installing Prometheus Server\n```sh\n# Download a precompiled binary from https://prometheus.io/download/.\nwget https://github.com/prometheus/prometheus/releases/download/v2.38.0/prometheus-2.38.0.linux-amd64.tar.gz\ntar -xvf prometheus-*.tar.gz\n\n# Run prometheus server.\n# View the default dashboard at localhost:9090.\ncd prometheus-*\n./prometheus\n```\nDownloading a precompiled binary is the [recommended installation method](https://github.com/prometheus/prometheus#install). Alternatively, you could build directly from source or pull the Docker image and run the Prometheus server in a container with: `docker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus`.\n\n### Installing Node Exporter\nA *node* in this context is basically just a virtual machine. The `node_exporter` binary, maintained officially by Prometheus, is something you can run on a machine whose resources such as memory, disk, CPU you want to make available for a prometheus server to scrape.\n```sh\n# Download a precompiled binary from https://prometheus.io/download/#node_exporter.\nwget https://github.com/prometheus/node_exporter/releases/download/v1.4.0-rc.0/node_exporter-1.4.0-rc.0.linux-amd64.tar.gz  \ntar -xvf node_exporter-*.tar.gz\n\n# Run node exporter (which also runs a web server that presents some output viewable at localhost:9100).\ncd node_exporter-*\n./node_exporter\n```\n\n### Configuration\nIn the directory containing the Prometheus binary, set the configuration in the file `prometheus.yml`. If running a Docker container, use a [bind mount](https://hub.docker.com/r/prom/prometheus) to make the container use your own configuration file.\n\nTo get the prometheus server to pull from the node exporter on the same machine, set:\n```yaml\nscrape_configs:\n  - job_name: \"prometheus\"\n    static_configs:\n      - targets: [\"localhost:9100\"]\n```\n\n\n- Scrape interval\n- Retention time ‚Äî the time that metric datapoints stick around before being discarded (to save space).\n\n## Architecture\n![[Knowledge/Engineering/Technologies/assets/prometheus-architecture.png|800]]\n([official source](https://github.com/prometheus/prometheus))\n\nIn the above diagram, a machine running a [[Knowledge/Engineering/Technologies/Prometheus#Installing Prometheus Server|prometheus server]] does the following:\n1. Finds the targets it's meant to pull metrics from.\n2. Pulls metrics from **exporters** and possibly other prometheus servers.\n    - Prometheus uses an HTTP pull model where a Prometheus server sends an HTTP request to a dedicated endpoint exposed by target services to pull metrics from them. This usually results in light network traffic than the alternative, which is to get targets to actively push out data to a prometheus server.\n3. Makes the metrics available for a client (such as Grafana) to consume via **[[Knowledge/Engineering/Technologies/Prometheus#PromQL|PromQL]]**.\n4. Pushes alerts to you based on thresholds/conditions you set, using **AlertManager**.\n\nA **target** is a service that exposes metrics in a format Prometheus knows how to work with. A Prometheus server pulls (also called 'scrapes') data from targets. Targets you might be interested in monitoring include:\n- Linux VM running in the cloud.\n- Kubernetes cluster.\n- Your Raspberry Pi.\n- ... and so on.\n\nAn **exporter** is what lets you map metrics collected from a system into Prometheus data. It also starts a web server exposing the path `/metrics` that can be scraped.\n- There are 100+ exporters ([official docs](https://prometheus.io/docs/instrumenting/exporters/)).\n\n### PromQL\nPrometheus has its own custom database for storing real-time metrics. **PromQL** is a language for querying metrics from that database, useful for extracting insights that can be displayed on a frontend like Grafana for developers to see.\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Pytest":{"title":"Pytest","content":"\nPytest is a very popular and simple testing framework for running unit tests, integration tests and e2e tests in [[Knowledge/Engineering/Languages/Python|Python]] projects.\n\n## Usage\nThe convention is to make a separate `tests` directory in your project root directory, then make test files with the name `test_*.py`. Inside these files, you just define functions and directly make assertions with the built-in Python `assert`. That's it (for simple tests). \n\n```python\ndef test_foo():\n    assert(do_foo() == ...)\n```\n\nRun the `pytest` CLI to execute tests:\n```sh\npytest                           # Discover and run all tests.\npytest -s                        # Show output from the tests.\npytest -vv                       # Show verbose differences between expected and actual.\n\npytest test_file.py              # Run tests in only the specified file.\npytest test_file.py::TestClass   # Run tests in only the specified class.\npytest test_file.py::test_func   # Run only the selected test.\n```\n\n### Exceptions Tests\nTo test that a function correctly raises an exception, use `with pytest.raises(ExceptionClassName)`:\n```python\nimport pytest\n\ndef test_foo_raises_bar():\n    with pytest.raises(BarException):\n        # If this doesn't raise a `BarException`, then the test is considered to have failed.\n        do_foo()   \n```\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/React":{"title":"React","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Redux":{"title":"Redux","content":"\n### Reducers\nTODO.\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Tailwind":{"title":"Tailwind","content":"\n![[Knowledge/Engineering/Technologies/assets/tailwind-wallpaper.png|700]]\n\nWith Tailwind, you style elements by applying a bunch of pre-written [utility classes](https://tailwind.build/classes), minimising the amount of [[Knowledge/Engineering/Languages/CSS|CSS]] you have to write and maintain. Tailwind doesn't give you a bunch of styled components like UI libraries such as Bootstrap or Material UI. You must be proficient with CSS ‚Äî Tailwind is like a CSS power user's tool, not a crutch.\n\n**How do you memorise all the utility classes?** You don't. You pick up on the shorthands like `m-*` and `p-*` for margin and padding respectively, `bg-*` for background, and so on, and then you let intellisense do the work.\n\n**How does Tailwind affect bundle size?** Tailwind barely affects bundle size since all the utility classes that are unused are simply [[Knowledge/Engineering/Full-Stack/Tree Shaking|tree-shaken]]. The final CSS file, after build, is usually less than 10kB.\n\n---\n\n## Utility Classes\nSome useful utility classes at a glance. See the [full reference](https://tailwind.build/classes).\n- *max-width*: `max-w-*`\n- *padding*: `p-*`, `px-*`, `py-*`, `pl-*`, `pt-*`, `pr-*`, `pb-*`\n- *margin*: `m-*`, `mx-*`, `my-*`, `ml-*`, `mt-*`, `mr-*`, `mb-*`\n- *background*: `bg-*`\n- *border*: `border-*`\n- Font styles and text color: `text-*`\n- **Flexbox**: `flex-*`, `justify-*`, `items-*`, and so on.\n- **Responsive design**:\n\t- `container`\n\t- `sm:___` where you can apply any utility class after the colon, like `bg-blue-400`. The available breakpoints are `sm, md, lg, xl`, but they're customisable\n\n### Custom Utility Classes\nYou can write your own utility classes if you're finding the same set of utility classes constantly being applied together. For example:\n```css\n.my-btn {\n\t@apply p-4 font-bold rounded;\n}\n```\n\n## Configuration\nTailwind's utility classes are very unopinionated. To apply broad styling, you can run `npx tailwind init` to get a `tailwind.config.js` file where you can define some styles that should apply to certain utility classes.\n\nFor example, the `container` utility class doesn't center itself by default. You can make that the case by having the following config:\n```node\nmodule.exports = {\n    purge: [],\n    darkMode: false,\n    theme: {\n        container: {\n            center: true,\n        },\n    },\n    variants: {\n        extend: {},\n    },\n    plugins: [],\n}\n```\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Terraform":{"title":"Terraform","content":"\n![[Knowledge/Engineering/Technologies/assets/terraform.png|700]]\n\n[Terraform](https://www.terraform.io/) is an *infrastructure as code* technology that you can use to automate your infrastructure setup. All you do is define the things you want to spin up in a `.tf` file, such as [[Knowledge/Engineering/DevOps/Virtual Machines|VMs]], [[Knowledge/Engineering/Architecture/Load Balancer|load balancers]], [[Knowledge/Engineering/Technologies/Kubernetes|K8S clusters]], a [[Knowledge/Engineering/DevOps/VPC|VPC]], etc. using Terraform's [[Knowledge/Engineering/Programming/Programming Paradigm#Declarative|declarative]] language. Terraform uses your API credentials to spin up everything you declared in the `.tf` file. Terraform has a rich plugin ecosystem and it's usable on all the main [[Knowledge/Engineering/Cloud/Cloud Provider|cloud providers]].\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/Vue":{"title":"Vue.js","content":"\n![[Knowledge/Engineering/Technologies/assets/vue-wallpaper.png|600]]\n\nVue.js is a [[Knowledge/Engineering/Languages/JavaScript|JavaScript]] framework for building sophisticated UI components in a reusable, maintainable and performant way. Just like for React, there's a rich ecosystem of npm packages you can plug in to have things like: unit testing, static site generation, client-side routing, state management, etc.\n\n## Setup\nJust run the following.\n```bash\nnpm init vue@latest  # Invokes `create-vue` which presents a terminal menu\n                     # with prompts to help set up your project.\n```\n\n## Core Things to Know\nThis section contains all the main things to know to be able to work on a Vue project.\n\n### Writing Components\nComponents are defined in a single `.vue` file. Vue provides a template syntax that extends regular HTML.\n```vue\n\u003cscript\u003e\nexport default {\n    data() {\n        return {\n            message: \"Hello world\",\n        };\n    },\n    methods: {\n        handleClick() {\n            this.message = \"Goodbye world\";\n        },\n    },\n};\n\u003c/script\u003e\n\n\u003ctemplate\u003e\n    \u003ch1 v-on:click=\"handleClick\"\u003e{{ message }}\u003c/h1\u003e\n\u003c/template\u003e\n```\nYou can embed any javascript expression inside the double braces, eg. `{{ 42 + Math.PI }}`\n\n#### Props\nJust like React components, every Vue component can take in props.\n```vue\n\u003cscript\u003e\nexport default {\n    props: {\n        message: String,\n    },\n};\n\u003c/script\u003e\n\n\u003ctemplate\u003e\n    \u003cdiv\u003e{{ message }}\u003c/div\u003e\n\u003c/template\u003e\n```\n\n#### V- Directives\nDirectives start with `v-` and are introduced by Vue's template syntax. See the [full list of built-in directives](https://vuejs.org/api/built-in-directives.html).\n- **Attribute/Prop binding** with `v-bind`, or the short-hand `:`.\n\t```vue\n\t\u003cdiv v-bind:class=\"activeClass\"\u003eHi\u003c/div\u003e\n\t\u003cdiv :class=\"activeClass\"\u003eHi\u003c/div\u003e       \u003c!-- You can optionally omit v-bind and just use a colon\n\t                                              since attribute binding is so frequently used. --\u003e\n\t```\n- **[Conditional rendering](https://vuejs.org/guide/essentials/conditional.html)** with `v-if`, `v-else-if` and `v-else`. Whenever you use these, the elements must be consecutive siblings.\n\t```vue\n\t\u003cscript\u003e\n\texport default {\n\t    data() {\n\t        return {\n\t            isDarkMode: false,\n\t        };\n\t    },\n\t    methods: {\n\t        toggleDarkMode() {\n\t            this.isDarkMode = !this.isDarkMode;\n\t        },\n\t    },\n\t};\n\t\u003c/script\u003e\n\t\u003ctemplate\u003e\n\t    \u003cdiv v-if=\"isDarkMode\" @click=\"toggleDarkMode\"\u003eüåô\u003c/div\u003e\n\t    \u003cdiv v-else @click=\"toggleDarkMode\"\u003e‚òÄÔ∏è\u003c/div\u003e\n\t\u003c/template\u003e\n\t```\n- **[List rendering](https://vuejs.org/guide/essentials/list.html)** with `v-for`. \n\t```vue\n\t\u003ctemplate\u003e\n\t    \u003cul v-for=\"message in ['Hello', 'World']\"\u003e\n\t        \u003cli\u003e{{ message }}\u003c/li\u003e\n\t    \u003c/ul\u003e\n\t\u003c/template\u003e\n\t```\n- **Event listeners** with `v-on`, or the short-hand `@`.\n\t```vue\n\t\u003cscript\u003e\n\texport default {\n\t    methods() {\n\t        handleClick: () =\u003e console.log('Hi');\n\t    }\n\t}\n\t\u003c/script\u003e\n\t\u003ctemplate\u003e\n\t\t\u003cbutton v-on:click=\"handleClick\"\u003eHi\u003c/button\u003e\n\t\u003c/template\u003e\n\t```\n\tCombining `v-bind` and `v-on` lets you have *two-way data binding* where changes to the UI will change the state, and changing the state will change the UI. Alternatively you can use `v-model`.\n- **Two-way data binding** with `v-model`. It's just syntactic sugar around `v-bind` and `v-on` for creating two-way [form bindings](https://vuejs.org/guide/essentials/forms.html).\n\t```vue\n\t\u003cscript\u003e\n\texport default {\n\t    data() {\n\t        return {\n\t            email: \"\",\n\t        };\n\t    },\n\t};\n\t\u003c/script\u003e\n\t\n\t\u003ctemplate\u003e\n\t    \u003cinput v-model=\"email\" /\u003e\n\t    \u003cspan\u003eValue: {{ email }}\u003c/span\u003e\n\t\u003c/template\u003e\n\t```\n\n#### Computed Properties\nWhen you want to interpolate values inside the component but the expression is complex, you should extract it out into a *computed property*.\n```vue\n\u003cscript\u003e\nexport default {\n    data() {\n        return {\n            val: 0,\n        };\n    },\n    computed: {\n        isEven() {\n            return this.val % 2 === 0;\n        },\n    },\n};\n\u003c/script\u003e\n\u003ctemplate\u003e\n    \u003cinput type=\"number\" v-model=\"val\" /\u003e\n    \u003cp v-if=\"isEven\"\u003eI'm even\u003c/p\u003e\n    \u003cp v-else\u003eI'm odd\u003c/p\u003e\n\u003c/template\u003e\n```\n\n#### Lifecycle Hooks\nJust like React components, Vue components undergo a similar [lifecycle](https://vuejs.org/api/options-lifecycle.html) consisting of creation, mounting, updating and unmounting.\n```vue\n\u003cscript\u003e\nexport default {\n    beforeCreate() { alert(\"Before creation\"); },\n    created() { alert(\"Created!\"); },\n    beforeMount() { alert(\"Before mounting\"); },\n    mounted() { alert(\"Mounted!\"); },\n};\n\u003c/script\u003e\n\u003ctemplate\u003e\n    \u003cdiv style=\"background: black; width: 200px; height: 200px\"\u003e\u003c/div\u003e\n\u003c/template\u003e\n```\n\n#### Refs\nJust like React, you can attach a reference to an element and then access and manipulate it after it's been mounted.\n```vue\n\u003cscript\u003e\nexport default {\n    mounted() {\n        this.$refs.animal.innerHTML = \"üêï dogs are better\";\n    },\n};\n\u003c/script\u003e\n\n\u003ctemplate\u003e\n    \u003cdiv ref=\"animal\"\u003eüêà cats are better\u003c/div\u003e\n\u003c/template\u003e\n```\n\n#### Emits\nUnlike React, you can make the child trigger events on the parent directly by emitting an event from the child which hits an event handler in the parent.\n```vue\n\u003c!-- ChildComponent.vue --\u003e\n\u003cscript\u003e\nexport default {\n    methods: {\n        notifyParent() {\n            this.$emit(\"someEvent\", \"Hello World!!!\");\n        },\n    },\n};\n\u003c/script\u003e\n\u003ctemplate\u003e\n    \u003cbutton @click=\"notifyParent\"\u003eClick me\u003c/button\u003e\n\u003c/template\u003e\n\n\u003c!-- Then in the parent component, you add an event listener for 'someEvent' --\u003e\n\u003cChildComponent @someEvent=\"...\" /\u003e\n```\n\n### Styling\nBroadly, there are 2 approaches to applying CSS to Vue components.\n1. Add a `\u003cstyle scoped\u003e` to the .vue file where the CSS within applies only to that component. You could omit the `scoped` prop to apply styles globally. For SCSS, you can set the prop `lang=\"scss\"`.\n2. Include a .css file from somewhere in the project directory through `\u003cstyle scoped\u003e@import '...'\u003c/style\u003e` or use an ES `import '___.css'`.\n\n## Vuex\nSee [[Knowledge/Engineering/Full-Stack/State Management|state management]].\n\nVuex, designed after the [Flux](https://facebook.github.io/flux/docs/in-depth-overview/) and [[Knowledge/Engineering/Technologies/Redux|Redux]] state management frameworks, introduces a *single source of truth* to the app that any component can read/write to.\n\n","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Technologies/assets/Pasted-image-20220805162553.png":{"title":"","content":"","lastmodified":"2022-10-14T06:51:54.006885239Z","tags":null},"/Knowledge/Engineering/Testing/Arrange-Act-Assert":{"title":"Arrange, Act, Assert","content":"\nThe 'arrange, act, assert' mantra is a pattern for structuring your [[Knowledge/Engineering/Testing/Unit Testing|unit tests]] (as well as integration tests and e2e tests). \n\nThe contents of a test should be partitioned into 3 parts in the following order:\n1. **Arrange** ‚Äì the setup code that's required before you can test what you want to test.\n2. **Act** ‚Äì the code that executes what the test intends to do. \n3. **Assert** ‚Äì the code that makes assertions about what the aftermath should be. \n\nSome simple, concrete examples of this pattern:\n1. Unit testing a C++ function (using [[Knowledge/Engineering/Technologies/GoogleTest|GoogleTest]]). This tests a `SymbolTable` class that's meant to be used as a supporting data structure for a [compiler project](https://github.com/Tymotex/Nand2Tetris).\n\t```c++\n\tTEST(SymbolTableTestSuite, InsertAndRetrieveTest) {\n\t    // Arrange.\n\t    SymbolTable symbol_table;\n\n\t\t// Act.\n\t    symbol_table.define(\"myVar\", \"int\", \"var\");\n\n\t\t// Assert.\n\t    EXPECT_EQ(symbol_table.data_type(\"myVar\"), \"int\");\n\t    EXPECT_EQ(symbol_table.declaration_type(\"myVar\"), DeclarationType::VAR);\n\t    EXPECT_EQ(symbol_table.segment_index(\"myVar\"), 0);\n\t}\n\t```\n1. Unit testing a frontend React component (using [[Knowledge/Engineering/Technologies/Jest|Jest]]). This tests the breadcrumbs component on the portfolio website, [timz.dev](https://timz.dev).\n\t```typescript\n\tdescribe(\"Breadcrumbs\", () =\u003e {\n\t    test(\"All crumbs are rendered\", () =\u003e {\n\t\t\t// Arrange.\n\t        render(\n\t            \u003cBreadcrumbs\n\t                crumbs={[\n\t                    { title: \"Home\", url: \"/\" },\n\t                    { title: \"Projects\", url: \"/projects\" },\n\t                    {\n\t                        title: \"My Sentient Robot\",\n\t                        url: \"/projects/my-sentient-robot\",\n\t                    },\n\t                ]}\n\t            /\u003e,\n\t        );\n\n\t\t\t// Act.\n\t        const home = screen.getByText(/Home/i);\n\t        const projects = screen.getByText(/Projects/i);\n\t        const sentientRobot = screen.getByText(/My Sentient Robot/i);\n\n\t\t\t// Assert.\n\t        expect(home).toBeInTheDocument();\n\t        expect(projects).toBeInTheDocument();\n\t        expect(sentientRobot).toBeInTheDocument();\n\t    });\n    });\n\t```\n1. E2E testing a web app (using [[Knowledge/Engineering/Technologies/Cypress|Cypress]]). This tests that the portfolio website, [timz.dev](https://timz.dev), is able to load the about page via a link on the homepage.\n\t```typescript\n\tdescribe(\"Portfolio page tests\", () =\u003e {\n\t    it(\"should render the about page after the 'about' link is clicked\", () =\u003e {\n\t        // Arrange.\n\t        cy.visit(\"http://localhost:3000\");\n\t        cy.wait(1000);\n\t\n\t        // Act.\n\t        cy.contains(\"About\").click(); // The homepage should show\n\t        cy.wait(1000);\n\t\n\t        // Assert.\n\t        cy.url().should(\"include\", \"/about\");\n\t        cy.contains(\"Who am I?\");\n\t    });\n\t});\n\t```\n\n","lastmodified":"2022-10-14T06:51:54.042887852Z","tags":null},"/Knowledge/Engineering/Testing/End-To-End-Testing":{"title":"End To End Testing","content":"\nEnd-to-end (e2e) tests are tests that aim to simulate the user experience as closely as possible and will look almost like manual testing, but automated.\n\nAlthough end-to-end tests are immensely valuable, it's worth considering reasons why you might not want to write them:\n- They're slow to write and slow to run. It'll take a lot of valuable engineering time to write out e2e tests, and it'll consume valuable seconds of a cloud CI server that you're paying for.\n- They're often a lot more *brittle* than integration tests or unit tests, meaning that if your application requires some minor or major change, it might mean tweaking your e2e tests. This complicates software maintenance.\n\nIn general, only invest more resources into e2e tests when you've extracted most of the value from the tests lower in the Agile 'testing pyramid':\n![[Knowledge/Engineering/Testing/assets/testing-pyramid.png|300]]\n*[Image source](https://www.ministryoftesting.com/dojo/lessons/the-mobile-test-pyramid)*.\n\n","lastmodified":"2022-10-14T06:51:54.042887852Z","tags":null},"/Knowledge/Engineering/Testing/Integration-Testing":{"title":"Integration Testing","content":"\nIntegration tests, also called 'end-to-end' tests, are... TODO.\n\n\n\n","lastmodified":"2022-10-14T06:51:54.042887852Z","tags":null},"/Knowledge/Engineering/Testing/Unit-Testing":{"title":"Unit Testing","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:54.042887852Z","tags":null},"/Knowledge/Engineering/UNIX/Systemctl":{"title":"Systemctl","content":"\nThe utility `systemctl` is used to control the services (daemons) running on the machine.\n\n## Usage\n```sh\nsudo systemctl start   \u003cservice_name\u003e\nsudo systemctl status  \u003cservice_name\u003e\nsudo systemctl stop    \u003cservice_name\u003e\nsudo systemctl enable  \u003cservice_name\u003e\nsudo systemctl disable \u003cservice_name\u003e\n```\n\nTo make your own services manageable with `systemctl`:\n1. Write a [service configuration file](https://www.freedesktop.org/software/systemd/man/systemd.service.html).\n2. Put `*.service` files inside `/etc/systemd/system` and then they become available for you to start, stop, enable, disable, etc.\n","lastmodified":"2022-10-14T06:51:54.042887852Z","tags":null},"/Knowledge/Health/Calories":{"title":"Calories","content":"\n## Numbers\n- $1 \\text{ kcal} == 1 \\text{ Calorie} == 1000 \\text{ calories}$. Note the case-sensitivity.\n    - In most contexts, a 'calorie' is a kilocalorie.\n- $1 \\text{ kcal} == 4.184 \\text{kJ}$\n\n","lastmodified":"2022-10-14T06:51:54.042887852Z","tags":null},"/Knowledge/Health/Cardio":{"title":"Cardio","content":"\nVO2 Max (volume oxygen max, or maximal oxygen consumption). Once a week.\n\nVO2 Max is highly correlated with longevity.\n","lastmodified":"2022-10-14T06:51:54.042887852Z","tags":null},"/Knowledge/Health/Healthy-Eating":{"title":"Healthy Eating","content":"\nPrioritise foods high in protein, healthy fats, fibre, vitamins and minerals.\n\n| Ingredient         | Description                                                                     |\n| ------------------ | ------------------------------------------------------------------------------- |\n| Beans              | Very long shelf-life when dried                                                 |\n| Chickpeas          | Very long shelf-life when dried                                                 |\n| Fish               | Always prefer fresh over frozen if prioritising nutrient retention and quality. |\n| Nuts               |                                                                                 |\n| Seeds              |                                                                                 |\n| Eggs               |                                                                                 |\n| Chicken            |                                                                                 |\n| Tofu               |                                                                                 |\n| Starchy vegetables | Potatoes, butternut squash                                                      |\n\n## Favourite Ingredients\nFor high calories and high nutrient density:\n- **Protein**\n    - Fish\n    - Eggs\n    - Chicken\n    - Tofu\n- **Fats**\n    - Avocado\n    - Cheese\n    - Full-fat yoghurt\n- **Carbs**\n    - Starchy vegetables (potatoes, pumpkin, peas, corn, etc.)\n    - Beans\n    - Quinoa\n    - Least processed breads (wholegrain, rye etc.)\n    - High-fibre vegetables (broccoli, asparagus, etc.)\n\n## Clean Bulking\nAt 71kg, 176cm and 21 years old, exercising everyday for average 30 mins:\n- Average powerlifting session burns ~150 kcals.\n- 5km at 5:00/km burns ~340 kcals.\n- 3000 calorie to maintain body weight (including calories burnt during powerlifting and running).\n\nEach day I should aim to eat:\n- 10-20% [[Knowledge/Health/Calories|caloric surplus]] ‚Üí ~400 calories in my case, which is basically 2 potatoes.\n- ~2g of protein per kg of body weight ‚Üí ~140g in my case.\n\n### Favourite Foods\n- Greek yoghurt.\n- Tofu.\n- Eggs.\n- Avocado.\n- Fish.\n- Nuts and seeds.\n- Beans (including chickpeas).\n- Potatoes.\n- Spinach.\n- Sauerkraut.\n\n## Guidelines\n\u003e In general, prefer food that has been **modified the least** from their natural state.\n\n### Fried foods\n- Avoid fried restaurant meals because they may contain higher [[Knowledge/Health/Nutrition#Trans fat|trans fats]] due to the oil used. Re-using frying oils result in more oil breaking down and forming trans fats.\n- Avoid all deep-fried foods.\n- Prefer pure olive oil and avocado oil for high temperature frying.\n- Prefer extra virgin olive oil (which is less processed than pure olive oil) for low temperature frying (because of its lower smoke point).\n\n### Meats\n- Avoid processed meats (eg. bacon, sausages, salami).\n- Avoid fatty cuts of beef or pork.\n- Mince is not considered processed.\n\n### Fats\n- Avoid butter and margarine.\n","lastmodified":"2022-10-14T06:51:54.042887852Z","tags":null},"/Knowledge/Health/Meals":{"title":"Meals","content":"\n## Primary\n- Mince.\n    - Mince, onion, chilli powder and other spices\n- [Saut√©ed spinach](https://www.simplyrecipes.com/recipes/spinach/).\n    - 0.5kg spinach, 2 tbsp extra-virgin olive oil, 3 cloves garlic, salt\n- [Black bean salad](https://cookieandkate.com/black-bean-salad-recipe/).\n    - Black beans, corn, bell pepper, tomatoes, onion, coriander, jalapeno, lemon, extra-virgin olive oil, white wine vinegar, chilli powder, cumin, salt.\n- Roast vegetables\n    - Choose any of: broccoli, cauliflower, bell peppers, potatoes, Brussels sprouts, sweet potatoes, eggplant, mushrooms, asparagus, butternut squash, onion, carrot\n- [Pumpkin soup](https://www.youtube.com/watch?v=RPGBMkN-_Ys).\n- Cream of mushroom soup\n\n## Supplementary\n- Sauerkraut.\n- Peanut butter sandwich with crushed berries and/or banana coins instead of jam.\n- Pickled jalapenos.\n","lastmodified":"2022-10-14T06:51:54.042887852Z","tags":null},"/Knowledge/Health/Nutrition":{"title":"Nutrition","content":"\n*Nutrition* is the study of *nutrients*, which are substances consumed by organisms that are necessary for survival. Nutrients are subclassed into:\n1. Proteins.\n2. Carbohydrates.\n3. Fats.\n4. Vitamins.\n5. Minerals \u0026 electrolytes.\n6. Water.\n7. Fibre (although whether this is a nutrient is not clear).\n\n**Critical facts**:\n- $\\approx 85\\%$ of your energy is sourced from fats and carbs. The remaining $\\approx 15\\%$ is sourced from proteins. ([Source](https://healthinfo.healthengine.com.au/introduction-to-nutrition))\n    - The brain consumes $\\approx 55\\%$ of total energy.\n- All carbs must be processed into glucose for metabolism.\n- \n\n## Proteins\n\n\n## Carbohydrates\n\nCarbohydrates are subdivided into:\n1. *Monosaccharides*\n    1. Glucose\n    2. Fructose\n    3. Galactose\n2. *Disaccharides* \n    1. Sucrose\n    2. Lactose\n    3. Maltose\n3. *Polysaccharides* \n    1. Starch\n    2. Fibre\n\nAll carbohydrates must be reduced to glucose first before metabolism.\n\n## Fats\n- Avoid trans fat, animal fat and hydrogenated oils.\n- Omega-3 in fish is incredible.\n\t\u003e \"One study showed that people who eat fish once a week slow the yearly rate of cognitive decline by 10%.\" ‚Äî John Ratey in *Spark*.\n\n### Trans fat\n\n## Vitamins\n\n## Minerals\n\n## Water\n\n## Fibre\n","lastmodified":"2022-10-14T06:51:54.042887852Z","tags":null},"/Knowledge/Health/Powerlifting":{"title":"Powerlifting","content":"\n## Squat\nHigh bar squat:\n![[Knowledge/Health/assets/high-bar-squat.gif|400]]\n([sourced from Men'sHealth](https://www.menshealth.com/uk/building-muscle/a755607/how-to-master-the-squat/))\n\nThe squat mainly targets the quadriceps, hip muscles, glutes, and targets to a lesser extent the lower back, hamstrings, calves and abdominals.\n\n### Technique\n1. **'Building the shelf'**:\n    1. Grip as closely as your shoulder mobility allows for. A narrower grip results in a sturdier shelf, but can result in form breakdown at the bottom of the squat if you're lacking in mobility.\n        - Grip style doesn't matter. Just use either a standard overhand grip or false grip\n    2. Place bar on your upper traps\n    3. Pinch your shoulders together.\n    4. Push your elbows backwards.\n    5. Keep tight and hold all that upper body tension the entire time.\n    6. *(First breath)* Breathe air into your diaphragm and brace your core.\n    ![[Knowledge/Health/assets/high-bar-squat-shelf.png|300]]\n    ([sourced from Squat University](https://i0.wp.com/squatuniversity.com/wp-content/uploads/2016/03/fullsizerender-13-copy-3.jpg?resize=381%2C231\u0026ssl=1))\n2. **Pop** the bar off the rack by driving hips forward.\n3. **3-step walkout**: take one big step back, another to roughly meet the other foot, another to get into the final squat stance. Be quick and energy-efficient, but **don't rush**.\n    1. Prefer a shoulder-width stance or slightly wider. Point your toes slightly outwards.\n4. **Pre-descent**: be patient and don't rush into descent after the walkout.\n    1. *(Second breath)* Let go of the first breath *just a bit*[\\*](https://www.youtube.com/watch?v=DsXj2fQ4uow\u0026ab_channel=MarkBell-SuperTrainingGym) (don't deflate!), then breathe air into your diaphragm and brace your core as if you're about to take a punch to the gut.\n    2. Look out to the horizon.\n5. **Descent**:\n    1. *(Optional)* Push your hips back *very slightly*, *just* before descent. This is called hip-first and is an alternative to creasing the hip and knees *simultaneously* to start the descent. *Never focus on bending on the knee first*.\n    2. 'Open your groin' and drop down in a controlled manner (taking ~1 second), *going as low as you can*. At least get the hip crease below the knee.\n        - Focus on opening your groin instead of pushing your knees out[\\*](https://www.youtube.com/watch?v=DsXj2fQ4uow\u0026ab_channel=MarkBell-SuperTrainingGym). You'll sit backwards and will feel less stress on the knees.\n    - Keep your elbows pushed back slightly, not directly below the bar.\n    - Keep the weight distributed equally across your feet throughout the whole descent and ascent.\n    - Keep your chest outwards. A cue is to point your chest up.\n6. **Ascent**:\n    1. *Push the world away*. Push your back against the barbell ‚Äî this helps so much. Just think: chest up and out as you explode out of the hole.\n    - Never let your hips shoot up.\n    - Never let your knees cave in. Always track your knees in the same direction as your toes.\n    - Keep knees pointed in the same direction as toes are pointed throughout both descent and ascent.\n\n## Bench Press\n![[Knowledge/Health/assets/bench-press.gif|200]]\n([source](https://tenor.com/view/bench-press-fitness-gif-18409378))\n\n1.  **Setup**:\n    - Arch your lower back. This positions your chest higher, resulting in a shorter distance that the bar has to travel. It keeps your shoulders safe.\n    - Cue: pull your shoulders back and down.\n    - Your 3 points of contact (glutes, upper back and feet) should never lift off the bench/ground.\n    - Position your feet wherever it's the case that supplying leg drive does not cause your butt to lift off the bench.\n    - Prefer a grip width such that when the bar is at your chest, your forearms are perpendicular to the barbell.\n    - The bar should be directly above your eyes before you unrack.\n    - The rack should be at a height such that the bar is 2\" up from the rack at full elbow extension.\n2.  **Unrack**:\n    - Pull the barbell **with your lats** towards the starting position (until your arms are perpendicular to the ground). This side-to-side motion should not involve pushing the bar upwards by much.\n    - Do not 'pop' the bar up to unrack it. This causes you to lose your upper body tightness.\n3. **Descent**:\n    - The barbell should tap (not bounce) around your lower pec or lower sternum. \n        - At the bottom, your forearms should be close to vertical from a side view. This is where your barbell should meet your body.\n    - At the bottom, your elbows should form a 45¬∞ angle with your torso. This is sometimes referred to as 'tucking' your elbow.\n    - The bar path should curve very slightly outwards, following a diagonal descent to your chest.\n    - One cue is to imagine bending the barbell, or snapping the barbell in two with your hands. This is meant to engage your lats more.\n4. **Push**:\n    - Drive up and back.\n    - **Leg drive**: push with your quads up the bench, not towards the ceiling.\n\n\u003e If you have trouble with locking out beyond midway, pause your bench press reps[\\*](https://www.youtube.com/watch?v=63xsr5k9lS0\u0026ab_channel=NickWright).\n\n## Deadlift\n![[Knowledge/Health/assets/deadlift.gif|300]]\n([sourced from Men'sHealth](https://www.menshealth.com/uk/fitness/a748582/how-to-deadlift/))\n\nThe deadlift mainly targets hamstrings, glutes, back and lats, and to a lesser extent forearms, traps, abdominals.\n\n### Technique\n\u003e Lift barefoot or in deadlift shoes. Don't lift in running shoes.\n1. **Beginning stance**:\n    1. Put the middle of your feet directly under the barbell at \u003c= shoulder-width with toes slightly pointed out.\n        - A narrow stance prevents knees from caving in and lets you grip so that your arms are closer to being perpendicular to the ground.\n    2. Grab the barbell without moving your shins and without moving the barbell.\n        - Your grip width should be roughly where your arms naturally hang.\n        - Choose one of these grip styles: double overhand standard, mixed grip, double hook grip.\n    3. Push knees forward until shins meet the barbell and without moving the barbell.\n    4. Breathe deeply into your diaphragm and brace your core as if you were about to punched in the gut.\n    5. Push chest through, push shoulders down, engage your lats (by thinking about reaching your hands as far down as possible).\n    6. (Optional) Push your knees gently *into* the crease of your elbows. Your knees should be aligned with your forearms.\n       ![[Knowledge/Health/assets/deadlift-stance-knees-arms.png|300]]\n    7. Look slightly downwards.\n    - Your shoulders should be slightly past the barbell. Your shoulder blades (scapula) should be directly up from the barbell.\n    - Your arms should be close to vertical, ie. perpendicular to the ground.\n    - You should feel extremely tight just before you begin the lift.\n    - Weight should be distributed evenly across your feet.\n    - Your lower back should never curve outwards.\n2. **Lift**:\n    1. Right before you lift, pull the slack out of the barbell. You'll hear a click. Never jerk the barbell. \n    2. *Just stand up*, or *explode up*, or *push the world away*. Drag the barbell up along your shins, knees and thighs the whole way through.\n    3. Once the barbell is above knees, squeeze your glutes hard and thrust your hips forward to lock out.\n3. **Lowering**:\n    1. Lower the barbell in a straight line down, not around your knees. Do this by first pushing your hips back and letting the barbell slide off your thighs.\n4. **Repeating**: using deadstop over touch \u0026 go.\n    1. Stop the barbell entirely on the ground. Don't take advantage of the bounce to start the next rep.\n\n### Weakness off the floor\n- Lack of tension throughout the body, which results in inefficient transfer of upward force onto the barbell.\n- Inability to push with the legs from the starting position. Your quads and lats should be stronger ‚Äî consider doing high-bar squats and barbell rows (and its variants such as pendlay rows and kroc rows).\n\n**Variants**:\n- **Deficit deadlifts** with an elevation of 1.5-3cm. You can just stand on a single plate.\n- **Low pause deadlift** where you pause the lift for 3 counts when the bar is just 1-2 inches off the floor.\n    - *Stay over the bar*. You should not be leaning back or deviating from the normal deadlift form. The only difference should be the introduction of a pause.\n    - The barbell must be in contact with your shins.\n- **Halting deadlift** where you do a rep up to the knees, drop it, then follow up with a full rep.\n- **Snatch grip deadlift** where you grip the bar much wider, as if doing an Olympic snatch.\n\n## Overhead Press\n![[Knowledge/Health/assets/overhead-press.gif|300]]\n([sourced from Men'sHealth](https://www.menshealth.com/uk/building-muscle/a748781/get-more-from-overhead-press/))\n\n1. Setup\n    - Use a grip width such that your forearms are parallel to each other and perpendicular to the bar.\n    - Use either standard or false grip. A false grip helps you keep the barbell closer to the heel of your hand, minimising wrist pain.\n2. **Unrack**\n    - 'Squat' the bar out of the rack, don't pick up the barbell.\n    - You can unrack from a split stance.\n    - You can do a 3-step walk-out like what you'd do for a squat, or take even just one economical step.\n    - Take a shoulder-width stance with toes pointed outwards slightly.\n        - Otherwise keep your heels in contact with each other for military presses.\n    - Your triceps should 'rest' on your lats. Think 'tight armpits'.\n3. **Pre-push**:\n    - Squeeze your glutes hard to ensure a neutral spine and prevent lower back pain.\n    - Brace your quads, lock your knees.\n    - Brace your core.\n    - Sink your hips forward slightly and push your head back slightly, all just before pressing the barbell. Get into a \"hips‚Üípress\" rhythm.\n    - Push out your chest up to the ceiling.\n    - The barbell need not rest on the collarbone if your forearms are too long.\n    - Keep your wrists directly above your elbows as much as possible.\n        - Although your elbows should protrude beyond your wrists slightly.\n          ![[Knowledge/Health/assets/ohp-forearms.png|150]]\n          ([sourced from Alan Thrall](https://www.youtube.com/watch?v=wJlKUo2-P4o\u0026ab_channel=AlanThrall))\n4. **Push**:\n    - The barbell should travel directly up as straight as possible. This will involve dodging your chin out of the way of the barbell by tilting your head backward, then pushing your head through (like peeking your head out of a window) once the barbell is over your head.\n    - At the top position, the barbell should be directly above your: shoulders, hips, knees and mid-foot.\n    - Shrug at the top position. Cue: get the barbell as close to the ceiling as you possibly can.\n5. **Lower**:\n    - Lower the barbell down to the starting position (with your elbows protruding slightly in front of the barbell and the barbell stacked firmly on your heel of your hand).\n\n## Front Squat\n![[Knowledge/Health/assets/front-squat.gif|300]]\n([sourced from Men'sHealth](https://www.menshealth.com/uk/building-muscle/a755607/how-to-master-the-squat/))\n","lastmodified":"2022-10-14T06:51:54.042887852Z","tags":null},"/Knowledge/Health/Untitled":{"title":"","content":"","lastmodified":"2022-10-14T06:51:54.042887852Z","tags":null},"/Knowledge/Investing/Active-versus-Passive-Investing":{"title":"Active vs. Passive Investing","content":"\n*Active* management involves monitoring the performance of an investment portfolio and making decisions about whether to buy, sell or hold and asset. It aims to 'beat the market' by adopting certain investing strategies and does not support the [[Knowledge/Investing/Efficient Market Hypothesis|efficient market hypothesis]] which implies it's not possible to 'beat the market' over the long run.\n\n*Passive* management, known as 'index investing', is about mirroring a [[Knowledge/Investing/Market Index|market index]] and is usually associated with [[Knowledge/Investing/Index Funds|index funds]] and [[Knowledge/Investing/Exchange Traded Funds|ETFs]]. They help *diversify* you across the whole part of the market.\n\nWhether active or passive investment outperforms the other in the long term is an ongoing debate.\n\nWarren Buffett, the world's most successful active *value investor*, recommends most people to pursue passive investing over attempting to do active investing yourself because passive investing removes the irrationality from buy/sell decisions that you're victim to.\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Angel-Investors":{"title":"Angel Investors","content":"\nAngel investors are just really rich people who are willing to lend their own money to fund a startup's initial venture. Startups often perfer angel investors over other forms of funding because they generally get better terms.\n\nAngel investors are considered the opposite of [[Knowledge/Investing/Venture Capital|venture capitalists]], since they're focused on business viability than helping to start a business.\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Bid-Ask-Spread":{"title":"Bid-Ask Spread","content":"\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Brokerage-Apps":{"title":"Brokerage Apps","content":"\nStock trading apps let you trade stocks/ETFs with no commission fee and will often give you ways to research companies and manage your portfolio.\n\nWebull\n\nRobinhood\n\nMoomoo\n\nCharles Schwab\n- [Endorsed](https://www.businessinsider.com/personal-finance/best-stock-trading-apps) by Business Insider.\n\nVanguard\n\nAmeritrade\n\nWealthfront (robo advisor)\n- [Endorsed](https://www.investopedia.com/best-stock-trading-apps-4587996) by Investopedia\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Buy-Sell-Spread":{"title":"Buy-Sell Spread","content":"\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Buying-a-Home":{"title":"Buying a Home","content":"\nSee [[Knowledge/Personal Finance/Real Estate|real estate]].\n\n## How to buy a house\n1. Save money.\n    - 20% of a target property's value to avoid paying the lender's mortgage insurance (LMI).\n    - Stamp duty, which needs to be paid within 30 days of settlement.\n    - Conveyancing fees. \n2. Find the best home loan rate.\n    - A mortgage broker can help identify home loans. They're free for you to consult, however they earn a commission from the lenders.\n    - Get a **pre-approval** from a lender. This doesn't commit you to the loan, but gives you certainty that you're able to take it.\n3. [[Knowledge/Investing/Buying a Home#Finding a house|Find a house]].\n4. Building and pest inspection.\n5. Finalise loan.\n6. Settlement.\n\n## Finding a house\nExpect the search to take months.\n\nGet a loan pre-approval before searching for a home so you know your price range.\n\nConsider hiring a *buyer's advocate*, an expert to help you evaluate the potential home and negotiate its price.\n\n### Criteria\n1. Suburb safety and community.\n2. Location.\n3. Vicinity to public transport.\n4. Vicinity to shops, schools and important services (such as hospitals).\n5. Whether there are development plans for this area.\n6. Rental yields and demand and vacancy rate.\n7. Number of bedrooms, bathrooms, parking spots.\n\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Capital-Gains-Tax":{"title":"Capital Gains Tax","content":"\nAny income you get from your investments in the form of savings interest, [[Knowledge/Investing/Dividends|dividends]] (even if it's reinvested as part of dividend reinvestment plan), rental income, capital gains (from property, shares, crypto), etc. is taxed at your [marginal tax rate](https://moneysmart.gov.au/income-tax/income-tax-calculator). Investment income must be included in your [[Knowledge/Personal Finance/Tax Return|tax return]]. Costs involved with buying, holding and selling an investment asset is tax deductible. Even the interest accrued on a loan you take to invest in something is also tax deductible. If you pay management fees to a mutual fund or pay for investment advice, those are also tax deductible.\n\nA *tax-effective* investment is one where the tax you pay on the investment income is less than your marginal tax rate. Salary-sacrificed [[Knowledge/Personal Finance/Superannuation|super]] contributions are considered *tax-effective* since it gets taxed at a low 15%, up to a point ([source](https://moneysmart.gov.au/how-to-invest/investing-and-tax)).\n\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Collateral":{"title":"Collateral","content":"\nIn loan agreements, collateral is an asset that the borrower has to forfeit if they default on their loan. This collateral is usually valuable and can offset the loss of the lender in the case of a defaulting borrower.\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Defensive-versus-Growth-Assets":{"title":"Defensive vs. Growth Assets","content":"\nInvestments are generally divided into two types: *defensive* and *growth*. Defensive investments are lower risk and tend to protect your wealth rather than grow it. Growth investments are riskier and tend to grow your wealth rather than preserve it. Usually, bonds are considered defensive assets while stocks are considered growth assets.\n\nPrefer defensive investments if you need to meet shorter-term financial goals, such as saving for a home deposit in 2 years, or to reduce the volatility of your portfolio [(source)](https://moneysmart.gov.au/how-to-invest/choose-your-investments).","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Derivatives":{"title":"Derivatives","content":"\nTODO.\n\n\n[[Knowledge/Investing/Options|options]] and [[Knowledge/Investing/Futures|futures]].\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Diversification":{"title":"Diversification","content":"\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Dividends":{"title":"Dividends","content":"\nA dividend is a payment distributed by the company to [[Knowledge/Investing/Stocks|shareholders]], usually every 3 months. Many companies are not required to pay dividends to shareholders and so they will choose to reinvest it back into the company. \n\nThere are *dividend reinvestment plans* which automatically use the cash payment you'd usually get to buy more of the company's stock.\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Dollar-Cost-Averaging":{"title":"Dollar Cost Averaging","content":"\nDCA is about regularly putting money into an investment pursuit over the long term, rather than chucking in a huge sum at 'the right time'.\n\nWarren Buffett recommends to do this and commit to it for the long term.\n\nDollar-cost averaging protects you from making irrational decisions and the effects of large market fluctuations.\n\n![[Knowledge/Investing/assets/S\u0026P-dollar-cost-averaging.png|400]]\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Efficient-Market-Hypothesis":{"title":"Efficient Market Hypothesis","content":"\nThe *Efficient Market Hypothesis* is a theory that asserts that share prices always factor in all information, meaning they're always traded at their fair value, making it impossible for investors to 'beat the market' indefinitely. A result following from this idea is that the risk-reward tradeoff is perfectly symmetrical.\n\nThe truth of this theory is highly debated and the firmness of people's belief in it ranges on a spectrum. Strong supporters of this theory believe that no level of analysis and strategising is futile and will never produce any net profit over time. It makes sense for them to prefer investing in [[Knowledge/Investing/Investing#Active vs Passive Investing|passively managed]] investment vehicles like [[Knowledge/Investing/Index Funds|index funds]] and [[Knowledge/Investing/Exchange Traded Funds|ETFs]] instead of actively managed ones.\n\nPeople who do not support the efficient market theory will believe that it's possible for skilled and experience analysts to exploit *market inefficiencies* (which are situations where an asset's price does not accurately reflect its true value) to reliably generate a return.\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Exchange-Traded-Funds":{"title":"Exchange Traded Funds","content":"\nExchange traded funds (ETFs) are a subclass of [[Knowledge/Investing/Mutual Funds|mutual funds]] that are very similar to [[Knowledge/Investing/Index Funds|index funds]], with the main difference being that you can buy/sell shares whenever the stock market is open as opposed to only once a day. ETFs and index funds are sometimes used interchangeably incorrectly.\n\nAn ETF *is* a [[Knowledge/Investing/Securities|security]], so it is tradeable and has a share price that rises/falls.\n\n### ETFs vs Index Funds\nPick index funds over ETFs if you want to remove the temptation of impulse buying/selling stocks and let you automatically reinvest earnings back into your account.\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Futures":{"title":"Futures","content":"\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Hedge-Fund":{"title":"Hedge Fund","content":"\n*Hedge funds* are [[Knowledge/Investing/Investing#Active vs Passive Investing|actively managed]] services that pool together money from a bunch of investors and then use certain investment strategies to achieve high returns and will distribute a share of the profit to the clients. They're considered risky investments and sometimes are only exclusive to clients with high net worth. Part of the reason they're riskier to invest in is because they are less regulated than other investment funds like [[Knowledge/Investing/Mutual Funds|mutual funds]] and because they borrow a lot of money to take advantage of [[Knowledge/Investing/Leverage|leverage]]. \n\nIn plain English, a *hedge* is some form of protection against financial losses. To \"hedge one's bet\" means to avoid commitment in the face of difficult choices. A hedge fund therefore means, in a more literal sense, a protection of money, however they gradually got riskier after the invention of the concept in 1949.\n\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/IPO":{"title":"IPO","content":"\nAn *initial public offering* (IPO) is when a private company sells shares to the general public for the first time. To *IPO*, a company must clear certain requirements by the [SEC](https://www.sec.gov/).\n\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Index-Funds":{"title":"Index Funds","content":"\n*Index funds* are a subclass of [[Knowledge/Investing/Mutual Funds|mutual funds]] that are [[Knowledge/Investing/Investing#Active vs Passive Investing|passively managed]] instead of [[Knowledge/Investing/Investing#Active vs Passive Investing|actively managed]]. They track a specific [[Knowledge/Investing/Market Index|market index]].\n\n[[Knowledge/Investing/Index Funds|Index funds]], and *index investing* in general, were 'invented' by a guy named *Jack Bogle* in the 1970s, who founded [Vanguard](https://www.vanguard.com.au/). He essentially got sick of mutual funds charging people so much for active management. He's credited with being the person who has helped investors create more wealth than anyone else on the planet.\n\nThe expenses associated with *actively managed mutual funds* (those that have people monitoring investment performance) tend to be considerably higher than *passively managed mutual funds* (ie. index funds). Roughly, actively managed mutual funds often charge $1\\text{-}2\\%$ of your account balance per year while index funds charge well below $1\\%$.\n\n## Investing\nIt's widely recommended that most investors should just make monthly investments ([[Knowledge/Investing/Investing#Dollar-Cost Averaging DCA|dollar-cost averaging]]) into a low-cost [[Knowledge/Investing/Index Funds|index fund]].\n\u003e \"Most investors, both institutional and individual, will find that the best way to own common stocks is through an index fund that charges minimal fees. Those following this path are sure to beat the net results (after fees and expenses) delivered by the great majority of investment professionals\" ‚Äî Warren Buffett's 1996 Letter to Shareholders.\n\nJack Bogle recommends to always commit to investing in an index fund, even if they're priced at all-time highs and you're convinced that they're overvalued. \n![[Knowledge/Investing/assets/s\u0026p-investing-in-local-peaks.png|400]]\n\u003e \"Never think you know more than the market does.\" ‚Äî Jack Bogle.\n\nHistorically, the only time investing in index funds has not worked has been when people cave into their emotions and deviate from their commitment to dollar-cost average invest into an index fund and attempt to beat the market on their own. Just stay the course.","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Investing":{"title":"Investing","content":"\nAn *investment* is the purchase of an asset or commodity with the expectation of it producing income for you or appreciating in value. *Investing* is the set of theory and practices around making smart investments that aid you in meeting your financial goals.\n\n1. Understand the power of compounding. Start early and invest regularly.\n2. Understand [[Knowledge/Investing/Portfolio#Diversification|diversification]].\n3. Only invest in what you understand. \n4. Would you want to be an owner of that business? \n\n\u003e The main difference between a *trader* and an *investor* is how long they hold the asset. Traders focus on capitalising on short-term trends.\n\n## Essentials\n- [[Knowledge/Investing/Portfolio|Portfolio]]\n- [[Knowledge/Investing/Diversification|Diversification]]\n- [[Knowledge/Investing/Defensive versus Growth Assets|Defensive vs. Growth Assets]]\n- [[Knowledge/Investing/Capital Gains Tax|Capital Gains Tax]]\n- [[Knowledge/Investing/Securities|Securities]]\n- [[Knowledge/Investing/Stocks|Stocks]]\n- [[Knowledge/Investing/Stock Exchange|Stock Exchange]]\n- [[Knowledge/Investing/Stock Market|Stock Market]]\n- [[Knowledge/Investing/Dividends|Dividends]]\n- [[Knowledge/Investing/Active versus Passive Investing|Active vs. Passive Investing]]\n- [[Knowledge/Investing/Value versus Growth Investing|Value vs. Growth Investing]]\n- [[Knowledge/Investing/Mutual Funds|Mutual Funds]]\n- [[Knowledge/Investing/Market Index|Market Index]]\n- [[Knowledge/Investing/Index Funds|Index Funds]]\n- [[Knowledge/Investing/Exchange Traded Funds|ETFs]]\n- [[Knowledge/Investing/Dollar Cost Averaging|Dollar Cost Averaging]]\n- [[Knowledge/Investing/Market Capitalisation|Market Capitalisation]]\n- [[Knowledge/Investing/Leverage|Leverage]]\n- [[Knowledge/Investing/IPO|IPO]]\n- [[Knowledge/Investing/Options|Options]] TODO\n- [[Knowledge/Investing/Buying a Home|Buying a Home]]\n- [[Knowledge/Personal Finance/Real Estate|Real Estate]]\n- [[Knowledge/Investing/Brokerage Apps|Brokerage Apps]] TODO\n- [[Knowledge/Investing/Stock Research|Stock Research]] TODO\n- [[Knowledge/Investing/Market Making|Market Making]]\n- [[Knowledge/Investing/Bid-Ask Spread|Bid-Ask Spread]]\n\n- \n## Stock Market\n### Investing Strategies\n- Go 98% ETFs or index funds and 2% individual stocks. This gets you into the habit of researching stocks.\n- Avoid all emotional decision-making.\n    \u003e \"You don't make money when you buy and you don't make money when you sell. You make money when you wait.\" ‚Äî Charlie Munger.\n\n#### The Buffett/Munger Approach\n1. Understand the business.\n2. Check for a durable competitive advantage.\n3. Management has integrity and talent.\n4. Ensure a margin of safety. \n\n\n\n## Bond Market\n### Stocks vs. Bonds\nIn general: bonds are lower risk but have lower returns than stocks. When you're young and don't have strict target dates for financial goals, just go for stocks and allocate a greater percentage of your portfolio to bonds when you require more certainty about your investment returns.\n\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Investing-in-Stocks":{"title":"Investing in Stocks","content":"\n\n\n\u003e \"It‚Äôs important to educate yourself about the economy, interest rates, exchange rates and government policy, and understand how these factors may affect a company‚Äôs performance, says¬†[the Australian Government‚Äôs MoneySmart website](http://www.moneysmart.gov.au/).\" ‚Äî [CommBank](https://www.commbank.com.au/articles/investing/share-investing-for-absolute-beginners.html)\n\nShare price is heavily tied to the company's future outlook.\n\nMoneySmart recommends asking questions like:\n-   Will the goods and services this company provides be in demand in the future?\n-   Are there opportunities for the company to grow?\n-   Who are the company‚Äôs competitors and are they in a strong position?\n\nSources such as a company‚Äôs annual report, as well as its yearly and half-yearly financial results statements, can be good places to find relevant information.\n\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Leverage":{"title":"Leverage","content":"\nTODO.\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Market-Capitalisation":{"title":"Market Capitalisation","content":"\n*Market capitalisation* (or just *market cap*) is the total market value of a company's outstanding shares. This is a good estimator of the size of a company.\n- *Small-cap* is $\\lt \\$2 \\text{ billion}$\n- *Mid-cap* is $\\geq \\$2 \\text{ billion}$\n- *Large-cap* is $\\geq \\$10 \\text{ billion}$\n\nGenerally, the greater the market capitalisation, the less risky an investment is.\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Market-Index":{"title":"Market Index","content":"\nhttps://www.investopedia.com/terms/m/marketindex.asp\n\nA *market index* is a value published by a financial data company that's meant to broadly capture the value of some section of a market. \n\nAn *index*, in most stats, economics and finance contexts, is just a representative value of an asset in a set of assets. *Indexes* are meant to accurately summarise the state of some market by picking out parts of the stock market and producing a value, usually by simply taking the mathematical weighted average. Indexes are created to serve as a simple indicator/benchmark of stock market performance that provide a useful summary at a glance. Note that there are indexes that also cover non-stock assets such as gold, oil, currencies, etc.\n\nTo be clear with terminology, you can't invest in an *index*, but you *can* invest in an [[Knowledge/Investing/Index Funds|index fund]] that mirrors an index such that an $n\\%$ increase in the index value will mean a corresponding $n\\%$ increase in your balance.\n\n### The 9 Major Market Indexes\n- **S\u0026P 500** captures the top companies participating in the US stock market. It's the most followed index in the world.\n- **Dow Jones Industrial Average** consists of the 30 largest companies in the US, so basically a subset of the companies in the S\u0026P 500.\n- **Nasdaq Composite Index** consists of 3000+ stocks and is heavily biased towards tech companies.\n- **MSCI World** captures majors stocks across 23 developed countries. This index provides some indication of the worldwide economic health.\n- **MSCI Emerging Markets** captures stocks across 24 emerging market countries, which are developing countries like India, China, etc.\n- **S\u0026P GSCI Commodity Index** captures commodities like oil, precious metals, agricultural produce, livestock, etc.\n- **Dow Jones Real Estate Index** captures the performance of [[Knowledge/Investing/Real Estate Investment Trusts|real estate investment trusts (REIT)]], mainly.\n- **Dollar Index** captures currency purchasing power of the US dollar relative to other major currencies.\n- **VIX**, also called the 'fear index', captures the level of fear in the stock market by tracking the price of [[Knowledge/Investing/Options|options]].\n\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Market-Making":{"title":"Market Making","content":"\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Mutual-Funds":{"title":"Mutual Funds","content":"\nMutual funds are a managed investment service that collects together the money of many investors like you to purchase a specific set of [[Knowledge/Investing/Securities|securities]]. They're suited for people who want to participate in the stock market but minimise the time spent on buy/sell decisions about certain stocks.\n\nWhen you buy a share of a mutual fund, you are getting a slice of the profits they get from their investment decisions. They're managed by financial professionals, although whether this is a [[Knowledge/Investing/Investing#Active vs Passive Investing|good thing or not]] is debatable.\n\nBuying a share in a mutual fund is a good way to [[Knowledge/Investing/Portfolio#Diversification|diversify]] your investment portfolio since the mutual fund will often buy a wide range of assets.\n\nThere are many different kinds of mutual funds:\n- *Equity mutual funds* invest in stocks.\n- *Fixed-income mutual funds* invest in bonds.\n- *Index mutual funds* invest in a whole [[Knowledge/Investing/Market Index|index]] like [S\u0026P 500](https://www.investopedia.com/terms/s/sp500.asp).\n- *Country mutual funds* invest only the securities in a single country.\n- *Growth stock mutual funds* invest in [[Knowledge/Investing/Investing#Value vs Growth Investing|growth stocks]] instead of stocks in large established companies. Watch out for the *turnover ratio*.\n\n### Picking a Mutual Fund\nThe *prospectus* gives information about how the fund operates, its fees, performance data, etc.\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Options":{"title":"Options","content":"\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Portfolio":{"title":"Portfolio","content":"\nAn *investment portfolio* is just a set of assets, typically [[Knowledge/Investing/Securities|securities]] like [[Knowledge/Investing/Stocks|stocks]] and [[Knowledge/Economics/macroeconomics/Bonds|bonds]], and cash, but it can also include real estate, commodities, etc. What's inside your portfolio, or in other words, what you *asset allocation mixes* are, depends on your own *risk tolerance*, which depends largely on your age and financial goals. \n\n### Diversification\n*Diversification* is just about investing in a set of assets with varying levels of risk/return rather than fully investing in one type of asset. You can also diversify *within* an asset class. For example, when investing in shares, to diversify means to have a share portfolio spanning several companies than just 1 or a few companies.\n\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Real-Estate":{"title":"Real Estate","content":"\nTODO.\n\nNot recommended by finance book authors like Scott Pape or JL Collins as an investment strategy. \n\nUnderstand that buying a home should really be thought of as a lifestyle decision, not as an investment vehicle.\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Real-Estate-Investment-Trusts":{"title":"Real Estate Investment Trust","content":"\n\n\nNote: [[Reading/Barefoot Investor|Barefoot Investor]] encourages you to consider REITs as an alternative investment choice to buying an investment property.\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Securities":{"title":"Securities","content":"\nA *security* is a tradable financial asset. They exist as a way for businesses and goverments to acquire money to fund their *ventures* and operations.\n\nSecurities are a type of *financial instrument*, which is a contract between parties that serves as evidence of an agreement or ownership over assets.\n\n\u003e It‚Äôs called a security ‚Äúbecause there is a secure financial contract that is transferable, meaning it has clear, standardised, recognized terms, so can be bought and sold via the financial markets,‚Äù ([source](https://english.stackexchange.com/questions/247926/how-did-security-semantically-shift-to-mean-tradable-financial-asset#:~:text=They%20are%20called%20securities%20because,sold%20via%20the%20financial%20markets.)).\n\nSecurities are divided into 3 categories mainly:\n1. Debt securities like [[Knowledge/Economics/macroeconomics/Bonds|bonds]].\n2. Equities such as [[Knowledge/Investing/Stocks|stocks]].\n3. Derivatives such as [[Knowledge/Investing/Futures|futures]], [[Knowledge/Investing/Options|options]], etc.\n\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Stock-Exchange":{"title":"Stock Exchange","content":"\nA *stock exchange* is a centralised place that has the infrastructure to facilitate the trading of stocks. NASDAQ, NYSE and ASX are examples of *stock exchanges*. Note that in stock exchanges, you're only trading with existing shareholders, not the company itself (usually).\n\n![[Knowledge/Investing/assets/asx-physical-entrance.png|250]]\n\n*The ASX's (Australian Stock Exchange) physical building.*\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Stock-Market":{"title":"Stock Market","content":"\n\u003e The stock market is the greatest opportunity machine ever created.\n\nThe *stock market*, also called the *share market*, is the buy/sell [[Knowledge/Economics/microeconomics/Market|market]] for [[Knowledge/Investing/Stocks|stocks]]. Even though it‚Äôs called ‚Äòstock market‚Äô, you can also trade other securities like [[Knowledge/Investing/Exchange Traded Funds|ETFs]], corporate [[Knowledge/Economics/macroeconomics/Bonds|bonds]], [[Knowledge/Investing/Derivatives|derivatives]] based on stocks, commodities, currencies and bonds in the stock market. To buy stocks, you need a *broker*.\n\n### Understanding the Stock Market\nThe basis of the stock market's existence is the incentive for companies to acquire funding to execute their ideas and the incentive for individuals with money (called investors) to invest and benefit from the success of those companies.\n\nAs a company becomes more profitable, its stocks increase in value (demand). The reverse also happens.\n\nThe profitability of a company can fluctuate massively ‚Äî due to material shortages, leadership changes, bad publicity, new regulations, etc. \n\n\nThe stock market is an example of something closely resembling a [[Knowledge/Economics/microeconomics/Market#Perfectly Competitive Markets|perfectly competitive market]]. Share prices are determined by [[Knowledge/Economics/microeconomics/Supply and Demand|supply and demand]].\n\nPeople buy shares through *brokers*.\n\n\n\n\nhttps://www.youtube.com/watch?v=8QaP43sFO5A\u0026ab_channel=Benjamin\n\n\nThe stock market is a [complex adaptive system](https://en.wikipedia.org/wiki/Complex_adaptive_system). Unlike in the context of maths and science, you can't predict how the overall system behaves just by knowing how each part of the system behave. \n\n#### Things that affect the stock market\n\n- When [[Knowledge/Economics/macroeconomics/Central Bank|central banks]] raise or drop the [[Knowledge/Economics/macroeconomics/Cash Rate|interest rate]].\n\n\n### History of the Stock Market\n\n### Macroeconomics\nMacroeconomic events and variables have a huge effect on stock market performance.\n\n#### Investing During High Inflation\nA favourable company to invest in during inflationary periods has two properties:\n1. The freedom to jack up or fine-tune their prices without significantly dropping market share values. Eg. Apple, since they have a unique competitve advantage, can freely increase their prices without huge consequences to their share price. People generally won't try to substitute away to other competitors.\n2.  Low working capital. In other words, the company should be able to generate a lot of cash from little input and have a scalable business model. Eg. Meta can just increase ad frequency to generate more cash, while Ford would have to invest in new factories and equipment.\nAdvice [sourced](https://arichlife.com.au/how-warren-buffett-says-to-invest-during-high-inflation/) from Warren Buffett.\n\n#### Interest Rates\nAt lower [[Knowledge/Economics/macroeconomics/Interest|interest rates]], stock market prices will more easily rise (I think. Need a source and explanation for this).\n\nAt higher interest rates, it's harder for stock prices to rise.\n\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Stock-Research":{"title":"Stock Research","content":"\nBeta\n\nP/E ratio\n\nPEG value\n\nMarket capitalisation\n\nProfit margin\n\n \n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Stocks":{"title":"Stocks","content":"\n**Stocks** represent pieces of official ownership, called 'ownership equity', of a business. They are a type of [[Knowledge/Investing/Securities|security]] and are traded in the [[Knowledge/Investing/Stock Market|stock market]].\n- Your ownership is quantifiable as: $\\frac{\\text{Company X stocks that you have}}{\\text{Total Company X stocks}} \\times 100\\%$.\n- Stocks are often categorised under industry sectors, for example: tech stocks, energy stocks, etc., and locations, for example: US stocks, Australian stocks, etc.\n\n**Shares** are the *smallest denomination* of a company's stock. They're *units of stocks*. Companies will usually have millions or billions of total shares, called 'outstanding shares'. You can also buy fractions of a single share, called *partial shares*.\n- Owning shares in a company makes you a **shareholder** of that company. Shareholders get to vote and sometimes get a portion of the business' profits, called [[Knowledge/Investing/Dividends|Dividends]]. If the company *becomes more profitable* between the time you bought the shares and the time you sell it, you'll have [[Knowledge/Investing/Investing#Capital Gains|capital gains]] on the shares.\n- Your ownership gives you voting power in meetings and elections within the company. Generally, 1 share held gives you 1 vote, however this is set by the company, who can also split off shares into different classes where one class' shares have a greater weighting than another in terms of voting power.\n\n## Why do companies sell stocks?\nWhen companies choose to list themselves on a *stock exchange* like the Nasdaq, they're provided with [[Knowledge/Economics/macroeconomics/Liquidity|liquidity]] and a means to acquire money for capital investment. The tradeoff is that they're subject to greater expenses and tighter regulation.\n\nTo grow your company into an *empire* requires you to have access to a huge amount of capital, ie. money to invest in your ventures and operations. When a company can attract investors by listing themselves on the stock market, they'll be able to lease an office, hire more people, get more equipment, pursue more marketing efforts, etc.\n\nAn alternative way for companies to raise capital is to sell [[Knowledge/Economics/macroeconomics/Bonds|bonds]]. Many companies will opt to sell both stocks and bonds. The act of selling shares is called *equity financing* and the act of selling bonds is called *debt financing*. For most startups, they simply don't have the assets to really sustainably meet debt payments, so equity financing is the preferred route, where they don't have to pay as much as they grow.\n\nCompanies can also acquire funding from [[Knowledge/Investing/Venture Capital|venture capital]] firms or [[Knowledge/Investing/Angel Investors|angel investors]].\n\n## Why Are Stocks Called 'Stocks'\nIn medieval Europe, people recorded debts by etching marks on tally sticks and splitting them. When split, the stick would have a very unique pattern of splitting that was hard to tamper with. The longer part was called the 'stock', given to the lender, the shorter part was called the 'foil', given to the borrower. These sticks were considered legal proofs of transactions for hundreds of years until the 1800s.\n\n  ![[Knowledge/Investing/assets/tally-sticks.png|150]]\n\n## Stock, Shares and Equities\nIn everyday conversation, all 3 are the same. Formally, however, there are differences:\n- *Stock*: a representation of ownership in a company.\n- *Share*: the smallest denomination of company stock.\n- *Equity*: generally, it's the ownership of assets that have liabilities associated with them. For example, a *home equity* is the difference between the market value and the remaining balance owed on a mortage.\n\nThe *stock market*, *share market* and *equity market* all refer to the same thing.\n\n## Why do stocks have any value?\n[If a stock doesn't pay dividends, then why is the stock worth anything?](https://money.stackexchange.com/questions/51976/if-a-stock-doesnt-pay-dividends-then-why-is-the-stock-worth-anything)\n- A share has value based on the expectation of future dividends or a future acquisition, both of which depend on a **company's profitability**. When someone buys your shares, they're paying for this expectation.\n- Holding shares also means you own a proportional fraction of all the capital the company has (real estate, computers, materials, reputation, intellectual property, their investments, and so on). In the event of liquidation, you have a claim on the value of some of this capital.\n- A company that reinvests their profits instead of distributing it to shareholders can compound their growth.\n- The 'right to vote' within a company may not have much value to you as an investor, but it would matter to employees, customers or business partners.\n\nThe above are reasons why stocks have *intrinsic value*, however the actual stock price is determined by people thinking it has value.\n\n## Common vs. Preferred Shares\nShares are usually either *common shares* and *preferred shares*. \n- Preferred shareholders get priority over common shareholders when receiving dividends and the assets if the company [[Knowledge/Investing/Stocks#Liquidation|liquidates]]. \n- Preferred stocks grant the holder no voting rights while common stocks do. \n- Preferred stocks are less risky but have lower potential returns.\n\n## Restricted vs. Float Shares\n*Restricted shares* are shares you can't buy or sell without permission from the SEC. They're issued typically as part of an employee's compensation. *Float shares* are shares that can be freely traded by the public.\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Value-versus-Growth-Investing":{"title":"Value versus Growth Investing","content":"\n*Value investing* is about being able to see the intrinsic value of something, then buying that thing when its priced lower than the intrinsic value. *Value investors* believe the stock market to overreact to good or bad news and set prices that aren't reflective of the true value of a stock, which gives rise to an opportunity to profit.\n\nPut simply, if you know the *true* value of jewelry, and you find some overlooked cheap jewelry in a garage sale, then you would obviously exploit the opportunity.\n\n*Growth investing*, on the other hand, is about investing in the stock of smaller companies whose earnings are expected to climb at a much higher rate than established companies.\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Investing/Venture-Capital":{"title":"Venture Capital","content":"\nTODO. venture capital.\n\n\n\n\n","lastmodified":"2022-10-14T06:51:54.086891045Z","tags":null},"/Knowledge/Law/Law":{"title":"Law","content":"\n\n**Questions**\n- Why does there not exist a global set of laws?\n    - Why is it the case that certain drugs are legal in one state, yet illegal in another?\n- \n\n---\n\n*Law* is a set of rules used to get society to conform to certain behaviours. They're enforced by governments and exist primarily to ensure society works effectively.\n\nLaws exist to ensure the\n\nLaw is classified into two scopes: *public law* and *criminal law*.\n\n- *Legal system* ‚Äî the set of laws in a country or place and how they're made and enforced.\n- *Legislation* ‚Äî a law or set of laws, or the process making of new laws.\n- *Legislature* ‚Äî a group of people with the authority to make new laws. \n- *Legislative* ‚Äî having the authority to make new laws.\n- *Statutes* ‚Äî \n- *Decrees* ‚Äî \n- *Tribunal* ‚Äî \n- *Jurisdiction* ‚Äî the authority, or entity with the authority, to interpret and apply the law.\n- *(Court) Litigation*\n- *Judge*\n- *Judicial* \n- *Judiciary* ‚Äî branch of government that judges when laws have been violated based on evidence presented in court cases.\n- *Constitution* ‚Äî a set of rules. The *Constitution of Australia* is a document     that came into force on the first day of 1901.\n- *Federation* ‚Äî a group of self-governing states with a central government.\n- *Commonwealth* ‚Äî a political union of 56 countries, most of which are former British Empire territories.\n- *Referendum*\n- *Common Law* ‚Äî \n- *Allegation*\n- *Acquittal*\n- *(Arrest) Warrant*\n- *(Search) Warrant*\n- *(On) Bail*\n- *(On) Parole*\n- *Court*\n- *Defendant*\n- *Exhibit*\n- *Felony*\n- *Jury*\n    - *Jury pool*\n- *Parliament* ‚Äî \n- *Hearsay*\n- *Impeachment*\n- *Jurisprudence*\n- *Lawsuit*\n- *Litigation*\n- *Objection*\n- *Plaintiff*\n- *Probation*\n- *Prosecute*\n- *Public defenders*\n- *Solicitor*\n- *Attorney*\n- *Sentence*\n- *Testimony*\n    - *Testify*\n- *Verdict*\n- *High Court*\n\n## Australian Legal System\n\n\n\n### How Laws Are Made\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Personal-Finance/Budget":{"title":"Budget","content":"\nA **budget** is a spending plan, based on your income and expenses. Having a budget clearly shows you your cash flow over time.\n\n**Reasons**:\n- Identify money drains like interest payments, dining out, subscriptions.\n- Lets you have certainty about where your income is going.\n- Makes you more mindful of your purchases and whether they're contributing to your goals.\n- Peace of mind.\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Personal-Finance/Credit-Cards":{"title":"Credit Cards","content":"\nYour credit score is mostly dependent on:\n1. Payment history (have you always paid on-time?)\n2. Amounts owed\n3. Length of history (how long you've held the credit card)\n\n\u003e Always pay on time, don't utilise more than 30% of your total.\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Personal-Finance/Insurance":{"title":"Insurance","content":"\nInsurance is a means of guaranteeing that you will be compensated a substantial amount of money in recovery of an event like damage to an asset (property, vehicle, etc), illness, injury, death, etc. You pay insurance companies a premium and in exchange they will guarantee a safety net for you which can help you more easily bounce back from catastrophic financial events. It's a powerful psychological purchase because you have certainty that you will continue to be financially secure, even if the worst tragedies of life occur. \n\nAn ***excess*** is an out-of-pocket payment you make when you make claims. Insurance policies may let you pay a greater excess in return for a smaller premium. When you have an asset that‚Äôs covered by insurance damaged for $1000 and the excess is $400, then the insurance company pays $600.\n\nThe ***premium*** is the amount you pay as part of an insurance contract. The value of the premium takes into account the insurance company‚Äôs view on how much of a risk you are, or in other words, how likely you are to make a claim and cause them lose money.\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Personal-Finance/Medicare":{"title":"Medicare","content":"\nMedicare is Australia's healthcare insurance scheme, backed by the government. All citizens and permanent residents get access to health services for free or very low costs (eg. visits to a general practitioner, medically necessary surgeries, prescription drugs, etc.).\n\nMedicare is funded through the *Medicare levy* (2% of your taxable income) and *Medicare levy surcharge*. The levy is *in addition to* your regular income tax and is collected the same way. *Everyone must pay the levy* unless they meet [some exceptional criteria](https://www.servicesaustralia.gov.au/medicare-and-tax).\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Personal-Finance/Personal-Finance":{"title":"Personal Finance","content":"\n\u003e What's the difference between finance and economics? Finance is concerned about managing money while economics is a social science focusing on how human‚Äôs make decisions around the allocation of scarce resources. Finance and economics are different disciplines, however *they inform each other*.\n\n---\n## Personal Finance \u0026 Investing\n- [[Knowledge/Investing/Investing|Investing]]\n\t- [[Knowledge/Investing/Mutual Funds|Mutual funds]]\n\t\t- [[Knowledge/Investing/Index Funds|Index funds]]\n\t\t- [[Knowledge/Investing/Exchange Traded Funds|Exchange traded funds (ETFs)]]\n\t- [[Knowledge/Investing/Stocks|Stocks]]\n\n---\n\n1. Track your spending. Know exactly how much you spent on dining out, online orders, transport, etc.\n    - Collect all receipts and exploit tax deductions when you file your [[Knowledge/Personal Finance/Tax Return|tax return]].\n2. Set up an emergency fund lasting ~3 months that can provide a buffer for unexpected expenses..\n3. Consolidate super accounts and minimise management fees.\n4. Insurance: consider health, LTD, life, renter/homeowner, and car insurance.\n5. Save aggressively and invest.\n\n---\n## Resources\n- Investopedia\n- Mr. Money Moustache.\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Personal-Finance/Real-Estate":{"title":"Real Estate","content":"\n## Considerations\n\nLocation is the greatest factor.\n\n\n\n## Property Versus Shares\nSources:\n- https://www.choosi.com.au/life-insurance/articles/investing-property-or-shares\n- https://moneysmart.gov.au/property-investment\n- https://www.aussiefirebug.com/property-vs-shares/\n- https://curvo.eu/article/i-want-to-invest-in-property-how-does-it-compare-to-passive-investing\n\n**TODO**: tidy this section up.\n\n\nLow interest rates and government incentives make real estate investment more attractive.\n\nThe power of leverage creates notably higher annual returns.\n\n\u003e Investing in properties is more subject to micro events such as changes in taxes. This is especially true in a country like Belgium that is known for its fiscal uncertainties.\n\nInvesting in real estate is harder, riskier and more complicated than index funds.\n\n\nRental income can cover most or all of the mortgage, however you cannot rely on it because there may be times where your property is vacant.\n\n*Positive gearing* is where you take a loan to invest, but the income from the investment exceeds your loan's repayments, ie. you're getting a positive net income despite the loan repayments. *Negative gearing* is when you take a loan to invest, but the income from that investment is still lower than the loan repayment. \n- For *positively geared investments*, you have to pay tax on your rental income. For *negatively geared investments*, you can claim a tax deduction on the loss, which is better enjoyed by high income earners. \n\nProperty expenses are tax deductible. This includes interest on your mortgage.\n\nReal estate investment mostly does not require special domain knowledge.\n\n- Property is illiquid.\n- Costs associated with buying, holding and selling a property:\n    - **Stamp duty** ‚Äî a one-off tax payment associated with your purchase of a property. It's a function of location, property type and property value.\n        - Concessions/Exemptions may exist as incentives for first home buyers. \n        - It's also called *transfer duty* in states other than NSW.\n        - You must pay the stamp duty shortly after the property's purchase.\n    - Conveyancing fees\n    - Legal fees\n    - Real estate agent fees\n    - Search fees\n    - Pest and building reports\n    - Insurance\n    - Landlord insurance\n    - **Body corporate** ‚Äî \n    - Land tax\n    - Repairs and maintenance \n    - TODO: strata?\n    - Capital gains tax, if the property has increased in value\n- Settlement periods can span weeks or months.\n- You can borrow huge amounts of money to acquire a property and therefore can take advantage of higher *leverage*, which is an investment strategy involving borrowing money to increase potential returns. It's sometimes 'unfair' to compare % capital growth between shares and property if you don't account for the 'cheap' leverage you can get through acquiring a property through a mortgage.\n    - You can also borrow money to invest in shares, just not as much. Doing this is called 'investing on margin', and you are subject to *margin calls* where the lender can request back their money if the value of the securities you invest in fall below a threshold.\n\n- You must have a secure enough income stream to meet mortgage repayments.\n- You must be able to respond to increases in mortgage repayments from interest rate hikes.\n\nPicking an investment property:\n- Find areas of high growth, high rental yield, low vacancy rates.\n- What are proposed developments in the suburb?\n- Consider: \n    - Distance to reputable schools.\n    - Distance to shopping centres and transport.\n    - Garage.\n    - Bathrooms.\n\nYour property is exempt from capital gains tax if you're an Australian resident and you've lived in the home for the whole period of owning it and has not been used for business activity.\n\n**House buying process**:\n1. Contact a bank or mortgage broker to acquire a *pre-approval*. How much you can borrow is a function of your income, job history, credit rating, etc.\n2. Inspect the home for damage, broken things, pests, etc. Consider paying for a thorough pest and building inspection.\n3. Get a conveyancer to review the contract.\n\n\n---\n\u003e \"Job, walk or drive a certain area once a month for 10 minutes. I have found some of my best real estate investments doing this. I will jog a certain neighbourhood for a year and look for change.\" ‚Äî Robert Kiyosaki, *Rich Dad Poor Dad*\n\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Personal-Finance/Superannuation":{"title":"Superannuation","content":"\n*Superannuation* is a government policy that forces your employer to skim ~10% (the [Super Guarantee rate](https://www.australiansuper.com/superannuation/superannuation-articles/2019/11/superannuation-guarantee-what-you-need-to-know)) off your salary and deposits it to your super fund. It was implemented by the Australian government to force individuals to save for retirement. It‚Äôs basically the Australian version of the US‚Äô 401k. Generally, the superannuation contributions are subject to a much more lenient tax rate (~15%) than your marginal tax rate (which can be 40%).\n\nYou can access the money in your superannuation account after you reach the ‚Äòpreservation age‚Äô, which is when you‚Äôre age 55-60, however this varies. There are no (legal) ways to access your super account, barring some exceptional circumstances (on compassionate grounds, home deposits, etc.).\n\n\u003e An excellent read: [superdoneright](https://superdoneright.com/). \n\u003e - $\\frac{2}{3}$ of people have never switched super funds/investment options and therefore stay in underperforming, high fee funds resulting in hundreds of thousands of dollars lost. Most people consider it too much of a hassle.\n\u003e - Passive investing options offer better returns over many years *and* much lower fees.\n\u003e - $40\\%$ of super accounts are not consolidated, meaning that one person is needlessly paying huge fees to multiple super funds.\n\u003e - Always ditch retail funds. Their fees are too high.\n\n### Super Funds\n*Super funds* are financial institutions that **manage your superannuation money and will invest it for you**. Examples of super funds include UniSuper, SunSuper, Cbus Super, etc. \n\nSuper funds usually give you a **choice of different investment options** that differ in risk/returns (‚Äògrowth‚Äô, ‚Äòbalanced‚Äô, ‚Äòconservative‚Äô, ‚Äòethical‚Äô, etc.). By default, the ‚Äòbalanced‚Äô investment option will be chosen for you which spreads your money out across shares and cash, typically 70% in shares or property and 30% in fixed interest. Some super funds may allow you more granular control over which asset classes your money is dumped into. UniSuper, for example, lets you dump however much you want into international shares, Australian shares, property, cash, etc.\n\n#### Retail Super Funds \u0026 Industry Super Funds\nThere are *retail super funds* and *industry super funds*. They differ in what they do with profits.\n\n**Retail super fund**: distributes profit to shareholders. These are usually associated with banks. Some retail super funds include Suncorp, ANZ Smart Choice Super, etc.\n\n**Industry super fund**: are not-for profit, so profits are returned to members. These include super funds like AustralianSuper, UniSuper, SunSuper. They‚Äôre called industry funds because they used to mainly be associated with specific industries, but they‚Äôre mostly open to the public now.\n\n\u003e Historically (as of 2022, at least), industry super funds have outperformed retail super funds.\n\n#### Picking a Super Fund\nAs advised by [moneysmart](https://moneysmart.gov.au/how-super-works/choosing-a-super-fund), search for the super fund's *'product disclosure statement'* and consider the following properties:\n- Investment return performance (look at the last 5 years and beyond)\n- Fees. They‚Äôre usually deducted from your balance each month and can either be a percentage or fixed amount.\n- [[Knowledge/Personal Finance/Insurance|Insurance]]. Super funds usually give some insurance coverage to members by default. They include: life insurance, income protection and/or disability insurance. A premium will be deducted from your super for having this coverage.\n\nConsider using the government's [YourSuper comparison tool](https://www.ato.gov.au/YourSuper-Comparison-Tool/) to pick out a super. Alternatively, you can use non-government comparison tools like [Canstar](https://www.canstar.com.au/superannuation/), but remember that they're a business and may run promotions for certain institutions.\n\n\u003e Just pick a **low-cost international index fund investment option**. Switch to a different super fund if that option doesn't exist. Which super fund you pick matters less than which investment option you pick.\n\n### Salary Sacrifice\nAn Australia-specific term for an arrangement between you and your employer where you trade a portion of your salary for some benefit from the employer, provided at no greater cost to them. Eg. [[Reading/Barefoot Investor|Barefoot Investor]] recommends arranging a salary sacrifice to increase the employer‚Äôs super contributions to 15%.\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Personal-Finance/Tax":{"title":"Tax","content":"\nTaxes are payments that you *must* pay to the government, mainly through your income, capital gains and dividends. Taxes also exist on transactions for specific goods and services, as well as on specific imports from a specific country (which we call *tariffs*). It exists to provide income to the government which then uses the money to fund public healthcare, education, defence, infrastructure, and other public goods and services.\n\n*Tax withholding* is the income tax that is taken out of your gross income by your employer that is routed to the ATO. This is part of the *pay-as-you-go* (PAYG) system implemented by the government to 'tax at the source'.\n\n## Tax Evasion \u0026 Tax Avoidance\n*Tax evasion* or *tax fraud* is the illegal act of lying about your income or claiming an unpermitted tax deduction with the intention of reducing your tax. An easy way to accidentally commit tax fraud is by using the same capital asset, such as a car or computer, for personal *and* business use, or by not reporting cash payments you receive from others. Clear record-keeping helps to avoid such accidents. \n\n*Tax avoidance* is strategically minimising the amount of tax you pay, within legality. It mostly does not involve deception or dishonesty like in tax evasion.\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Personal-Finance/Tax-Return":{"title":"Tax Return","content":"\nA tax return is a document that reports your income (from work, interest on bank accounts, investments, etc.) and expenses. You file tax returns annually in Australia, and doing so is called ‚Äòlodging‚Äô your tax return. It‚Äôs something you must do if you have had tax taken out of your pay over the tax year (spanning from July 1 to 30th of June).\n- Your employer gives you an income statement that shows how much you earned and how much tax was deducted from your pay.\n- You could pay a tax professional to help you do your tax return, or you can do it yourself with the help of tax software, like TaxSlayer.\n\n### Tax Deductions\nTax deductions are work-related expenses that you can claim to reduce your tax. To claim something as work-related, you have to be able to prove that it‚Äôs helped you earn income. You must keep your purchase receipts around for 5 years after the claim (you can manage it in the ATO app's [myDeductions](https://ato.gov.au/mydeductions) tool).\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Personal-Finance/Untitled":{"title":"","content":"","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Science/Brain":{"title":"Brain","content":"\nThe brain, from a computer nerd's perspective.\n- **Amygdala** ‚Äî the panic button. It determines, based on external inputs, whether something calls for your body to enter an aroused state (throws an exception in runtime). This includes being hunted, hunting prey, public speaking, and talking to a cute girl.\n- **Hippocampus** ‚Äî is the storage device providing context for a memory that can be committed to long-term storage.\n- **Hypothalamus** ‚Äî\n- **Prefrontal cortex** ‚Äî the high-level executive function executor and the home of working memory, making it part of the RAM of the system. This is the last part of the modern brain to have evolved.\n- **Basal Ganglia** ‚Äî handles the executed of cached automated behaviours (stored and optimised procedures). Famously, this is responsible for effortlessly executing routines and habits.\n- **Nucleus Accumbens** ‚Äî the reward center which signals the pleasure to the prefrontal cortex.\n- **Cerebellum** ‚Äî accelerometer module and motor coordinator. It contains about half of the brain's total neurons, densely packed in ~10% of the total volume. It has an essential role in attention.\n\n## Lobes\nFrontal lobe, temporal lobe, parietal lobe.\n\n## Limbic System\nAmygdala\n\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Soft-Skills/Charisma":{"title":"Charisma","content":"\n### First Impressions\nThey can't be reversed. Humility is always an excellent quality, however aim to represent yourself with an authentic level of confidence *and* curiosity. \n\n### Dress Code\n*The way that you dress matters*, even when the dress code is non-existent where you work (as they often are for tech companies). People will always judge you based on your appearance, no exceptions, and that's a fact of life. See the ['Halo Effect'](https://en.wikipedia.org/wiki/Halo_effect).\n\nFurthermore, dressing in professional clothes reinforces your identity as a professional to yourself and others, and you will tend to conduct yourself in a way that is congruent with this identity.\n\n### Contradictions\nPersonality/appearance contrasts are polarising and inexplicably magnetic. \n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Soft-Skills/Conflict":{"title":"Soft Skills","content":"\n\u003e Ideas sourced from 'How to Win Friends and Influence People' by Dale Carnegie and 'The Complete Software Developer's Career Guide' by John Sonmez.\n\nDo not avoid it when it arises. It's *always* mutually beneficial to resolve it. \n\n\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Soft-Skills/Leadership":{"title":"Leadership","content":"\n\u003e Ideas sourced primarily from 'Extreme Ownership' by Jocko Willink.\n\n\n\n### Lead By Example\nGood leaders *always lead by example* and do themselves what they ask from their team. They will always hold themselves to a higher level of accountability before the team.\n\nThis implies that you must always be willing to get into the front lines, just like in the battlefield as a general. If you want your team to adopt Agile methodologies, you must demonstrate that you're actively using it first. If you want your team to have a strong work ethic, you must demonstrate that yourself. \n\n### Responsibility\nBeing a good leader means to assume $100\\%$ responsible for **every** single failure you encounter in your team's endeavours, and ultimately in your personal life and relationships. You are always to blame. *No exceptions*.\n\u003e There are no bad teams, only bad leaders.\n\nWhen your team members screw up or even actively sabotage things, it is still your fault. You could have trained them better, confirmed that they were in agreeance with plans, etc. Likewise, when the team is successful, you must ensure the credit is distributed to the team's members, *not to yourself*.\n\n### Subordinate Leadership (Delegation)\nTrain and trust your members.\n\nTODO.\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Soft-Skills/Mentorship":{"title":"Mentorship","content":"\n### Selflessness\nAlways show your willingness to help your peers, *even to the extent of putting them before yourself*. It is much better to build a reputation as a selfless, giving person that aggressively pushes themselves and everyone else up instead of *only* themselves.\n\nCompetition is good, but drop any desire to 'beat' the other person in your personal interactions with them. Always demonstrate authentic selflessness and a desire to see the other person succeed. \n\nStop treating your career as a zero-sum game. Drop the idea that you need to beat everyone else and keep your knowledge and 'secrets' hidden to maximise your job security.\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Soft-Skills/Negotiation":{"title":"Negotiation","content":"\nThe consensus seems to be to *always negotiate*.\n\n\n\u003e Ideas sourced from 'Never Split the Difference' by Chris Voss.\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Soft-Skills/Networking":{"title":"Networking","content":"\n### Networking Misconceptions\nNetworking, the act of deliberately developing professional contacts, must be done with the intent of giving as many people what they want as possible. Approaching it with a self-serving mindset is incorrect. For this reason, it is best done when you're *not actively looking for things from people*, ie. a job. When you make networking about providing value to others, it stops being something you dread doing. It's a long-term investment and is meant to be built over years and to deliver value over years, not days.\n\nNetworking is to be done everywhere, not just at your university on-campus networking fair. You should seek opportunities all the time to deliver value to the new people you come across.\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Soft-Skills/Performance-Reviews":{"title":"Performance Reviews","content":"\nPerformance reviews are *bullshit*, but you must play the game to win.\n\n### Schedule Regular Reviews\nYou must have regular one-on-one discussion with your manager/boss about your performance. Ideally weekly or fortnightly at a minimum.\n\nDirectly ask how you are doing and what can be improved. Make your goals known to your manager/boss. For instance, if you're trying to get promoted from an L3 engineer to an L4 engineer, make that obvious every conversation. You must be clear about your goals if they're promotion-related because a good review **does not imply** a promotion!\n\nMaintain [[Knowledge/Soft Skills/Performance Reviews#Document Everything|documentation]] for their response (an email or a Google Docs document, for example). People are subconsciously inclined to stay congruent with their past behaviours and statements, according to the [Consistency Principle of Persuasion](https://en.wikipedia.org/wiki/Consistency_(negotiation)). If they communicate that you're meeting the requirements for whatever goal, then documenting things will compel them to commit to what they said.\n\n### Document Everything\n*Document everything* to a borderline autistic extent. \n1. Create daily logs and weekly reports of your high-level progress.\n2. Manage a growing knowledgebase.\n3. Note the books you've read and other educational pursuits that show improvement.\n4. Save all the emails where you have received praise for you work.\n\nPut up a fight if you haven't been promoted when you expected to be. If you document *everything*, you'll have a mountain of evidence to support your case that cannot be ignored.\n\n### Promotions \u0026 Raises\nPrefer adopting more responsibility and 'bigger' job titles than more money, because the money will naturally follow in the long term. You cannot attain a promotion by working hard quietly, you absolutely must be aggressive in pursuit of it. You don't get opportunities - you make them.  \n\nAgain, make it absolutely clear to management that you want a promotion and intend to [[Knowledge/Soft Skills/Performance Reviews#Document Everything|prove]] you meet the requirements for one.\n\nAn extremely powerful case for a promotion is if you can prove, with numbers, that you are worth more than you cost.\n\n**Avoid ultimatums**: Although it sounds like the most powerful 'checkmate' move to make in order to get what you want, don't give your boss an ultimatum where you demand a promotion/pay rise or leave the job by accepting a higher-paying offer. You'll piss off people, but more importantly they'll be motivated to find a replacement for you because you'll be seen to be more of a liability than an asset. Some companies have strict policies that compel managers to never negotiate.\n\n**Job hop**: it's a reliable way to get a 'promotion', just at another company. Doing it every 2-3 years seems to be the norm, and it forces you to constantly stay in demand.\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Knowledge/Soft-Skills/Personal-Brand":{"title":"Personal Brand","content":"\nUnfortunately, to have impact in this world requires you to build reputation and understanding how to influence people. To do all this, you need to build up a *personal brand*.\n\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Projects/Building-a-Second-Brain/Building-a-Second-Brain":{"title":"Building a Second Brain","content":"\n## Ideas\n- Have a kanban board where each column is one of your projects, ordered from left-to-right in priority order. The tasks in each column follow the same format but are sorted by deadline.\n    - In each weekly review I pick 1-2 projects to focus hard on. I pull cards from the project board into the task board.\n    - Every column should have a large bold deadline shown.\n    - Clicking on the board name links to the project page.\n    - All tasks have a #project tag.\n    - Some tasks might have a #recurring tag. Eg. If I want to finish a book, then there will be tasks to read x number of pages.\n\n---\n\n## Features\n- Mobile Git synchronisation with [Termux](https://termux.dev/en/) and [Termux:Widget](https://wiki.termux.com/wiki/Termux:Widget).\n    - [Inspired from this blog post](https://werzum.github.io/tech/2022/02/13/Obsidian-Mobile-Sync.html). I wrote a simple shell script that can be executed manually in one press through Termux:Widget. All the shell script does it run git commands to pull and then push whatever changes I make through Obsidian.\n    - The Git syncing could be accomplished through [Tasker](https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm\u0026hl=en_AU\u0026gl=US) as well, I believe.\n    - Using a service managed by `systemctl` which automatically runs a git commands to sync to remote on system shutdown.\n- Python CLI that formats the task board when Obsidian starts up. It can also be invoked with a custom hotkey, `ctrl + alt + f`, made possible by `obsidian-shellcommands`.\n    - Moves all incomplete tasks from previous days into today's task lane. This eliminates you having to manually drag cards over to today.\n    - Creates the next $n$ days' task lanes and populates them with default tasks. For example, you can schedule a morning routine task for every day or a weekly review task for every Sunday, etc.\n    - You only ever have to view and manage 1 task board. The script helps to keep the task board cycling onwards through the days infinitely.\n    - You can set default tasks to be applied on a daily, weekly or monthly basis. This is how I never forget to do weekly and monthly reviews, for example.\n\n## Workflow\n- Vim keybindings option in Obsidian and `obsidian-vimrc-support`.\n- `obsidian-kanban`  -\u003e for managing daily tasks.\n    - TODO: elaborate.\n- `obsidian-dictionary` -\u003e allows me to quickly look up the definition of a highlighted word via the context menu (which I bring up with `ctrl + r`).\n- Daily journal\n- Weekly reviews\n- Monthly reviews\n- Task and project board \n- Backlog page\n- Goals page\n\n## Shortcuts\nI aimed to set keybindings that closely match how I have it in other programs like browsers, code editors and Vim.\n- VSCode-like shortcuts:\n    - `ctrl + ,` ‚Äî bring up settings.\n    - `ctrl + shift + b` ‚Äî toggle left sidebar.\n    - `ctrl + shift + e` ‚Äî open file explorer.\n    - `ctrl + shift + f` ‚Äî broad search.\n    - `ctrl + p` ‚Äî search and open file by name.\n    - `ctrl + shift + p` ‚Äî open command palette.\n- Notion-like shortcuts:\n    - `ctrl + \\`  ‚Äî toggle right sidebar.\n    - `ctrl + shift + l` ‚Äî toggles light/dark theme.\n        - *Note*: Obsidian doesn't support toggling, so the workaround is to use `ctrl + shift + alt +l` for light mode.\n- Browser-like shortcuts:\n    - `ctrl + w` ‚Äî close the current window.\n    - `ctrl + shift + t` ‚Äî reopen the closed file.\n- Vim-like shortcuts:\n    - `alt + h/l` ‚Äî navigate to previous/next file.\n    - `ctrl + h/l` ‚Äî focus on the left/right pane.\n- `ctrl + r` ‚Äî bring up context menu.\n- `ctrl + j` ‚Äî open daily note ('j' for 'journal').\n- `ctrl + alt + f` ‚Äî runs my custom Python CLI which formats my tasks.\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Projects/Konflux/Konflux":{"title":"Konflux","content":"\n## Tasks\n- [ ] Refactor TimetableGrid.tsx and write comments in that file and the SCSS file.\n- [ ] Fix `justify-content` and overflow issue. Just use JavaScript to detect when the overflow happens and then toggle on `justify-content: flex-start;`.\n- [ ] \n\n\n1. Learn Dart and Flutter!\n    1. ~~Set up Flutter and get the hello world app working on physical Android.~~\n    2. ~~Complete the **Build your first flutter app** 2 codelabs. Take notes as you go.~~\n2. ~~Need to understand the problem I‚Äôm solving, and then ideate solutions~~\n3. ~~How are shareable and persistent links implemented?~~\n4. ~~Need to have a UI design in Figma sorted before actually producing styling UI.\nGood time to learn Figma a little more deeply.~~\n5. ~~Needs MVP definition and launch date.~~\n6. ~~Learn Firebase auth.~~\n7. ~~Learn Firebase DB~~\n8. ~~Needs architecture planning (backend). I really need to understand enterprise application architecture‚Ä¶ but this isn‚Äôt necessary for an MVP.~~\n9. ~~Needs a GitHub project.~~\n10. Learn marketing, sales and app business strategy.\n\n---\n\nChallenges:\n\n- NoSQL data model design:\n    - Data access speed and data redundancy tradeoff.\n    - Denormalisation/normalisation.\n- User flow:\n    - It‚Äôs important to get it right the first time, else you‚Äôll move stuff around unnecessarily and waste time.\n    - Should‚Äôve ran through a complete user flow in my prototype and critiqued it before I built it out. I wasted time iterating on it as I developed the code instead of iterating on it through Figma.\n- Wasted so much fucking time on working with the data models‚Ä¶ I need to figure out the data flow properly.\n- Getting the dual timetables to be centered on the page and to wrap when the viewport shrinks. This required nesting flexbox layers and grid layers.\n\n---\n\n## Requirements\n\n**The problem**:\n\n*Informally:* \n\nWhenever I want to arrange a meetup with friends as a university student with a loaded schedule, the main frictional point is finding a common time that the people I‚Äôm inviting are available. The main solution to this currently, as far as I can see, is When2Meet. The other alternatives tend to be heavyweight, like Calendly, Doodle, etc. I only ever used When2Meet because you could arrange events by quickly filling in availabilities **without an account** and then quickly distribute a link for others to see the group‚Äôs availabilities.\n\nWhen2Meet works for simple events, but there are no features for event management. When you‚Äôre looking to organise something, you‚Äôre responsible for not losing the link you distributed. \n\nEvery time you arrange an event, you must fill in your schedule completely, again, which is cumbersome and challenging to sync, especially since availabilities are not static.\n\nNo details exist about the event beyond the times and attendees.\n\nWhen an event is arranged, you‚Äôre still responsible for manually putting it into Google Calendar.\n\n**Competitors**:\n\n- When2Meet.\n    - Not responsive on mobile. No app.\n    - Doesn‚Äôt let you expand/shrink the time after defining the time range for an event.\n- Calendly.\n- Doodle.\n- [https://lettucemeet.com/](https://lettucemeet.com/)\n    - Nice guided usage\n\nKonflux will have superior UX and a very lightweight UI and user flow that is only marginally more complex than When2Meet.\n\n**Target audience**:\n\nTargeted towards busy adults and uni students who struggle with finding a window of time for meeting up socially. It would be too hard to challenge business scheduling since there are too many mature competitors. The main difference in targeting uni students and young adults looking to arrange smaller social meetups is that they are not going to adopt a heavyweight system like Calendly, however a very minimal system like When2Meet lacks a lot of quality of life features.\n\n**Business model**:\n\nTODO. Premium features? Scaling features (eg. manage more than 3 events)?\n\n**Features**:\n\nRemember, I need to have a clear line of reasoning for the business value of each feature. Iteration 1 features constitute the MVP and are highlighted blue.\n\n- When2meet feature set:\n    - Time range selection and modification. It should be possible to expand the time range and shrink it easily.\n        - Days of the week.\n        - Over the next 30 days.\n    - Shareable and persistent link.\n- Event management:\n    - Locally persistent events list.\n    - Selecting the venue and showing the location on an embedded map (Google Maps).\n    - Showing the weather forecast for each timeslot and chance of rain.\n        - Note: could do a linear gradient with each timeslot‚Äôs datapoint and interpolate the colours smoothly with chroma\n    - Superimposed calendar visualising all your events.\n    - Show an expected time to destination for all invitees based on their address so that everyone gets there on time.\n    - Allow the organiser to set a list of preparatory things prior to the event (eg. bring sunscreen, etc.)\n    - Setting polls (which can be anonymised).\n    - Single, multi-day and recurring events.\n    - If there are no time slots where everyone is free, there should be a way to prompt an invitee to revise their availability (since we might put a very conservative schedule).\n- An authentic and aesthetic mobile experience that feels very polished and stylish.\n    - Guided slideshow-like initial navigation.\n- Notifications through email.\n- Notifications through SMS.\n- ‚ÄòShare to Messenger‚Äô\n- Setting deadlines and reminders for when invitees need to fill in their schedule by.\n- Smarter scheduling (the goal should be to minimise the amount of thought that needs to go into picking the best time):\n    - Highlighting the times with the best weather.\n    - Highlighting opening/closing times of the target venue (is this possible through some API? Google Maps?)\n- Timeweave feature set (this was a pretty popular app but was simply always broken‚Ä¶):\n    - See who else you‚Äôve *added* is currently available, or will become available.\n- Timezone support.\n- Automatically recommends event times and ideas based on past venues. You specify that you want to meet person B sometime over next week, then the app suggest exactly when and where.\nPresents a list of ideas. \nThis would be great for dates.\n\n## Iteration #1\n\nThe purpose of iteration 1 is to ship something that does everything When2Meet does,¬†*but with slightly better UI and UX*¬†and event persistence.\n\n**Deliverables**\n\n1. Low-fidelity Figma prototype.\n2. Minimally styled React/Next/TS/SCSS web client that mostly implements the Figma prototype for the core iteration¬†[#1](https://github.com/Tymotex/Konflux/issues/1)¬†feature set.\n3. Firebase DB services setup.\n\n**Architecture/Deployment**Extremely simple. Just deploy the Next.js client to Vercel.\n\n**Feature Set:**\n\n- When2meet feature set:\n    - Time range selection and modification. It should be possible to expand the time range and shrink it easily.\n        - Days of the week.\n        - Over the next 30 days.\n    - Shareable and persistent link.\n- Event management:\n    - Locally persistent events list.\n\n**Production Checklist:**\n\n- Should I limit the number of people in an event? Eg. 20 people?\n- For how long should the event persist in the database before being erased? 20 mins?\n- Should have an error logging service dashboard that I can view.\n- Should have an uptime and traffic monitoring service dashboard that I can view.\n- Protect sensitive user info in Firebase.\n- How am I going to get user feedback for this?\n\n## Iteration #2\n\n## UI\nTalloc:\n![[Projects/Konflux/assets/talloc.png|500]]","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Projects/Math-Website/Math-Website":{"title":"Math Website","content":"\n## Next Actions\n- [ ] Figma Prototype.\n- [ ] Clean up the codebase and make it more pleasant to work with.\n- [ ] Meeting with dad to discuss requirements for the quiz.\n- [ ] Find and download and share with dad a year 11 and year 12 textbook pdf.\n- [x] Find a brand name and logo. Ensure that the domain is available and cheap\n![[Projects/Math Website/assets/idealmath-logo.png|300]]\n\n## Requirements\nDeadline for MVP: October\n### MVP\n- [ ] Figma design of the website.\n- [ ] Brand design and domains.\n    - Can get `idealmath.com.au` and `idealmath.(co|org|net)` but not `idealmath.com`.\n- [ ] Implement Figma design.\n\n### Stretch Goals\n- [ ] Plan the requirements for interactive problem elements. These would be an important distinguisher.\n\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Projects/Mum-Tutoring/Mum-Tutoring":{"title":"Mum Tutoring","content":"\nMum has expressed willingness to try it out. Do it.\n\n## Ideal Situation\n- Find 1 low commitment client to try out tutoring.\n- Low commitment.\n- Greatest preference is setting up a language school in a primary school.\n- Otherwise, next preference is 1-1 or 1-2 at home.\n\n---\n\n## Language School\n\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Projects/Structs-Graph-Visualiser/Graph-Visualiser-MVP":{"title":"","content":"# Graph Visualiser MVP\n\n**Goals**\n- ~~Animate static edge adding and removal. Bring in anime.js~~ ‚Üí on second thoughts‚Ä¶ let‚Äôs not do static edge adding and removal. It‚Äôs a bit of a hassle and we‚Äôd actually want to re-layout the graph since adding a static edge could ruin an otherwise aesthetic planar graph.\n- **~~Directedness**: need to modify the line SVG for each link to signal direction.~~\n- **~~Weightedness**: need to add a weight `\u003ctext\u003e` element to the midpoint of each link.~~\n    - Furthermore, need to be able to change an edge weight.\n- Integrate the graph visualiser into the codebase. Give typings to everything in the graph visualiser beforehand.\n- Animate BFS.\n- Be able to animate a matrix data structure (should be pretty easy. Just have an HTML table?). It would be challenging to coordinate and sync (probably needs to be embedded in the svg parent of the visualiser)\n- Bring the graph to the Structs codebase.\n- Be able to animate a queue. Similar challenges to animating a matrix.\n- Animate DFS.\n\n**Issues**\n- It would be good to add a vertex or edge without reloading the graph.\n    - For adding/removing edges without reloading the graph:\n    Just modify the DOM directly. Don‚Äôt bother recreating the graph. It‚Äôs adding a node that is problematic since we don‚Äôt know where to put the node statically.\n- Self-linking nodes. Maybe just don‚Äôt support them entirely and treat it as bad user input.\n\n**Ideas**\n- Add a legend for tracking visited nodes.\n- Could be useful to have a split pane UI or just some kind of division.\n    - 1 pane for the graph.\n    - 1 pane for the supporting data structures which should also be visualised and synced with the graph.\n\n**Excellent Resources**\n- [https://wattenberger.com/blog/d3#drawing-svg-shapes](https://wattenberger.com/blog/d3#drawing-svg-shapes)\n- [https://wattenberger.com/blog/react-and-d3](https://wattenberger.com/blog/react-and-d3)\n- [https://medium.com/ninjaconcept/interactive-dynamic-force-directed-graphs-with-d3-da720c6d7811](https://medium.com/ninjaconcept/interactive-dynamic-force-directed-graphs-with-d3-da720c6d7811)\n- [https://observablehq.com/@d3/force-directed-graph](https://observablehq.com/@d3/force-directed-graph)\n- [https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial)\n- [http://bl.ocks.org/fancellu/2c782394602a93921faff74e594d1bb1](http://bl.ocks.org/fancellu/2c782394602a93921faff74e594d1bb1)\n\n---\n\n## 13th Aug Notes\nMain challenge right now is creating the graph layout from an adjacency matrix/list, then being able to add new vertices and edges to it and have the graph re-layout.\n\nI‚Äôll just use force-directed layout.\n\nNodes connected by an edge are attracted through Hooke‚Äôs Law: $F_s=-kx$.\n\nNodes are repelled by the repulsive force between them. Coulomb‚Äôs Law: $F_c=k\\frac{q_1 q_2}{r^2}$.\n\nI‚Äôm using D3 and D3-force to generate the graph on the DOM rather than HTML canvas so that we can query and manipulate the graph the same way we do for the linked list and BST.\n\n**Excellent Resources**\n\n**Things to learn**\n\nI need to know the basics of svgs and how to work with them (this would really serve me in general).\n\nI need to learn the basics of d3.\n\n**Current state**\n![first demo|400](Projects/Structs%20Graph%20Visualiser/Graph%20Visualiser%20MVP/first-demo.png)\n\nWhen the button is pressed, it selects a node by ID and changes its fill and radius, then it selects a link by ID and changes its fill and radius.\n\nEvery node is assigned an ID and every link is given classnames that they can be queried by. We could make this follow a standard:\n\n- Vertices: `id=vertex-n`, where n is `0, 1, 2 ‚Ä¶, numVertices`\n- Edges: `class=edge-n-m`, where n and m are `0, 1, 2 ‚Ä¶, numVertices`\n    - In directed graphs, edge-n-m refers to the edge from n‚Üím specifically.\n    - We need to use classnames since it‚Äôs not possible to assign multiple IDs to an edge (we wanted multiple IDs so that edge-n-m and edge-m-n refer to the same element, in the case of undirected graphs).\n\nFollowing this standard makes it easy to lookup the node/edge on the DOM through an adjacency matrix. For example:\n\n![vertex and edge query example|500](Projects/Structs%20Graph%20Visualiser/Graph%20Visualiser%20MVP/vertex-edge-query.png)\n\nWhen we want to highlight the edge between 0 and 1 as part of a BFS animation for example, then we look up row 0 in the matrix, find an outgoing connection to 1, put it into a visit queue, then start the highlight animation on `.edge-0-1`.\n\nWe can now add a new vertex.\n\n![adding vertex screenshot|400](Projects/Structs%20Graph%20Visualiser/Graph%20Visualiser%20MVP/adding-vertex.png)\n\n2 problems arise: \n1. Adding a vertex forcefully reloads the graph since we cannot know where to put the vertex statically. This problem doesn‚Äôt exist for vertex removal since we can statically delete the vertex and all its edges.\n2. Adding an edge forcefully reloads the graph, but this can be worked around by statically inserting the edge. This also works for edge removal.\n\nFurthermore, when spawning new vertices, they would fly off the screen as you‚Äôd expect since there is no link to the new vertex, and so no force is acting to keep the vertex where you‚Äôd want it to be. \n\nI‚Äôm clamping the x and y displacement of nodes to be within the svg parent dimensions following this post: [https://stackoverflow.com/questions/9573178/d3-force-directed-layout-with-bounding-box](https://stackoverflow.com/questions/9573178/d3-force-directed-layout-with-bounding-box). This prevents the vertex from flying off the screen.\n\nWith this solution however, the vertices will still cluster around the edges, which looks very abnormal. To rectify this, I increased the central force magnitude with `forceManyBody` and `forceCenter`. I saw more natural spacing applied with a higher value for `forceManyBody`.\n\nAlso, as a bonus from using D3 and D3-force, the vertices are all draggable by the user, so they can rearrange the graph however they want.\n\n---\n\n## 14th Aug\nGoals today: \n- ~~Add a form for highlighting a vertex.~~\n- ~~Add a form for highlighting an edge.~~\n- ~~Add a form for inserting a new edge.~~\n- ~~Add support for directed graphs.~~\n- ~~Add support for weighted graphs.~~\n- ~~Try disabling the force animation. See: [https://stackoverflow.com/questions/47510853/how-to-disable-animation-in-a-force-directed-graph](https://stackoverflow.com/questions/47510853/how-to-disable-animation-in-a-force-directed-graph).~~\n\nI‚Äôve added some inputs that add new vertices, edges and highlights existing vertices and edges. These were quite straightforward to implement, they just make small changes to the underlying data structures and apply CSS rules after being selected by document.querySelector.\n\nI also added the arrowheads for directed graphs, going both 1-way and 2-ways, and I added labels to the midpoint of the links. I learned about `\u003cdefs\u003e`, `\u003cmarker\u003e` and the attributes: marker-end and marker-start when implementing the arrowheads, taking inspiration from this example: [http://bl.ocks.org/fancellu/2c782394602a93921faff74e594d1bb1](http://bl.ocks.org/fancellu/2c782394602a93921faff74e594d1bb1). I simply tweaked the attributes until it would fit the current graph proportions.\n\n![final first iteration demo|400](Projects/Structs%20Graph%20Visualiser/Graph%20Visualiser%20MVP/final-first-prototype.png)\n\n---\n\n## 15th Aug\nGoals today:\n- ~~Upload Gist of App.jsx, record a video, and tell Dom and Joanna.~~\n\nSome further ideas for the graph visualiser: \n- I think it would be very useful to also animate the supporting data structures for the graph. Eg.\nfor BFS, we could show an animation for the visit queue and how that changes,\nor for Dijkstra we could show the predecessor array and priority queue, etc.\n- I also think it'd be helpful to show the state of the underlying \ngraph data structure, ie. the contents of the adjacency matrix and adjacency \nlist. We wouldn't have to animate this, probably\n\n---\n\n## 8th Sep\nGoals today:\n- Get the graph to render inside the visualiser page of Structs.sh\n- Parameterise some sizing and force values.\n- Get unanimated add vertex and add edge buttons working.\n- Get DFS working and animated.\n- Record a sample of DFS to share.\n\nI need to figure out how the BST resets the styling after the animation concludes. I also need to figure out why the attribute animates from black to yellow and note white (the initial fill) to yellow.\n\n![integrated graph visualiser with dfs|700](Projects/Structs%20Graph%20Visualiser/Graph%20Visualiser%20MVP/integrated-prototype-demo.png)\n\n---\n","lastmodified":"2022-10-14T06:51:54.094891626Z","tags":null},"/Reading/Barefoot-Investor":{"title":"Barefoot Investor","content":"\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/Building-a-Second-Brain":{"title":"Building a Second Brain","content":"\n## Summary\nYour 'second brain' is a lifelong system serving as a knowledge repository, a place to manage the projects that are important in your life, and a place to steward your personal growth.\n\nüíé Attention and time are your most valuable assets. To produce your best work, leverage past research and insights from your second brain.\n\nüíé Creativity is an emergent property of a system that helps you connect ideas.\n\nüíé Use the steps of **CODE** (capture, organise, distil, express) when new information arises.\n\nüíé Use the structure of **PARA** (projects, areas, resources, archive) when organising information.\n\nüíé Seek to *produce* things rather than just *consume*.\n\n*Finished first reading on 15th September, 2022*.\n\n---\n## Information Overload and Mismanagement\n\u003e We consume more books, podcasts, articles, and videos than we could possibly absorb. What do we really have to show for all the knowledge we've gained? How many of the great ideas we've had or encountered have faded from our minds before we even had a chance to put them into practice?\n\nEven after more than 3 years studying computer science rigorously, I have little to show for it. I've taken notes, but I rarely ever view them more than once. I never captured and organised my notes in a way that sought to serve my future self. Similarly, I've consumed a number of self-help books, hundreds of hours of podcasts and insightful YouTube videos. If put on the spot, I would not be able to explain for more than a few minutes all the value I've derived from this information.\n\n\u003e A report from the International Data Corporation found that **26 percent** of a typical knowledge worker's day is spent looking for and consolidating information spread across a variety of systems.\n\nI found this statistic to be believable based on my experiences in internships and personal life. Every time I sat down to work on a project, whether personal or for work, I had to load all the context of the project into my working memory first, much like how running a process on a computer requires the program's instructions and data to be loaded onto RAM before running. Consolidating information in one place in a system you can trust will help to reduce the time taken to load the instructions and data into your biological brain.\n\nThe significant overhead of looking for information and transitioning into the focused state of mind required to execute on your best work is something discussed thoroughly in Cal Newport's book, 'Deep Work'. A second brain is one helpful strategy for reducing the friction associated with starting and resuming work on mid-term and long-term projects.\n\n\u003e **As knowledge workers, attention is our most scarce and precious resource.**\n\n\u003e Our knowledge is now our most important asset and the ability to deploy our attention our most valuable skill.\n\n## Creativity\n\u003e Innovation and impact don't happen by accident or chance. Creativity depends on a *creative process*.\n\nOne thing this book has taught me is that creativity is not necessarily some nebulous, innate quality of a person. Instead, for creativity to reliably arise, you require a process that helps you to connect ideas. In other words, creativity is an emergent property of a system that has accrued a [critical mass](https://en.wikipedia.org/wiki/Critical_mass) of insights.\n\n\u003e In its most practical form, creativity is about connecting ideas together, especially ideas that don't seem to be connected.\n\nCreativity is not something you can always manifest out of the void by force and on demand. \n\u003e \"It's not that I'm blocked. It's that I don't have enough research to write with power and knowledge about the topic. It always means, not that I can't find the right words, [but rather] that I don't have the ammunition.\" ‚Äî Sebastian Junger, author and filmmaker\n\nA way to counteract writer's block is to start from a point of abundance rather than scarcity.\n\u003e \"Instead of confronting a terrifying blank page, I'm looking at a document filled with quotes: from letters, from primary sources, from scholarly papers, sometimes even my own notes. It's a great technique for warding off the siren song of procrastination. Before I hit on this approach, I used to lose weeks stalling before each new chapter, because it was just a big empty sea of nothingness. Now each chapter starts life as a kind of archipelago of inspiring quotes, which makes it seem far less daunting. All I have to do is build bridges between islands\" ‚Äî Steven Johnson\n\n\u003e Professional creatives constantly draw on outside sources of inspiration - their own experiences and observations, lessons gleaned from successes and failures alike, and the ideas of others.\n\n### Divergent and Convergent Thinking \n![Divergent vs. convergent thinking|250](Reading/assets/divergent-convergent-thinking.png)\n([source](https://www.wrike.com/blog/convergent-thinking-vs-divergent-thinking/))\n\nWhen undertaking creative problem-solving, you'll go through cycles of divergence (the research and chaotic generation of a lot of ideas) and convergence (the pruning/distillation/selection of the choices to create the final product). The *capture* and *organise* part of [[Reading/Building a Second Brain#CODE|CODE]] is divergence, while *distillation* and *express* is convergence.\n\nAs a software engineer, this really aligns with the value of *prototyping*. You have a problem to solve but you often find value in tinkering with a very open mind to produce a barebones mock of the solution. When it comes time to converge, you enter a hyperfocused state of deep work, ruthlessly ignoring further ideas and distractions to get the project implemented and shipped.\n\nIn some way, the divergence and convergence model is basically another expression of the *explore and exploit* tradeoff. You're generally better off with generating a lot of insights (exploring), then pruning ruthlessly to surface the highest quality ideas to execute on (exploiting).\n\n## CODE\nTo work with your second brain, use the steps of **CODE**. On the encountering of new information:\n\n### Capture\n**C**apture ‚Äî keep what resonates. Be judicious and select only the most noteworthy ideas you encounter. They should evoke curiosity or some kind of a-ha moment. Use this as a signal that something is worth capturing.\n\u003e Adopting the habit of knowledge capture has immediate benefits for our mental health and peace of mind. We can let go of the fear that our memory will fail us at a crucial moment. Instead of jumping at every new headline and notification, we can choose to consume information that adds value to our lives and consciously let go of the rest.\n\n\u003e I can't think of anything more important for your creative life, and your life in general, than learning to listen to the voice of intuition inside. It is the source of your imagination, your confidence, and your spontaneity.\n\n### Organise\n**O**rganise ‚Äî save for actionability. Move your captured insights into the project folder that you will actually encounter again sometime later so that these captured insights can serve you.\n\u003e The best way to organise your notes is to *organise for action*, according to the active projects you are working on right now.\n\n\u003e One of the biggest temptations with organising is to get too perfectionistic, treating the process of organising as an end in itself.\n\n\u003e The temptation when initially capturing notes is to also try to decide where they should go and what they mean.\n\n### PARA\nTo organise for actionability, determine which bucket the idea falls in using the folders of **PARA**:\n1. **P**rojects ‚Äî the big things in your life you're working on currently with a clear beginning and ending. Examples:\n    - Complete C++ book.\n    - Noise-cancelling headphones.\n    - First blog post.\n    - Cairns vacation.\n\n    Listing your major projects additionally helps you easily identify and say no to the things that don't move you forward in them. What your projects are is a reflection of your identity and what you're committed to achieving.\n2. **A**reas ‚Äî long-term responsibilities that don't have a clear endpoint, but which might have a general standard to achieve (eg. spend more time with family, keep cholesterol below some amount, etc.) Examples:\n    - Nutrition\n    - Powerlifting\n    - Personal finance\n    - Software engineering\n    - Stoicism\n    - Writing\n    - Reading\n    - Typing\n    - Meditation\n3. **R**esources ‚Äî ideas and notes for future you. Anything that doesn't fall into projects or areas lands here. It encompasses a broad range of miscellaneous things that you have an interest in but which won't serve you at this moment. Eg. notes on coffee-brewing, leadership, nutrition, fishkeeping, philosophy, gifts, travel, renovation, etc.\n4. **A**rchive ‚Äî completed projects and anything in projects, areas or resources that you no longer have an interest in. \n    - You can satisfy both your hoarding tendencies and minimalist ideals by shoving things into the archive, knowing they're out of the way and that they'll still be there forever.\n    - Since you know that the archive is kept forever and is readily searchable, don't be afraid to ruthlessly evict and strip projects, areas and resources notes.\n    \nDon't make organising your second brain an obligation you begrudgingly comply with - you likely have enough of those already. Organising should be as trivial and frictionless as possible. Just execute the following algorithm:\n```C\nif (belongs in project p) placeInProject(p);\nelse if (belongs in area a) placeInArea(a);\nelse if (belongs in resource r) placeInResource(r);\nelse placeInArchive();\n```\n\nStop thinking about your second brain as a static wiki or library. Think instead of it as a dynamic *production system* whose fundamental purpose is to help you produce your best work. Consider about how kitchens are usually organised - you don't organise them based on alphabetical categories of 'fruits', 'vegetables', 'dairy', 'spoons', etc., instead you likely found you were better off organising the kitchen in a way that best supports your timely, frictionless cooking of meals.\n\n### Distil\n**D**istil ‚Äî find the essence and write the main takeaways. You should think: \"how can I make this as useful as possible for my future self?\" \n\u003e Every idea has an \"essence\": the heart and soul of what it is trying to communicate.\n\nBe a curator. **Ruthlessly** strip down the article or book you're reading and only choose to save the important stuff.\n\u003e In any piece of content, *the value is not evenly distributed*.\n\n\u003e Prune the good to surface the great.\n\n\u003e \"To attain knowledge, add things every day. To attain wisdom, remove things every day.\" ‚Äî Lao Tzu\n\nThe author recommends a process of 'progressive summarisation' where you emphasise your notes in tiers. For example:\n1. Apply bold text for notable parts \n2. Highlight a subset of the text you previously bolded to surface the critical insights. \n3. Write an executive summary using only the highlighted text in the previous step.\n\nThe purpose is to let your future self grasp and exploit the insight in very little time.\n\n**Investing in your future self**:\nWhile capturing and organising should be frictionless and unambiguous, distilling will take time and effort investment. Remember, the purpose of distillation is to serve your future self.\n\nIn taking notes mindfully with the intent of projecting forward the most intriguing thoughts to your future self, you are *deliberately practising* your distillation skills, and by extension, your communication skills. Occasionally try to open a note sometime in the past and see how effective your distillation skills were. If you can grasp the idea within seconds, you've done a good job.\n\nDistilled notes are far more *discoverable* than raw notes. A note with low discoverability is significantly less useful to your future self. Each time you distil an idea, you are investing in an asset that has the potentially to continuously output value over your lifetime.\n\u003e When the opportunity arrives to do our best work, it's not the time to start reading books and doing research. *You need that research to already be done*.\n\nYou should be writing things in your own words as much as possible. The **generation effect** is a memorisation phenomenon where actively producing material leads to better retention than simply reading and copying content passively.\n\u003e It doesn't matter how organised, aesthetically pleasing, or impressive your notetaking system is. It is only the steady completion of tangible wins that can infuse you with a sense of determination, momentum, and accomplishment.\n\n### Express\n**E**xpress ‚Äî show your work.\n\u003e A common challenge for people who are curious and love to learn is that we can fall into the habit of continuously force-feeding ourselves more and more information, but never actually take the next step and apply it.\n\nFor instance, at this moment I've read books on entrepreneurship and dating, neither of which I have made steps to doing (because I keep rationalising about myself being lacking in knowledge and time and not being in the stage of life where it's a priority).\n\n\u003e **Shift as much of your time and effort as possible from consuming to creating**.\n\nNotes are meant to be used, not collected.\n\n### Blog Writing\n\u003e Life has given you a set of experiences that provide you with a unique lens on the world. Through that lens you can perceive truths that can have a profoundly positive impact on you and others.\n\n\u003e Finding your voice and speaking your truth is a radical act of self-worth: Who are you to speak up? Who says you have anything to offer? Who are you to demand people's attention and take up their time?\n\n\u003e It is by sharing our ideas with other people that we discover which ones represent our most valuable expertise.\n\nI realised that I severely lack this in my life. Outside of my internship and the assignments I've submitted at university, I've never had the quality of my output judged by other people. This realisation, among many other motivations, has prompted me to pursue blog writing as a supplementary skill to software engineer that I want to improve at.\n\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/Clean-Code":{"title":"Clean Code","content":"TODO.\n\n### Coupling\nCoupling describes how dependent one thing is on another. In object-oriented programming, it refers to how dependent one class is on another.\n\nAlthough coupling is unavoidable in some instances, you should generally prioritise minimising coupling because it tends to improve the maintainability of your code. When changing a single part of a *highly coupled* system, you might find yourself changing many other parts of the system.\n\nAnother important point about low coupling is that it makes unit tests and integration tests easier to write *and* maintain.\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/Deep-Work":{"title":"Deep Work","content":"\n\u003e These ideas are sourced from Cal Newport's 'Deep Work' book, my personal observations about when I am most effective in complex technical endeavours and the blogs of some of the most effective software engineers out there.\n\n*Deep work* sessions are long *uninterrupted* periods of time where you are able to \"learn hard things fast and produce at an elite level\".\n\nTODO: Link context switching\n\nYour output quantity/quality is simply $\\text{Time spent} \\times \\text{Intensity of focus}$. Time is an incredibly scarce resource, so the main way to improve your output is to increase the intensity of focus.\n- Avoid emails like the plague. Mute all email notifications, at least for the deep work sessions you schedule.\n- Avoid context switching. This is incredibly deadly for software engineers where working on a project or fixing a bug requires you to hold so much information and context inside your brain's working memory (much like the volatile main memory of computer systems).\n\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/Dont-Make-Me-Think":{"title":"Don't Make Me Think","content":"\n\u003e \"The human brain's capacity doesn't change from one year to the next, so the insights from studying human behaviour have a very long shelf life. What was difficult for users twenty years ago continues to be difficult today.\" ‚Äî Jakob Nielsen\n\n\u003e In the last few years, making things more usable has become almost everybody's responsibility. Visual designers and developers now often find themselves doing things like interaction design (deciding what happens next when the user clicks, taps, or swipes) and information architecture (figuring out how everything should be organised).\n\nI've personally found this to be very true. Thinking about how to arrange user interactions and where to put UI components wherever it makes sense tends to be a huge frictional point during development.\n\nUsability is defined to be a function of the following parameters:\n- Useful ‚Äî does it fulfil an important requirement?\n- Learnable ‚Äî do you have to think to know how to use it?\n- Delightful\n- Desirable ‚Äî is it pleasing?\n\nIn English, usability is whether:\n\u003e A person of average ability and experience can figure out how to use the thing to accomplish something without it being more trouble than it's worth.\n\n## Don't Make Me Think\nDesign decisions exist on a spectrum from *obvious* to *requiring thought*. Always prefer designs on the *obvious* side (a useful rule when disputing design conflicts with someone else).\n![[Reading/assets/obvious-spectrum.png]]\nAlways make clickable things *obviously clickable*.\n\n## Web Users Are Brain-Dead By Default\n\u003e Design for **scanning**, not for reading.\n\nPeople execute a very surface-level auto-pilot search algorithm for what they need from your website. Unless their purpose is to actually read your web content (like reading the words of a blog post), they will only notice the most visually obvious parts of the page that signal some useful purpose to them, almost always clicking the first they encounter.\n![[Reading/assets/user-scanning-webpages.png|400]]\n\nPeople usually perform a depth-first search through your site, not a breadth-first search!\n\u003e \"... several studies have shown that the back button is second only to clicking on links as the most used feature on the web.\" ([source](https://blog.httpwatch.com/2007/10/03/60-of-web-users-cant-be-wrong-dont-break-the-back-button))\n\nAlternatively, people may immediately look for a search box and enter a query there.\n\nPeople will always prefer to 'muddle through' any product in general, and only resort to reading instructions as a last resort.\n\n### Web Conventions\nPrefer taking advantage of web conventions. Eg. the brand name and icon should usually exist on the top left of a navbar.\n\u003e Innovate when you *know* you have a better idea, but take advantage of conventions when you don't.\n\nFacebook, for example, popularised the usage of the hamburger icon. Leverage this convention to tuck away seldom used features behind the menu.\n![[Reading/assets/hamburger-menu-icon.png|100]]\n\n### Visual Hierarchy\n*Visual hierarchy* is the arrangement and styling of elements on a webpage according to their importance. You use this to control the order of elements in which the user's eyes scan through on the webpage.\n\n\u003e A good visual hierarchy saves us work by preprocessing the page for us, organising and prioritising its contents in a way that we can grasp almost instantly.\n\n### Visual Noise\nRuthlessly strip or de-emphasise the unimportant UI elements and text. \n\n**Krug's Third Law of Usability**:\n\u003e Get rid of half the words on each page, then get rid of half of what's left.\n\n### Format Text\n- Generously use informative heading text (h1, h2, h3, ...). This allows scanning for the part of the web page most interesting to the user.\n- Keep paragraphs very short.\n- Generously use bulleted lists.\n\n## Navigation\nNavigation serves two critical purposes: \n1. It tells you where you currently are.\n2. It tells you what's here.\n\n### Primary Navigation\nThe web convention for navigation is to have something that looks like this at the top of every content page and to highlight on the navigator which page you're currently on:\n![[Reading/assets/standard-site-header.png|500]]\n- Always have a logo and/or distinguished typeface for the site ID. It should always take you home.\n- Always keep the utility buttons minimal. Only show the most frequently used. The rest should be stowed away in the footer or in a different menu.\n\n### All Pages Must Have Names\n*All pages must have a name*, just as all streets have names and all intersections have street signs. It must be present on the document and given emphasis, and not just only present in the tab's name or highlighted in the navigation UI.\n![[Reading/assets/page-name-examples.png|600]]\n\n### Breadcrumbs\nBreadcrumbs are concise navigators that don't contribute much visual noise to a page. Here are some best practices:\n1. Place it at the top.\n2. Use the right chevron ‚Ä∫ to separate parts of it.\n3. Highlight the last breadcrumb.\n\n## Homepage\nHomepages must make clear *what the site is*. They are responsible for creating the first impression and generating traffic towards other subpages.\n\n**Note**: yes, it's unlikely that a large amount of traffic begins from the homepage (instead, it'll be from direct links to subpages from Google search results, for example), but often people will navigate to the homepage if they find the content on the subpages interesting. You still need to get the homepage right.\n\n**Things to have**:\n- The primary navigation at the top, including the site ID, utility buttons and navigation buttons.\n- A tagline, typically sitting right under or next to the site ID. Know the difference between a [tagline and a motto](https://chevronediting.com.au/tagline-motto-slogan-difference) however.\n- A welcome blurb.\n- A learn more link to a page with the finer details.\n- An embedded demo video of the product or business.\n\nDon't crowd the homepage with too many leads, especially promotions.\n\u003e \"Any shared resource will inevitably be destroyed by overuse.\" (see the [Tragedy of the Commons](https://en.wikipedia.org/wiki/Tragedy_of_the_commons))\n\n## Usability Testing\nUsability tests involve getting users individually to try out the website/app/product, seeing how they feel about it and if it solves their problems, and noting what problems they run into.\n\n\u003e After you've worked on a site for even a few weeks, you can't see it freshly anymore... The only way to find out if it really works is to watch other people try to use it.\n\n\u003e Testing one user early in the project is better than testing 50 near the end.\n\n\u003e Every web development team should spend **one morning a month** doing usability testing.\n\nFor each of those usability testing sessions, just get 3 people to use your website. Give them a list of tasks to do using your website, observe them, then take notes. The goal is to get actionable insights, not conduct a scientific experiment that would require a large sample size.\n- Those 3 people need not be from your target audience. They will still run into usability problems.\n- [There are strategies for finding users](https://www.nngroup.com/reports/how-to-recruit-participants-usability-studies/). The simple way is to ask your friends and acquaintances, or post an ad somewhere. Offer a decent stipend.\n    - You can use unmoderated remote testing like [UserTesting](https://www.usertesting.com/).\n\n### Design Disputes\nEveryone has their own concept of what UI is pleasant to use and what UI is not. \n\u003e \"All web users are unique. And all web use is basically idiosyncratic.\"\n\nThe only antidote to resolving design disputes about what UI to use and how it should be designed is to build out a crude version and give it to users for testing.\n\n## Affordances\nAn *affordance* is a set of visual cues in an element that imply the usage of that element.\n![[Reading/assets/affordance.png|500]]\n\n## Goodwill\nIn addition to designing sites that don't make you think, you should strive to make design decisions that are 'kind' to your user.\n\nSome examples not-so-kind practices:\n- Making you sign up *after* doing something time-consuming. Eg. if you've used some online video editor, you might have been prompted to make an account after you've made your *edits*. Sometimes they may even charge you to download your edited video.\n- Forcing you to supply personal details when signing up.\n- Incessant popups.\n- Hiding, de-emphasising or prefilling a button or input that they don't want you to click/change. Eg. automatically checking the 'subscribe me to all marketing emails' button.\n\nSome examples of kind practices:\n- Show all important information upfront, like fees, rather than hiding them away further along some process and exploiting the user's feeling of sunk cost.\n- Providing *real* FAQs.\n- Preventing common errors. My personal favourite is Gmail's warning popup that you might have forgotten to make an attachment.\n    ![[Reading/assets/gmail-attachment-warning.png|450]]\n\n\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/Fundamentals-of-Software-Architecture":{"title":"Fundamentals of Software Architecture","content":"\n\u003e Everything in software architecture is a trade-off ‚Äî First Law of Software Architecture\n\n---\n\nThe software engineering ecosystem is constantly in flux as the result of new technologies, capabilities and changing assumptions. Because of this, there is **no definition** for what *software architecture* really is, because any definition falls out of pace with the rapidly changing ecosystem. See [Martin Fowler's article on the trouble with defining architecture](https://martinfowler.com/ieeeSoftware/whoNeedsArchitect.pdf). \n\n\u003e Architects have an important responsibility to [continually] question assumptions and axioms left over from previous eras...\n\u003e All architectures are a product of their context.\n\nSoftware architecture is defined by its:\n1. **Structure**. Things like microservice/monolithic architecture, layered architecture, etc.\n2. **Architecture characteristics**. Things like reliability, availability, scalability, fault tolerance, security, etc.\n3. **Architecture decisions**. Such as the view not being able to talk directly to the database.\n4. **Design principles**. The guidelines to follow, such as REST.\n\n*Unknown unknowns* are the reason why having a big design up-front fails most of the time in software engineering, especially when compared to mature engineering disciplines like civil engineering. \n\u003e *Unknown unknowns* are the nemesis of software systems. Many projects start with a list of *known unknowns*.\n\nIt's the unknown unknowns that *force* architectures to be iterative, hence the success of Agile.\n\u003e All architecture becomes iterative; it's only a matter of time.\n\n\nTODO: continue at Part I.\n\n\n## Career\n- You should ruthlessly seek to gain experience with different technologies. Your value scales better with breadth than depth.\n- You must learn leadership and negotiation skills.\n    \u003e Leadership skills are at least half of what it takes to become an effective software architect.\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/How-to-Not-Die-Alone":{"title":"How to Not Die Alone","content":"\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/Mans-Search-For-Meaning":{"title":"Man's Search For Meaning","content":"\nüíé It is always possible to be a *good man* in the most hellish of conditions, and to have the strength of character to give away your last ration despite suffering extreme starvation. Always be a good man and live by your own principles, independently of external influences.\n\nüíé Suffering is omnipresent and unavoidable, but when framed in a meaningful context, you become unbreakable and can turn enduring your predicament into a triumph.\n\nüíé *Meaningful suffering* is integral to mental well-being.\n\nüíé Love is the highest goal to which you can aspire and along with meaningful work, is another source of strength to draw upon in your endurance of extreme suffering.\n\n\u003e (From the preface) For success, like happiness, cannot be pursued; *it must ensue*, and it only does so as the unintended side-effect of one's dedication to a cause greater than oneself.\n\n--- \n\n## Suffering\nSuffering is constant and unavoidable. Like a gas expanding to fill a chamber, suffering expands to fill your conscious mind. Happiness is relative to your current conditions and can be manifested in spite of extreme suffering.\n\u003e Suffering is an ineradicable part of life, even as fate and death. Without suffering and death, human life cannot be complete.\n\nTo face the entirety of your suffering despite your fear and laugh at the absurdity of it all diminishes and detaches you from suffering.\n\u003e Humour was another of the soul's weapons in the fight for self-preservation. It is well known that humour, more than anything else in the human  make-up, can afford an aloofness and an ability to rise above any situation, even if only for a few seconds.\n\n\u003e The attempt to develop a sense of humour and to see things in a humourous light is some kind of a trick learned while mastering the art of living.\n\n**You must see your suffering as a means to some end**. You must always have some future end in mind to anchor your perception of your suffering ‚Äî to put all the pain you go through into a context that is deeply meaningful to you. When you accomplish that, your suffering is something that empowers you and bolsters an unbreakable will.\n\u003e \"Emotion, which is suffering, ceases to be suffering as soon as we form a clear and precise picture of it.\" ‚Äî Spinoza\n\n\u003e One could make a victory of those experiences, turning life into an inner triumph, or one could ignore the challenge and simply vegetate, as did a majority of the prisoners.\n\nOne interesting observation is that statistically, more prisoners died around the end of the year, near Christmas, than at other times throughout the year. The reason is simply the depressing disappointment of having been through another year without being liberated. Not having an end in sight to the suffering, or at least the hope and belief in an end, is itself one of the major causes of suffering. \n\u003e ... it was the limitlessness of the term of imprisonment which was most acutely felt.\n\n\u003e Those who know how close the connection is between the state of mind of a man ‚Äî his courage and hope, or lack of them ‚Äî and the state of immunity of his body will understand that the sudden loss of hope and courage can have a deadly effect.\n\nYou must have strong faith in your *why*, else you become apathetic.\n\u003e The prisoner who had lost faith in the future ‚Äî his future ‚Äî was doomed. With his loss of belief in the future, he also lost his spiritual hold; he let himself decline and became subject to mental and physical decay.\n\nYou should be willing to fully experience suffering, proudly even, when the purpose of it becomes clear to you. When the true meaning of the suffering is ascertained and you trust in it with every fibre of your being, your will becomes unbreakable and you no scramble to avoid torture.\n\u003e ... someone looks down on each of us in difficult hours ‚Äî a friend, a wife, somebody alive or dead, or a God ‚Äî and he would not expect us to disappoint him. He would hope to find us **suffering proudly** ‚Äî not miserably ‚Äî knowing how to die.\n\n\u003e Once the meaning of suffering had been revealed to us, we refused to minimise or alleviate the camp's tortures by ignore them or harbouring false illusions and entertaining artificial optimism.\n\nEven when liberated, the prisoners were not suddenly overcome with joy. In fact, those who for which '*life didn't expect much from*' resumed their apathy and resentment. You must always have something to look forward to ‚Äî whether it be a loved one whose embrace you yearn for, or an unfinished piece of work, or a passion project, or charitable work.\n\n\u003e Researchers at the Yale University School of Medicine \"have been impressed by the number of prisoners of war of the Vietnam war who explicitly claimed that although their captivity was extraordinarily stressful ‚Äî filled with torture, disease, malnutrition, and solitary confinement ‚Äî they nevertheless... benefited from the captivity experience, seeing it as a growth experience.\"\n\n## Love\nThe most beautiful passage I've ever read on love:\n\u003e And as we stumbled on for miles, slipping on icy spots, supporting each other time and again, dragging one another up and onward, nothing was said, but we both knew: each of us was thinking of his wife. Occasionally I looked at the sky, where the stars were fading and the pink light of the morning was beginning to spread behind a dark bank of clouds. But my mind clung to my wife's image, imagining it with an uncanny acuteness. I heard her answering me, saw her smile, her frank and encouraging look. Real or not, her look was then more luminous than the sun which was beginning to rise. A thought transfixed me: for the first time in my life I saw the truth as it is set into song by so many poets, proclaimed as the final wisdom by so many thinkers. The truth ‚Äî that **love is the ultimate and the highest goal to which man can aspire**. Then I grasped the meaning of the greatest secret that human poetry and human thought and belief have to impart: *The salvation of man is through love and in love*. **I understood how a man who has nothing left in this world still may know bliss, be it only for a brief moment, in the contemplation of his beloved**. In a position of utter desolation, when man cannot express himself in positive action, when his only achievement may consist in enduring his sufferings in the right way ‚Äî and honourable way ‚Äî in such a position man can, through loving contemplation of the image he carries of his beloved, achieve fulfilment. For the first time in my life I was able to understand the meaning of the words, \"The angels are lost in perpetual contemplation of an infinite glory.\"\n\n\u003e Once, an elderly general practitioner consulted me because of his severe depression. He could not overcome the loss of his wife who had died two years before and whom he had loved above all else. Now, how could I help him? What should I tell him? Well, I refined from telling him anything but instead confronted him with the question, \"What would have happened, Doctor, if you had died first, and your wife would have had to survive you?\" \"Oh,\" he said \"for her this would have been terrible; how she would have suffered!\" Whereupon I replied, \"You see, Doctor, such a suffering has been spared her, and it was you who have spared her this suffering ‚Äî to be sure, at the price that now you have to survive and mourn her.\" He said no word but shook my hand and calmly left my office. **In some way, suffering ceases to be suffering at the moment it finds a meaning, such as the meaning of a sacrifice**.\n\n## Good and Evil\nIn conditions of extreme suffering, people polarise towards their virtues and vices. We'd like to believe we're all decent people with a strong character, values and morals, however you should never cast judgement on anyone else for the way they are. You too have it in you to be a monster.\n\u003e No man should judge unless he asks himself in absolute honesty whether in a similar situation he might not have done the same.\n\nIt is possible, even under the most hellish conditions, to be a good man. All things in life can be taken from you, apart from your ability to abide by your own principles ‚Äî the last of human freedoms.\n\u003e We who lived in concentration camps can remember the men who walked through the huts comforting others, giving away their last piece of bread. They may have been few in number, but they offer sufficient proof that everything can be taken from a man but one thing: **the last of the human freedoms - to choose one's attitude in any given set of circumstances**, to choose one's own way.\n\nYou always have the capacity to choose what to do, or at least how to think. It is making the difficult and courageous decision to unconditionally abide by your principles which represents the greatest of triumphs, especially when you suffer for it.\n\u003e And there were always choices to make. Every day, every hour, offered the opportunity to make a decision, a decision which determined whether you would or would not submit to those powers which threatened to rob you of your very self, your inner freedom; which determined whether or not you would become the plaything of circumstance, renouncing freedom and dignity to become moulded into the form of the typical inmate.\n\n\u003e It is this spiritual freedom, which cannot be taken away, that makes life meaningful and purposeful.\n\nExternal influences do nothing to determine what kind of person you become, it simply polarises you towards your vices or virtues. Even being subjected to extreme suffering does not cause one to regress to animalistic behaviour, unless you let it. Ultimately, you, *and you alone*, are completely responsible for manifesting the person you are, independently of external influences.\n\u003e ... in the final analysis it becomes clear that the sort of person the prisoner became was the result of an inner decision, and not the result of camp influences alone.\n\nFrankl argues that your psyche cannot be predicted by biological, psychological and sociological preconditions. I interpreted this as more of a statement about the complexity of human nature rather than a statement about free will.\n\u003e Man has both potentialities within himself; which one is actualised depends on decisions but not on conditions.\n\nA universal observation is that decent and indecent people exist in all groups, regardless of what group it is ‚Äî whether it's prisoners and guards, slaves and masters, or rulers and peasants, etc.\n\u003e It is apparent that the mere knowledge that a man was either a camp guard or a prisoner tells us almost nothing. Human kindness can be found in all groups, even those which as a whole it would be easy to condemn.\n\n---\n\n## Logotherapy\n*Logos* is the Greek word describing '*meaning*'. Logotherapy is a school of therapy centered on the pursuit of meaning and its criticality in one's mental well-being.\n\n\u003e To be sure, man's search for meaning may arouse inner tension rather than inner equilibrium. However, **precisely such tension is an indispensable prerequisite of mental health**. There is nothing in the world, I venture to say, that would so effectively help one to survive even the worst conditions as the knowledge that there is a meaning in one's life.\n\nIn my experience, feeling stress and seeing my own momentum towards goals and personal growth is a huge component of my mental health and I would be significantly less happy without struggling through something meaningful ‚Äî mending a gap I see as critical in my life. I must always be conscientious and dissatisfied with my life in some way in order to feel any form of mental robustness.\n\u003e Thus it can be seen that **mental health is based on a certain degree of tension**, the tension between what one has already achieved and what one still ought to accomplish, or the gap between what one is and what one should become.\n\n\u003e What man actually needs is not a tensionless state but rather the striving and struggling for a worthwhile goal, a freely chosen task.\n\nCaving into impulsive sexual desires leaves one feeling profoundly meaningless. You mustn't see it as purely impulsive pleasure ‚Äî it should be a means to some ends. Unrestricted indulgence deprives it of meaning.\n\u003e Existential frustration often eventuates in sexual compensation... sexual libido becomes rampant in the existential vacuum.\n\n\u003e Sex is justified, even sanctified, as soon as, but only as long as, it is a **vehicle of love**. Thus love is not understood as a mere side-effect of sex; rather, sex is a way of expressing the experience of that ultimate togetherness which is called love.\n\nThink: *what is life asking of me*, rather than *what you are asking of life*. Asking for the meaning of life is a fruitless philosophical trap. Instead, the meaning of life, which differs day-to-day and man-to-man, is simply something to be discovered in your current circumstances. Live to serve.\n\u003e The true meaning of life is to be discovered in the world rather than within man or his own psyche.\n\n\u003e The more one forgets himself ‚Äî by giving himself to a cause to serve or another person to love ‚Äî the more human he is and the more he actualises himself.\n\nMoments of unavoidable suffering as part of the pursuit of some end is a prime opportunity to grow oneself and find meaning.\n\u003e ... to transform a personal tragedy into a triumph, to turn one's predicament into a human achievement.\n\n\u003e To suffer unnecessarily is masochistic rather than heroic.\n\n\u003e In accepting this challenge to suffer bravely, life has a meaning up to the last moment, and it retains this meaning literally to the end.\n\n**Paradoxical intention**: When experience stress or anxiety, resolve to experience it fully rather than trying to reduce it. Apply a sense of humour around this reversal of intention. \"By this treatment, the wind is taken out of the sails of the anxiety.\" When dealing with the anticipatory anxiety around having a sleepless night, for example, resolve instead to stay awake as long as possible.\n\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/Millionaire-Fastlane":{"title":"Millionaire Fastlane","content":"\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/Never-Split-the-Difference":{"title":"Never Split the Difference","content":"\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/Pragmatic-Programmer":{"title":"Pragmatic Programmer","content":"\n### Being a Craftsman\n\u003e Care about your craft.\n\n\u003e Never run on auto-pilot. Constantly be thinking and critiquing your work in real time.\n\nThere is always opportunity to exercise your individual craftsmanship and individuality.\n\n### Being a Student\n\u003e Every day, work to refine the skills you have and to add new tools to your repertoire.\n\n\u003e Your knowledge and experience are your most important day-to-day professional assets.\n\n\u003e Your ability to learn new things is your most important strategic asset.\n\n#### Learning Goals\nSourced from the chapter, \"Your Knowledge Portfolio\".\n- Learn a new language a year, at least. \n- Read at least one engineering book each month. Try to match the book's topic with something that will aid in the current project you're working on.\n\t\u003e While there's a glut of short-form essays and occasionally reliable answers on the web, for deep understanding you need long-form books.\n- Read at least one non-technical book each month.\n- Attend social meetups and conferences.\n- Constantly read about latest technology trends.\nThe purpose need not be to advance your career or enrich your resume. It should be to constantly push your ability to learn and think deeply.\n\n### Being Pragmatic\nConstantly consider the business value in your work.\n\n### Being a Team Player\n\u003e Trust in a team is absolutely essential for creativity and collaboration according to the research literature.\n\n\u003e There's one technique that you must use if you want people to listen to you: *listen to them*.\n\n\u003e Unless you work in a vacuum, you need to be able to communicate. The more effective that communication, the more influential you become.\n\n#### Stone Soup\nWhen you're in a unique position with an idea but would struggle to marshal the team's focus and resources and approval to work towards it, simply start it by yourself. \n\u003e People find it easier to join an ongoing success. Show them a glimpse of the future and you'll get them to rally around.\n\n### Software Entropy\nSoftware systems will always tend to accumulate software rot and technical debt. \n\nDo your absolute best to not leave bad designs and poor code unfixed. Have patience and fix each of them as they arise. Every time you allow 'broken windows' to stay unfixed, you let entropy win and start atrophying you and your team's morale. *[Hopelessness is contagious](https://pubmed.ncbi.nlm.nih.gov/7932064/)*\n\u003e Neglect accelerates software rot faster than any other factor.\n\n\u003e Just tell yourself, \"No broken windows.\"\n\nWhen you find a problem. Fix it right now.\n\n### ETC\nGood designs are *easier to change* (*ETC*) than bad design. Generally, prefer to adopt an approach that is easier to change. As a general (and oversimplified but still useful) rule, the quality of a design is measured by the ease with which you can make changes to that design.\n\nThis implies that you should always prefer decoupled and cohesive modules over tight coupling.\n\n### DRY\n*Don't repeat yourself* is a classic acronym that means much more than just not copy and pasting your code and tweaking it slightly. The main concern is duplication of *knowledge*. When knowledge is duplicated, it is no longer a single source of truth and therefore can cause inconsistency.\n\n\u003e Some instances of code duplication are not violations of DRY. If tweaking one thing does not mean tweaking another, then those things are separate pieces of *knowledge*, generally.\n\nFor example, two different CSS rules have `float: left;` doesn't necessarily count as a violation of DRY.\n\nBlindly striving towards DRY can lead to forced abstractions and over-engineered code that's harder to maintain.\n\n### Orthogonality\nTwo parts of a software system are said to be *orthogonal* if changes in one do not affect the other. Always strive to make unrelated parts of a system orthogonal. Ie. decouple and isolate things as much as you can.\n\nFor example, the user interface should usually be orthogonal to the database schemas.\n\nThe primary purpose of [[Reading/Pragmatic Programmer#Refactoring|refactoring]] is to improve orthogonality between parts of the software and improve readability.\n\n### Tracer Bullets\n\n![[Reading/assets/tracer-bullet-development.png|550]]\n([source](https://www.freecodecamp.org/news/lessons-learned-from-the-pragmatic-programmer-and-the-clean-coder/))\n\n### Prototyping\nPrototyping is a standard way to try out the feasibility of an idea and prove a concept without significant investment in time and resources. What you produce is meant to be discarded.\n\u003e Prototyping is a learning experience. Its value lies not in the code produced, but in the lessons learned. That's really the point of prototyping.\n\nThings that are great candidates for prototyping are:\n- System architecture. Draw out the main components and how they interact with each other on LucidChart.\n- UI. Draw it on Figma or sketch something very low fideltiy on paper.\n- Algorithms. Write it out in quick-to-write scripting language.\n\nWhen considering the adoption of new technologies or frameworks, a prototype is an excellent way to test their feasibility before committing to them.\n\n### Debugging\n\u003e Embrace the fact that debugging is **problem solving**, and attack it as such.\n\nWhen fixing bugs, *always start by reproducing it*. Write a test that executes those steps and asserts the state to be what you expect in the bug-free version. Use a debugger to step through the code via the failing test.\n\n- **Binary chopping**:\n\tUse a divide-and-conquer binary search approach to isolating where the problem might be. You'll converge on the problematic code very quickly.\n- **Logging**:\n\tAlso called *printf debugging*. This is primitive, but effective for simple bugs. It's still a good strategy for debugging problems where time is a factor such as concurrent programs.\n- **Rubber ducking**:\n\tExplain the bug to someone else. It's effective because it forces you to explicitly state your assumptions and consequently begin to question them, which often leads to the bug source. A rubber duck is traditionally used. \n\n### Assertions\n\n\n### Design by Contract\n\n\n### Finite State Machines\n\n### Observer Pattern\n\n### Publish/Subscribe\nPublish/subscribe (pubsub) is a generalisation of the observer pattern.\n\n### Transforming\nIt's helpful to think of programming problems as data transformation problems. Consider what pipeline of transforms is necessary to get from the input to the expected output.\n\nSome languages let you use a pipeline operator like `|\u003e` to write something like\n`\"hello world\" |\u003e capitaliseTitle() |\u003e print()`, which is equivalent to `print(capitaliseTitle(\"hello world\"))`. The outcome is the same, but the pipelining approach is often a very different way of thinking that suits a lot of programming problems and leads to flatter and cleaner code.\n\nThe programming language doesn't need to support a pipelined operator for you to think and express code in this manner.\n\n### Inheritance Tax\nInheritance couples a child to its parent and all its ancestors. Even worse, any object calling methods on the child is *also* coupled to its parent and all its ancestors. There's also the multiple inheritance problem... and the lack of support for it in languages like Java and the confusing semantics of it in C++.\n\nAnother problem is that when you inherit from a class, you are probably unnecessarily inheriting a bloated set of methods and properties. This does have some performance impacts, causing the object to take longer to initialise and more memory to store ([source](https://stackoverflow.com/questions/54362591/does-inheritance-can-affect-performances-of-an-application)).\n\nIn general, always prefer these 3 alternatives instead of inheritance.\n1. Interfaces.\n2. Delegation.\n3. Mixins and traits.\n\n### Managing Configuration\nIf your app needs some configuration values (like IP addresses, credentials, etc.) that might change after deployment to production, you should keep them behind an external service that serves them.\n\nIt should not be the case that you have to restart your application for changes to configuration to take effect, especially if your app must be highly available.\n\nConsider *Configuration as a Service*.\n\n## Refactoring\nRefactoring is the \n\u003e \"disciplined technique for restructuring an existing body of code, altering its internal structure without changing its external behaviour.\" ‚Äî Martin Fowler.\n\n\u003e Time pressure is often used as an excuse for not refactoring. But this excuse just doesn't hold up: *fail to refactor now, and there'll be a far greater time investment to fix the problem down the road*, when there are more dependencies to reckon with.\n\n\u003e Manage the pain: if it hurts now, it's going to hurt more later... Don't live with broken windows.\n\nAlways have a test suite to provide insurance that your refactoring efforts don't break the original design's correctness. In other words, have confidence you don't cause regression bugs.\n\n## Testing\nAn underrated reason to write tests is because it forces you be a client of your code rather than a consumer.\n\u003e A test is the first user of your code.\n\nWhen you're a client of the code, you're **forced to understand the specifications for the code you intend to write** rather than 'working it out as you go along'. It's a common mistake to start coding a function without a clear understanding of its inputs and outputs, and what the [happy path](https://en.wikipedia.org/wiki/Happy_path) is and what the error cases are.\n\n\u003e Making your stuff testable also reduces its coupling.\n\nA fortunate consequence of writing unit tests is that it helps you decouple the thing you're testing from the rest of the system. For example, if you're testing a function that needs to talk with the database, then you would need to pass in a mock database interface from the unit test. This helps with decoupling that function because it might otherwise directly consume a global database handle.\n```c++\nvoid do_something() {\n\tglobal_db.get_thing();\n}\n\nvoid do_something(Database db) {\n\tdb.get_thing();\n}\n```\n\n\u003e All software you write *will* be tested‚Äîif not by you and your team, then by the eventual users‚Äîso you might as well plan on testing it thoroughly.\n\n\u003e You really only have a few choices:\n\t- Test first (TDD)\n\t- Test during\n\t- Test never (which is what people mean when they say \"test later\")\n\nTesting *is* programming. It's not something to be thrown over the wall to dedicated 'testers'.\n\nIt is not surprising for well managed projects to have more testing code than production code. \n\n**Caveat about coverage**: high coverage is correlated with robust software, however achieving high coverage should not give you confidence in your software's correctness. A *true* measure of coverage is not the percentage of lines you hit, it's the percentage of all possible program states you hit (which is mostly impossible to cover in practice).\n\n### TDD\nBeing a TDD zealot and blindly following its steps rigorously all the time might seem like good practice, however it can lead you to endlessly polish the easy problems and build out features from the bottom-up rather than focusing on the end-to-end. Always remember the bigger picture of what you need to get done in the long term.\n\n### Ad-Hoc Testing\nAd-hod testing is when you test the system in an improvisational way (by essentially just stumbling around observing for errors). It's a good way for generating more unit tests that you didn't think of.\n\n### Property-Based Testing\nTODO.\n\nProperty-based testing is about verifying invariants. It's complementary to your regular suite of unit tests.\n\n## Security\n1. Minimise attack surface area.\n\t- Never trust user inputted data. Always sanitise it before usage and storage.\n\t- Less code is easier to secure. Prefer less code.\n2. Principle of Least Privilege. If a task requires a certain authorisation level, then grant the minimum set of permissions possible and revoke it as soon as possible.\n1. Set secure default values. Let the user decide how they trade off convenience for security.\n2. Encrypt sensitive data. Never store personally identifiable information in plaintext. In the event of a breach, the encrypted values are useless to the attacker.\n3. Maintain security updates. When you need a security update, your system is vulnerable to a *known* exploit.\n\n## Naming\nThink *\"what is my motivation for creating this?\"*\n```java\npublic void deductPercent(double amount);\n\n// ... what is my motivation for creating this? Oh, it's to apply a discount.\n\npublic void applyDiscount(Percentage amount);\n```\n\n## Agile\nThe *Pragmatic Programmer* authors, Andy and Dave, were part of the group of software developers who got together to write the [Agile manifesto](https://agilemanifesto.org/) (another member of that group was Robert C. Martin, the author of *Clean Code*).  \n\n\u003e \"Agile is not a noun\"\n\nAgile mandates nothing about what processes you follow. It's literally just a set of guiding values.\n\nDon't blindly follow Scrum/Lean/XP, etc. Take what you find works best for your team from each methodology and adapt them to complement your idiosyncrasies.\n\n## Requirements\nClients never actually know what they want.\n\u003e Our job is to help people understand what they want.\n\n\u003e Requirements are learned in a feedback loop.\n\nGiant requirements documents aren't really necessary or practical. Instead, you should write *user stories*, which are terse specifications that capture business value. When specified in user stories, you can track the progress of a project by moving cards across columns, which seems to work well in practice.\n\n## Puzzles\nJust take a break from the problem and you'll find that you'll come up with new insights over the break.\n\u003e \"To put it plainly, people who were distracted did better on a complex problem-solving task than people who put in conscious effort.\" ‚Äî *Psychology Today* ([source](https://www.psychologytoday.com/au/blog/your-brain-work/201209/stop-trying-solve-problems))\n\n## Collaboration\nConway's Law states that:\n\u003e Organisations which design systems are constrained to produce designs which are copies of the communication structures of these organisations.\n\n## Automation\nNever rely on manual procedures. Eg. people should never have to:\n- Run more than 1 command to create a build.\n- Run more than a few commands to set up the project for development.\n- Run more than 1 command (or 1 click) to run tests.\n- Deploy to production manually.\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/Reading":{"title":"Reading","content":"\nTODO: this is a cool idea: https://jamesclear.com/book-summaries. Do 3 sentence summaries for each book that has made an impact on the way you think.\n-   What are the main ideas? Eg. write down the 3-5 best ideas you sourced from the book.\n-   If I implemented one idea from this book right now, which one would it be?\n-   How would I describe the book to a friend?\n\nTODO: this article is really worth re-reading: https://jamesclear.com/reading-comprehension-strategies. \n\n---\n**My favourite books**:\n- Man's Search for Meaning by Viktor Frankl.\n- Deep Work by Cal Newport.\n\n---\n## Software Engineering\n### Pragmatic Programmer\n[[Reading/Pragmatic Programmer|Pragmatic Programmer]] by Andy Hunt and Dave Thomas.\n\n### Don't Make Me Think\n[[Reading/Don't Make Me Think|Don't Make Me Think]] by Steve Krug.\n\n### Refactoring UI\n\n### Programming TypeScript\n\n### Automate the Boring Stuff\n\n### The Elements of Computing Systems\n\n### The Complete Software Developer's Career Guide\n(I only read ~30% of the book because most of the early chapters are targeted to newcomers to the industry.)\n\n### Learning React\n\n### Think Like a Programmer\n[[Reading/Think Like a Programmer|Think Like a Programmer]] by Anton Spraul. I didn't complete this book since it wasn't introducing many new perspectives to problem-solving. Regardless, the takeaways from this book were helpful in validating what I learned through experience to be helpful in solving problems:\n- Always start by articulating the problem in your own words, and write *precisely what the constraints are*.\n- *Always have a plan* with intermediate goals.\n- Stay alert for *analogies*, i.e. common patterns between the current problem and past problems.\n\n---\n## Biographies\n### Man's Search For Meaning\n[[Reading/Man's Search For Meaning|Man's Search For Meaning]] by Viktor E. Frankl. This book made me feel capable of having an unbreakable will in moments of extreme suffering and remaining stoic and sanguine independent of predicaments. The passages on Frankl describing his love for his wife made me cry hard.\n- It is always possible to be a *good man* in the most hellish of conditions, and to have the strength of character to give away your last ration despite suffering extreme starvation.\n- *Meaningful suffering* is integral to mental well-being.\n- Love is the ultimate goal to aspire to. Work and love present the most fundamental sources of strength to draw upon when your resolve is tested.\n\n\u003e \"He who has a *why* to live for can bear with almost any *how*\" ‚Äî Nietzsche.\n\n### Can't Hurt Me\n\n---\n## Self-Help, Skills \u0026 Philosophy\n### Building a Second Brain\n[[Reading/Building a Second Brain|Building a Second Brain]] by Tiago Forte. This book presents a set of low-level tactics that helped me streamline my management of knowledge, tasks and goals.\n- You should make a digital personal knowledge management system that is production-focused where insights you capture and distil are readily discoverable and exploitable.\n- Attention and time are your most valuable assets. A second brain prepares you to focus and execute, knowing all your research is done and can be leveraged at a whim.\n- Start *producing* things in addition to consuming things.\n\n### Millionaire Fastlane\n[[Reading/Millionaire Fastlane|Millionaire Fastlane]] by MJ DeMarco.\n\n### Never Split the Difference\n[[Reading/Never Split the Difference|Never Split the Difference]] by Chris Voss.\n\n### Deep Work\n[[Reading/Deep Work|Deep Work]] by Cal Newport.\n\n### Ikigai\nIkigai by Francesc Miralles and Hector Garcia. 'Ikigai' means 'reason for being'.\n- To live a meaningful work life, do: what you are *good* at, what you *love*, what the *world needs*, what you can be *paid* for. \n- Don't retire.\n- Be a good friend and be well integrated in your community.\n\n### The Male Advantage\n[[Reading/The Male Advantage|The Male Advantage]] by Kris Sturmey.\n\n### The Simple Path to Wealth\n[[Reading/The Simple Path to Wealth|The Simple Path to Wealth]] by J. L. Collins\n\n### Barefoot Investor\n[[Reading/Barefoot Investor|Barefoot Investor]] by Scott Pape.\n\n### How to Not Die Alone\n[[Reading/How to Not Die Alone|How to Not Die Alone]] by Logan Ury.\n\n### The Defining Decade\n[[Reading/The Defining Decade|The Defining Decade]] by Meg Jay.\n\n### So Good They Can't Ignore You\n\n### Atomic Habits\n\n### How to Win Friends and Influence People\n\n### Extreme Ownership\n\n### Rich Dad Poor Dad\n[[Reading/Rich Dad Poor Dad|Rich Dad Poor Dad]] by Robert Kiyosaki. This book made me more ruthlessly pursue learning and affirms the idea that investing in your own knowledge offers the greatest returns.\n- Your knowledge is the greatest wealth vehicle, by far.\n- Sales, marketing and negotiation are skills you must learn.\n- Aim to aggressively acquire assets with each dollar you get and avoid liabilities as much as possible.\n\n\u003e **The single most powerful asset we all have is our mind.** If it is trained well, it can create enormous wealth\n\n### The Psychology of Money\n[[Reading/The Psychology of Money|The Psychology of Money]] by Morgan Housel.\n\n---\n## Science\n### Why We Sleep\n\n\n### Spark\n[[Reading/Spark|Spark: The Revolutionary New Science of Exercise and the Brain]] by John Ratey.\n- Exercise is the most effective and accessible way to optimise the brain. It drives neurogenesis, improving learning, memory and executive functions.\n- Stress and recovery is a fundamental paradigm in biology. Stop thinking that stress is bad for you ‚Äî it's essential towards coming back stronger, with the alternative being degeneration if you never subject yourself to stress.\n- Exercise tunes your neurotransmitter, hormones and growth factor to evolutionarily-optimal levels, rendering you bulletproof against stress, anxiety and depression, consistently leaving you ready to rise to life's challenges.\n\n---\n\n## Fiction\n### Crime and Punishment\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/Rich-Dad-Poor-Dad":{"title":"Rich Dad Poor Dad","content":"\nThe main takeaway for me is that *you must be financially literate* and ruthlessly invest in your knowledge. This means being bold and learning things that you dislike or are fearful of such as sales, negotiation, public speaking, leadership, etc. This book gave me confidence the idea that my knowledge (or time and attention, two expensive inputs to attaining knowledge) is the greatest asset I possess. Constantly look and read about new approaches to investing that you've never considered or have much knowledge in.\n\nüíé Aggressively collect assets and minimise accruing liabilities.\n\nüíé Your knowledge is the greatest wealth vehicle. It offers the greatest returns out of all other possible investment options. You must constantly learn things and get better at learning itself.\n\nüíé Always strive to learn *a little about a lot*. You must constantly pick up new skills, especially in areas that frighten you such as sales and public speaking.\n\nüíé Sales, marketing and negotiation are skills you can't afford to suck at if you want the most out of life.\n\nüíé Find personal heroes and learn and be inspired by the way they think.\n\n---\n\n## Knowledge\nYou *must* be financially literate (and disciplined). It is pointless to be rich and not understand the differences between assets and liabilities.\n\u003e Money is one form of power. But what is more powerful is **financial education**. Money comes and goes, but if you have the education about how money works, you gain power over it and can begin building wealth.\n\nRemember the opportunity cost of using your money to buy some good or service. That money is no longer being used for growth. Some good or service may cost $100 today, but when factoring in its growth potential when put into an index fund or some other investment vehicle that good or service really would have costed you $200 ten years from now. You should see money as something that works for you, that is, an asset.\n\u003e The poor and the middle class work for money. The rich have money work for them.\n\n\u003e Think of it this way: Once a dollar goes into your asset column, it becomes your employee.\n\nTo be rich, spend on assets, minimise spending on liabilities. That's it. Assets include stocks, bonds, real estate, notes, and any other revenue-generating thing.\n\u003e Rule #1: You must know the difference between an asset and a liability, and buy assets.\n\nA good start is to simply redirect more of your money towards things that are clearly assets.\n\u003e Keep your daytime job, but start buying real assets, not liabilities.\n\nThe 4 pillars of 'financial IQ' are:\n1. Accounting.\n2. Investing.\n3. Understanding markets.\n4. Law (for exploiting tax advantages, especially as a corporation).\n\nMany people are \"one skill away from great wealth\". \n\u003e **The single most powerful asset we all have is our mind**. If it is trained well, it can create enormous wealth.\n\nYou must get over your fears and learn sales, marketing and negotiation. Lacking these skills is what's keeping you from enjoying life to the fullest.\n\u003e **The most important specialised skills are sales and marketing**. The ability to sell ‚Äî to communicate to another human being, be it a customer, employee, boss, spouse, or child ‚Äî is the base skill of personal success. **Communications skills such as writing, speaking, and negotiating are crucial to a life of success**.\n\n\u003e I know of no other skills to be more important than selling and marketing. The skills of selling and marketing are difficult for most people, primarily due to their fear of rejection.\n\nStop being afraid of rejection. Actively seek it, in fact, and you'll be hardened.\n\u003e Failure inspires winners. And failure defeats losers.\n\nThe most common form of laziness is \"laziness by staying busy.\" \n\u003e Many rich families lose their assets in the next generation simply because there was no one trained to be a good steward over their assets.\n\nIt's unacceptable to *not* invest in your knowledge. This is easily the most worthwhile thing to spend time and money on.\n\u003e Most people simply buy investments rather than first investing *in learning about investing*.\n\n\u003e I am always shocked at people who buy stocks or real estate, but never invest in their greatest asset, their mind.\n\nBeing skilful and knowledgeable alone is not sufficient. You must be ruthlessly learning and doing so at a rate that keeps pace with changes in the world.\n\u003e In today's fast-changing world, it's not so much what you know anymore that counts, because often what you know is old. **It is how fast you learn**. That skill is priceless.\n\nConsider the Darwinian idea that \"it is not the strongest of the species that survives, nor the most intelligent. It is the one most adaptable to change.\"\n\nKiyosaki notes that he regularly looks for multi-day seminars to attend and commits to going to a few of them each year.\n\n### Heroes\nYou should have heroes that shape your identity in the way you want. For example, Kiyosaki mentions idolising people such as Warren Buffett and Peter Lynch.\n\u003e Copying or emulating heroes is true power learning.\n\n\u003e When I'm in the market or I'm negotiating a deal, I am subconsciously acting with the bravado of Trump. Or when analysing a trend, I look at it as though Warren Buffet were doing it. **By having heroes, we tap into a tremendous source of raw genius**.\n\n\u003e Find someone who has done what you want to do. Take them to lunch and ask them for tips and tricks of the trade.\n\n## Fear and Greed\nFear and greed are the source of many of problems in wealth building and life in general. Fear drives you to never take meaningful risks, greed drives you to scale up consumption when you earn more money, which increases your dependence on your 9-5 job. Fear and greed drive the rat race vicious cycle. More money doesn't solve life's problems, or at worst it can make you worse off by exacerbating your problems.\n\u003e People's lives are forever controlled by two emotions: fear and greed.\n\n\u003e \"Just know that it's fear that keeps most people working at a job: the fear of not paying their bills, the fear of being fired, the fear of not having enough money, and the fear of starting over.\"\n\n\u003e If you don't first handle fear and desire, and you get rich, you'll only be a highly paid slave.\n\nIt's impossible to detach completely from fear and greed. Instead, use it to drive a virtuous cycle rather than a vicious cycle. Use fear of mediocrity or of never having taken risks to drive you to take meaningful risks in your career trajectory. Use greed to selfishly build up your own knowledge and aggressively invest.\n\u003e We will always have emotions of fear and greed... it's imperative for you to use those emotions to your advantage, and for the long term to not let your emotions control your thinking.\n\nKiyosaki asserts that your primary residence is a liability, not an asset, unless it is an investment property that provides you with regular rental income.\n\u003e The greatest losses of all are those from missed opportunities. If all your money is tied up in your house, you may be forced to work harder because your money continues blowing out of the expense column, instead of adding to the asset column ‚Äî the classic middle-class cash-flow pattern.\n\nPrioritise accumulating assets. Aim to use that to pay for luxuries, like a home.\n\u003e When I want a bigger house, I first buy assets that will generate the cash flow to pay for the house.\n\nBeware of *irrational exuberance*. Going the crowded route tends to be unreliable.\n\u003e I would say that one of the hardest things about wealth-building is to be true to yourself and to be willing to not go along with the crowd. This is because, in the market, it is usually the crowd that shows up late that is slaughtered. If a great deal is on the front page, it's too late in most instances. Look for a new deal.\n\nAn idea originating from *The Richest Man in Babylon* is 'paying yourself first'. This means then when you have the funds to choose to either spend the money on investments or paying the bills, you should spend the money on investments *first*. This takes discipline because there is pressure in avoiding paying bills late, but Kiyosaki argues that this drives you to be financially intelligent and come up with ways to make it work.\n\nAlways be a giving person. Recall in [[Reading/Man's Search For Meaning|Man's Search For Meaning]], the prisoners who were most resilient and likely to survive were the ones who gave away their last piece of bread.\n\u003e When he was short of money, he gave money to his church or to his favourite charity. If I could leave one single idea with you, it is that idea. **Whenever you feel short or in need of something, give what you want first and it will come back in buckets**. That is true for money, a smile, love, or friendship.\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/Spark":{"title":"Spark","content":"\n\u003e Exercise is the single most powerful tool you have to optimise your brain function.\n\nThis book has convinced me to always fit aerobic exercise and weight training into every day, unconditionally. Exercise, and the knowledge of its profound benefits on health and mental acuity, is now the greatest tool I use for combating stress, anxiety, depression while also augmenting my learning, memory and ability to think.\n\nüíé Aerobic exercise drives neurogenesis, the creation of new neurons, and studies have shown that people are substantially better at learning, memorisation and higher-level executive functions like creative thinking.\n\nüíé Stress, which broadly is 'any threat to your body's equilibrium', and recovery is **necessary** for building robust cells (neurons, muscles, and so on). **Stress and recovery is a fundamental paradigm in biology, and is critical to mental and physical well-being**.\n\nüíé Exercise and social connection are the evolutionary antidote to the negative impacts of chronic stress, even *physically reversing* the damages of chronic stress.\n\nüíé Exercise re-balances your **neurotransmitters** and **hormones**, which include endorphins, serotonin, dopamine, norepinephrine, GABA, ANP, etc. to optimal levels and increases levels of **growth factors** such as BDNF, IGF-2, HGH (at high intensity), etc. It makes you bullet-proof against depression and anxiety, and will leave you calmer, happier and primed to put forward your best self. At the right levels:\n- **Endorphins** are like natural morphine, reducing pain and lifting mood. It's endorsed by the author as the 'elixir of heroism'.\n- **Serotonin** is a mood stabiliser.\n- **Dopamine** drives you to seek reward, honing motivation and attention.\n- **Norepinephrine** increases alertness/arousal and attention. It's very chemically similar to dopamine, enough so that they can plug into each other's receptors.\n- **GABA** dampens hyperactivity, placating anxiety and stress.\n- **ANP** dampens anxiety.\n- **BDNF** is 'miracle-gro' for the learning brain, spurring growth of new neurons and synapses.\n- **IGF-2** regulates cell growth.\n- **HGH** drives and maintains tissue growth.\n\nüíé From anecdotes, regularly subjecting yourself to the discomfort of exercise teaches your brain that you can be in control in aroused states, and successfully pushing yourself is immensely rewarding and inspiring, single-handedly elevating self-esteem and making it feel good to be alive and to rise to life's challenges.\n\nüíé Exercise with a heart rate monitor and you'll have confidence you're exerting yourself sufficiently in your workouts. In aerobic exercises:\n- Low intensity: 55-65%\n- Moderate intensity: 65-75%\n- High intensity: 75-90%\n\n ---\n \nAerobic exercise leads to *neurogenesis* (the creation of new neurons from stem cell division), and when followed up by environmental stimulation, the new neurons are used to form new circuits.\n\u003e Gym class provides the brain with the right tools to learn, and the stimulation in the kids' classes encourages those newly developing cells to plug into the network, where they become valuable members of the signalling community.\n\nOriginally, the main function of the brain was to get us moving to survive.\n\u003e Learning and memory evolved in concert with the motor functions that allowed our ancestors to track down food, so as far as our brains are concerned, if we're not moving, there's no real need to learn anything.\n\nLearning *literally as you're exercising* is ineffective because blood is directed away from your prefrontal cortex.\n\u003e While working out on the treadmill for twenty minutes at a high intensity of 70 to 80 percent of their maximum heart rate, college students perform poorly on tests of complex learning.\n\nExercise improves your cognitive flexibility, or in other words, your capacity to generate novel ideas.\n\u003e A notable experiment in 2007 showed that cognitive flexibility improves after just one 35 minute treadmill session at 70 percent of maximum heart rate... So if you have an important afternoon brainstorming session scheduled, going for a short, intense run during lunchtime is a smart idea.\n\n\u003e One small but scientifically sound study from Japan found that jogging 30 minutes just 2 or 3 times a week for 12 weeks improved executive function.\n\nYou should seek to combine aerobic activity and exercises involving complex motor skills in your exercise routine. Good examples include skill-based sports such rock climbing or figure skating or Brazilian Jiu Jitsu.\n\u003e Greenough worked on an experiment several years ago in which running rats were compared to others that were taught complex motor skills, such as walking across balance beams, unstable objects, and elastic rope ladders. After 2 weeks of training, the acrobatic rats had a 35 percent increase of BDNF in the cerebellum, whereas the running rats had none in that area.\n\n### Stress\nThis book taught me about how fundamental stress is to our health. Any form of challenge to the body and brain's equilibrium results in recovery towards a more resilient state.\n\u003e **Stress and recovery. It's a fundamental paradigm of biology** that has powerful and sometimes surprising results.\n\n\u003e It's well known that the way to build muscles is to break them down and let them rest. The same paradigm applies to nerve cells, which have built-in repair and recovery mechanisms activated by mild stress.\n\nIn the context of this book, *stress* is:\n\u003e ... a threat to the body's equilibrium... In the brain, *anything that causes cellular activity* *is a form of stress*. For a neuron to fire, it requires energy, and the process of burning fuel creates wear and tear on the cell.\n\n\u003e **Stress sparks brain growth**. Assuming that the stress is not too severe and that the neurons are given time to recover, the connections become stronger and our mental machinery works better. **Stress is not a matter of good and bad ‚Äî it's a matter of necessity**.\n\nAn interesting experiment done by the US Department of Energy analysed the mortality rate of identical workers, some of which were exposed to a small amount of radiation. Paradoxically, the group exposed to radiation had a lower mortality rate, suggesting that their cells became resilient to the stresses imposed by the low radiation dosage.\n\n\u003e It seems that, like stress itself, **cortisol isn't simply good or bad**. A little bit helps wire in memories; too much suppresses them; and an overload can actually erode the connections between neurons and destroy memories.\n\n\u003e Two neurotransmitters put the brain on alert: **norepinephrine** arouses attention, then **dopamine** sharpens and focuses it.\n\nWe are subjected to far less physical demands than was required of us before modernisation.\n\u003e Even if we followed the most demanding governmental recommendations for exercise and logged thirty minutes of physical activity a day, we'd still be at less than half the energy expenditure for which our genes are encoded. Palaeolithic man had to walk five to ten miles on an average day, just to be able to eat.\n\nExercise drives us to be more socially outgoing. When combined, exercise and social connection can reverse the effects of chronic stress. They're essential antidotes to many of the problems incurred by the stress of modern life.\n\u003e Studies show that by adding physical activity to our lives, we become more socially active ‚Äî it boosts our confidence and provides an opportunity to meet people.\n\n\u003e If you exercise or even just socialise, you're tapping into the evolutionary antidote to stress.\n\n\u003e At every level, from the microcellular to the psychological, exercise not only wards off the ill effects of chronic stress; it can also reverse them. Studies show that if researchers exercise rats that have been chronically stressed, that activity makes the hippocampus grow back to its pre-shriveled state.\n\nYou must constantly subject yourself to stress in order to become better off. The alternative is to degenerate. When subjected to stress, it is sculpting your brain and body to be stronger for next time.\n\u003e The paradox is that our wonderful ability to adapt and grow doesn't happen without stress ‚Äî we can't have the good without a bit of the bad.\n\nRegular exercise will increase your 'immunity' to challenges in life. You'll be able to bear a greater burden the more you bear it.\n\u003e In 2004 researchers at Leeds metropolitan University in England found that **workers who used their company's gym were more productive and felt better able to handle their workloads**. Most of the 210 participants in the study took an aerobics class at lunchtime, for 45 minutes to an hour. They filled out questionnaires at the end of every workday about how well they interacted with colleagues, managed, their time, and met deadlines. **Some 65% fared better in all three categories on days they exercised**. **And they felt less fatigued in the afternoon**, despite expending energy at lunchtime.\n\nAn especially important point is to not drop exercise from your routine when life gets busier ‚Äî you'd in fact need more of it to effectively combat the extra stress you're experiencing and turn what would be negative effects of chronic stress into the type of stress that leaves you stronger than before.\n\u003e Just keep in mind that the more stress you have, the more your body needs to move to keep your brain running smoothly.\n\n### Anxiety\nExercise inoculates your brain and body against anxiety, increasing your panic threshold. Vigorous exercise and recovery teaches your brain that an aroused state is controllable. Anxiety is almost never a useful response in modern life, and is often the source of many failings, so anything that reduces anxiety it is extremely valuable. Exercise is on par with medication in effectiveness in doing so, but is very sustainable in the long-term and carries positive, not negative, side effects.\n\nA group of sedentary and anxious students were divided into two groups, one undergoing vigorous aerobic exercise almost everyday, and the other undergoing mild aerobic exercise almost everyday.\n\u003e In 2004 a researcher named Joshua Broman-Fulks from the University of Southern Mississippi tested whether exercise would reduce anxiety sensitivity. He found 54 college students with generalised anxiety disorder who had elevated anxiety sensitivity scores and who exercises less than once a week. \n\n\u003e ... **Both regiments tended to reduce anxiety sensitivity, but rigorous exercise worked more quickly and effectively**... The theory is that when we increase our heart rate and breathing in the context of exercise, we learn that these physical signs don't necessarily lead to an anxiety attack.\n\nGABA is a neurotransmitter that is critical to breaking the vicious cycle of self-reinforcing anxiety.\n\u003e Moving the body also triggers the release of gamma-aminobutyric acid (GABA), which is the brain's major inhibitory neuro-transmitter (and the primary target for most of our anti-anxiety medicines). **Having normal levels of GABA is crucial to stopping, at the cellular level, the self-fulfilling prophecy of anxiety ‚Äî it interrupts the obsessive feedback loop within the brain**.\n\nAnxiety causes your world to shrink, reducing the number of things you can do and preventing you from doing meaningful things. It also drives you towards vices, and to be a less kind and productive person. \n\u003e Living with panic means avoiding anything that might set off another frightening episode. You withdraw into an emotional fetal position, and the fear leads to a desperate need for control ‚Äî whatever is necessary to maintain a stable and safe environment. This manifests itself in various ways: passive-aggressiveness, which is one way of trying to control others; compulsiveness, to keep the fear triggers at bay; and overall inflexibility.\n\nExercise negates anxiety by causing the release of ANP which dulls the effects of panic.\n\u003e **ANP [(atrial natriuretic peptide)] is secreted by heart muscles when we exercise**... ANP has been shown in both animal and human studies to have a calming effect... In 2001 one of the first studies to verify the role of ANP in anxiety compared patients with panic disorder to those without. They were randomly assigned an injection of ANP or placebo, and then received a dose of an abdominal hormone called cholecystokinin tetrapeptide (CCK-4), which induces anxiety and panic. **ANP significantly reduced panic attacks in both groups while the placebo did not**.\n\nAnxiety is directly related to levels of ANP in the bloodstream. Lower ANP, and you'll likely be subject to more intense states of panic. Increase ANP, and you'll safely ride out the storm.\n\u003e In one study of patients with severe heart failure, those with the highest ANP levels had the lowest levels of anxiety... And we know that among panic disorder patients, those who have frequent attacks have a deficit of ANP in their bloodstreams.\n\n\u003e In 2006... Str√∂hle looked at whether ANP was a critical element in the calming effect of aerobic exercise. For 10 healthy patients who agreed to have panic-inducing injections of CCK-4, walking for thirty minutes on a treadmill significantly increased concentrations of ANP while simultaneously lowering feelings of anxiety and panic.\n\nFear is burned deeply into memory and is challenging to reverse once learned, however cognitive behavioural therapy (CBT) is an effective way of suppressing it by progressively exposing patients to the source of the fear but reinforcing neutral/positive instead of negative associations with that fear. Regular exercise not only physically dulls anxiety through ANP, GABA, and other neurotransmitters/hormones, it teaches you psychologically that an aroused state is completely under your control rather than something you're victim to.\n\u003e **When we experience the symptoms without the panic, the brain goes through a cognitive restructuring**. We build connections in the prefrontal cortex that help calm the amygdala, which makes us feel safe, and then the brain records a memory of that feeling. When we add in exercise, we get the neurotransmitters and neurotrophic factors bolstering the circuits between the prefrontal cortex and the amygdala, providing further control and creating a positive snowball effect... Teaching the brain that we can survive is crucial to overcoming the anxiety.\n\n\u003e If you begin to associate the physical symptoms of anxiety with something positive, something that you initiated and can control, the fear memory fades in contrast to the fresh one taking shape. Think of it as a biological bait and switch ‚Äî your mind is expecting a panic attack, but instead it ends up with a positive association with the symptoms.\n\n### Depression\n\u003e Endorphins... dulled pain in the body and produced euphoria in the mind. **They are the elixir of heroism**, helping us ignore pain when we're physically overextended so we can finish the task at hand.\n\nExercise is a reliable way to maintain general happiness.\n\u003e A massive Dutch study of 19288 twins and their families published in 2006 showed that **exercisers are less anxious, less depressed, less neurotic, and also more socially outgoing**.\n\n\u003e A Finnish study of 3,403 people in 1999 showed that those who exercise at least two to three times a week **experience significantly less depression, anger, stress, and \"cynical distrust\"** than those who exercise less or not at all.\n\nExercise is on par with antidepressants in effectiveness, but comes with many welcoming side effects instead of undesired side effects.\n\u003e Aside from elevating endorphins, exercise regulates all of the neurotransmitters targeted by antidepressants.\n\n\u003e ... They randomly divided 156 patients into 3 groups: Zoloft, exercise, or a combination of the two. The exercise group was assigned to supervised walking or jogging, at 70-85% of their aerobic capacity, for 30 minutes three times a week. The results? All 3 groups showed a significant drop in depression, and about half of each group was completely out of the woods. Another 13% experienced fewer symptoms but didn't fully recover. Blumenthal concluded that **exercise was as effective as medication**... 6 months after the study, Blumenthal and his colleagues surveyed the patients to see how they were doing and found that exercise worked even better than medicine over the long term. About 30% of the exercise group remained depressed vs. 52% of those on medication and 55% for those in the combined treatment group [(the explanation for this unexpected result in the combined group is that \"instead of incorporating the belief 'I was dedicated and worked hard with the exercise program; it wasn't easy, but I beat this depression,' patients might incorporate the belief 'I took an antidepressant and got better.'\")].\n\nExercise is said to immediately increase levels of norepinephrine, boost dopamine (which is \"all about motivation and attention\"), and boost serotonin which is critical to impulse control, self-esteem and counteracting cortisol.\n\u003e Studies have shown that chronic **exercise increases dopamine storage in the brain and also triggers the production of enzymes that create dopamine receptors in the reward center of the brains**... If the demand is there, the dopamine genes get activated to produce more, and the overall effect is a more stable regulation of these pathways which are important to controlling addictions.\n\nRemember, exercise increases your level of BDNF, which has a strong correlation with depression.\n\u003e In post-mortem studies of people with depression who died of suicide, their brains had significantly decreased levels of BDNF. Even in healthy people, low BDNF levels have been correlated with personality traits that make them more vulnerable to depression, such as neuroticism and hostility.\n\n\u003e [Exercise] doesn't simply raise serotonin or dopamine or norepinephrine. **It adjusts all of them, to levels that, we can only presume, have been optimally programmed by evolution**. The same goes for exercise's effect on BDNF, IGF-1, VEGF, and FGF-2, which provide the building material and oversight for the construction of new connections and neurons.\n\n### Addiction\nExercise is a very effective substitute for combating addiction.\n\u003e The goals of exercise, the feeling of exercise, the challenge of exercise, the pleasure and the pain, the accomplishment, the physical well-being, the self-esteem. All that exercise us, you're now presenting to the addict as a very compelling option.\n\nFighting your brain is incredibly hard because addiction is ingrained in the structure of your brain.\n\u003e Animal studies show that drugs such as cocaine and amphetamine make the dendrites in the nucleus accumbens bloom, thus increasing their synaptic connections. The changes can remain months and maybe even years after the drugs are stopped, which is why it's so easy to relapse. **One way to look at addiction is that the brain has learned something too well**. These adaptations lead to a vicious cycle in which the basal ganglia goes on autopilot whenever you smell fried chicken, and the prefrontal cortex can't override your actions even though you may know better.\n\nAn effective way to combat addiction is to reprogram default behaviours by executing alternative routines to indulging in the addictive substance/behaviour.\n\u003e The routine and the physical activity gets the brain engaged and the mind moving in a direction other than toward the drug, reprogramming the basal ganglia to wire in an alternative reflexive behaviour.\n\nHaving the belief in your ability to change is massively helpful in overcoming addiction, and exercise is an excellent way to build up that belief.\n\u003e One of the connections I see here is between learning and overall mental strength. If the brain is flexible, the mind is stronger, and this gets at a concept known as self-efficacy. It's difficult to measure, but it relates to **confidence in our ability to change ourselves**.\n\n\u003e The researchers characterised self-regulation as a resource that can be depleted but also recharged like a muscle. **Essentially, the more you use this faculty, the stronger it gets**. **And exercise is by far the best form of self-regulation we have**.\n\n\u003e When we look at addiction as a neurological malfunction rather than as a moral failure, it suddenly takes on the form of something that can be fixed.\n\nExercise dampens cravings.\n\u003e Dopamine produced during exercise will plug into receptors and thus blunt the craving, and over time the activity will produce more D2 receptors and restore balance in the reward system.\n\n### Pregnancy\nExercise is essential to both the pregnant mother's well-being and their child's. It should be seen as unacceptable to drop from a routine, given how much it benefits the kid in their development. \n\u003e For the first time the ACOG recommended that sedentary women *begin* exercising when they become pregnant, largely to counter risks such as diabetes, high blood pressure, and preeclampsia that can develop during gestation and harm both mother and child.\n\n\u003e Stress, anxiety, and depression can have a frighteningly powerful impact on a pregnancy, and, in the extreme, can result in miscarriage, low birth weight, birth defects, or death of the baby. Babies born to unhappy mothers are fussier, less responsive, harder to soothe, and have unpredictable sleep patterns. And in follow-up tests, these babies are more likely to be hyperactive and suffer cognitive impairments. In rodent models, pups born to mothers subjected to stress during pregnancy (by way of shocking their feet) are skittish, clumsy, and less adventurous.\n\n\u003e One study showed that briskly walking 5 hours a week reduces the risk of gestational diabetes by 75%.\n\n\u003e Most intriguing is a 2003 study showing that rat pups born of exercising moms had higher levels of BDNF immediately after birth, and also at 14 and 28 days. At the same time, they performed better than controls on learning tasks related to the hippocampus. Essentially, they learned better and faster than rats born of sedentary mothers.\n\n### Ageing\nRemember that stress and recovery is essential to combating degeneration.\n\u003e If you're not busy living, your body will be busy dying.\n\nSo many of the negative effects of ageing can be significantly reduced through exercise, including heart problems, cancer risks, neurodegenerative diseases, and many of the other things that afflict most elderly people.\n\u003e The average 75-year-old suffers from 3 chronic medical conditions and takes 5 prescription medicines, according to the CDC... The leading killers are heart disease, cancer, and stroke; together they account for 64% of all deaths in this age group.\n\n\u003e Starting at about age 40, we lose on average 5% of our overall brain volume per decade, up until about age 70, when any number of conditions can accelerate the process.\n\n\u003e ... about 1500 from Finland originally surveyed in the early 1970s were contacted again 21 years later, when they were between 65 and 79 years old. Those who had exercised at least twice a week were **50% less likely to have dementia**.\n\nExercise can keep insulin levels at sufficient levels to prevent toxic levels of glucose in the bloodstream.\n\u003e As we age, insulin levels drop and glucose has a harder time getting into the cells to fuel them. Then glucose can skyrocket, which creates waste products in the cells, such as free radicals, and damages blood vessels, putting us at risk for stroke and Alzheimer's... **Exercise increases levels of insulin-like growth factor (IGF-1), which regulates insulin in the body and improves synaptic plasticity in the brain**.\n\nExercise also quells hunger by changing the levels of the hormones regulating it.\n \u003e Exercise, naturally, counteracts obesity on two fronts: it burns calories, and it reduces appetite.\n \nAlthough cancer causation is hard to claim, population studies seem to routinely arrive at the conclusion that:\n\u003e **The most consistent risk factor for cancer is lack of activity**.\n\nYou should do your best to preserve the vigour, social connection, and passion to accomplish things when you're young. Toning down activity and having fewer goals and challenges nudges you closer to poorer health.\n\u003e The road to successful ageing really begins with desire, because without the desire to stay engaged and active and alive, people quickly fall into the death trap of being sedentary and solitary. **One of the problems of getting older is the lack of challenges, but with exercise we can continually improve and push ourselves**.\n\n\u003e Anything that keeps you in contact with other people helps you live better and longer ‚Äî statistics show a tight inverse relationship between sociability and mortality.\n\nInterestingly, consuming fewer calories is a reliable way to extend lifespan, as observed in rats.\n\u003e The one proven way to live longer is to consume fewer calories, at least if you're a lab rat. In experiments in which rodents eat 30% fewer calories, they live up to 40% longer than animals allowed to eat as much as they want.\n\n### Regimen\n\u003e When people ask me how much exercise they should do for their brain, I tell them the best advice is to get fit and then continue challenging themselves.\n\nGeneral recommendations from Dr. Ratey:\n- 4 days of aerobic exercise, aiming for 30+ mins each day at ~65% maximum heart rate.\n- 2 days of weight training to increase bone density and prevent muscle atrophy.\n- 2 days of complex motor movements (balance and flexibility) training by doing a sport such as yoga, pilates, martial arts, etc.\n\nThe more you constantly learn, the longer you'll retain cognitive ability as you age, and the less likely you'll suffer from neurodegenerative diseases.\n\n\u003e Today, of course, there's no need to forage and hunt to survive. Yet our genes are coded for this activity, and our brains are meant to direct it. Take that activity away, and **you're disrupting a delicate biological balance that has been fine-tuned over half a million years**.\n\nA more vigorous but 'optimal' general guideline is to do aerobic exercise 6 times a week for 45 mins to 1 hour each day at moderate intensity (65-75% max heart rate).\n\nAt high intensity (75%+ of max heart), metabolism shifts from aerobic to anaerobic because your muscles are working at a rate that outpaces its receival of oxygen. At this point, you are burning creatine and glycogen stored in the muscle cells itself, which produces lactic acid, effecting the 'burn' that you feel. \nAt high intensities, your pituitary gland releases *human growth hormone* (HGH), which is vital to the development of cells in both the brain and body.\n\u003e Psychologically, this is where you \"confront the self\"... By going beyond where you thought you could, straining and stressing and lingering in that pain for even just a minute or two, you sometimes transcend into a rarefied state of mind, in which you feel like you can conquer any challenge... The euphoric feeling is likely due to the mixture of extremely high levels of endorphins, ANP, endocannabinoids, and neurotransmitters pumping through your system at this intensity.\n\n\u003e A recent study by neurologists at the University of Muenster, in Germany, reported that **interval training improves learning ability**. During the course of a 45 minute treadmill run, volunteers did two 3 minute sprints. Compared with subjects who stayed at low intensity the **sprinters had significantly higher increases in BDNF as well as norepinephrine**.\n\nYou should have a strong aerobic base before incorporating interval training however. Dr. Ratey recommends at least 6 months of regular vigorous exercise regimen before adding interval training.\n\nNot a lot of research exists around the mental benefits of heavy weight training since it's hard to conduct such research on non-human subjects.\n\u003e One factor clearly affected by strength training is HGH. A recent study looked at the hormone levels during weight training versus aerobic activity in well-trained men. Doing squats doubled HGH levels compared with running at high intensity for 30 minutes.\n\n\u003e Statistics show that abut half of those who start up a new exercise routine drop out within 6 months to a year. Not surprisingly, one of the biggest reasons seems to be that **people often jump in at high intensity, which makes them feel bad physically and emotionally, and then they simply quit**.\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/The-Defining-Decade":{"title":"The Defining Decade","content":"\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/The-Male-Advantage":{"title":"The Male Advantage","content":"\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/The-Psychology-of-Money":{"title":"The Psychology of Money","content":"\nüíé Freedom is the most valuable thing that savings gets you.\n\n---\n\n### No One is Crazy\n\u003e Your personal experiences with money make up maybe 0.00000001% of what's happened in the world, but maybe 80% of how you think the world works.\n\nEveryone has their own idiosyncratic relationship with money, but they're all shaped by incredibly unique sets of circumstances and observations. Firmly held beliefs in one reasonable person can be totally at odds with beliefs in another reasonable person.\n\n### Luck and Risk\nLuck and risk (misfortune) are fundamental forces polarising people towards wild success and catastrophic failure. Detach from your ego and realise that luck played a massive role in your personal successes, and risk played a massive role in your failings. \n\nThe book discusses Bill Gates as an example and Paul Allen, the founders of Microsoft. They attended a high school which was one of the only in the world that access to a computer in the 1960s. Of the ~300 million people of comparable age in existence at the time, you'd need to win a 1-in-a-million dice roll to have gone to this high school. There was also a third person, Kent Evans, who was a close friend with Gates and Allen, and equally ambitious and obsessed with the possibilities of modern computer, but who died to a mountaineering accident before graduating high school, another 1-in-a-million dice roll.\n\nEmulating the decision-making of wildly successful people and expecting the same level of outcome is unreasonable.\n\n\u003e \"One lucky break, or one supremely shrewd decision ‚Äî can we tell them apart?\" ‚Äî Benjamin Graham, reflecting on his GEICO stock which violated the principles he wrote about in the Intelligent Investor, but which won him a huge fortune.\n\n\u003e The line between 'inspiringly bold' and 'foolishly reckless' can be a millimeter thick and only visible with hindsight.\n\nIn many cases, it is impossible to distinguish between luck and misfortune. **Never judge people for the way they are and things they've achieved**.\n\n\u003e **Be careful who you praise and admire. Be careful who you look down upon and wish to avoid becoming.**\n\n\u003e Therefore, **focus less on specific individuals and case studies and more on broad patterns**.\n\nYou can't fully attribute personal successes to inputs that you controlled ‚Äî such as hard work, ambition and education. These are necessary inputs, but know that your outcomes are a complex function of luck.\n\u003e When things are going extremely well, realise it's not as good as you think. You are not invincible, and if you acknowledge that luck brought you success then **you have to believe in luck's cousin, risk, which can turn your story around just as quickly**.\n\n### Never Enough\nGreed is insatiable.\n\u003e There is no reason to risk what you have and need for what you *don't have* and *don't need*.\n\n\u003e **The hardest financial skill is getting the goalpost to stop moving.**\n\n\u003e ... **the ceiling of social comparison is so high that virtually no one will ever hit it**. Which means it's a battle that can never be won, or that the only way to win is to not fight to begin with ‚Äî to accept that you might have enough, even if it's less than those around you.\n\n\u003e If there's a part of our household financial plan I'm proud of it's tat we got the goalpost of lifestyle desires to stop moving at a young age. Our savings rate is fairly high, but we rarely feel like we're repressively frugal because our aspirations for more stuff haven't moved much. It's not that our aspirations are non-existent ‚Äî we like nice stuff and live comfortable. We just got the goalpost to stop moving.\n\n### Confounding Compounding\n\u003e $81.5 billion of Warren Buffett's $84.5 billion net worth came *after his 65th birthday*. Our minds are not built to handle such absurdities.\n\n\u003e If something compounds ‚Äî if a little growth serves as the fuel for future growth ‚Äî **a small starting base can lead to results so extraordinary they seem to defy logic**. It can be so logic-defying that you underestimate what's possible, where growth comes from, and what it can lead to.\n\n\u003e Warren Buffett is a phenomenal investor. But you miss a key point if you attach all of his success to investing acumen. **The real key to his success is that he's been a phenomenal investor for 3 quarters of a century**.\n\n\u003e There are books on economic cycles, trading strategies, and sector bets. But the most powerful and important book should be called Shut Up and Wait. It's just one page with a long-term chart of economic growth.\n\n\u003e You can't blame people for devoting all their effort ‚Äî effort in what they learn and what they do ‚Äî to trying to earn the highest investment returns. It intuitively seems like the best way to get rich. But good investing isn't necessarily about earning the highest returns, because the highest returns tend to be one-off hits that can't be repeated. It's about earning pretty good returns that you can stick with and which can be repeated for the longest period of time. That's when compounding runs wild.\n\n\u003e One of my deeply held investing beliefs is that there is little correlation between investment effort and investment results. The reason is because the world is driven by tails ‚Äî a few variables account for the majority of returns. No matter how hard you try at investing you won't do well if you miss the 2 or 3 things that move the needle in your strategy. The reverse is true. Simple investment strategies can work great as long as they capture the few things that are important to that strategy's success. My investing strategy doesn't rely on picking the right sector, or timing the next recession. It relies on a high savings rate, patience, and optimism that the global economy will create value over the next several decades.\n\n### Staying Wealthy\n\u003e There's only one way to stay wealthy: some combination of frugality and paranoia.\n\nMorgan stresses the mental cue of 'survival' as being the primary aspect determining whether people can maintain wealth. Basically be optimistic for the future, but paranoid about what will the curveballs along the way.\n\n\u003e Compounding doesn't rely on earning big returns. Merely good returns sustained uninterrupted for the longest period of time ‚Äî especially in times of chaos and havoc ‚Äî will always win.\n\nFew plans survive first encounter with reality. Having room for error in your financial plan, also called *margin of safety*, keeps you in the game.\n\n### Tails\nThis chapter discusses the phenomena of value being concentrated in a small percentage of things in a set of many things. For example, Amazon's main money makers are AWS and Prime, but they've had huge product launch failures. Morgan endorses index investing, which is works over the long-term because it always captures those companies that are astronomical successes.\n\n\u003e Your success as an investor will be determined by how you respond to punctuated moments of terror, not the years spent on cruise control.\n\nIn other words, if you just have the discipline to stick to index investing irrespective of headlines, recessions and catastrophes, you'll win.\n\nWhen analysing the success of individuals and companies, most of it comes from a small percentage of 'correct' decisions. The rest are a mix of average to poor decisions.\n\n### Freedom\n\u003e**The highest form of wealth is the ability to wake up every morning and say, \"I can do whatever I want today.\"**\n\nOne of the most reliable predictors of happiness is having a real sense of autonomy. When framed this way, the function of money is really to **grant you autonomy over your time**.\n\u003e Having a strong sense of controlling one's life is a more dependable predictor of positive feelings of wellbeing than any of the objective conditions of life we have considered.\n\n\u003e Using your money to buy time and options has a lifestyle benefit few luxury goods can compete with.\n\n\u003e ... doing something you love on a schedule you can't control can feel the same as doing something you hate.\n\nRecall the 'Monk and the Minister' parable discussed in [[Reading/The Simple Path to Wealth|The Simple Path to Wealth]]:\n\u003e Two close boyhood friends grow up and go their separate ways. One becomes a humble monk, the other a rich and powerful minister to the king. Years later they meet. As they catch up, the portly minister (in his fine robes) takes pity on the thin and shabby monk. Seeking to help, he says: ‚ÄúYou know, if you could learn to cater to the king, you wouldn‚Äôt have to live on rice and beans.‚Äù To which the monk replies: ‚ÄúIf you could learn to live on rice and beans, you wouldn‚Äôt have to cater to the king.‚Äù\n\n\u003e Use money to gain control over your time, because not having control of your time is such a powerful and universal drag on happiness. The ability to do what you want, when you want, with who you want, for as long as you wat to, pays the highest dividend that exists in finance\n\n### Man-in-the-Car Paradox\n\u003e No one is impressed with your possessions as much as you are.\n\nYou're never actually thinking about how great the person owning some luxurious possession is, you're subconsciously visualising how great it'd be to be in their position.\n\nA common idea propagated by the self-help community is that one should never be worried what others think, because they're too busy worrying about what others think of them. A similar sentiment applies to materialism:\n\u003e There is a paradox here: people tend to want wealth to signal to others that they should be liked and admired. But in reality those other people often bypass admiring you, not because they don't think wealth is admirable, but because they use your wealth as a benchmark for their own desire to be liked and admired.\n\nGet out of your head, no one is thinking about you and no one will really commend you for being wealthy. They'll remember you for your contributions to something greater than yourself, and for your virtues and kindness to others.\n\n\u003e If respect and admiration are your goal, be careful how you seek it. Humility, kindness, and empathy will bring you more respect than horsepower ever will.\n\n\n### Wealth is What You Don't See\n\u003e Wealth is the nice cars not purchased. The diamonds not bought. The watches not worn, the clothes forgone and the first-class upgrade declined. Wealth is financial assets that haven't yet been converted into the stuff you see.\n\nMoney that you don't spend is money that continues to compound and bolster the security that grants you freedom, which is really the backbone of happiness. Don't associate heavy spending with high wealth in your superficial assessments of the people around you. Spending money to acquire status-boosting possessions actively destroys the wealth you're trying to build. \n\u003e **The world is filled with people who look modest but are actually wealthy** and people who look rich who live at the razor's edge of insolvency. Keep this in mind when quickly judging others' success and setting your own goals.\n\n### Save Money\n\u003e The only factor you can control generates one of the only things that matters. How wonderful.\n\nIncreasing your savings rate is the easiest opportunity to exploit to expand wealth. Despite this, most people see raising personal income as the main way to expand wealth. It's true of course, but learning to live with less is liberating, and leaves you with more money to compound and carry you to the summit faster.\n\n\u003e Building wealth has little to do with your income or investment returns, and lots to do with your savings rate.\n\n\u003e There are professional investors who grind 80 hours a week to add 0.1% to their returns when there are 2 or 3 full percentage points of lifestyle bloat in their finances that can be exploited with less effort.\n\n*Ego is the enemy*. Don't associate our status or worth with your capacity for spending money.\n\u003e One of the most powerful ways to increase your savings isn't to raise your income. It's to **raise your humility**.\n\n\u003e People with enduring personal finance success ‚Äî not necessarily those with high incomes ‚Äî tend to have a propensity to not give a damn what others think about them.\n\nMoney can acquire concrete things, and the saving of money may seem like deprivation, however saving can in fact buy you\n\u003e ... the ability to wait and the opportunity to pounce. It gives you time to think. It lets you change course on your own terms.\n\n\u003e Every bit of savings is like taking a point in the future that would have been owned by someone else and giving it back to yourself. That flexibility and control over your time is an unseen return on wealth.\n\nA savings account with a 0% interest rate (or even negative interest rate) might be one of the best investments in your portfolio just because it buys you flexibility in life.\n\n### Reasonable \u003e Rational\n\u003e Aiming to be mostly reasonable works better than trying to be coldly rational.\n\n\u003e In 2008 a pair of researchers from Yale published a study arguing young savers should supercharge their retirement accounts using 2-to-1 margin (two dollars of debt for every dollar of their own money) when buying stocks. It suggests investors taper that leverage as they age, which lets a saver take more risk when they're young and can handle a magnified market rollercoaster, and less when they're older. Even if using leverage left you wiped out when you were young (if you use 2-to-1 margin, a 50% market drop leaves you with nothing) the researchers showed savers would still be better off in long run so long as they picked themselves back up, followed the plan, and kept saving in a 2-to-1 leveraged account the day after being wiped out.\n\n\u003e It's almost a badge of honour for investors to claim they're emotionless about their investments, because it seems rational... The reasonable investors who love their technically imperfect strategies have an edge, because they're more likely to stick with those strategies.\n\nThis chapter is not an excuse to be less rational, or a way of discouraging rational and functional strategies. It's meant to stress that one of the most important variables in financial success is discipline, and being able to stick to an imperfect plan is much better than failing to stick to a perfect plan. This seems to be a important piece of wisdom in exercise routines - it doesn't really matter what exercise you do if you can't stick to the program.\n\nMorgan explains his 'worst financial decision he's ever made' in prioritising paying off a cheap mortgage instead of routing that money into index funds or bonds using purely emotional reasoning ‚Äî because it feels good to have your own place, debt-free. This is one example of something reasonable trumping something rational (since investing instead of paying off your mortgage will likely lead to much more financial growth).\n\u003e ... the foundation of, \"does this help me sleep at night?\" is the best universal guidepost for all financial decisions.\n\n### Surprise!\n\u003e Experiencing specific events does not necessarily qualify you to know what will happen next. In fact it rarely does, because experience leads to overconfidence more than forecasting ability.\n\n\u003e The thing that makes tail events easy to underappreciate is how easy it is to underestimate how things compound. How, for example, 9/11 prompted the Federal Reserve to cut interest rates, which helped drive the housing bubble, which led to the financial crisis, which led to a poor jobs market, which led tens of millions to seek a college education, which led to $1.6 trillion in student loans with a 10.8% default rate. It's not intuitive to link 19 hijackers to the current weight of student loans, but that's what happens in a world driven by a few outlier tail events. **The majority of what's happening at any given moment in the global economy can be tied back to a handful of past events that were nearly impossible to predict**.\n\n\u003e \"Whenever we are surprised by something, even if we admit that we made a mistake, we say, 'Oh I'll never make that mistake again.' But, in fact, what you should learn when you make a mistake because you did not anticipate something is that the world is difficult to anticipate. **That's the correct lesson to learn from surprises: that the world is surprising**.\" ‚Äî Daniel Kahneman.\n\n\u003e The most important economic events of the future ‚Äî things that will move the needle the most ‚Äî are things that history gives us little to no guide about. They will be unprecedented events.\n\n\u003e Just before he died Benjamin Graham was asked whether detailed analysis of individual stocks ‚Äî a tactic he became famous for ‚Äî remained a strategy he favoured. He answered: \"In general, no. I am no longer an advocate of elaborate techniques of security analysis in order to find superior value opportunities. This was a rewarding activity, say, 40 years ago, when our textbook was first published. But the situation has changed a great deal since then.\"\n\n\u003e \"The 4 most dangerous words in investing are, 'it's different this time.'\" ‚Äî Michael Batnick.\n\nThe main message of this chapter is not to neglect history, but rather not to use it as an indication of future success. It stresses that the world is several orders of magnitude too complex for anyone to make correct forecasts. Looking back in history should result in generalised takeaway, for example that people are fundamentally driven by fear and greed.\n\n\n### Room For Error\nA *margin of safety* is critical to successful investing. In casinos, supposing that counting cards lends you 51-49 odds of winning in your favour, you still need to be conservative enough each session to prevent a streak of bad luck from wiping you out, even though you would have certainty of consistently winning in the long term. The idea of having a margin of safety was highly endorsed by Benjamin Graham:\n\u003e **\"The purpose of the margin of safety is to render the forecast unnecessary.\"**\n\n\u003e It is easy to underestimate what a 30% decline does to your psyche... Spreadsheets are good at telling you when the numbers do or don't add up. They're not good at modelling how you'll feel when you tuck your kids in at night wondering if the investment decisions you've made were a mistake that will hurt their future. Having a gap between what you can technically endure vs. what's emotionally possible is an overlooked version of room for error.\n\n\u003e Leverage is the devil here. Leverage ‚Äî taking on debt to make your money go further ‚Äî pushes routine risks into something capable of producing ruin. The danger is that rational optimism most of the time masks the odds of ruin some of the time.\n\nYou really don't need a specific reason to save. You should save to prepare for the things you couldn't prepare for.\n\n### You'll Change\n\u003e Long-term financial planning is essential. But things ‚Äî both the world around you, and your own goals and desires.\n\nIn the present, we're always living as the latest iteration of ourselves. We subconsciously believe ourselves to be mostly finalised, that our values and desires won't change. Research shows we radically underestimate how much will change over the next years and decades.\n\u003e \"All of us are walking around with an illusion ‚Äî an illusion that history, our personal history, has just come to an end, that we have just recently become the people that we were always meant to be and will be for the rest of our lives.\" \n\nDon't polarise towards grinding endlessly and depriving yourself or consuming exuberantly and living life without care. You must strike a balance for sustainability, and to think otherwise will lead you to regret.\n\u003e We should avoid the extreme ends of financial planning. Assuming you'll be happy with a very low income, or choosing to work endless hours in pursuit of a high one, increases the odds that you'll one day find yourself at a point of regret.\n\n### Everything Has a Price\n... except it's often not listed on a label. No exceptions. Never trust that something is as good as it seems.\n\u003e Successful investing demands a price. But its currency is not dollars and cents. It's volatility, fear, doubt, uncertainty, and regret ‚Äî all of which are easy to overlook until you're dealing with them in real time.\n\n\u003e Few investors have the disposition to say, \"I'm actually fine if I lose 20% of my money.\" This is doubly true for new investors who have never experienced a 20% decline.\n\nInstead, view volatility as a fee. You're able to get good market returns on the condition that you can pay the emotional price of market volatility.\n\nTake this lesson beyond money matters. Perhaps a clich√© example is that of success ‚Äî the fee for that is time and the pain of constant failure.\n\n### You and Me\nBe wary about taking investing cues from people whose time horizons are different. As a long-term investor, you're likely not trying to exploit bubbles ‚Äî that's meant to be the short-term investor/trader's game.\n\u003e Bubbles form when the momentum of short-term returns attracts enough money that the makeup of investors shifts from mostly long term to mostly short term.\n\n\u003e Bubbles do their damage when long-term investors playing one game start taking their cues from those short-term traders playing another.\n\nDon't be tempted by rapidly rising prices as a long-term investor.\n\u003e Rising prices persuade all investors in ways the best marketers envy. They are a drug that can turn value-conscious investors into dewy-eyed optimists, detached from their own reality by the actions of someone playing a different game than they are.\n\n\u003e Few things matter more with money than understanding your own time horizon and not being persuaded by the actions and behaviours of people playing different games than you are.\n\n### The Seduction of Pessimism\nWe all subconsciously assign much greater weighting to negative events and forecasts than positive ones. A common manifestation of this is *loss aversion*.\n\u003e Tell someone that everything will be great and they're likely to either shrug you off or offer a skeptical eye. Tell someone they're in danger and you have their undivided attention.\n\nSetbacks happen overnight while miracles often happen over too long of a time to notice.\n\nThe world has gotten so much better in so many ways. Less violence, insanely better medicinal improvements, technology improvements, everyone is unfathomably richer compared to decades ago, etc. No one talks about this though.\n\n### When You'll Believe Anything\nWe're all victim to a plethora of cognitive failings. Some salient ones include *confirmation bias* and *selective perception*, where we tend to only respect the evidence that affirms our pre-existing or desired beliefs.\n\u003e The more you want something to be true, the more likely you are to believe a story that overestimates the odds of it being true.\n\n*Stories* are a fundamental part of our mentality. Since we cannot reasonably understand the core of everything in the world, from physics, to economics, to the origins of existence, to dating, we involuntarily fill the gaps with a coherent narrative that explains why something is the way it is. This is subconscious and is a curse of human limitations. You always know a lot less about how the world works than you might think you do.\n\n\u003e \"Hindsight, the ability to explain the past, gives us the illusion that the world is understandable. It gives us the illusion that the world makes sense, even when it doesn't make sense. That's a big deal in producing mistakes in many fields.\" ‚Äî Daniel Kahneman.\n\nPay less attention to market forecasts. No one can really predict them. As an investor however, you probably already know that, but the relevant note is that we still all have an insatiable need for structure amongst the chaos, which drives us to believe stories, pretty much involuntarily.\n\n\u003e I have not met an investor who genuinely thinks market forecasts as a whole are accurate or useful. But there's still tremendous demand for forecasts, in both the media and from financial advisors. Why? Psychologist Philip Tetlock once wrote: \"**We need to believe we live in a predictable, controllable world, so we turn to authoritative-sounding people who promise to satisfy that need.**\"\n\nIt's universally observable in all of us that:\n\u003e We focus on what we know and neglect what we do not know, which makes us overly confident in our beliefs.\n\n\u003e The more you want something to be true, the more likely you are to believe a story that overestimates the odds of it being true.\n\n\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/The-Simple-Path-to-Wealth":{"title":"The Simple Path to Wealth","content":"\n\nThere is an endless amount of investment pathways available, but the main ones to focus on are low-cost index funds and broad-based stock index funds and broad-based bond index funds.\n\n\u003e \"If you get a couple of things right, you can profoundly change your financial life without having to dwell on it, and you can get on with doing things that are more important to you and to the world.\"\n\nThinking that you can pick individual stocks and win. Yes, that's how Warren Buffett got rich, but the ability to do what he did is extraordinarily rare. Don't be full of yourself thinking you can pull the same thing off. The research shows that less than 1% of active funds outperform index funds over 30 years.\n\nJL Collins doesn't like *dollar-cost averaging*. It's just delaying the risk according to him. \n\nJust put a substantial amount of your income into the market regularly. \n\nWhen the market drops, you should celebrate because you're getting more shares than otherwise. Selling should not be an option when your goal is to build wealth rather than *preserve* wealth.\n\n\u003e \"Time in the market is more powerful than timing the market.\"\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/Reading/Think-Like-a-Programmer":{"title":"Think Like a Programmer","content":"\n\u003e **Note**: I didn't finish this book. I only read probably 20% before stopping because I realised that this book was mainly geared towards beginners of problem-solving with programming.\n\nProblem-solving and coding are independent skills. You can be excellent at one and poor at the other. Problem-solving is fundamentally a creative activity, it is about crafting algorithms that perform a task under stated *constraints*.\n\nUnderstanding all the constraints of a problem is crucial. **Without fully understanding the constraints, you will pigeonhole yourself to exploiting a smaller set of actions**.\n\u003e If you are unaware of all possible actions you could take, you may be unable to solve the problem.\n\n\u003e Restating the problem in a more formal manner is a great technique for gaining insight into a problem.\n\n**By articulating the problem yourself, you can reveal the real constraints**. This is why 'rubber duck' debugging is so effective ‚Äî it makes you challenge initial assumptions.\n\nWhen a problem looks really hard, **make a smaller version of the problem** and try solve that instead. You do this by:\n1. Removing constraints.\n2. Reducing the size of the problem's sample, eg. instead of solving the problem for a 10x10 grid, can you solve it for a 4x4 grid?\n3. Dividing the problem into smaller subproblems.\n\nStay alert and **look for *analogies*** (common patterns) between the current problem and other problems you've encountered in the past.\n\n**Always have a plan**. Never stumble around blindly. Approach the problem with intermediate goals rather than with the goal of solving the problem. It's important to do this for psychological reasons because solving intermediate goals gives you more confidence you'll eventually get to the solution. When you're frustrated, you can't problem-solve.\n\nA reliably good first step in your problem-solving plan is to *restate the problem* and its constraints formally. When working with other people, this serves to confirm your understanding of the problem as well.\n","lastmodified":"2022-10-14T06:51:54.098891916Z","tags":null},"/_/1-hour-Set-up-git-sync-with-mobile.":{"title":"","content":"\nUsing Termux.\n\n- Need to set storage permissions: https://wiki.termux.com/wiki/Termux-setup-storage.\n- The `storage/shared` directory is symlinked to the phone 'root' filesystem.\n","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/2-hours-Consolidate-super-accounts.":{"title":"","content":"","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/2-hours-Write-a-tool-to-automate-task-progression-in-Python.":{"title":"","content":"There will be 2 files:\n1. Archive file \n2. File containing current and future dates' tasks.\n\n**Requirements**:\nMake this a CLI script. It should be able to run on system startup *and* it should be invokeable.\n- All dates earlier than today should be moved to the archive file.\n- All previous unchecked tasks from prior day should be moved to today.\n- Column should show date in universal ISO format.\n  Eg. \"Monday (2022-09-17)\"\n- File for current and future dates should show up to 30 dates in the future.\n- CLI option to append a number of new days to the task buffer.\n    - Actually, it may better for it to automatically insert up to 30 dates in the future on startup.\n","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/20-mins-Find-textbook-example-and-have-meeting-with-dad-to-discuss-tutoring-requirements":{"title":"","content":"Agenda:\n- Discuss how to quickly learn terms. Anki? Google docs table?\n- Show example of a year 10 math textbook.\n- Discuss that you will design the math website frontend.\n","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/30-mins-Consolidate-super-accounts.":{"title":"","content":"Some industry super funds let you invest in index funds. Eg.\n- Professional Super\n- AustralianSuper\n- HESTA\n- LegalSuper\n- Sunsuper\n- HostPlus\n- ING Living Super\n- Virgin Money\n- Rest Super\n\nVTSAX vs Australian index funds.\n","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/Call-UNSW-and-sort-out-course-dropping.":{"title":"","content":"Good afternoon, I was transferred from the Nucleus.\n\nI was looking to get some help with dropping my courses for this term?\n\nMy situation is I've fulfilled all my graduation requirements last term, but I decided to take 2 courses this term. I wanted to drop them all but I couldn't drop the last one because myUNSW prevents me from doing it, saying I need to apply for program leave.\n\n","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/Consolidate-your-Super-accounts.":{"title":"","content":"Consolidated to UniSuper, but will consider an indexed option when I start work.\n","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/Get-Obsidian-on-mobile-and-get-git-sync-working.":{"title":"","content":"","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/List-out-all-your-projects":{"title":"","content":"Current:\n- Konflux.\n- Structs.sh graph visualiser.\n- Math website.\n- A Tour of C++.\n- COMP4128.\n\n","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/Meeting-with-dad":{"title":"","content":"\nNeed a Figma design. Literally just one page is enough. Spend 2 hours on this next morning after meeting with dad.\n\n**Agenda:**\n- How are things going now?\n- What is the target audience? HSC? If so, then focus on writing and solving and producing HSC questions.\n    - Find existing HSC resources for maths.\n    - What could they be doing better?\n    - What niche could we fill?\n        - Eg. solving practice problems for 2U, 3U and 4U and providing in-depth explanations.\n    - Let's just focus on maths and only maths, otherwise efforts will be too shallowly allocated.\n- How do we make sure we make progress on this project?\n- MVP for release. What more needs to be done?\n","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/Meeting-with-dad-1":{"title":"","content":"","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/Movie-list":{"title":"","content":"Movies that interest me:\n- Grave of the Fireflies.\n- Violet Evergarden\n- My Neighbour Totoro.\n- The Matrix.\n- Fight Club.\n- A Silent Voice.\n- Your Lie in April.\n- Wolf of Wall Street.\n- The Godfather.\n- ~~I Want to Eat Your Pancreas~~\n- ~~Your Name~~\n\n","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/Set-up-ideal-version-control-for-second-brain.":{"title":"","content":"\nWhat can be public?\n- Everything but `_private`, `Journal/*`, `Projects/*`, `Areas/*`.\n\nJust going to make it private.","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/WebAssembly-Rust-Snake-tutorial":{"title":"","content":"https://www.youtube.com/watch?v=iR7Q_6quwSI\u0026t=70s\u0026ab_channel=yishn\n","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/Write-email-thanking-Josh-Comeau":{"title":"","content":"**Subject**: \n\nHi Josh! I just wanted to thank you for writing [How I Built My Blog](https://www.joshwcomeau.com/blog/how-i-built-my-blog/) and your ebook on developer portfolios. You've produced some of the most helpful and inspiring resources I've encountered on the internet :).\n\n\n","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_/Writing-first-blog-and-publishing-on-Medium.":{"title":"","content":"Make a Medium account (don‚Äôt be afraid to just pay‚Ä¶). \nWrite a blog on personal knowledge management.\n\n\nYou should seriously blog and do it consistently. Trust in the worth of doing it. Pick your overarching niche that‚Äôs specific enough for you to dominate at it.\nPretend you work for a newspaper which has a deadline that has to be met and you have to publish your post, ready or not.\nIn time, results will come. Most people are not patient or consistent enough to wait for results, and that is why most people fail to get what they want out of life. Remember that.\nTry writing like you talk.\nDespite how bad you might suck, how painful it feels and how much you think you just aren‚Äôt a writer and no one will possibly read what you wrote, do it anyway and keep doing it.\n","lastmodified":"2022-10-14T06:51:54.106892497Z","tags":null},"/_archive/Personal-Finance-Automation/Personal-Finance-Automation":{"title":"Personal Finance Automation","content":"\n## Next Steps\n- [x] Find a good spreadsheet template and build your own. Use it for a while.\n- Spreadsheet tasks\n    - [ ] Add data validation dropdowns.\n    - [ ] Highlight spending transactions as red and income transactions as green.\n- [ ] What is a trust?\n\n## Questions\n- [x] Should I track on a spreadsheet or app?\n    Spreadsheets vs. apps:\n    - Spreadsheets are extremely customisable.\n    - Spreadsheets are more manually-driven. \n        - There is a good psychological reason for manually \n        - Decoupling yourself from the tracking of expenses makes you less likely to be mindful about your spending.\n- [x] Screen scraping vs using an API?\n    - Do it when there's no API available.\n- [x] Can I pull bank account and transactions CSV data from ING? Can I do it every 24 hours or at least on system startup or something?\n    - Doesn't seem possible with their APIs üôÅ. Screen-scraping is an option but I'd have to get past the keypad auth.\n- [x] Can I scrape the account balance from UniSuper?\n    - Doubt it, but I can screen-scrape.\n- [ ] Set this system up for your parents as well. Ideally, they should be able to look at it and understand.\n\n**Note**: first, I should try manually tracking personal finances and then seek to automate the pain points.\n\n## Goals\nI want to feel in control of my finances. This might be among the greatest sources of stress in my life if left uncontrolled.\n\nI want to be extremely aggressive with saving. I want almost all of my spending to be allocated towards things that appreciate (investments) or things that help me become more productive or genuinely happier (capital).\n\n## Requirements\n- Automatic categorisation.\n- Data visualisation by category for my spending.\n- Daily/weekly/monthly summaries of how much I've spent.\n- Visualise the total balance in all my bank accounts.\n- How my net worth changes over time.\n- Show investments value.\n- Superannuation monitoring.\n\n## Resources\n- [Scraping data from your bank in Python](https://www.neilgrogan.com/bank-tx-py/)\n- [Excel dashboard](https://www.youtube.com/watch?v=MRtHNqafufg\u0026ab_channel=MyOnlineTrainingHub).\n- [Celes Spreadsheet](https://docs.google.com/spreadsheets/d/1Jm0-n4TP98Vb5FkYKAZIqYOxO1rE9DJV7dWo_zFO31E/copy)\n\n---\n## Examples\n\n\n","lastmodified":"2022-10-14T06:51:54.110892787Z","tags":null}}