{"/":{"title":"Tim's Dev Wiki","content":"\nHi! I'm Tim, a computer science student at the University of New South Wales. \n\nWelcome to my personal developer wiki. Learning is incredibly chaotic ‚Äî this is my attempt to establish some semblance of order to my monkey brain. This wiki contains things I learn about software engineering, computer science and a bunch of other areas of study. Since mid 2022, I finally decided to ditch [Notion](https://notion.so/) for [Obsidian](https://obsidian.md/) as my knowledge management system. I'm sharing this with the hope that it helps or inspires whoever stumbles upon it üòÉ.\n\nüå≤ These are my [evergreen notes](https://notes.andymatuschak.org/Evergreen_notes). They're a constant work in progress ‚Äî I'm pruning, editing and adding new notes as I piece together a better understanding of software engineering as well as other areas of study that interest me.\n\nüó∫Ô∏è To get around, use the big interactive graph above or start from the subject links below. Use `ctrl+k` to fuzzy search through the entire wiki.\n\nüíª Curious how I made this? I used the [Obsidian](https://obsidian.md/) editor to create a bunch of interconnected [markdown](https://www.markdownguide.org/) files, each of which correspond to a page in this wiki. To deploy those markdown files as a set of connected webpages, I forked \u003ca href=\"https://github.com/jackyzha0/quartz\"\u003eQuartz\u003c/a\u003e, tweaked the CSS and JavaScript to my liking, then published it to [GitHub Pages](https://pages.github.com/). See the source code for this project \u003ca href=\"https://github.com/Tymotex/wiki\"\u003ehere\u003c/a\u003e.\n\nüë®‚Äçüíª Who am I? See [timz.dev](https://timz.dev).\n\n---\n\n### Developer Subjects\n- [[software-engineering/Software Engineering|Software Engineering]]\n- [[software-engineering/concepts/cloud/Cloud Computing|Cloud Computing]]\n- [[effective-engineer/Effective Engineer|Maximising your effectiveness as an engineer]]\n\n### Money\n- [[economics/Macroeconomics|Macroeconomics]]\n- [[finance/Finance|Finance]]\n\n\n\n","lastmodified":"2022-07-30T00:03:13.708004324Z","tags":null},"/economics/Macroeconomics":{"title":"Macroeconomics","content":"\n![[economics/assets/macroeconomics-wallpaper.png|600]]\n\n*Macroeconomics* is the study of the aggregate behaviour of economies and aggregate variables such as a country's GDP, unemployment rate, inflation rate, etc. which are mainly produced by government statistical agencies like the [ABS](https://www.abs.gov.au/) in Australia.\n\n- [[economics/macroeconomics/GDP|GDP]]\n- [[economics/macroeconomics/Inflation|Inflation \u0026 CPI]]\n- [[economics/macroeconomics/Labour Market|Labour market]]\n- [[economics/macroeconomics/Interest|Interest]]\n- [[economics/macroeconomics/Savings and Investments|Savings and investments]]\n- [[economics/macroeconomics/Income-Expenditure Model|Income-expenditure model]]\n- [[economics/macroeconomics/Fiscal Policy|Fiscal policy]]\n- [[economics/macroeconomics/Public Debt|Public debt]]\n- [[economics/macroeconomics/Private Banks|Private banks]]\n- [[economics/macroeconomics/Money|Money]]\n- [[economics/macroeconomics/Monetary Policy|Monetary policy \u0026 cash rate]]\n- [[economics/macroeconomics/Aggregate Supply and Demand Model|Aggregate supply and demand model]]\n","lastmodified":"2022-07-30T00:03:13.708004324Z","tags":null},"/economics/Microeconomics":{"title":"Microeconomics","content":"\n==Hello world==\n","lastmodified":"2022-07-30T00:03:13.708004324Z","tags":null},"/economics/macroeconomics/Aggregate-Supply-and-Demand-Model":{"title":"Aggregate Supply and Demand","content":"\nThe [[economics/macroeconomics/Income-Expenditure Model|income-expenditure model]] aims to determine the short-run real GDP. The *aggregate supply and demand model* aims to determine the real GDP in both the short-run and long-run.\n\n\u003e Note that the aggregate demand and aggregate supply curves are different in meaning fundamentally to the marginal benefit and marginal cost curves in microeconomic contexts.\n\n### Aggregate Demand (AD)\nRecall that the planned aggregate expenditure in a 4-sector economy is given as $PAE = C+I^P+G+X-M$.\n\nOne core assumption is that a rise in $r$ will tend to reduce consumption and planned investment. We can assume they are affected in the following way:\n- $C=C_{0}+c(Y-T)-\\alpha r$, where $\\alpha \u003e0$.\n- $I^{P}= I_{0}- \\beta r$, where $\\beta \u003e 0$.\n\nPlugging these in and solving for the equilibrium real GDP, we get:\n$$\n\\begin{align}\n\tY_\\text{equilibrium}\u0026=PAE=\\big[C_{0}+c(Y-T) -\\alpha r\\big]+ \\big[I_{0}- \\beta r\\big] + G_0 + X_0 -mY \\notag \\\\\n\t\u0026= \\frac{1}{1-c(1-t)+m}\\bigg( \\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0}\\big)- r(\\alpha + \\beta) \\bigg). \\notag\\\\\n\\end{align}\n$$\n\nNow we've made $Y_\\text{equilibrium}$ a function of $r$, we have a simple model for predicting the effects of [[economics/macroeconomics/Monetary Policy|monetary policy]] on real GDP.\n\nTo express $Y_\\text{equilibrium}$ as a function of $\\pi$, we can assume that the central bank will use the [[economics/macroeconomics/Cash Rate#Simple Policy Rule|simple policy rule]] reaction function which tells them to increase the real interest rate in response to an increase in inflation rate. With this assumption, we can relate the real interest rate with the inflation rate, $r= r_{0}+\\gamma\\pi$ and express $Y_\\text{equilibrium}$ as a function of $\\pi$:\n\n$$\n\\begin{align}\n\tY_\\text{equilibrium} \u0026= \\frac{1}{1-c(1-t)+m}\\bigg( \\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0}\\big)- r(\\alpha + \\beta) \\bigg), \\notag\\\\\n\t\u0026= \\frac{1}{1-c(1-t)+m}\\bigg( \\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0}\\big)- (r_{0}+\\gamma\\pi)(\\alpha + \\beta) \\bigg), \\notag\\\\\n\t\\notag\\\\\n\t\\text{Supposing }k \u0026= \\frac{1}{1-c(1-t)+m}, \\notag\\\\\n\tY_\\text{equilibrium} \u0026= k\\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0} - r_0(\\alpha + \\beta)\\big)-k\\gamma(\\alpha +\\beta)\\pi. \\notag\\\\\n\t\\notag\\\\\n\\end{align}\n$$\nSupposing $A_0 = k\\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0} - r_0(\\alpha + \\beta)\\big)$, we now have an equation representing the aggregate demand curve:\n$$\\colorbox{#FFFFBF}{$ Y_\\text{equilibrium} = A_0-k\\gamma(\\alpha +\\beta)\\pi$},$$\nwhich relates the real GDP to the inflation rate. Although the AD curve links the real GDP and inflation, it does not determine them. That's where we need the aggregate supply curve.\n\n![[economics/macroeconomics/assets/aggregate-demand-curve.png|500]]\n\nChanges to the exogenous variables in the constant $A_0 = k\\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0} - r_0(\\alpha + \\beta)\\big)$ will cause shifts in the AD curve, often called *AD shocks*. \n\nNote that when productivity is low, ie. real GDP is low, prices are high.\n\n### Aggregate Supply (AS)\nIn the [[economics/macroeconomics/Income-Expenditure Model|income-expenditure model]], we assumed that the prices would stay fixed in the short run. In the aggregate supply and demand model, we assume that the business will choose the new prices, thereby setting the actual inflation rate, based on 3 factors:\n1. \u003cmark style=\"background: #ADCCFFA6;\"\u003eThe *expected* inflation rate.\u003c/mark\u003e \n   \n\t**Rational expectations hypothesis** ‚Äî asserts that people always factor in *all* relevant information, producing the best theoretical possible forecast on what the future inflation rate will be. The actual and expected value differ by a completely unpredictable margin, $\\omega$:  $\\pi_\\text{actual}=\\pi_\\text{expected}+\\omega$\n\t\n\t**Adaptive expectations hypothesis** ‚Äî asserts that people will use historical data only in their prediction of the future inflation rate, ie. that $\\pi_\\text{actual}=\\pi_{\\text{prev}}$, which makes the AS curve a simple horizontal line:\n\t\t![[economics/macroeconomics/assets/adaptive-expectations-hypothesis-aggregate-supply-curve.png|380]]\n\t\n\t*Inflation shocks* are when there are changes to the inflation rate. Events that might cause inflation shocks include changes in commodity prices and foreign exchange rates. Factoring in inflation shocks, we'd have $\\pi_\\text{actual} = \\pi_\\text{prev}+\\epsilon$, where $\\epsilon$ is the size of the inflation shock. Note that inflation shocks, although temporary in nature, cause permanent effects to the inflation rate since the adaptive expectations hypothesis asserts that the next period's inflation rate retains the previous period's inflation rate.\n2. \u003cmark style=\"background: #ADCCFFA6;\"\u003eShifts in the aggregate demand curve which impact the business' production costs.\u003c/mark\u003e \n3. \u003cmark style=\"background: #ADCCFFA6;\"\u003eSize of the [[economics/macroeconomics/Output Gap|output gap]] is.\u003c/mark\u003e \n\t\n\tWhen there exists a short-run expansionary output gap like below for example, businesses will initially ramp up production levels to meet increased demand, but over time they'll experience increased production costs and inflate their prices. When all businesses behave this way, then in aggregate, it'll cause inflation to increase and close the output gap.\n\t\n\t![[economics/macroeconomics/assets/aggregate-supply-expansionary-output-gap.png|500]]\n\n### Applications\n\nIf households were to collectively become more optimistic about wage growth and were to start consuming more, then this could cause an increase in $C_0$, causing an AD shock that shifts the curve up, causing the real GDP to increase but with inflation staying constant in the short-run:\n\n![[economics/macroeconomics/assets/ad-shock-example-1.png|500]]\n\nProgressing towards the long-run, the AS curve will shift up to close the expansionary output gap.\n\n![[economics/macroeconomics/assets/ad-shock-example-2.png|500]]\n\nInflation will keep increasing until $Y_\\text{equilibrium}=Y^*$.\n\n![[economics/macroeconomics/assets/ad-shock-example-3.png|500]]\n\nWhen an inflation shock happens and shifts the AS curve upwards, it'll be the case that in the long run, the inflation rate will drop to the same level prior to the shock.\n\n![[economics/macroeconomics/assets/inflation-shock-example-1.png|500]]\n\nNotice how the economy 'self-corrects' in the long run. Does this mean that [[economics/macroeconomics/Fiscal Policy|fiscal]] and [[economics/macroeconomics/Monetary Policy|monetary]] policy are unnecesssary? No, because they can accelerate the self-correction and minimise the negative effects of AD shocks and inflation shocks.\n\nNote that in the above example, the government and central bank could choose to 'accommodate' the inflation shock by implement tax cuts (or some other policy) to shift up the AD curve and meet the higher inflation value. Doing this will mean that the contractionary gap is closed quicker, but the higher inflation will tend to persist instead of being temporary. If they don't want higher inflation to persist (in order to ensure they meet an inflation target), then they can simply do nothing and let the self-correction proceed.\n\n![[economics/macroeconomics/assets/accommodating-inflation-shock.png|500]]\n\n\n\n\n\n\n\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Asset-Bubble":{"title":"Asset Bubble","content":"\nIn finance and economic contexts, a 'bubble' is when the price for a class of assets, such as real estate, grows substantially over a short period of time, but largely as a result of ['irrational exuberance'](https://www.thebalance.com/irrational-exuberance-quotes-dangers-and-examples-3305937) and herd mentality. Since the demand is 'artificial' and not largely based on any 'real' value of the asset, the bubble is often 'bursts' or 'crashes', resulting in sometimes catastrophic reductions in the demand of that asset.\n\nLower [[economics/macroeconomics/Interest|interest rates]] often contribute to the expansion of asset bubbles since people are encouraged to borrow more and invest in assets.\n\nSome notable examples of bubbles:\n- The burst housing bubble in 2007ish which sparked the *Global Financial Crisis*.\n- The Dot-com bubble in the late 1990s was a stock market bubble associated with the massive growth in the use of the internet.\n- The cryptocurrency bubble.\n- The 2022 tech bubble which wrecked the stock prices of many tech companies and resulted in mass layoffs.\n- The [Australian property bubble](https://en.wikipedia.org/wiki/Australian_property_bubble), maybe.\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Bonds":{"title":"Bonds","content":"\nA *bond* is an [I.O.U](https://www.investopedia.com/terms/i/iou.asp), a formal acknowledgement about a loan and its regular payments between the lender and borrower. Bonds are a type of [[finance/investment/Securities|security]] known as *debt securities* and are sometimes called 'fixed-income securities'. They're considered a low risk investment.\n\nGovernments and businesses will sell bonds, or borrow money in other words, to fund their expenses. For instance, the government might sell bonds to the private sector to fund public infrastructure development, schools, military equipment, etc. A business might sell bonds to hire people and buy capital goods such as computers.\n\nThere are also *investment bonds* which let you invest in managed share funds. They let you avoid capital gains tax after 10 years when you sell.\n\n### Bond Value\nIn general, the gross return on investment for an asset is generally expressed as: $\\frac{P_{t} + I}{P_{t-1}}$, where $P_{t}$ is the current price, $P_{t-1}$ is the previous price, and $I$ is the income (dividend) in the form of regular payments for holding the asset.\n\nA bond has the following properties which dictate its value:\n- *Principal* ‚Äî the amount of money given.\n- *Term* ‚Äî time by which the principal must be repaid, ie. the deadline.\n- *Coupon payment* ‚Äî regular payment to the lender.\n- *Coupon rate* ‚Äî the interest rate on the bond.\n\nBonds can be traded on the *bond market*.\n\nRemember, $100 now is worth more than $100 in the future in almost all situations. The simple reason for this is because we can earn interest on the $100 by putting it in a savings account, for example. The value of a bond needs to take this into account by discounting the future value of payments:\n$$\\colorbox{#FFFFBF}{$V_t=\\frac{\\text{coupon payment}_{1}}{1+i}+\\frac{\\text{coupon payment}_{2}}{(1+i)^2}+\\ldots \\text{further rounds of payments.}+\\frac{P+\\text{coupon payment}_{n}}{(1+i)^n}$}$$\nBond price and the market interest rate are inversely related. Rises in the market interest rate decrease the value of a bond.\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Business-Cycle":{"title":"Business Cycle","content":"\nBusiness cycles are the observed fluctations in production.\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Cash-Rate":{"title":"Cash Rate","content":"\nThe cash rate, which is set by the [[economics/macroeconomics/Central Bank|RBA]] as part of its [[economics/macroeconomics/Monetary Policy|monetary policy]], is a short-term interest rate charged on the 'overnight' loans between banks.\n- To 'tighten' monetary policy means to raise the cash rate to discourage lending and therefore lower production.\n- To 'loosen' monetary policy means to lower the cash rate to incentivise lending and therefore boost production.\n\n### Payment Settlement\nSuppose Commbank owes Westpac an outstanding $10 million AUD. The payment needs to proceed through accounts held at the RBA, called **Exchange Settlement Accounts (ESA)** which must never have a negative balance. Commbank transfers $10 million from their ESA to Westpac‚Äôs ESA. \n\nIf Commbank ever has insufficient funds in their reserve, then it must borrow those funds from another bank which expects full repayment in $\u003c24$ hours (which is where the term ‚Äòovernight‚Äô comes from). When borrowing from other banks' ESAs, the loans are charged an interest rate known as the *cash rate*.\n\nThere are 3 interest rates that the RBA defines:\n- $i^T$ ‚Äî the RBA‚Äôs target cash rate.\n- $i^T-0.25$ ‚Äî the interest rate RBA pays to banks for their ESAs. The $0.25$ is a typical value, but it can be tweaked.\n- $i^T+0.25$ ‚Äî the interest rate for banks to borrow from other banks‚Äô ESAs.\n\nThis creates a 50 basis point ‚Äòchannel‚Äô which defines the range the actual cash rate value can be in. *Note*: a 'basis point' is just $\\frac{1}{100}$ of $1\\%$. \n\n![[economics/macroeconomics/assets/cash-rate-channel-system.png|500]]\n\n### Open Market Operations\n*Open market operations* is the trading of goverment bonds between the central bank and the private sector. The RBA mainly buys bonds from banks to increase their ESA and therefore the [[economics/macroeconomics/Money#Money Supply|money supply]], and sells bonds to banks to decrease their ESA and bring down money supply.\n\n### Supply \u0026 Demand for ES Funds\nBelow is the demand curve for banks' ES funds in the overnight cash market.\n\n![[economics/macroeconomics/assets/ES-funds-demand-curve.png|500]]\n\nBelow is the supply curve for ES funds in the overnight cash market.\n\n![[economics/macroeconomics/assets/ES-funds-supply-curve.png|500]]\n\nSupply is affected exogenously by the value of the open market operations the RBA undertakes with banks, and the transfers government make to households (by transferring funds into the bank‚Äôs ESA, therefore increasing ES funds).\n\nBy undertaking open market operations, the RBA can push the supply curve to intersect with the demand curve as shown above. This is how the RBA sets the *actual* cash rate to be the *target* cash rate that they‚Äôve announced.\n\n### Expectations Hypothesis\nThe *expectations hypothesis* predicts how short-term interest rates like the cash rate affects the long-term interest rates after sufficient time. \n\nThe long-term interest rate, $i^N_0$, is simply the average of the current interest rate (at term 0) and all *expected* future interest rates. This is summarised in the following equation:\n$$\n\t\\colorbox{#FFFFBF}{$i^N_0 = \\frac{1}{N}(i^1_0+i^2_1+\\ldots+i^N_{N-1})$}\n$$\nwhere $i^\\alpha_\\beta$ is the interest rate associated with a loan spanning $\\alpha$ total terms starting from at time $\\beta$.\n\nGenerally, the cash rate can be expected to have a very large effect on the mortgage rate, savings bank account interest rates, exchange rate (currency tends to appreciate when cash rate rises), and so on.\n\n### Policy Rule\nA *policy rule*, also called a *monetary policy reaction function* (PRF), is a simple approximation of how the cash rate affects macroeconomic variables and therefore is a model that describes how central banks choose their policy interest rates. \n\n#### Taylor Rule\nThe *Taylor rule* is a well-known policy rule, which asserts:\n$$\\colorbox{#FFFFBF}{$i_\\text{nominal cash rate}=1+1.5\\pi+0.5\\tilde{Y}$},$$\nwhere $\\tilde{Y}$ is the output gap. Alternatively, using the *real* cash rate, this would be $r_\\text{real cash rate} = 1 + 0.5\\pi + 0.5\\tilde{Y}$.\n\n#### Simple Policy Rule\nThe simple monetary policy reaction function is:\n$$\n\tr = r_{0}+ \\gamma \\pi.\n$$\nHere, $\\gamma$ is a value chosen by the central bank to represent their *sensitivity to inflation*. A higher $\\gamma$ results in a larger increase in the cash rate by the RBA. The constant, $r_0$ is the real cash rate when inflation is $0\\%$.\n\n![[economics/macroeconomics/assets/simple-policy-rule-graph.png|500]]\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Central-Bank":{"title":"Central Bank","content":"\nThe central bank is a financial institution that is trusted with controlling the *supply of money*, implementing [[economics/macroeconomics/Monetary Policy|monetary policies]], and regulating the behaviour of [[economics/macroeconomics/Private Banks|private banks]] and other financial instutions through [reserve requirements](https://www.investopedia.com/terms/r/requiredreserves.asp). Their main goal is to ensure economic stability by ensuring macroeconomic variables such as inflation, unemployment rate, etc. all stay in reasonable values.\n\nThe vast majority of countries have their own central bank, which is said to be politically independent and not owned by the government. Monetary policy and [[economics/macroeconomics/Fiscal Policy|fiscal policy]] are independent, however they're both powerful economic tools for affecting macroeconomic variables. One criticism of fiscal policy is that it can be politically motivated, while monetary policies tend to be more impartial because the central bank operates mostly independently of politics. Ideally, monetary policies and fiscal policies should support each other in their goals and should be coordinated.\n\nThe central bank is sometimes seen as the 'lender of last resort'. They can bail out financial institutions that are struggling with debt and prevent banks from [[economics/macroeconomics/Private Banks|becoming insolvent]], for example.\n\nIn Australia, the central bank is the [Reserve Bank of Australia](https://www.rba.gov.au/), in the US, it's the [Federal Reserve](https://www.federalreserve.gov/).\n\n![[economics/macroeconomics/assets/RBA-building.png|450]]\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Fiscal-Policy":{"title":"Fiscal Policy","content":"\n**Fiscal policies** are the policies around the usage of government income and expenditure in an effort to positively affect macroeconomic variables like [[economics/macroeconomics/Inflation|inflation]], [[economics/macroeconomics/Labour Market|unemployment rate]], etc.\n\nFiscal policies include things like:\n- Tax cuts which are reductions to how much tax you'd pay on your personal income.\n- Transfer payments, which are direct payments the government makes to individuals without anything in return. This is usually done to fairly distribute wealth, or to subsidise something (eg. the [JobKeeper policy](https://treasury.gov.au/coronavirus/jobkeeper) was introduced in the COVID-19 pandemic).\n- Subsidising home renovations (eg. [solar panel rebate](https://www.energysaver.nsw.gov.au/save-solar)).\n\nGovernment expenditure occupies about 20% of a country's [[economics/macroeconomics/GDP|GDP]].\n![[economics/macroeconomics/assets/gdp-pie.png|500]]\n\n## 3-Sector Economy\nConsidering a three-sector economy in the [[economics/macroeconomics/Income-Expenditure Model|income-expenditure model]], we'd have $Y = C+I^P+G$.\n\nSuppose we have the **tax function**: $T=T_0 + tY$, with $t$ being the *marginal propensity to tax*, or *marginal tax rate*. At equilibrium GDP, we would have: \n$$\n\tY=PAE=\\frac{1}{1-c(1-t)}\\underbrace{(C_0-cT_0+I_0+G_0)}_{\\text{Exogenous expenditure}}.\n$$\nExpressed in changes, this would be:\n$$\n\t\\Delta Y=PAE=\\frac{1}{1-c(1-t)}(\\Delta C_0- c \\Delta T_0+\\Delta I_0+\\Delta G_{0}).\\tag{1}\n$$\nThis lets you assess how changing one exogenous variable would change the equilibrium GDP. Notice that with the multiplier $\\frac{1}{1-c(1-t)}$, an increase in government spending $G_0$ would cause a rise of $\\frac{1}{1-c(1-t)}$ which is always larger than $\\$1$ to the real GDP.\n\n**Opening the Economy**\nWhen we open this 3-sector economy to international trade, we'd have $PAE=C+I^P+G+X-M$. Using the following substitutions, we can derive the equilibrium GDP and its multiplier:\n$$\n\\begin{align}\n\tC\u0026=C_{0+c(Y-T)}\\\\\n\tI^P\u0026=I_0\\\\\n\tG\u0026=G_0\\\\\t\n\tX\u0026=X_0\\\\\n\tM\u0026=mY\\\\\n\tY\u0026=\\frac{1}{1-\\big(c(1-t)-m\\big)}(C_0-cT_0+G_0+I_0+X_0)\\\\\n\\end{align}\n$$\n\n### Balanced Budget Multiplier\nA surprising result from equation $(1)$ is that you can increase government expenditure $G_0$ and taxes $T_0$ by the *same amount* but still end up with a positive change in the GDP. The *balanced budget multiplier* can be determined as:\n$$\n\t\\frac{\\Delta Y_\\text{equilibrium}}{\\Delta G_0} = \\frac{1-c}{1-c(1-t)}.\n$$\nThis means that fiscal policies can help with closing *contractionary [[economics/macroeconomics/Output Gap|output gaps]]*. For instance, you could achieve the following shift in the $PAE$ curve.\n\n![[economics/macroeconomics/assets/fiscal-policy-eliminates-output-gap.png|400]]\n\nThis shift is achieved by cutting taxes $T_0$ and/or increasing $G_0$. Likewise, when faced with undesirably high inflation, governments can implement a contractionary fiscal policy that closes *expansionary output gaps*. Importantly, fiscal policies have a large effect on [[economics/macroeconomics/Public Debt|government debt]]. Expansionary fiscal policies reduce government budget and contractionary fiscal policies increase government budget.\n\n### Automatic Fiscal Stabiliser\nAn **automatic fiscal stabiliser** is a tax or government transfer payments system that helps dampen _business cycle_ fluctuations. Eg. marginal tax rate systems and welfare payments are examples of automatic stabilisers.\n\nConsider the case where all exogenous variables except $I_0$ are constant, so: $\\Delta Y=\\frac{1}{1-c(1-t)}(\\Delta I_0)$. Here, the amplitude of each [[economics/macroeconomics/Business Cycle|business cycle]] can be controlled by tweaking the marginal tax rate $t$ and therefore the multiplier.\n\n![[economics/macroeconomics/assets/automatic-fiscal-stabiliser.png|400]]\n\n**Discretionary fiscal policies** are ones undertaken explicitly by the government to counter fluctuations in the business cycle.\n\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/GDP":{"title":"GDP","content":"\n**GDP** (*gross domestic product*) is the **monetary** value of all the *domestically-produced **final** goods and services* in a country during a given period. The Australian GDP value is usually announced by the [ABS](https://www.abs.gov.au/) every quarter (3 months). GDP is regarded as a *standard* measure of the *level of production* of a country and its purpose is to serve as an indicator for the size an economy. An increase in a country's GDP indicates that it is undergoing economic growth (an increase in the amount of goods and services produced by the country).\n\n**GDP per capita** is the GDP divided by the country‚Äôs population. It's used as an indicator for labour productivity and living standards ([[economics/macroeconomics/GDP#GDP and Economic Welfare|with many caveats]]).\n\n*Some figures from 2020, rounded loosely:*\n\n| Country     | GDP                 | GDP Per Capita |\n| ----------- | ------------------- | -------------- |\n| Australia   | $1.33 trillion USD  | $52000 USD     | \n| U.S         | $20.94 trillion USD | $64000 USD     |\n| China       | $14.72 trillion USD | $10000 USD     |\n| New Zealand | $0.21 trillion USD  | $42000 USD     |\n\n*Sample of Australia's quarterly GDP, sourced from the ABS.* Australia's annual GDP in 2015 is simply the sum of all 4 quarterly GDPs, which in this case, is roughly $\\$1.6$ trillion AUD.\n\n| Quarter        | GDP            |\n| -------------- | -------------- |\n| March 2015     | $404.1 billion |\n| June 2015      | $405.4 billion |\n| September 2015 | $408.9 billion |\n| December 2015  | $410.4 billion |\n\n### GDP and Economic Welfare\nAlthough correlated, GDP is *not* a measure of societal wellbeing. *GDP per capita* is a better indicator but still does not capture the full picture of wellbeing. Notably, GDP omits [[economics/microeconomics/Externalities|negative externalities]] associated with production, such as pollution, and does not take into account whether a country's wealth is 'fairly' distributed.\n\n### What Contributes to GDP?\nGDP only counts the transaction of ***final*** goods and services, which are goods and services that have reached the final owner and will not be resold. This means that the transaction of all intermediate **goods** do not contribute to a country‚Äôs GDP, otherwise it would be double counted.\n\n\u003e Ô∏èGDP *does not count the value of the inputs*, only the price paid by a **final consumer**.\n\n#### Examples\n- If you grow your own vegetables, that doesn‚Äôt count to GDP. If you buy vegetables from a supermarket however, then that *will* contribute to the GDP.\n    - **Note**: supermarkets purchasing fruits/vegetables for their inventory would be counted to GDP *even* if they‚Äôre not sold to customers. The *final consumer* here is the supermarket since they‚Äôre the last owner of the good.\n- If a constructor purchases materials to buy a house which eventually is sold to a family, the GDP only counts the transaction between the constructor and the family. Ie. we do not count the value of the *inputs to production* such as the bricks, cement, glass, etc.\n- ‚ÄòHousehold production‚Äô such as cooking and child care are *mostly* excluded from the GDP, purely because it‚Äôs too hard to valuate those goods \u0026 services.\n- A change in ownership of an asset like buying/selling shares doesn‚Äôt count to GDP.\n    - Buying an *existing* property doesn‚Äôt count either, but buying a *newly* constructed property is counted. Again, what matters is that GDP is only counted once per asset and never again along the chain of ownership.\n- Watching YouTube contributes to the GDP since you‚Äôre driving a transaction between YouTube and the advertisers paying to put their ads on YouTube.\n- **The location of the production of the good/service matters**. Eg. if you‚Äôre on holiday in New Zealand and you teach a computer science lesson for $1000 NZD, then that counts to New Zealand's GDP, not your country‚Äôs GDP, since the service was produced in New Zealand.\n\n#### Estimating Value\nWhen some good/service does not have a *concrete* price or market value, we can estimate it by calculating the sum of the *value of the inputs* used to *produce* that good or service. This is often done for services provided by the government. \n\nFor instance, if a firefighter is alerted of an incident and has to drive somewhere to put out a fire, that service might have no payment associated with it, but it‚Äôll still contribute to the GDP. The value it contributes is simple a sum of the value of the inputs necessary to provide that service (cost of labour, fuel, extinguisher materials, etc.).\n\n#### Imports/Exports\nBuying imported goods **does not** contribute to our country‚Äôs GDP, however it **does contribute** to the exporting country‚Äôs GDP.\n\nIf you‚Äôre a foreigner working in Australia, your work contributes to the Australian GDP but not to that of your home country.\n\n\u003e *Exports contribute* to our GDP. Imports do not.\n\n## Calculating GDP\nThe GDP value is obtainable through 3 main ways: the [[economics/macroeconomics/GDP#Production Approach|production approach]], [[economics/macroeconomics/GDP#Expenditure Approach|expenditure approach]] and [[economics/macroeconomics/GDP#Income Approach|income approach]]. These are all meant to arrive at the same value in theory, but in practice, each will have their own measurement errors and report slightly different values of GDP. The ABS takes the average of the 3 values and reports that as the official GDP value in their announcements.\n\n*Note*: we use $Y$ as the symbol for GDP.\n\n### Production Approach\nIn the production approach, we measure GDP as the difference between the value of outputs and the value of inputs in producing those outputs.\n\nGDP is calculated as: $Y \\equiv \\text{gross value of output } - \\text{ intermediate costs}$ .\n\nIn other words, it‚Äôs the total *value-added* of all transactions in a country.\n\n### Expenditure Approach\nIn the expenditure approach, we measure GDP as the total money spent on *domestically produced final* goods and services by everyone (individuals/businesses in Australia and other countries who consume what Australia supplies).\n\nWe can calculate GDP based on total expenditures from different sources: \n$$\\colorbox{#ffffbf}{$Y\\equiv C+I+G+(X-M)$}.$$\n- $C$ ‚Äî **household** **consumption spending**. Ie. how much households spend.\n\t- The goods consumed can be categorised into *durable* (longer-lived items whose ownership can be transferred) and *non-durable* (single-use items, like food).\n- $I$ ‚Äî **gross private investment**. Ie. how much businesses spend.\n\t- This can be further categorised as: dwelling construction costs, non-dwelling construction costs, machinery/equipment costs, etc.\n- $G$ ‚Äî **government spending**.\n- $X$ ‚Äî **exports**. Ie. how much the rest of the world purchases from us (Australia).\n- $M$ ‚Äî **imports**. Ie. how much we (Australia) spend on imports from the rest of the world.\n\t- $NX = X - M$ ‚Äî **net exports**.\n\n### Income Approach\nIn the income approach, we calculate GDP as the total income generated by the production of all goods and services.\n\nGDP is calculated as: \n$$Y\\equiv \\text{labour income + capital income + }\\underbrace{\\text{(indirect taxes - subsidies)}}_{\\text{Net indirect taxes}}.$$\nExpressed differently and assuming $0$ net indirect taxes,\n$$Y \\equiv (W \\times L) + (R \\times K),$$\nwhere $W \\times L$ is the wage per ‚Äòunit‚Äô of labour times the total labour and $R\\times K$ is the rate of return times the total capital.\n\n## Real vs. Nominal GDP\n\n***Nominal GDP*** counts everything at *current prices*. It therefore does not account for [[economics/macroeconomics/Inflation|inflation]]. This means that the value of nominal GDP can change year-to-year even when the rate of production has stayed the same, because some goods/services have become more or less valuable over time.\n\n***Real GDP*** counts the changes in production by holding prices constant at a chosen *base year*‚Äôs prices. Which base year you choose affects the real GDP calculated in other years. It's basically *nominal GDP*, but adjusted for inflation.\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Income-Expenditure-Model":{"title":"Income-Expenditure Model","content":"\nThe income-expenditure model of GDP, also called the *Keynesian* model since it was pioneered by [Keynes](https://en.wikipedia.org/wiki/John_Maynard_Keynes), is a model that asserts that the real GDP at equilibrium is entirely determined by the *desired level* of aggregate expenditure on domestically-produced final goods \u0026 services by all people, households, firms, foreigners and the government. This is called the **planned aggregate expenditure**, $PAE$.\n\nBasically, the income-expenditure model expects a country's GDP to be equal to the planned aggregate expenditure, ie. the equilibrium condition is:\n$$\n\tY_\\text{equilibrium}=PAE=C+I^P + G+ NX.\n$$\nSee the [[economics/macroeconomics/GDP#Expenditure Approach|expenditure approach of calculating GDP]].\n- $I^P$ is the *planned* investment as opposed to *actual* investment $I$. They differ in value because of unplanned changes to firms‚Äô inventories, given by: $I=I^P+\\Delta\\text{Inv}_\\text{unplanned}$.\n- *Unplanned inventory* ‚Äî the difference between the *actual* expenditure and the *planned* expenditure.\n\n### Assumptions\nA key assumption of the income-expenditure model is that **prices of goods \u0026 services are *‚Äòfixed‚Äô* (or *‚Äòsticky‚Äô*)**. It assumes that firms will *not* change the prices of their goods \u0026 services in response to a change in demand for them in the *short-run*. Instead, they'll respond by adjusting their level of production. \n\n*Note*: this is a fair assumption since firms cannot know whether it‚Äôs reasonable to change costs so quickly, due to **[[economics/macroeconomics/Inflation#'Cost' of Inflation|menu costs]]**. Why? Suppose you‚Äôre a cafe owner. When there's a sudden influx of demand, you would probably crank up the level of production rather than increasing the cost of coffee. Eventually in the long-run, if you see that this demand persists then you‚Äôd increase prices.\n\n### Disequilibrium\nThe business sector can produce at a level greater than or less than the $PAE$, in which case the economy would be in *disequilibrium*. \n\nIf $Y \u003e PAE$, businesses have produced more goods \u0026 services than all sectors were willing to purchase. This leads to an unplanned increase in their inventories, and will prompt businesses to reduce their production levels accordingly, causing GDP to fall until the equilibrium condition $Y = PAE$ is satisfied.\n\nLikewise, if $Y \u003c PAE$, then businesses have produced less than what all sectors were willing to purchase, unexpectedly depleting their inventories. They'll ramp up production, until $Y = PAE$.\n\nGraphically, it looks like this:\n\n![[economics/macroeconomics/assets/income-expenditure-equilibrium.png|700]]\n\n### Consumption Function\nIn the income-expenditure model, we model household consumption, $C$, using the **[Keynesian consumption function](https://www.investopedia.com/terms/c/consumptionfunction.asp)**: \n$$\n\tC=C_0+c\\underbrace{(Y-T)}_{\\text{Disp. income}}.\n$$\n- $C_0$ is an exogenous variable representing how much households will spend on consumption when their disposable income is $0$. An assumption here is that $C_0 \u003e 0$.\n- $c$ is the **marginal propensity to consume**, $MPC$. A key assumption is that $0\u003cc\u003c1$. In the above consumption function, if your income were to rise by $\\$1$, your marginal propensity to consume is how much of that $\\$1$ you will spend on consumption instead of save.\n\t- *Note*: we also call $1-c$ the *marginal propensity to consume*.\n- **Average propensity to consume**, $APC$, is the percentage of income that is spent rather than saved. It can be obtained as $APC=\\frac{C}{Y-T} = \\frac{C_0}{Y-T}+c$.\n\n*Household consumption is a stable and major contributor to GDP, sitting at around $\\approx 60\\%$ in Australia.*\n![[economics/macroeconomics/assets/household-consumption-gdp-share.png|500]]\n\n### 2-Sector Economy\nConsider an economy that only consists of households and businesses. In this case, we'd have $Y=C+I^P$. At equilibrium, we can see that:\n$$\n\\begin{align}\n\tY_\\text{Equilibrium}\u0026=PAE=C+I_0 \\notag\\\\\n\t\u0026= C_0 + cY + I_0 \\notag\\\\\t\n\t\u0026=\\frac{1}{1-c}(C_0+I_0),\\tag{1}\\\\\n\\end{align}\n$$\nwhere $\\frac{1}{1-c}$ is called the *multiplier*.\n\n**Savings and Investment**\nAt equilibrium, the savings is equal to the planned investment:\n$$\n\\begin{align}\n\tY \u0026= PAE \\notag\\\\\n\t\u0026 = C+I^P\\notag\\\\\n\tY - C \u0026= I^P\\notag\\\\\n\tS \u0026= I^P. \\notag\\\\\n\\end{align}\n$$\nFrom the consumption function, we can express a saving function,\n$$\n\\begin{align}\n\tS \u0026= Y - C \\\\ \n\t\u0026= Y - (C_0 + cY)\\\\\n\t\u0026= -C_0 + (1-c)Y,\n\\end{align}\n$$\n\n![[economics/macroeconomics/assets/income-expediture-2-sector-savings-and-investment.png|500]]\n\n**Opening the 2-Sector Economy**\nNow let's the consider the economy that includes imports/exports. We have $PAE = C + I^P + X - M$. Assuming that the imports scales linearly with GDP: $M=mY$, where $0\u003cm\u003cc$ is the *marginal propensity to import*, we can derive:\n$$\n\\begin{align}\n\tY_\\text{Equilibrium} \u0026= PAE = C+ I^P +X -M \\\\\n\t\u0026= C_0 +cY + I_0 + X_0 - mY \\\\\n\t\u0026= \\frac{1}{1-(c-m)}(C_0+I_0 + X_0). \\tag{2}\\\\\n\\end{align}\n$$\nComparing this result with $(1)$, we see that opening the economy makes the multiplier smaller.\n\n### Paradox of Thrift\nThe *'paradox of thrift'* is a paradox where an increase in exogenous household saving, $C_0$, which shifts the aggregate saving function up, does not actually increase the amount of *real* savings. This is because a collective effort of every household to save simply causes the production levels to drop, meaning a reduction in equilibrium GDP and the effects of saving are nullified as shown:\n\n![[economics/macroeconomics/assets/paradox-of-thrift-graph.png|500]]\n\n\u003e The Paradox of Thrift suggests that while it may be wise for an individual to save money when income is low and job prospects are precarious, it could be collectively disastrous if everyone is thrifty together.\n\nThe paradox of thrift is an example of a *[fallacy of composition](https://en.wikipedia.org/wiki/Fallacy_of_composition)*. An example of the fallacy of composition: when you stand up amongst a crowd to get a better view of something, it only works when a few people do it. When everyone does it, then the gains from standing up are nullified. At that point, it would be equivalent to if everyone remained seated.\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Inflation":{"title":"Inflation","content":"\nTODO.\n\n\n### 'Cost' of Inflation\nIt‚Äôs typically desirable for economies to maintain a low and stable inflation rate over time, usually in the ballpark of 1-3% per year.\n\n- Inflation is generally bad for your savings because the same amount of money will purchase fewer goods and services in the future. During inflation, you‚Äôre incentivised to minimise holdings of currency and ‚Äòstore‚Äô wealth in other assets.\n- Inflation can be particularly bad for some parties when it‚Äôs *unanticipated*.\n    - Eg. Suppose a bank loans you $1000 with an interest rate calculated based on its *expected rate of inflation* for the loan period. If the inflation is in fact higher than what the bank expected, then you will be repaying the loan in dollars with less purchasing power. Ie. there has been an unintended redistribution of real wealth in your favour, as the borrower.\n- **Menu costs** ‚Äî the cost of having to *literally* re-printing physical menus to reflect new cost, or any other process that needs to take place to update costs of items in a high-inflation environment.\n- **Shoe-leather cost** ‚Äî the real cost of making transactions with banks.\n    - When the inflation rate is high, people are usually incentivised to buy and hold more interest-bearing assets.\n    - The term ‚Äòshoe-leather‚Äô cost is the cost associated with *literally* wearing out the shoe leather each time you take a physical trip to the bank (back in the early 2000s, that is). Generally however, shoe-leather cost refers to the real cost of making transactions with banks. Inflation increases the transactions you‚Äôd make with the bank since you‚Äôd want to minimise the amount of currency you have (because they‚Äôre decreasing in value).\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Interest":{"title":"Interest","content":"\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Labour-Market":{"title":"Labour Market","content":"\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Liquidity":{"title":"Liquidity","content":"\nTODO.\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Monetary-Policy":{"title":"Monetary Policy","content":"\nMonetary policy is a modification of the [[economics/macroeconomics/Monetary Policy#Money Supply|supply of money]] by the [[economics/macroeconomics/Central Bank|Central bank]], usually in an effort to reduce [[economics/macroeconomics/Inflation|inflation]], [[economics/macroeconomics/Interest|interest rates]] or some other macroeconomic variable, to ensure the stability of a country‚Äôs currency, minimal unemployment rate, and general welfare of citizens. \n\nCentral banks will announce a **target** value for the macroeconomic variable they're trying to influence. For instance, most central banks announce a target inflation rate of $2$ to $3\\%$ on average. To actually work towards achieving such a target, the central bank will tweak a variable called an **instrument** that these macroeconomic variables, of which the central banks cannot directly control, depend on. The [[economics/macroeconomics/Cash Rate|cash rate]] is one of the most influential policy instruments the RBA tweaks in monetary policies.\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Money":{"title":"Money","content":"\nFundamentally, *money* is a:\n1. **Medium of exchange** ‚Äî an asset that makes trading efficient by eliminating the *inefficiencies of bartering*, a form of trading where two parties exchange goods and relies on mutual desire of the others‚Äô goods, called a *[double coincidence of wants](https://en.wikipedia.org/wiki/Coincidence_of_wants)*.\n   \n   Eg. in bartering, you might trade a video game for someone‚Äôs book, but they must be someone who wants that video game for them to agree to that exchange.\n    - *Commodity currencies* ‚Äî money in the form of assets which have intrinsic value, such as precious metals.\n    - *Fiat money* ‚Äî money in the form of something that has no/very little intrinsic value, such as a cash note. \n2. **Unit of account** ‚Äî the value of everything is measured in terms of the same standard, a dollar, in the same way that all lengths are quantifiable with the standard unit, the *meter*.\n3. **Store of value** ‚Äî money can be accumulated and be used to acquire things in the future. People collectively trust in the value of holding money over time.\n   \n    Money is not the only store of value. You could store your value in the form of other assets like a house or shares. Money, being the medium of exchange, has the advantage of being *perfectly liquid* meaning that you can directly use it to purchase something. You can‚Äôt use a house to purchase something, at least not directly.\n\n\u003e Australia's physical currency is produced by the RBA and [Royal Australian Mint](https://www.ramint.gov.au/).\n\n### Money Measures\nIn modern economies, money takes the form of _physical currency_ (notes/coins) and private bank deposits.\n\nSome standard measures of money used by Australia. *Some figures as of 2022, sourced from the [RBA](https://www.rba.gov.au/publications/bulletin/2018/sep/money-in-the-australian-economy.html)*\n| Currency    | Description                                                                                   | value             |\n| ----------- | --------------------------------------------------------------------------------------------- | ----------------- |\n| Currency    | Physical notes and coins produced by the [[economics/macroeconomics/Sectors\\|public sector]]. | ~74 billion AUD   |\n| M1          | *Currency*, plus private bank deposits.                                                       | ~357 billion AUD  |\n| M3          | *M1*, plus any deposits made to non-banks.                                                    | ~2086 billion AUD |\n| Broad money | *M3*, plus all the money borrowed from private sector.                                        | ~2096 billion AUD |\n\n### Money Supply\nMoney supply is the amount of money circulating in the economy. It can be a measure of currency, M1, or other standard measures of money.\n\n### Money Demand\nMoney demand is basically how much money we, in aggregate, would like to hold in our bank accounts (as opposed to lower liquidity assets):\n$$\\colorbox{#FFFFBF}{$M^D=P\\times L(Y, i)$},$$\nwhere $P$ is the aggregate price level and $L$ is the [liquidity preference function](https://en.wikipedia.org/wiki/Liquidity_preference), which is a function of real GDP and interest rate. A decrease in the [[economics/microeconomics/Opportunity Cost|opportunity cost]] of holding money will shift the money demand curve up.\n\nThe *liquidity preference function* looks like this:\n\n![[economics/macroeconomics/assets/liquidity-preference-function.png|500]]\n*Sourced from [Intelligent Economist](https://www.intelligenteconomist.com/liquidity-preference-theory/).*\n\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Output-Gap":{"title":"Output Gap","content":"\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Private-Banks":{"title":"Private Banks","content":"\nPrivate banks are *financial intermediaries* that make household savings available for borrowing. \n\nWhen you make a deposit of physical currency to a bank, you are converting physical currency into an increase in the number representing the the value of your bank account. \n\nDeposits represent a liability for the bank. \n\nBanks make money by incentivising people to make deposits that they can earn a small interest on, and then making that deposited money available for borrowing at a higher interest rate. The money they make is in the difference between the two.\n\n### Bank Balance Sheet\n\n![[economics/macroeconomics/assets/private-bank-balance-sheet.png|400]]\n\nTo start a bank, you need an initial fund, called the 'shareholders' equity capital', or just 'equity'. Suppose you start a bank with $100 AUD equity. This also means the bank has $100 in its *reserves*.\n\n![[economics/macroeconomics/assets/private-bank-initial-balance.png|300]]\n\nSuppose a customer gets a $1000 loan from our bank. They'd have a deposit account with $1000. Our balance sheet would record a $1000 loan as an *illiquid* financial asset and a deposit of $1000. \n\nNote that we essentially 'created' money out of thin air. We say that the borrower has $1000 available, but we don't need to actually provide it until they withdraw it from our reserves. When they do withdraw more than is in our reserves, we must either attract more deposits to build up our reserves or borrow it from someplace else. If we fail to do either, then we'll become *insolvent*, ie. unable to pay back depositors and therefore operate.\n\nWe must do our best to ensure that $\\text{Assets} \u003e \\text{Liabilities}$.\n\n### Bank Run\nWhen someone wants to withdraw more money than the bank has in its reserves, then it‚Äôll have to actively attract more deposits *or* they‚Äôll have to resort to borrowing the necessary money from the central bank or other financial institutions in the [[economics/macroeconomics/Central Bank|overnight cash market]].\n\nA bank run is when *a lot of people* all try to withdraw their deposits in full from the bank, and the bank becomes *insolvent*, where the bank is no longer able to pay back people's deposits. The unfortunate thing is that the mass panic about the bank becoming insolvent is what *causes* the bank to become insolvent, just like how [panic buying](https://en.wikipedia.org/wiki/Panic_buying) causes shortages.\n\nEven when $\\text{Assets}\u003e\\text{Liabilities}$ on the balance sheet, it is still possible for banks to become insolvent if they have insufficient *liquid* assets to meet a sudden increase in demand for withdrawal.\n\n#### Surviving Bank Runs\n**Central bank bailout**\nThe [[economics/macroeconomics/Central Bank|central bank]] can help bail out banks that are on the verge of becoming insolvent, however they shouldn‚Äôt do this liberally. The general rule is that the central bank should lend to a bank only if it is *solvent* (ie. $\\text{Assets} \u003e \\text{Liabilities}$ in their balance sheet), but they're simply just lacking in *liquid* assets to pay deposits with.\n\n**Deposit insurance**\nGovernments can provide deposit insurance that guarantee you can withdraw currency up to some maximum value. In Australia, the government promises you deposits of up to 250000 AUD can be withdrawn without fear of the bank losing your savings. This insurance doesn‚Äôt come for free ‚Äî the government charges a fee to banks to have this insurance, and the banks in turn charge the depositor by lowering the deposit rates or charging more admin fees.\n\n### Prudential Regulations\nGovernment regulations set by [APRA](https://www.apra.gov.au/what-prudential-regulation), called 'prudential' or 'macro-prudential' regulations, require banks (and other financial institutions like super funds, insurance companies, etc.) to adhere to certain balance sheet values in order to prevent becoming insolvent.\n\nFor a bank, there are the following ratios that must be above/below a prescribed safe value:\n1. **Leverage ratio** ‚Äî $\\frac{\\text{Loans}}{\\text{Equity}}$ should be below a ceiling value. \n\t- Note that $\\text{Equity = Loans + Reserves - Debt}$. Equity provides a buffer to prevent banks becoming insolvent.\n1. **Reserve-deposit ratio** (*liquidity coverage ratio*) ‚Äî $\\frac{\\text{Reserves}}{\\text{Deposits}}$ should be above some floor value. It's also called 'liquidity coverage' ratio because there must be sufficient liquid reserves to meet sudden withdrawal demand.\n2. **Capital ratios** ‚Äî a ratio of equity to a weighted risk measure of their assets. A [[economics/macroeconomics/Bonds|government bond]], for example, is far less risky financial asset than a mortgage arranged with someone with low income.\n3. **Net stable funding ratios** ‚Äî a value associated with the sources of bank funding. For example, longer-term loans corresponds to a lower likelihood of currency withdrawal.\n4. **Loan to value ratio** ‚Äî a limit on the amount someone can borrow to hold a certain asset. For instance, a loan-to-value ratio of $0.8$ means that banks will lend a maximum of $80\\%$ of the market value of an asset.\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Public-Debt":{"title":"Public Debt","content":"\n**Public debt**, also called *government debt* or *national debt*, is the financial liabilities of the government. Since raising taxes is not always reasonable, nearly all governments have to borrow money from the [[economics/macroeconomics/Sectors|private sector]] to meet their expenses. The main way governments borrow money is buy selling *securities* known as **[[economics/macroeconomics/Bonds|government bonds]]**. \n\nThe government's *budget balance* is expressed as: \n$$\n\tBB=T-G,\n$$\nwhere $T$ is taxes and $G$ is government spending.\n- When $BB \u003c 0$, we say there's a **budget deficit**.\n- When $BB \u003e 0$, we say there's a **budget surplus**.\n\nThe governments debt at a time $t$ is expressed as $D_t = D_{t-1} - BB_t$, basically the previous debt minus the *budget balance* over the time between $t-1$ and $t$.\n\n### Golden Rule of Public Investment\nA golden rule for public investment says:\n- Government expenditures that benefit the current taxpayers should be paid for using *their* taxes.\n- Government investments that are long-lived, such as the construction of hospitals, should be funded through government borrowing.\n\nThe aim is to be fairer to each generation. Your children shouldn‚Äôt have to pay off debts that paid for things which you can enjoy now but which they cannot enjoy in their time.\n\n### Government Budget Constraint\nThe government budget constraint equation is given as:\n$$\n\\begin{align}\n\t-(T_t-G_t) \u0026= D_t-D_{t-1} \\\\ \n\t-(\\tilde{T_t} - TR_t - rD_{t-1} - G_t)\u0026= D_t - D_{t-1},\\\\\n\\end{align}\n$$\nrearranging terms, we have:\n$$\n\t\\underbrace{G_t+TR_t+rD_{t-1}}_{\\text{Expenses}} = \\underbrace{\\tilde{T_t} + D_t - D_{t-1}}_{\\text{Funding sources}}.\n$$\nRemember, $T_t=\\tilde{T_t}-TR_t-rD_{t-1}$ consists of tax revenue $\\tilde{T_t}$ , transfer payments $TR_t$ and interest on debt $rD_{t-1}$. \n\nWe call the equation above the government 'budget constraint' because we can see that the only way to fund expenses is to either raise taxes or borrow.\n\n### Sustainability of Public Debt\nThe *debt-to-GDP ratio* is the standard way we assess whether a country's total public debt is sustainable in the long-term. \n\nAustralia's public debt-to-GDP ratio is sitting at ~60% as of 2022, which is regarded as sustainable. Japan's debt-to-GDP ratio, however, is at about +200%, the highest of any developed country. Public debt may be owed to domestic households or firms, or foreign residents.\n\nAn equation for the change in debt-to-GDP ratio is derived from:\n\n$$\n\\begin{align}\n\tD_t \u0026= D_{t-1} - BB_t \\\\\n\t\u0026=D_{t-1}+rD_{t-1}-(\\tilde{T_t}-G_t - TR_t) \\\\\n\t\u0026=D_{t-1}+rD_{t-1}-PBB_t \\\\\n\t\\frac{D_t}{Y_t}\t\u0026=\\frac{D_{t-1}(1+r)}{Y_t}-\\frac{PBB_t}{Y_t}\n\\end{align}\n$$\n\nAssuming GDP grows at a constant rate $g$, we can use $Y_t=Y_{t-1}(1+g)$ to obtain:\n\n$$\n\\begin{align}\n\t\\frac{D_t}{Y_t} \u0026= \\frac{D_{t-1}(1+r)}{Y_{t-1}(1+g)}-\\frac{PBB_t}{Y_t} \\\\\n\td_t\u0026= \\frac{d_{t-1}(1+r)}{1+g}-pbb_t\\\\\n\td_t-d_{t-1}\u0026= \\frac{(r-g)d_{t-1}}{1+g} - pbb_t \\\\\n\t\\Delta d_t \u0026= \\frac{(r-g)d_{t-1}}{1+g} - pbb_t.\n\\end{align}\n$$\n\n-   $g$ is the real growth rate of GDP.\n-   $r$ is the real interest rate.\n-   $PBB=\\tilde{T_t}-G_t - TR_t$ is the *primary budget balance*, consisting of taxes $\\tilde{T_t}$, government bond interest payments $G_t$, and transfer payments $TR_t$.\n-   $pbb_t=\\frac{PBB}{Y}$.\n\nFrom the above equation, running a budget surplus (ie. making $pbb_t$ positive) is the best way to reduce debt. Alternatively, if you can achieve $r\u003cg$, then you can still reduce debt that way.\n\nIn general, a higher public debt to GDP ratio results in a reduction in real GDP growth.\n\n**Crowding out:**\nSee [[economics/macroeconomics/Savings and Investments|savings and investment]]. When the government borrows more, it tends to shift the national savings curve to the left (remember that national savings is a function of government balance), causing the equilibrium real interest rate to rise and therefore the investment demand curve to fall.\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Quantity-Theory":{"title":"Quantity Theory","content":"\nThe *quantity theory of money* asserts that the price of goods and services is proportional to the *money supply* in the economy, assuming everything else is held constant. Basically, if you double how much money exists in the economy, then prices will simply double in response over time due to inflation.\n\n### Velocity of Money\nThe *'velocity' of money* is a measure of the rate at which mone circulates in the economy. It's the number of times $1 is exchanged in a time period. A higher velocity of money is indicative of economic growth.\n\nThe velocity of money is calculated as the ratio of nominal GDP to the money supply,\n\n$$\n\\begin{align}\n\tV \u0026\\equiv \\frac{Y_\\text{nominal}}{M} \\\\\n\t\u0026\\equiv \\frac{PY_\\text{real}}{M},\n\\end{align}\n$$\nwith $P$ being the aggregate price level.\n\nWhen we assume that $Y$ and $M$ are exogenous, or in other words, constant, then we'll have\n\n$$\n\tP \\propto M,\n$$\n$$\n\t\\Delta P=\\colorbox{#ffffbf}{$\\pi = \\Delta M$}.\n$$\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Savings-and-Investments":{"title":"Savings and Investments","content":"\nDisposable income\n\n$\\text{YD} = Y - \\text{taxes}+\\text{government transfers} + \\text{government interest payments} - \\text{business retained earnings}$.\n\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/macroeconomics/Sectors":{"title":"Sectors","content":"\n","lastmodified":"2022-07-30T00:03:13.716004324Z","tags":null},"/economics/microeconomics/Externalities":{"title":"Externalities","content":"\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/economics/microeconomics/Market":{"title":"Market","content":"\n\n### Perfectly Competitive Markets\nTODO.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/economics/microeconomics/Opportunity-Cost":{"title":"Opportunity Cost","content":"\nTODO.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/economics/microeconomics/Supply-and-Demand":{"title":"Supply and Demand","content":"\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/Effective-Engineer":{"title":"Effective Engineer","content":"\nSome enlightening non-technical ideas I've come across and expanded upon which have helped me be a more effective engineer.\n\n---\n\n### Soft Skills\n*Soft skills* encompass communication skills, teamwork skills, work ethic and just having a growth mindset and seeing your interactions with others as a non-zero sum game.\n- [[effective-engineer/soft-skills/Charisma|Charisma]]\n- [[effective-engineer/soft-skills/Negotiation|Negotiation]]\n- [[effective-engineer/soft-skills/Leadership|Leadership]]\n- [[effective-engineer/soft-skills/Performance Reviews|Performance reviews]]\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/entrepreneurship/Entrepreneurship":{"title":"Entrepreneurship","content":"\nSome scattered ideas about entrepreneurship, sourced from books:\n- *Complete Software Developer's Career Guide* by John Sonmez.\n- *So Good They Can't Ignore You* by Cal Newport.\n\n\u003e \"Assume the business will fail, then do the smallest amount of initial setup and work to get it started.\" ‚Äî John Sonmez\n\nIn other words, direct as much of your efforts to what matters ‚Äî which is getting your idea developed and ship as soon as possible. Forget all the branding and business laws, etc. That all matters, but not if your business isn't going to survive.\n\nStart building the business *during* your 9-5 job. If you can't tolerate this, give up. You're not mentally fit for this pursuit.\n\nLearn [[effective-engineer/entrepreneurship/Sales|sales]] and [[effective-engineer/entrepreneurship/Marketing|marketing]]. Successful entrepreneurs who aren't competent salespeople don't exist.\n\nBe prepared for life to truly suck as an entrepreneur.\n\n\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/entrepreneurship/Marketing":{"title":"","content":"","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/entrepreneurship/Sales":{"title":"","content":"","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/passion/Work-Life-Balance":{"title":"Work-Life Balance","content":"\nThis is a heavily opinionated topic. People have deeply conflicting beliefs of how concretely one should segregate 'work' and 'life'.\n\nSome probably controversial opinions I hold, sourced from people I look up to:\n- Work/life balance shouldn't exist. You just have the wrong mindset if you're worrying about it.\n\t\u003e \"To achieve true work/life balance, at least how I see it, is to not achieve it at all, but to blue the lines so well that everything becomes 'life'\" ‚Äî John Sonmez.\n- Give your company your 40 hours per week, then give however much you can beyond that to working for yourself. Spend the time you would otherwise spend overworking by working on other things in your life that make you more valuable, like your own software projects, online courses, reading, a side business, etc.\n- You have the capacity to enjoy literally every second of your life, provided you are *present*.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/productivity/Context-Switching":{"title":"Context Switching","content":"\nContext switching is very bad.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/soft-skills/Charisma":{"title":"Charisma","content":"\n### First Impressions\nThey can't be reversed. Humility is always an excellent quality, however aim to represent yourself with an authentic level of confidence *and* curiosity. \n\n### Dress Code\n*The way that you dress matters*, even when the dress code is non-existent where you work (as they often are for tech companies). People will always judge you based on your appearance, no exceptions, and that's a fact of life. See the ['Halo Effect'](https://en.wikipedia.org/wiki/Halo_effect).\n\nFurthermore, dressing in professional clothes reinforces your identity as a professional to yourself and others, and you will tend to conduct yourself in a way that is congruent with this identity.\n\n### Contradictions\nPersonality/appearance contrasts are polarising and inexplicably magnetic. \n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/soft-skills/Conflict":{"title":"Soft Skills","content":"\n\u003e Ideas sourced from 'How to Win Friends and Influence People' by Dale Carnegie and 'The Complete Software Developer's Career Guide' by John Sonmez.\n\nDo not avoid it when it arises. It's *always* mutually beneficial to resolve it. \n\n\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/soft-skills/Leadership":{"title":"Leadership","content":"\n\u003e Ideas sourced primarily from 'Extreme Ownership' by Jocko Willink.\n\n\n\n### Lead By Example\nGood leaders *always lead by example* and do themselves what they ask from their team. They will always hold themselves to a higher level of accountability before the team.\n\nThis implies that you must always be willing to get into the front lines, just like in the battlefield as a general. If you want your team to adopt Agile methodologies, you must demonstrate that you're actively using it first. If you want your team to have a strong work ethic, you must demonstrate that yourself. \n\n### Responsibility\nBeing a good leader means to assume $100\\%$ responsible for **every** single failure you encounter in your team's endeavours, and ultimately in your personal life and relationships. You are always to blame. *No exceptions*.\n\u003e There are no bad teams, only bad leaders.\n\nWhen your team members screw up or even actively sabotage things, it is still your fault. You could have trained them better, confirmed that they were in agreeance with plans, etc. Likewise, when the team is successful, you must ensure the credit is distributed to the team's members, *not to yourself*.\n\n### Subordinate Leadership (Delegation)\nTrain and trust your members.\n\nTODO.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/soft-skills/Mentorship":{"title":"Mentorship","content":"\n### Selflessness\nAlways show your willingness to help your peers, *even to the extent of putting them before yourself*. It is much better to build a reputation as a selfless, giving person that aggressively pushes themselves and everyone else up instead of *only* themselves.\n\nCompetition is good, but drop any desire to 'beat' the other person in your personal interactions with them. Always demonstrate authentic selflessness and a desire to see the other person succeed. \n\nStop treating your career as a zero-sum game. Drop the idea that you need to beat everyone else and keep your knowledge and 'secrets' hidden to maximise your job security.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/soft-skills/Negotiation":{"title":"Negotiation","content":"\nThe consensus seems to be to *always negotiate*.\n\n\n\u003e Ideas sourced from 'Never Split the Difference' by Chris Voss.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/soft-skills/Networking":{"title":"Networking","content":"\n### Networking Misconceptions\nNetworking, the act of deliberately developing professional contacts, must be done with the intent of giving as many people what they want as possible. Approaching it with a self-serving mindset is incorrect. For this reason, it is best done when you're *not actively looking for things from people*, ie. a job. When you make networking about providing value to others, it stops being something you dread doing. It's a long-term investment and is meant to be built over years and to deliver value over years, not days.\n\nNetworking is to be done everywhere, not just at your university on-campus networking fair. You should seek opportunities all the time to deliver value to the new people you come across.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/soft-skills/Performance-Reviews":{"title":"Performance Reviews","content":"\nPerformance reviews are *bullshit*, but you must play the game to win.\n\n### Schedule Regular Reviews\nYou must have regular one-on-one discussion with your manager/boss about your performance. Ideally weekly or fortnightly at a minimum.\n\nDirectly ask how you are doing and what can be improved. Make your goals known to your manager/boss. For instance, if you're trying to get promoted from an L3 engineer to an L4 engineer, make that obvious every conversation. You must be clear about your goals if they're promotion-related because a good review **does not imply** a promotion!\n\nMaintain [[effective-engineer/soft-skills/Performance Reviews#Document Everything|documentation]] for their response (an email or a Google Docs document, for example). People are subconsciously inclined to stay congruent with their past behaviours and statements, according to the [Consistency Principle of Persuasion](https://en.wikipedia.org/wiki/Consistency_(negotiation)). If they communicate that you're meeting the requirements for whatever goal, then documenting things will compel them to commit to what they said.\n\n### Document Everything\n*Document everything* to a borderline autistic extent. \n1. Create daily logs and weekly reports of your high-level progress.\n2. Manage a growing knowledgebase.\n3. Note the books you've read and other educational pursuits that show improvement.\n4. Save all the emails where you have received praise for you work.\n\nPut up a fight if you haven't been promoted when you expected to be. If you document *everything*, you'll have a mountain of evidence to support your case that cannot be ignored.\n\n### Promotions \u0026 Raises\nPrefer adopting more responsibility and 'bigger' job titles than more money, because the money will naturally follow in the long term. You cannot attain a promotion by working hard quietly, you absolutely must be aggressive in pursuit of it. You don't get opportunities - you make them.  \n\nAgain, make it absolutely clear to management that you want a promotion and intend to [[effective-engineer/soft-skills/Performance Reviews#Document Everything|prove]] you meet the requirements for one.\n\nAn extremely powerful case for a promotion is if you can prove, with numbers, that you are worth more than you cost.\n\n**Avoid ultimatums**: Although it sounds like the most powerful 'checkmate' move to make in order to get what you want, don't give your boss an ultimatum where you demand a promotion/pay rise or leave the job by accepting a higher-paying offer. You'll piss off people, but more importantly they'll be motivated to find a replacement for you because you'll be seen to be more of a liability than an asset. Some companies have strict policies that compel managers to never negotiate.\n\n**Job hop**: it's a reliable way to get a 'promotion', just at another company. Doing it every 2-3 years seems to be the norm, and it forces you to constantly stay in demand.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/effective-engineer/soft-skills/Personal-Brand":{"title":"Personal Brand","content":"\nUnfortunately, to have impact in this world requires you to build reputation and understanding how to influence people. To do all this, you need to build up a *personal brand*.\n\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/Finance":{"title":"Finance","content":"\nFinance is the study of money and assets and the management of them.\n\n\u003e What's the difference between finance and economics? Finance is concerned about managing money while economics is a social science focusing on how human‚Äôs make decisions around the allocation of scarce resources. Finance and economics are different disciplines, however *they inform each other*.\n\n---\n\n- [[finance/investment/Investing|Investing]]\n\t- [[finance/investment/Mutual Funds|Mutual funds]]\n\t\t- [[finance/investment/Index Funds|Index funds]]\n\t\t- [[finance/investment/Exchange Traded Funds|Exchange traded funds (ETFs)]]\n\t- [[finance/investment/Stocks|Stocks]]\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Angel-Investors":{"title":"Angel Investors","content":"\nAngel investors are just really rich people who are willing to lend their own money to fund a startup's initial venture. Startups often perfer angel investors over other forms of funding because they generally get better terms.\n\nAngel investors are considered the opposite of [[finance/investment/Venture Capital|venture capitalists]], since they're focused on business viability than helping to start a business.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Collateral":{"title":"Collateral","content":"\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Derivatives":{"title":"Derivatives","content":"\nTODO.\n\n\n[[finance/investment/Options|options]] and [[finance/investment/Futures|futures]].\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Efficient-Market-Hypothesis":{"title":"Efficient Market Hypothesis","content":"\nThe *Efficient Market Hypothesis* is a theory that asserts that share prices always factor in all information, meaning they're always traded at their fair value, making it impossible for investors to 'beat the market' indefinitely. A result following from this idea is that the risk-reward tradeoff is perfectly symmetrical.\n\nThe truth of this theory is highly debated and the firmness of people's belief in it ranges on a spectrum. Strong supporters of this theory believe that no level of analysis and strategising is futile and will never produce any net profit over time. It makes sense for them to prefer investing in [[finance/investment/Investing#Active vs Passive Investing|passively managed]] investment vehicles like [[finance/investment/Index Funds|index funds]] and [[finance/investment/Exchange Traded Funds|ETFs]] instead of actively managed ones.\n\nPeople who do not support the efficient market theory will believe that it's possible for skilled and experience analysts to exploit *market inefficiencies* (which are situations where an asset's price does not accurately reflect its true value) to reliably generate a return.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Exchange-Traded-Funds":{"title":"Exchange Traded Funds","content":"\nExchange traded funds (ETFs) are a subclass of [[finance/investment/Mutual Funds|mutual funds]] that are very similar to [[finance/investment/Index Funds|index funds]], with the main difference being that you can buy/sell shares whenever the stock market is open as opposed to only once a day. ETFs and index funds are sometimes used interchangeably incorrectly.\n\nAn ETF *is* a [[finance/investment/Securities|security]], so it is tradeable and has a share price that rises/falls.\n\n### ETFs vs Index Funds\nPick index funds over ETFs if you want to remove the temptation of impulse buying/selling stocks and let you automatically reinvest earnings back into your account.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Futures":{"title":"Futures","content":"\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Hedge-Fund":{"title":"Hedge Fund","content":"\n*Hedge funds* are [[finance/investment/Investing#Active vs Passive Investing|actively managed]] services that pool together money from a bunch of investors and then use certain investment strategies to achieve high returns and will distribute a share of the profit to the clients. They're considered risky investments and sometimes are only exclusive to clients with high net worth. Part of the reason they're riskier to invest in is because they are less regulated than other investment funds like [[finance/investment/Mutual Funds|mutual funds]] and because they borrow a lot of money to take advantage of [[finance/investment/Leverage|leverage]]. \n\nIn plain English, a *hedge* is some form of protection against financial losses. To \"hedge one's bet\" means to avoid commitment in the face of difficult choices. A hedge fund therefore means, in a more literal sense, a protection of money, however they gradually got riskier after the invention of the concept in 1949.\n\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Index-Funds":{"title":"Index Funds","content":"\n*Index funds* are a subclass of [[finance/investment/Mutual Funds|mutual funds]] that are [[finance/investment/Investing#Active vs Passive Investing|passively managed]] instead of [[finance/investment/Investing#Active vs Passive Investing|actively managed]]. They track a specific [[finance/investment/Market Index|market index]].\n\n[[finance/investment/Index Funds|Index funds]], and *index investing* in general, were 'invented' by a guy named *Jack Bogle* in the 1970s, who founded [Vanguard](https://www.vanguard.com.au/). He essentially got sick of mutual funds charging people so much for active management. He's credited with being the person who has helped investors create more wealth than anyone else on the planet.\n\nThe expenses associated with *actively managed mutual funds* (those that have people monitoring investment performance) tend to be considerably higher than *passively managed mutual funds* (ie. index funds). Roughly, actively managed mutual funds often charge $1\\text{-}2\\%$ of your account balance per year while index funds charge well below $1\\%$.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Investing":{"title":"Investing","content":"\nAn *investment* is the purchase of an asset or commodity with the expectation of it producing income for you or appreciating in value. *Investing* is the set of theory and practices around making smart investments that aid you in meeting your financial goals.\n\n1. Understand the power of compounding. Start early and invest regularly.\n2. Understand [[finance/investment/Portfolio#Diversification|diversification]].\n3. Only invest in what you understand. \n4. Would you want to be an owner of that business? \n\n\u003e The main difference between a *trader* and an *investor* is how long they hold the asset. Traders focus on capitalising on short-term trends.\n\n## Investing in the Stock Market\nSee [[finance/investment/Stock Market|stock market]].\n\n\u003e Ideas here are sourced from:\n\u003e - 'The Intelligent Investor' by Benjamin Graham\n\u003e - 'A Beginner's Guide to the Stock Market' by Mattew Krater\n\u003e - 'The Barefoot Investor' by Scott Pape\n\u003e - Investopedia articles\n\u003e - [New Money](https://www.youtube.com/c/AussieWealthCreation).\n\u003e - ... and advice from investing pioneers such as Warren Buffett, Charlie Munger, etc.\n\n### Active vs. Passive Investing\n*Active* management involves monitoring the performance of an investment portfolio and making decisions about whether to buy, sell or hold and asset. It aims to 'beat the market' by adopting certain investing strategies and does not support the [[finance/investment/Efficient Market Hypothesis|efficient market hypothesis]] which implies it's not possible to 'beat the market' over the long run.\n\n*Passive* management, known as 'index investing', is about mirroring a [[finance/investment/Market Index|market index]] and is usually associated with [[finance/investment/Index Funds|index funds]] and [[finance/investment/Exchange Traded Funds|ETFs]]. They help *diversify* you across the whole part of the market.\n\nWhether active or passive investment outperforms the other in the long term is an ongoing debate.\n\nWarren Buffett, the world's most successful active *value investor*, recommends most people to pursue passive investing over attempting to do active investing yourself because passive investing removes the irrationality from buy/sell decisions that you're victim to.\n\n### Value vs. Growth Investing\n*Value investing* is about being able to see the intrinsic value of something, then buying that thing when its priced lower than the intrinsic value. *Value investors* believe the stock market to overreact to good or bad news and set prices that aren't reflective of the true value of a stock, which gives rise to an opportunity to profit.\n\nPut simply, if you know the *true* value of jewelry, and you find some overlooked cheap jewelry in a garage sale, then you would obviously exploit the opportunity.\n\n*Growth investing*, on the other hand, is about investing in the stock of smaller companies whose earnings are expected to climb at a much higher rate than established companies.\n\n### Stocks vs. Bonds\nStocks represent ownership, bonds represent loans. Each have their own pros/cons, but in general: bonds are lower risk and have lower returns. When you're young and don't have strict target dates for financial goals, just go for stocks and allocate a greater percentage of your portfolio to bonds when you require more certainty about your investment returns.\n\n### Capital Gains\nTODO.\n\nTODO: *Capital gains tax*.\n\n\n### Investing Strategies\n\n\u003e Random youtube comment: For beginners, i would go 95-97% funds / etfs and 3%-5% a stock you like. Gets you into the habit of researching stocks and looking at daily life and what companies impact you.\n\n\n#### Index Funds\nIt's widely recommended that most investors should just make monthly investments ([[finance/investment/Investing#Dollar-Cost Averaging DCA|dollar-cost averaging]]) to a low-cost [[finance/investment/Index Funds|index fund]].\n\u003e \"Most investors, both institutional and individual, will find that the best way to own common stocks is through an index fund that charges minimal fees. Those following this path are sure to beat the net results (after fees and expenses) delivered by the great majority of investment professionals\" ‚Äî Warren Buffett's 1996 Letter to Shareholders.\n- In Australia in year 2022, index funds in the S\u0026P/ASX 200 outperformed $\\approx 70\\text{-}80\\%$ of actively managed funds run by professionals.\n\nJack Bogle recommends to always commit to investing in an index fund, even if they're priced at all-time highs and you're convinced that they're overvalued. \n\n![[finance/investment/assets/s\u0026p-investing-in-local-peaks.png|500]]\n\n\u003e \"Never think you know more than the market does.\" ‚Äî Jack Bogle.\n\nHistorically, the only time investing in index funds has not worked has been when people cave into their emotions and deviate from their commitment to dollar-cost average invest into an index fund and attempt to beat the market on their own. Just stay the course.\n\n#### Dollar-Cost Averaging (DCA)\nTODO.\n\nDCA is about regularly putting money into an investment pursuit over the long term, rather than chucking in a huge sum at 'the right time'.\n\nWarren Buffett recommends to do this and commit to it for the long term.\n\nDollar-cost averaging protects you from making irrational decisions and the effects of large market fluctuations.\n\n![[finance/investment/assets/S\u0026P-dollar-cost-averaging.png|400]]\n\n#### The Buffett/Munger Approach\n1. Understand the business.\n2. Check for a durable competitive advantage.\n3. Management has integrity and talent.\n4. Ensure a marign of safety. \n\nTODO: Explain each.\n\n#### Patience\n\u003e \"You don't make money when you buy and you don't make money when you sell. You make money when you wait.\" ‚Äî Charlie Munger.\n\nFor active investors, be patient. For passive investors, proceed to regularly invest as normal.\n\n#### Emotions\n\nAvoid headlines.\n\n### Macroeconomic Effects\nMacroeconomic events and variables have a huge effect on stock market performance.\n\n#### Investing During High Inflation\n\u003e \"Like virginity, a stable price level seems capable of maintenance, but not of restoration\" ‚Äî Warren Buffett describing inflation and how escalating prices are permanent.\n\nA favourable company to invest in during inflationary periods has two properties:\n1. The freedom to jack up or fine-tune their prices without significantly dropping market share values. Eg. Apple, since they have a unique competitve advantage, can freely increase their prices without huge consequences to their share price. People generally won't try to substitute away to other competitors.\n2.  Low working capital. In other words, the company should be able to generate a lot of cash from little input and have a scalable business model. Eg. Meta can just increase ad frequency to generate more cash, while Ford would have to invest in new factories and equipment.\nAdvice [sourced](https://arichlife.com.au/how-warren-buffett-says-to-invest-during-high-inflation/) from Warren Buffett.\n\n#### Interest Rates\nAt lower [[economics/macroeconomics/Interest|interest rates]], stock market prices will more easily rise (I think. Need a source and explanation for this).\n\nAt higher interest rates, it's harder for stock prices to rise.\n\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Leverage":{"title":"Leverage","content":"\nTODO.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Market-Index":{"title":"Market Index","content":"\nhttps://www.investopedia.com/terms/m/marketindex.asp\n\nA *market index* is a value published by a financial data company that's meant to broadly capture the value of some section of a market. \n\nAn *index*, in most stats, economics and finance contexts, is just a representative value of an asset in a set of assets. *Indexes* are meant to accurately summarise the state of some market by picking out parts of the stock market and producing a value, usually by simply taking the mathematical weighted average. Indexes are created to serve as a simple indicator/benchmark of stock market performance that provide a useful summary at a glance. Note that there are indexes that also cover non-stock assets such as gold, oil, currencies, etc.\n\nTo be clear with terminology, you can't invest in an *index*, but you *can* invest in an [[finance/investment/Index Funds|index fund]] that mirrors an index such that an $n\\%$ increase in the index value will mean a corresponding $n\\%$ increase in your balance.\n\n### The 9 Major Market Indexes\n- **S\u0026P 500** captures the top companies participating in the US stock market. It's the most followed index in the world.\n- **Dow Jones Industrial Average** consists of the 30 largest companies in the US, so basically a subset of the companies in the S\u0026P 500.\n- **Nasdaq Composite Index** consists of 3000+ stocks and is heavily biased towards tech companies.\n- **MSCI World** captures majors stocks across 23 developed countries. This index provides some indication of the worldwide economic health.\n- **MSCI Emerging Markets** captures stocks across 24 emerging market countries, which are developing countries like India, China, etc.\n- **S\u0026P GSCI Commodity Index** captures commodities like oil, precious metals, agricultural produce, livestock, etc.\n- **Dow Jones Real Estate Index** captures the performance of [[finance/investment/Real Estate Investment Trusts|real estate investment trusts (REIT)]], mainly.\n- **Dollar Index** captures currency purchasing power of the US dollar relative to other major currencies.\n- **VIX**, also called the 'fear index', captures the level of fear in the stock market by tracking the price of [[finance/investment/Options|options]].\n\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Mutual-Funds":{"title":"Mutual Funds","content":"\nMutual funds are a managed investment service that collects together the money of many investors like you to purchase a specific set of [[finance/investment/Securities|securities]]. They're suited for people who want to participate in the stock market but minimise the time spent on buy/sell decisions about certain stocks.\n\nWhen you buy a share of a mutual fund, you are getting a slice of the profits they get from their investment decisions. They're managed by financial professionals, although whether this is a [[finance/investment/Investing#Active vs Passive Investing|good thing or not]] is debatable.\n\nBuying a share in a mutual fund is a good way to [[finance/investment/Portfolio#Diversification|diversify]] your investment portfolio since the mutual fund will often buy a wide range of assets.\n\nThere are many different kinds of mutual funds:\n- *Equity mutual funds* invest in stocks.\n- *Fixed-income mutual funds* invest in bonds.\n- *Index mutual funds* invest in a whole [[finance/investment/Market Index|index]] like [S\u0026P 500](https://www.investopedia.com/terms/s/sp500.asp).\n- *Country mutual funds* invest only the securities in a single country.\n- *Growth stock mutual funds* invest in [[finance/investment/Investing#Value vs Growth Investing|growth stocks]] instead of stocks in large established companies. Watch out for the *turnover ratio*.\n\n### Picking a Mutual Fund\nThe *prospectus* gives information about how the fund operates, its fees, performance data, etc.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Options":{"title":"Options","content":"\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Portfolio":{"title":"Portfolio","content":"\nAn *investment portfolio* is just a set of assets, typically [[finance/investment/Securities|securities]] like [[finance/investment/Stocks|stocks]] and [[economics/macroeconomics/Bonds|bonds]], and cash, but it can also include real estate, commodities, etc. What's inside your portfolio, or in other words, what you *asset allocation mixes* are, depends on your own *risk tolerance*, which depends largely on your age and financial goals. \n\n### Diversification\n*Diversification* is just about investing in a set of assets with varying levels of risk/return rather than fully investing in one type of asset. You can also diversify *within* an asset class. For example, when investing in shares, to diversify means to have a share portfolio spanning several companies than just 1 or a few companies.\n\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Real-Estate-Investment-Trusts":{"title":"Real Estate Investment Trust","content":"\n\n\nNote: [[finance/personal-finance/Barefoot Investor|Barefoot Investor]] encourages you to consider REITs as an alternative investment choice to buying an investment property.\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Securities":{"title":"Securities","content":"\nA *security* is a tradable financial asset. They exist as a way for businesses and goverments to acquire money to fund their *ventures* and operations.\n\nSecurities are a type of *financial instrument*, which is a contract between parties that serves as evidence of an agreement or ownership over assets.\n\n\u003e It‚Äôs called a security ‚Äúbecause there is a secure financial contract that is transferable, meaning it has clear, standardised, recognized terms, so can be bought and sold via the financial markets,‚Äù ([source](https://english.stackexchange.com/questions/247926/how-did-security-semantically-shift-to-mean-tradable-financial-asset#:~:text=They%20are%20called%20securities%20because,sold%20via%20the%20financial%20markets.)).\n\nSecurities are divided into 3 categories mainly:\n1. Debt securities like [[economics/macroeconomics/Bonds|bonds]].\n2. Equities such as [[finance/investment/Stocks|stocks]].\n3. Derivatives such as [[finance/investment/Futures|futures]], [[finance/investment/Options|options]], etc.\n\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Stock-Market":{"title":"Stock Market","content":"\n\u003e The stock market is the greatest opportunity machine ever created.\n\nThe *stock market*, also called the *share market*, is the buy/sell [[economics/microeconomics/Market|market]] for [[finance/investment/Stocks|stocks]]. Even though it‚Äôs called ‚Äòstock market‚Äô, you can also trade other securities like [[finance/investment/Exchange Traded Funds|ETFs]], corporate [[economics/macroeconomics/Bonds|bonds]], [[finance/investment/Derivatives|derivatives]] based on stocks, commodities, currencies and bonds in the stock market. To buy stocks, you need a broker.\n\n### Stock Exchanges\nA *stock exchange* is a centralised place that has the infrastructure to facilitate the trading of stocks. NASDAQ, NYSE and ASX are examples of *stock exchanges*. Note that in stock exchanges, you're only trading with existing shareholders, not the company itself (usually).\n\n![[finance/investment/assets/asx-physical-entrance.png|250]]\n\n*The ASX's (Australian Stock Exchange) physical building.*\n\n### Understanding the Stock Market\nThe basis of the stock market's existence is the incentive for companies to acquire funding to execute their ideas and the incentive for individuals with money (called investors) to invest and benefit from the success of those companies.\n\nAs a company becomes more profitable, its stocks increase in value (demand). The reverse also happens.\n\nThe profitability of a company can fluctuate massively ‚Äî due to material shortages, leadership changes, bad publicity, new regulations, etc. \n\n\nThe stock market is an example of something closely resembling a [[economics/microeconomics/Market#Perfectly Competitive Markets|perfectly competitive market]]. Share prices are determined by [[economics/microeconomics/Supply and Demand|supply and demand]].\n\nPeople buy shares through *brokers*.\n\n\n\n\nhttps://www.youtube.com/watch?v=8QaP43sFO5A\u0026ab_channel=Benjamin\n\n\nThe stock market is a [complex adaptive system](https://en.wikipedia.org/wiki/Complex_adaptive_system). Unlike in the context of maths and science, you can't predict how the overall system behaves just by knowing how each part of the system behave. \n\n\n### History of the Stock Market\n\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Stocks":{"title":"Stocks","content":"\n*Stocks* represent pieces of official ownership, called 'ownership equity', of a business. \n\nStocks are traded in the [[finance/investment/Stock Market|stock market]].\n\nStocks are [[finance/investment/Securities|securities]].\n\n\n*Shares* are the smallest denomination of company stock.\n\nOwning shares in a company makes you a *shareholder* of that company. Shareholders get to vote and sometimes get a portion of the business' profits, called [[finance/investment/Stocks#Dividends|dividends]]. If the company *becomes more profitable* between the time you bought the shares and the time you sell it, you'll have [[finance/investment/Investing#Capital Gains|capital gains]] on the shares.\n\nYour ownership is quantifiable as: $\\frac{\\text{Company X stocks that you have}}{\\text{Total Company X stocks}} \\times 100\\%$.\n\nCompanies will usually have millions or billions of total shares, called 'outstanding shares'.\n\nYour ownership gives you voting power in meetings and elections within the company. Generally, 1 share held gives you 1 vote, however this is set by the company, who can also split off shares into different classes where one class' shares have a greater weighting than another in terms of voting power.\n\n\n### FAQ\nSome questions I grappled with in trying to understand stocks.\n\n#### What is the intrinsic value of a stock?\n\n#### Why do people seem to reliably generate wealth in the stock market?\nAlthough it's seen and believed that many people lose a lot of money through trading in the stock market and that it's a risky endeavour, most investors still highly recommend you to participate in the stock market.\n\nTODO.\n\n#### What's the difference between stocks, shares and equities?\nIn everyday conversation, all 3 are the same. Formally, however, there are differences:\n- *Stock*: a representation of ownership in a company.\n- *Share*: the smallest denomination of company stock.\n- *Equity*: generally, it's the ownership of assets that have liabilities associated with them. For example, a *home equity* is the difference between the market value and the remaining balanced owed on a mortage.\n\nThe *stock market*, *share market* and *equity market* all refer to the same thing.\n\n#### Why are stocks called 'stocks'?\nIn medieval Europe, people recorded debts by etching marks on tally sticks and splitting them. When split, the stick would have a very unique pattern of splitting that was hard to tamper with. The longer part was called the 'stock', given to the lender, the shorter part was called the 'foil', given to the borrower. These sticks were considered legal proofs of transactions for hundreds of years until the 1800s.\n\n  ![[finance/investment/assets/tally-sticks.png|150]]\n  \n#### Why do companies sell stocks?\nWhen companies choose to list themselves on a *stock exchange* like the Nasdaq, they're provided with [[economics/macroeconomics/Liquidity|liquidity]] and a means to acquire money for capital investment. The tradeoff is that they're subject to greater expenses and tighter regulation.\n\nTo grow your company into an *empire* requires you to have access to a huge amount of capital, ie. money to invest in your ventures and operations. When a company can attract investors by listing themselves on the stock market, they'll be able to lease an office, hire more people, get more equipment, pursue more marketing efforts, etc.\n\nAn alternative way for companies to raise capital is to sell [[economics/macroeconomics/Bonds|bonds]]. Many companies will opt to sell both stocks and bonds. The act of selling shares is called *equity financing* and the act of selling bonds is called *debt financing*. For most startups, they simply don't have the assets to really sustainably meet debt payments, so equity financing is the preferred route, where they don't have to pay as much as they grow.\n\nCompanies can also acquire funding from [[finance/investment/Venture Capital|venture capital]] firms or [[finance/investment/Angel Investors|angel investors]].\n\n#### How do companies decide how many 'total shares' there are? Is there a difference between having a total number of shares of 1 million vs. 1 billion?\n \n\n### Dividends\nA dividend is a payment distributed by the company to shareholders, usually every 3 months. Many companies won't pay dividends and will reinvest it back into the company.\n\nThere are *dividend reinvestment plans* which automatically use the cash payment you'd usually get to buy more of the company's stock.\n\n### Common Shares vs. Preferred Shares\nShares are usually either *common shares* and *preferred shares*. Preferred shareholders get priority over common shareholders when receiving dividends and the assets if the company [[finance/investment/Stocks#Liquidation|liquidates]].\n\n### Liquidation\nLiquidation is when a business dies. When liquidated, a business' assets are distributed to shareholders proportionally based on how many shares each of them own.\n\nBusinesses die when they become *insolvent*, which means that their liquid assets \n\n### IPO (Initial Public Offering)\nAn *initial public offering* (IPO) is when a private company sells shares to the general public for the first time.\n\nTo IPO, a company must clear certain requirements by the [SEC](https://www.sec.gov/).\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/investment/Venture-Capital":{"title":"Venture Capital","content":"\nTODO. venture capital and angel investors.\n\n\n\n\n","lastmodified":"2022-07-30T00:03:13.728004324Z","tags":null},"/finance/personal-finance/Barefoot-Investor":{"title":"Barefoot Investor","content":"\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/finance/personal-finance/Insurance":{"title":"Insurance","content":"\nInsurance is a means of guaranteeing that you will be compensated a substantial amount of money in recovery of an event like damage to an asset (property, vehicle, etc), illness, injury, death, etc. You pay insurance companies a premium and in exchange they will guarantee a safety net for you which can help you more easily bounce back from catastrophic financial events. It's a powerful psychological purchase because you have certainty that you will continue to be financially secure, even if the worst tragedies of life occur. \n\nAn ***excess*** is an out-of-pocket payment you make when you make claims. Insurance policies may let you pay a greater excess in return for a smaller premium. When you have an asset that‚Äôs covered by insurance damaged for $1000 and the excess is $400, then the insurance company pays $600.\n\nThe ***premium*** is the amount you pay as part of an insurance contract. The value of the premium takes into account the insurance company‚Äôs view on how much of a risk you are, or in other words, how likely you are to make a claim and cause them lose money.\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/finance/personal-finance/Superannuation":{"title":"Superannuation","content":"\n*Superannuation* is a government policy that forces your employer to skim ~10% (the [Super Guarantee rate](https://www.australiansuper.com/superannuation/superannuation-articles/2019/11/superannuation-guarantee-what-you-need-to-know)) off your salary and deposits it to your super fund. It was implemented by the Australian government to force individuals to save for retirement. It‚Äôs basically the Australian version of the US‚Äô 401k. Generally, the superannuation contributions are subject to a much more lenient tax rate (~15%).\n\nYou can access the money in your superannuation account after you reach the ‚Äòpreservation age‚Äô, which is when you‚Äôre age 55-60, however this varies. There are no (legal) ways to access your super account, barring some exceptional circumstances (on compassionate grounds, home deposits, etc.).\n\n### Super Funds\n*Super funds* are financial institutions that manage your superannuation money and will invest it for you. Examples of super funds include UniSuper, SunSuper, Cbus Super, etc. \n\nSuper funds usually give you a choice of different investment options that differ in risk/returns (‚Äògrowth‚Äô, ‚Äòbalanced‚Äô, ‚Äòconservative‚Äô, ‚Äòethical‚Äô, etc.). By default, the ‚Äòbalanced‚Äô investment option will be chosen for you which spreads your money out across shares and cash, typically 70% in shares or property and 30% in fixed interest. Some super funds may allow you more granular control over which asset classes your money is dumped into. UniSuper, for example, lets you dump however much you want into international shares, Australian shares, property, cash, etc.\n\n#### Retail Super Funds \u0026 Industry Super Funds\nThere are *retail super funds* and *industry super funds*. They differ in what they do with profits.\n\n**Retail super fund**: distributes profit to shareholders. These are usually associated with banks. Some retail super funds include Suncorp, ANZ Smart Choice Super, etc.\n\n**Industry super fund**: are not-for profit, so profits are returned to members. These include super funds like AustralianSuper, UniSuper, SunSuper. They‚Äôre called industry funds because they used to mainly be associated with specific industries, but they‚Äôre mostly open to the public now.\n\n\u003e Historically (as of 2022, at least), industry super funds have outperformed retail super funds.\n\n#### Picking a Super Fund\nAs advised by [moneysmart](https://moneysmart.gov.au/how-super-works/choosing-a-super-fund), search for the super fund's *'product disclosure statement'* and consider the following properties:\n- Investment return performance (look at the last 5 years and beyond)\n- Fees. They‚Äôre usually deducted from your balance each month and can either be a percentage or fixed amount.\n- [[finance/personal-finance/Insurance|Insurance]]. Super funds usually give some insurance coverage to members by default. They include: life insurance, income protection and/or disability insurance. A premium will be deducted from your super for having this coverage.\n\nJust use the government's [YourSuper comparison tool](https://www.ato.gov.au/YourSuper-Comparison-Tool/) to pick out a super. Alternatively, you can use non-government comparison tools like [Canstar](https://www.canstar.com.au/superannuation/), but remember that they're a business and may run promotions for certain institutions.\n\n### Salary Sacrifice\nAn Australia-specific term for an arrangement between you and your employer where you trade a portion of your salary for some benefit from the employer, provided at no greater cost to them. Eg. [[finance/personal-finance/Barefoot Investor|Barefoot Investor]] recommends arranging a salary sacrifice to increase the employer‚Äôs super contributions to 15%.\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/finance/personal-finance/Tax-Return":{"title":"Tax Return","content":"\nA tax return is a document that reports your income (from work, interest on bank accounts, investments, etc.) and expenses. You file tax returns annually in Australia, and doing so is called ‚Äòlodging‚Äô your tax return. It‚Äôs something you must do if you have had tax taken out of your pay over the tax year (spanning from July 1 to 30th of June).\n- Your employer gives you an income statement that shows how much you earned and how much tax was deducted from your pay.\n- You could pay a tax professional to help you do your tax return, or you can do it yourself with the help of tax software, like TaxSlayer.\n\n### Tax Deductions\nTax deductions are work-related expenses that you can claim to reduce your tax. To claim something as work-related, you have to be able to prove that it‚Äôs helped you earn income. You must keep your purchase receipts around for 5 years after the claim (you can manage it in the ATO app's [myDeductions](https://ato.gov.au/mydeductions) tool).\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/lifestyle/Routine":{"title":"Routine","content":"\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/lifestyle/Workflow":{"title":"Workflow","content":"\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/maths/discrete-maths/Set-Theory":{"title":"Set Theory","content":"\n## Sets\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/Software-Engineering":{"title":"Software Engineering","content":"*Software engineering* is the set of theory and practices around how to write, reason about, and maintain software.\n\nBelow is a list of notes written in my exploration of software technologies and computer science concepts.\n\n### Programming Languges\n- [[software-engineering/programming-languages/TypeScript|TypeScript]]\n\n### Frameworks\n- [[software-engineering/frameworks/Cypress|Cypress]]\n\n### Software Engineering\n- [[software-engineering/software-engineering/Requirements Engineering|Requirements engineering]]\n- [[software-engineering/software-engineering/Agile|Agile]]\n\n### Concepts\n- [[software-engineering/concepts/programming/Generators|Generators]]\n- [[software-engineering/concepts/programming/Iterators|Iterators]]\n...\n\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/aws/Availability-Zone":{"title":"Availability Zone","content":"\n### Availability Zones\n*Availability zones* (AZz) are basically just one or multiple physical [[software-engineering/aws/Data Center|data centers]] in a [[software-engineering/aws/Region|region]].\n- Availability zones \n\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/aws/CloudFront":{"title":"CloudFront","content":"\nAWS CloudFront is a CDN service to help you serve cached static and dynamic content to users with minimal latency. It's great because you can trust in its very high availability, and it also handles things like DDoS attacks and other network attacks well.","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/aws/Data-Center":{"title":"Data Center","content":"\n![[Data center.png]]\nData centers are very large physical buildings that are dedicated to housing the computers that form the [[software-engineering/concepts/cloud/Cloud Computing|cloud]].\n- A data center's location is strategically chosen based on proximity to users (so as to minimise *round-trip times*, and therefore latency), proximity to workers, availability of land and electrical infrastructure, low natural disaster risks, and so on.\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/aws/Edge-Location":{"title":"Edge Location","content":"\n*AWS edge locations* are [[software-engineering/aws/Data Center|data centers]] owned by trusted 3rd party, called an *AWS Partner*, that uses [[software-engineering/aws/CloudFront|CloudFront]]. Together, the edge locations form the *edge network* between AWS and end users.\n\nWhen a user makes a network request to one of your services, the request goes to the edge location that has the lowest latency to reach. From there, cached content might be served back, or the edge location forwards the request to the *origin server* (which might be an S3 bucket, for example). This reduces the total **number of hops** between routers that a network request would otherwise need to go through in order to reach your service.\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/aws/Region":{"title":"Region","content":"\n### Regions\nA *region* is literally a geographic region which contains 1 or more [[software-engineering/aws/Availability Zone|availability zones]]. AWS ensures that there are a minimum of 2 AZs in every region.\n\n![[software-engineering/aws/assets/Region availability zone.png|500]]\n\nAWS has around 26 regions and 84 availability zones distributed across the world.\n- Regions typically have names like `us-east-1`, `us-east-2`, `ap-southeast-2` (Asia Pacific, Sydney), and so on. \n- Availability zones typically have names post-fixed with a character like `us-east-1a` and `us-east-1b`.\n\n![[software-engineering/aws/assets/AWS availability zone map.png|500]]\n\nNot all regions are equivalent. Some regions will access to services that are not available to others.\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/aws/assets/Regions":{"title":"","content":"","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/aws/assets/Untitled":{"title":"","content":"","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/concepts/clean-code/Clean-Code":{"title":"Clean Code","content":"TODO.\n\n### Coupling\nCoupling describes how dependent one thing is on another. In object-oriented programming, it refers to how dependent one class is on another.\n\nAlthough coupling is unavoidable in some instances, you should generally prioritise minimising coupling because it tends to improve the maintainability of your code. When changing a single part of a *highly coupled* system, you might find yourself changing many other parts of the system.\n\nAnother important point about low coupling is that it makes unit tests and integration tests easier to write *and* maintain.\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/concepts/cloud/Cloud-Computing":{"title":"Cloud Computing","content":"\nCloud computing describes the usage of a network of remote computers managed by [[software-engineering/concepts/cloud/Cloud Provider|cloud providers]] to handle computing tasks like storing/serving files, running web servers, training machine learning models, etc. *instead* of provisioning your own on-premise computers.\n\nBy deploying your compute tasks in the cloud, you no longer have to worry about things like:\n- Buying and setting up dedicated computers.\n- Hiring an IT team to take care of those computers.\n- Dealing with inevitable hardware failures (backing up and restoring data, for example).\n- Paying for the physical space to put your computers and ensuring it's secure from adversaries.\n- [[software-engineering/concepts/cloud/Scaling|Scaling]] to meet unexpected gain/reduction in usage.\n\nCloud computing is generally divided into 3 groups:\n- [[software-engineering/concepts/cloud/SaaS|SaaS]], for user-facing, generally non-technical software products like Gmail or Google Drive.\n- [[software-engineering/concepts/cloud/PaaS|PaaS]], for developer teams who don't want to manage the hardware and software for running computing tasks.\n- [[software-engineering/concepts/cloud/IaaS|IaaS]], for admins to easily provision and monitor compute resources like storage, networking, RAM, etc.\n\n![[software-engineering/concepts/cloud/assets/SaaS-PaaS-IaaS.png|400]]\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/concepts/cloud/Cloud-Provider":{"title":"Cloud Provider","content":"\n**Cloud providers** are just companies who have set up this big network of remote computers and give you reasonable prices for running computing tasks on their computers. For lone developers or huge enterprises, it's almost always more cost-efficient and reliable to serve a web application on the cloud, for example, rather than acquiring and administrating the hardware resources themselves.\n\nCloud providers are able to give you reasonable prices because they leverage *economies of scale*, where the larger a company's production gets, the lower the average cost of producing their goods/services, in general.\n\nThe main cloud providers are AWS, Azure and GCP. There are also other cloud providers like DigitalOcean, Linode, Vultr, etc. but they aren't considered nearly as mature as the 'big 3' previously mentioned because they don't provide nearly as many services.\n\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/concepts/cloud/IaaS":{"title":"IaaS","content":"\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/concepts/cloud/PaaS":{"title":"PaaS","content":"\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/concepts/cloud/SaaS":{"title":"SaaS","content":"\n# SaaS\n\n\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/concepts/cloud/Scaling":{"title":"Scaling","content":"\n","lastmodified":"2022-07-30T00:03:13.736004324Z","tags":null},"/software-engineering/concepts/computer-science/Program-Memory":{"title":"Program Memory","content":"\n\n\n### Stack\nTODO.\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/computer-science/Stack-Frame":{"title":"Stack Frame","content":"\nTODO.\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/design-patterns/Builder-Pattern":{"title":"Builder Pattern","content":"\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/design-patterns/Factory-Pattern":{"title":"Factory Pattern","content":"\nThe *Factory* pattern aims to give you a way to make objects... TODO.\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/programming/Code-Splitting":{"title":"Code Splitting","content":"\nTODO.\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/programming/Concurrency":{"title":"Concurrency","content":"\nTODO:\nconcurrency vs. asynchronous\nconcurrency vs. multithreading\nconcurrency vs. parallelism\n\n\nTODO:\nCritical region.\n\n\n### Mutex\n\n\n### Semaphore\n\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/programming/Functional-Programming":{"title":"Functional Programming","content":"TODO.\n\nA [[software-engineering/concepts/programming/Programming Paradigm|programming paradigm]]\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/programming/Generators":{"title":"Generators","content":"\nGenerators are *just functions* which, when invoked, will give you a single value from a list of values. They're *stateful* functions which return the next value in a list of values for each successive invocation.\n\nUsually, programming languages will give you a `yield` keyword which works basically the same way as `return`, but when the function is invoked again, execution resumes after the last `yield`. For example, below is a generator in Python.\n```python\ndef foo_generator():\n\tyield 2\n\tyield 3\n\tyield 5\n\ng = foo_generator()\nprint(next(g))      # ‚Üí 2\nprint(next(g))      # ‚Üí 3\nprint(next(g))      # ‚Üí 5\n```\nAt each `yield` statement, execution is suspended at that line and exeuction resumes at the line right after until the next `yield` or until the function terminates.\n\n**Note**: normally, when you invoke a function, a [[software-engineering/concepts/computer-science/Stack Frame|stack frame]] gets allocated on the [[software-engineering/concepts/computer-science/Program Memory#Stack|stack]] section of memory. When you invoke a generator function, the 'stack' frame actually gets allocated in the [[software-engineering/concepts/computer-science/Program Memory#Heap|heap]] instead (at least in [CPython](https://github.com/python/cpython)) and so they persist separately from the regular function call stack.\n\n### Generators \u0026 Iterator\nAll *generators* are [[software-engineering/concepts/programming/Iterators|iterators]]. When you invoke a generator function, it returns an *iterator* which you can loop through by invoking some function/method like `next` on them (in the case of Python).\n\n### Why Use Generators?\nNormally, when you need a list of values of some kind, you'd call a function which returns that entire list of values back to you. Generators are *lazy*, so they only return one value of a stream of values at a time. In other words, you get values from a stream of values *on-demand* rather than getting all values upfront. This is great when you don't know how many values from a stream of values you might need. If you really needed the first 10 values, but you loaded all 1000 values upfront, for example, you're hogging an **unnecessarily large amount of memory**. With generators, you only really hold the memory for a single value of the list, so it's a really common way to optimise for memory usage.\n\nGenerators are also a great way to represent streams of infinite values. For example, it might make sense to write a prime numbers generator function only get the next prime number, on-demand.\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/programming/Iterators":{"title":"Iterators","content":"\nAn **iterator** is an *object* that lets you loop through an **iterable**, usually by invoking, implicitly or explicitly, a `next` method.\n- In Python, iterators are objects that expose the `__next__`  [[software-engineering/programming-languages/Python#Dunder Methods|dunder method]] which can be invoked to retrieve the next value in the **iterable**.\n\nAn **iterable** is an object containing a collection of items that you can *get an **iterator** from*, usually, via a method. Iterables are stateless and have no concept of what element is the 'current' element in a traversal ‚Äì that is what the iterator handles.\n- In Python, that method is `__iter__`.\n- In C++, that method is usually `begin`.\n\nMany programming languages give you a for-loop variant that basically serves as syntactic sugar in using looping through the items in an **iterable**.\n- In Python, when you say `for item in iterable`, what happens behind the scenes is the iterable's `__iter__` method gets called to get an iterator, then `item` is assigned to whatever the iterator's `__next__` method returns. The for loop stops when `__next__` raises a `StopIteration` exception.\n- In C++, they're called *range-based for* loops with the syntax `for (T item : iterable) statements`.\n- In C#, they're called *foreach* loops with the syntax `foreach (T item in iterable) statements`.\n- In JavaScript, they're called *for of* loops with the syntax `for (let item of iterable) statements`\n- ... and so on.\n\n### Iterator Design Pattern\nThe purpose of iterators is to let the user access the elements of a data structure through a consistent interface, regardless of whether they're iterating through items in a vector, a binary search tree, a graph, a hash map, etc. All these data structures will provide a way for the user to get an iterator from them that can be used in a for loop, for example.\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/programming/Object-Oriented-Programming":{"title":"Object Oriented Programming","content":"Object-oriented programming is a [[software-engineering/concepts/programming/Programming Paradigm|programming paradigm]] that sees programs as a collection of *objects* interacting with each other. *Objects* are just containers for some data (called 'fields') and functions (called 'methods').\n\nObject-oriented programming involves heavy usage of [[software-engineering/concepts/programming/Object Oriented Programming#Classes|classes]] and enable us to make use of concepts like [[software-engineering/concepts/programming/Object Oriented Programming#Encapsulation|encapsulation]], [[software-engineering/concepts/programming/Object Oriented Programming#Inheritance|inheritance]], [[software-engineering/concepts/programming/Object Oriented Programming#Polymorphism|polymorphism]], etc.\n\n### Classes\nTODO.\n\n#### Static Classes\nTODO.\n\n### Encapsulation\nEncapsulation is about *hiding the implementation details* of a class as much as possible. Doing so will tend to minimise [[software-engineering/concepts/clean-code/Clean Code|coupling]].\n\n**Access modifiers**\nAccess modifiers are used to explicitly apply different levels of visibility to the members of a class. OO programming languages will usually give you the following 3 access modifiers.\n- `private` ‚Äì only accessible within the class.\n- `protected` ‚Äì accessible within the class *and* within its subclasses.\n- `public` ‚Äì accessible by any class in the program.\n\nLanguages might have variations on how these access modifiers behave, as well as what the default visibility is when you omit the access modifier. Eg. In Java, a `protected` member is also visible to classes in the same package. \n\nIn general, prefer the most restricted visibility possible.\n\n### Inheritance\nInheritance (also called 'subclassing') is when you make one class derive from a base class, causing the child class to *inherit* the parent class' non-private members.\n\n**Differences between languages**\nLanguages will have different syntax for inheritance and ways for subclasses to access their parent class. They may also differ in whether they support [**multiple inheritance**](https://en.wikipedia.org/wiki/Multiple_inheritance) or not.\n- In C++, the inheritance might look like `class Sub : public Base`. *Note*: C++ has concepts like private/public inheritance that other languges don't have.\n- In JavaScript, inheritance looks like `class Sub extends Base`. Within the `Sub` class, you have access the base class' constructor and methods via the `super` keyword.\n- In C#, inheritance looks like `public class Sub : Base`. Subclasses can access the base class' members through the `base` keyword (which is similar to JavaScript's `super` keyword).\n\n### Polymorphism\nTODO.\n\n#### Static Polymorphism\nTODO.\n\n#### Dynamic Polymorphism\nTODO.\n\n### Method Overidding\nMethod overriding is when you make a subclass provide an implementation for a method that's defined in its base class. Method overriding enables **[[software-engineering/concepts/programming/Object Oriented Programming#Dynamic Polymorphism|runtime polymorphism]]**.\n\n**Differences between languages**\nIn many languages, overriding is implicitly done, but it's recommended to explicitly label it.\n- In TypeScript and C++, you can optionally add the `override` modifier.\n- In Java, you can optionally annotate overridden methods with `@Override`.\n- In C#, you must use the `override` modifier.\n\n### Abstract Class\nAn abstract class is just one you can't instantiate, *forcing* the user to choose and instantiate a specific concrete subclass that inherits from the abstract class. \n\nAbstract classes let you define **both** *concrete methods* and *abstract methods*. If you find that you don't need to define concrete methods, which is usually the majority of the time, then consider using an [[software-engineering/concepts/programming/Object Oriented Programming#Interface|interface]] instead.\n\n**Differences between languages**\nMaking a class abstract differs between programming languages.\n- In TypeScript, prefix a class with `abstract`.\n- In C#, prefix a class with `abstract`.\n- In C++, give the class at least one [[software-engineering/programming-languages/C++|pure virtual function]], eg. `virtual void foo() = 0;`. There is no `abstract` keyword.\n\n#### Abstract Method\n*You can only define abstract methods inside an abstract class*. Abstract methods are ones that **must be overridden** and implemented by the subclasses. If you want to provide a default implementation and allow for subclasses to optionally override a method, use [[software-engineering/concepts/programming/Object Oriented Programming#Virtual Method|virtual methods]] instead.\n\nYou cannot make abstract methods static.\n\n**Differences between languages**\nTo define abstract methods:\n- In TypeScript, you'd use the `abstract` modifier.\n- In C#, you'd use the `abstract` modifier.\n- In C++, define a pure virtual function: `virtual void foo() = 0;`.\n\n### Virtual Method\nVirtual methods are methods that can be overridden by subclasses. To force subclasses to implement a method, use [[software-engineering/concepts/programming/Object Oriented Programming#Abstract Method|abstract methods]] instead.\n\nYou cannot make virtual methods static.\n\n**Differences between languages**\nTo define virtual methods:\n- In some languages like C# and TypeScript, methods are virtual by default.\n- In C++, you'd use the `virtual` modifier, but it's a little complicated because you can still override methods without it. See [this StackOverflow post](https://stackoverflow.com/questions/2391679/why-do-we-need-virtual-functions-in-c).\n\n### Interface\nAn interface is a 'contract' that defines what a user can do with the classes that *implement* that interface. You define the methods (and sometimes constants) that the interface supports, and then leave the implementation details to the subclasses. An interface is not a class, so you cannot instantiate it.\n\nYou **cannot supply any implementation** inside interfaces. If you want to provide *some* concrete methods, then consider using an [[software-engineering/concepts/programming/Object Oriented Programming#Abstract Class|abstract class]] instead. That being said, some programming languages like C# let you implement a static members inside an interface.\n\n**Differences between languages**\n- In TypeScript, you define an interface like this: `interface Blog { ... }`, but it's also used generally outside of OO design.\n- In C#, you define an interface like this: `public interface IFoo { ... }`.\n- In C++, there is no native concept of interfaces, but you can simulate it by making an abstract class whose methods *are all* abstract, ie. all of them are pure virtual functions. Implementing an interface is therefore the same as inheritance.\nAll interface members are public by default.\n\n## Criticisms of OOP\nSee [Object-Oriented Programming is Bad](https://www.youtube.com/watch?v=QM1iUe6IofM).\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/programming/Programming-Paradigm":{"title":"Programming Paradigms","content":"A *programming paradigm* describes a general *strategy* for how to write software. Formally, a 'paradigm' in everyday English is:\n\u003e A set of assumptions, concepts, values, and practices that constitutes a way of viewing reality for the community that shares them.\n\nBelow is a hierarchy of very popular, battle-tested programming paradigms, each with their own pros and cons. You can solve pretty much *any* software problem in *any* paradigm, really, but the solution will differ in terms of scalability, maintainability, difficulty, etc.\n![[software-engineering/concepts/programming/assets/programming-paradigms.png]]\n**Note**: there are more paradigms than shown here.\n\nProgramming languages often support multiple programming paradigms. For example, JavaScript supports both [[software-engineering/concepts/programming/Object Oriented Programming|object-oriented programming]] and [[software-engineering/concepts/programming/Functional Programming|functional programming]] (and more).\n\n### Imperative\nPrograms are a set of precise instructions for the machine to perform that mutate program state.\n- **Procedural** ‚Äì programs are just a sequential collection of data and functions (procedures) acting on that data. C is a classic example of a procedural language.\n- **Object-oriented** ‚Äì programs are just objects interacting with each other. Objects are just a container that groups together some data and methods (functions). \n\n### Declarative\nPrograms should be written descriptively, meaning that your code should always express the 'what' rather than the 'how'. SQL, for example, is a declarative language, since the statement `SELECT * FROM Table` expresses what you want, but the 'how' is delegated tot he SQL engine. Ultimately, \n- **Functional** ‚Äì programs are made by calling and composing functions.\n\nUltimately, languages that support a declarative paradigm are just abstractions over an imperative 'backend'.\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/programming/Type-System":{"title":"Type System","content":"\nA *type system* is a set of rules defined by a programming language specification that assigns a *type* to every variable, expression, function, and possibly other things beyond those. \n\n### Why Type Systems Exist\nType systems exist for one reason: to help you write less buggy code in a more self-documenting way.\n- Giving variables, values, functions, etc. a *type* restricts the set of things you can do with them which helps us by minimising the chance of creating situations where the program tries to add the integer `3` to an instance of `Cat`. \n- It forces users of an interface to always supply an expected value.\n\n### Static Typing\nA *statically typed language* is one where the type system's rules are checked when you run the compiler (ie. at compile-time). It's called 'static' because any type system violations are caught before you execute a single line of your program.\n- Languages like [[software-engineering/programming-languages/C|C]] and [[software-engineering/programming-languages/Java|Java]] are statically typed. Every valid C or Java program will always know what type an expression, variable, function has before execution.\n\n### Dynamic Typing\nA *dynamically typed language* is one where the type system's rules are checked during the execution of the program rather than at compile-time. In other words, nothing has a type until you run the program, and only then do the types get assigned to expressions, variables, functions, etc.\n- [[software-engineering/programming-languages/Python|Python]] is a dynamically typed language. You could code up some very obvious type errors like `x = 1 + \"hi\"` but the program will run fine until it actually executes that line.\n- There is an important trade-off to recognise between static typing and dynamic typing: you would get fewer run-time errors with static typing, however dynamic typing affords you far more flexibility, which generally helps you implement things faster (at least in the short-term).\n\n### Strong Typing\nThere's a lack of a formal definition for this, but a *strongly typed* language is basically one where it is *not possible* for the developer to bypass the type system's rules. In other words, a value's type never changes in unexpected ways, such as through *implicit casts*.\n- [[software-engineering/programming-languages/Python|Python]] is a strongly typed language. It's not possible to implicitly typecast values.\n- **Note**: a language can be both strongly and dynamically typed.\n\t```python\n\tx = 42\n\tx = \"Hello\"\n\t```\n\n### Weak Typing\nJust like *strong typing*, there is a lack of a formal definition, but in general: weakly typed programming languages are ones that have a more relaxed enforcement of its type system's rules, meaning that it's possible to violate/bypass them.\n- [[software-engineering/programming-languages/C|C]] is a classic weakly typed language. Pointers and integers are pretty much fully interchangeable, and you can freely convert a pointer of any type to a pointer of any other type.\n\t\u003e \"C is not a strongly-typed language, but as it has evolved, its type checking has been strengthened. \" - Dennis Ritchie.\n- [[software-engineering/programming-languages/JavaScript|JavaScript]] is also a weakly typed language. It's notorious for silently producing (sometimes hilariously) unintuitive results.\n\t```javascript\n\t\"11\" + 1 === \"111\"\n\t\"11\" ‚Äî 1 === 10\n\n\t('b' + 'a' + + 'a' + 'a').toLowerCase() === \"banana\"   // See an explanation: https://stackoverflow.com/questions/57456188/why-is-the-result-of-ba-a-a-tolowercase-banana\n\t```\n \nSometimes, we talk about the relative *weakness* of the type system between different programming languages. Eg. C++ is not strongly typed, however it is consider 'stronger' than C.\n\n**Note**: people often confuse *weak* typing to mean *dynamic* typing, and *strong* typing with *static* typing. They're completely separate. For example, C is both weakly typed and statically typed, while Python is both strongly typed and dynamically typed.\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/testing/Arrange-Act-Assert":{"title":"Arrange, Act, Assert","content":"\nThe 'arrange, act, assert' mantra is a pattern for structuring your [[software-engineering/concepts/testing/Unit Testing|unit tests]] (as well as integration tests and e2e tests). \n\nThe contents of a test should be partitioned into 3 parts in the following order:\n1. **Arrange** ‚Äì the setup code that's required before you can test what you want to test.\n2. **Act** ‚Äì the code that executes what the test intends to do. \n3. **Assert** ‚Äì the code that makes assertions about what the aftermath should be. \n\nSome simple, concrete examples of this pattern:\n1. Unit testing a C++ function (using [[software-engineering/frameworks/GoogleTest|GoogleTest]]). This tests a `SymbolTable` class that's meant to be used as a supporting data structure for a [compiler project](https://github.com/Tymotex/Nand2Tetris).\n\t```c++\n\tTEST(SymbolTableTestSuite, InsertAndRetrieveTest) {\n\t    // Arrange.\n\t    SymbolTable symbol_table;\n\n\t\t// Act.\n\t    symbol_table.define(\"myVar\", \"int\", \"var\");\n\n\t\t// Assert.\n\t    EXPECT_EQ(symbol_table.data_type(\"myVar\"), \"int\");\n\t    EXPECT_EQ(symbol_table.declaration_type(\"myVar\"), DeclarationType::VAR);\n\t    EXPECT_EQ(symbol_table.segment_index(\"myVar\"), 0);\n\t}\n\t```\n1. Unit testing a frontend React component (using [[software-engineering/frameworks/Jest|Jest]]). This tests the breadcrumbs component on the portfolio website, [timz.dev](https://timz.dev).\n\t```typescript\n\tdescribe(\"Breadcrumbs\", () =\u003e {\n\t    test(\"All crumbs are rendered\", () =\u003e {\n\t\t\t// Arrange.\n\t        render(\n\t            \u003cBreadcrumbs\n\t                crumbs={[\n\t                    { title: \"Home\", url: \"/\" },\n\t                    { title: \"Projects\", url: \"/projects\" },\n\t                    {\n\t                        title: \"My Sentient Robot\",\n\t                        url: \"/projects/my-sentient-robot\",\n\t                    },\n\t                ]}\n\t            /\u003e,\n\t        );\n\n\t\t\t// Act.\n\t        const home = screen.getByText(/Home/i);\n\t        const projects = screen.getByText(/Projects/i);\n\t        const sentientRobot = screen.getByText(/My Sentient Robot/i);\n\n\t\t\t// Assert.\n\t        expect(home).toBeInTheDocument();\n\t        expect(projects).toBeInTheDocument();\n\t        expect(sentientRobot).toBeInTheDocument();\n\t    });\n    });\n\t```\n1. E2E testing a web app (using [[software-engineering/frameworks/Cypress|Cypress]]). This tests that the portfolio website, [timz.dev](https://timz.dev), is able to load the about page via a link on the homepage.\n\t```typescript\n\tdescribe(\"Portfolio page tests\", () =\u003e {\n\t    it(\"should render the about page after the 'about' link is clicked\", () =\u003e {\n\t        // Arrange.\n\t        cy.visit(\"http://localhost:3000\");\n\t        cy.wait(1000);\n\t\n\t        // Act.\n\t        cy.contains(\"About\").click(); // The homepage should show\n\t        cy.wait(1000);\n\t\n\t        // Assert.\n\t        cy.url().should(\"include\", \"/about\");\n\t        cy.contains(\"Who am I?\");\n\t    });\n\t});\n\t```\n\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/testing/End-To-End-Testing":{"title":"End To End Testing","content":"\nEnd-to-end (e2e) tests are tests that aim to simulate the user experience as closely as possible and will look almost like manual testing, but automated.\n\nAlthough end-to-end tests are immensely valuable, it's worth considering reasons why you might not want to write them:\n- They're slow to write and slow to run. It'll take a lot of valuable engineering time to write out e2e tests, and it'll consume valuable seconds of a cloud CI server that you're paying for.\n- They're often a lot more *brittle* than integration tests or unit tests, meaning that if your application requires some minor or major change, it might mean tweaking your e2e tests. This complicates software maintenance.\n\nIn general, only invest more resources into e2e tests when you've extracted most of the value from the tests lower in the Agile 'testing pyramid':\n![[software-engineering/concepts/testing/assets/testing-pyramid.png|300]]\n*[Image source](https://www.ministryoftesting.com/dojo/lessons/the-mobile-test-pyramid)*.\n\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/testing/Integration-Testing":{"title":"Integration Testing","content":"\nIntegration tests, also called 'end-to-end' tests, are... TODO.\n\n\n\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/concepts/testing/Unit-Testing":{"title":"Unit Testing","content":"\nTODO.\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/frameworks/Cypress":{"title":"Cypress","content":"\n![[software-engineering/frameworks/assets/cypress-wallpaper.png|500]]\n\nCypress is an [[software-engineering/concepts/testing/End To End Testing|end-to-end testing]] library for testing the entirety of a web app, including its frontend and backend, in a way that closely simulates how real users would use the app. It also has an API for writing [[software-engineering/concepts/testing/Integration Testing|integration tests]] and [[software-engineering/concepts/testing/Unit Testing|unit tests]]. \n\nCypress tests aim to simulate the user experience as closely as possible. This means that tests you write will usually start up a real browser process, navigate to the URL of your web app, then execute a series of user interactions (eg. clicking on links, buttons, sending keystrokes, etc.) and let you make assertions on how the document should respond and what its contents should have.\n\nThe purpose of end-to-end testing this way is to give you confidence that the user can perform critical actions without error. For example, you might have a test that verifies your web app's authentication system, the purchase of an item, the sending of a message, etc. Unit tests with [[software-engineering/frameworks/Jest]], for example, wouldn't be sufficient for that purpose.\n\n### Writing Tests\nIn general, the [[software-engineering/concepts/testing/Arrange, Act, Assert|arrange, act, assert]] pattern for writing unit tests is also a useful way to structure e2e Cypress tests.\n\n#### Example\nA simple test suite I wrote for my portfolio website.\n```typescript\ndescribe(\"Portfolio page tests\", () =\u003e {\n    beforeEach(() =\u003e {\n        // A wait exists just to allow for page-load animations to complete.\n        cy.visit(\"/\").wait(1000);\n    });\n\n    it(\"should render the about page after the 'about' link is clicked\", () =\u003e {\n        // Click 'About' from the homepage.\n        cy.contains(\"About\").click().wait(1000);\n\n        // The window should show and the URL should change.\n        cy.url().should(\"include\", \"/about\");\n        cy.contains(\"Who am I?\");\n    });\n\n    // ...\n});\n```\n**Note**: `describe` and `it` are sourced from [Mocha](https://mochajs.org/) and `expect` is sourced from [Chai](https://www.chaijs.com/), two core dependencies of Cypress. Also, Mocha provides `context` which is just an alias for `describe`.\n\n### API\nSee [Cypress API Documentation](https://docs.cypress.io/api/table-of-contents). You'll be frequently chaining many methods together in a single statement.\n- Methods like `cy.get` return a DOM element that can be further chained with methods like `type`, `click`, `contains`, etc.\n- Some methods like `cy.clearCookies` do not yield anything that you can chain further methods on.\n\n**Top-Level Methods**\n```typescript\ncy.visit(url)\ncy.get(cssSelector)    // This works just like jQuery's `$()` selector. In fact, jQuery is one of Cypress' dependencies.\ncy.url()               // Gets the current URL as a string.\ncy.wait(milliseconds)\n\ncy.wrap(subject)       // Yields the given subject. Useful for resolving promises or repeating tests using the same\n                       // array containing test data.\n```\n**Note**: all of these `cy.*` statements execute asynchronously.\n\n**Chained Methods**:\n```typescript\n.then((elem) =\u003e ...)        // You can access the 'subject' inside `then`. You'd chain this with `cy.get`, for example.\n.should(chainer: string)    // Make an assertion. \n.and(chainer: string)       // An alias for `should`.\n\n// Input methods:\n.type(text: string)\n.submit()\n.click()\n```\nThe `chainer` argument is a stringified *chainer* from [Chai](https://docs.cypress.io/guides/references/assertions#Chai), [Chai-jQuery](https://docs.cypress.io/guides/references/assertions#Chai-jQuery), [Sinon-Chai](https://docs.cypress.io/guides/references/assertions#Sinon-Chai), which are dependencies of Cypress.\n\n### Aliases\nYou must always chain commands off of an invocation on `cy.*` otherwise commands won't be properly enqueued. Eg. if you're doing `const elem = cy.get(...); elem.then(...)`, then you need to use an alias instead, as shown below.\n```typescript\ncy.get('.blog').as('blog');  // Create the 'blog' alias.\ncy.get('@blog');             // Retrieve the subject that 'blog' is assigned to.\n```\n\n### Fixtures\nIn Cypress, *fixtures* are a collection of static test data that can be used by tests. They're located at `cypress/fixtures` and are typically .json files, but can also be .js, image files, etc. The common usage of fixtures is in [[software-engineering/frameworks/Cypress#Mocking Network Requests|stubbing network requests]].\n\n```typescript\n// Loads `cypress/fixtures/blogs.json` and uses it as the response\n// when an API endpoint is hit.\ncy.fixtures('blogs').as('blogsJson').then((blogs) =\u003e {\n\tcy.intercept('GET', '/blogs', blogs);\n})\n```\n\n### Reusuable Custom Commands\nCypress gives you many useful [[software-engineering/frameworks/Cypress#API|commands]], however you might need some custom reusable helper functions to help with stubbing network requests, for example. You define custom helpers in `cypress/support/commands.ts` by doing the following:\n```typescript\nCypress.Commands.add(\"helperName\", () =\u003e {\n\t// ...\n});\n```\nThis makes your helpers available under the `cy` object, eg. from the above example, we'd be able to access `cy.helperName()` from any test.\n\n### Mocking Network Requests\nOften, you'll want to test the frontend independently of the backend, that is, you might not actually want your frontend to make requests to your backend server. You can do this by stubbing API requests with responses using [`cy.intercept`](https://docs.cypress.io/api/commands/intercept).\n```typescript\ncy.intercept('GET', '/blogs', [{ ... }, { ... }])\n```\n\n#### Tradeoffs\nWhen you stub network requests, you're no longer writer 'true' end-to-end tests. Your tests are more isolated and generally less flaky since it has fewer points of failure, however you are straying away from testing the real user experience.\n\nIf you write true end-to-end tests, then:\n- If you have a database, you'd have to seed it to generate state.\n- Tests are possibly much slower since they'll actually go through the full backend request-handling logic.\n- It'll be hard to test for edge cases like network failure.\n\nIt's recommended to maintain a balance of both stubbed tests and true end-to-end tests (especially for the *critical user actions* in your application like authentication).\n\n### Seeding the Database\n\n### Cypress CLI\nThe Cypress package ships with a powerful CLI. [Official reference](https://docs.cypress.io/guides/guides/command-line).\n\nSome basic commands to know and consider adding to the NPM scripts inside `package.json`:\n```bash\ncypress open                                       # Opens Cypress' Electron binary.\ncypress run --headed --no-exit --browser chrome    # Opens a Chrome browser to run Cypress tests.\ncypress run --browser chrome                       # Runs Cypress tests in a headless Chrome process.\n```\n\n### Cypress CI\nI used the GitHub Actions workflow YAML file [provided by the official docs](https://docs.cypress.io/guides/continuous-integration/github-actions) to run Cypress in a CI pipeline.\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/frameworks/GoogleTest":{"title":"GoogleTest","content":"\nTODO.\n\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/frameworks/Jest":{"title":"Jest","content":"\n\nTODO.\n\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/frameworks/React":{"title":"React","content":"\nTODO.\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/frameworks/Redux":{"title":"Redux","content":"\n### Reducers\nTODO.\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/frameworks/Vue.js":{"title":"Vue.js","content":"\n# Vue.js\nVue.js is ...\n\n\n\n","lastmodified":"2022-07-30T00:03:13.740004324Z","tags":null},"/software-engineering/programming-languages/C":{"title":"C","content":"\n","lastmodified":"2022-07-30T00:03:13.744004324Z","tags":null},"/software-engineering/programming-languages/C++":{"title":"C++","content":"\n\n#### Pure Virtual Function\nPure virtual functions are exactly the same as [[software-engineering/concepts/programming/Object Oriented Programming|abstract methods]].\n","lastmodified":"2022-07-30T00:03:13.744004324Z","tags":null},"/software-engineering/programming-languages/CSS":{"title":"CSS","content":"\n","lastmodified":"2022-07-30T00:03:13.744004324Z","tags":null},"/software-engineering/programming-languages/Generics":{"title":"Generics","content":"Generic programming is about writing reusable functions, classes, etc. without compromising on [[software-engineering/concepts/programming/Type System|type safety]]. The primary motivation behind them is to keep code DRY, that is, to avoid code duplication.\n\nThe basic idea behind generic programming is that you can make functions and classes take a *generic type parameter*.\n\nTODO.\n","lastmodified":"2022-07-30T00:03:13.744004324Z","tags":null},"/software-engineering/programming-languages/Java":{"title":"Java","content":"\n","lastmodified":"2022-07-30T00:03:13.744004324Z","tags":null},"/software-engineering/programming-languages/JavaScript":{"title":"JavaScript","content":"\nTODO.\n\nThere's also [[software-engineering/programming-languages/TypeScript]].\n\n\n\n### Rest Operator\nTODO.\n\n\n### Generators\nTODO.\n\n## Object Oriented Programming\n### Classes\nTODO.\n\n### Inheritance\nTODO.\n\n### Prototypes\nTODO.\n\n\n## Modules\nFirst, a brief timeline of JavaScript's weird module system development:\n- **1995**: JavaScript was born, but there was no concept of modules which made building complex applications extremely hard. Without modules, a single huge javascript file might be shipped to the user.\n- **2009ish**: people introduced a module system to take advantage of the [[software-engineering/concepts/programming/Code Splitting|code splitting]] optimisation technique where modules are lazily loaded.\n- **2009ish**: Node.js was developed and introduced the [[software-engineering/programming-languages/JavaScript#CommonJS|CommonJS]] module standard, but this was only usable in server-side environments.\n\t- **2011**: [Browserify](https://browserify.org/) made it possible to use `require` in frontend projects.\n- **2009ish**: the [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) module standard was popularised.\n- **2015**: ES2015 standardised the [ES Modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) `import`/`export` syntax.\n\n### CommonJS\nTODO.\n\n\n### Dynamic Import\n`import(path)`\n\n## Asynchronous Programming\n\n### Event Loop\nTODO.\n\n\n\n.. multiplexing tasks over a single thread, which means there is no need for mutexes, semaphores and other concurrency helpers.\n\nan event-looped model is different from a multithreaded model.\n\nWhen you *do use real multithreading* in JavaScript (through [[software-engineering/programming-languages/JavaScript#Web Workers|Web Workers]] in a browser environment or forking to create child processes in a server environment), you rarely use shared memory, meaning there's no need to coordinate concurrent access to shared resources.\n\n### Web Workers\nTODO.\nWeb workers are background threads. They can \n","lastmodified":"2022-07-30T00:03:13.744004324Z","tags":null},"/software-engineering/programming-languages/Node.js":{"title":"Node.js","content":"\nTODO.\n\n\n\n\n## Filesystem APIs\n\n**Note**: In Node.js, the convention is generally for functions like `fs.readFile`, `fs.appendFile`, etc. to take in a callback as their *last argument* which has the signature `(error, data) =\u003e {...}`.\n\n","lastmodified":"2022-07-30T00:03:13.744004324Z","tags":null},"/software-engineering/programming-languages/Python":{"title":"Python","content":"\n\n\n\n### Dunder Methods\nTODO.\n\n\n### Virtual Environments\n\n```bash\npython3 -m venv ./venv    # Create a virtual environment \n```\n\n\nBasic python installation\n```\n```\n\n\n","lastmodified":"2022-07-30T00:03:13.744004324Z","tags":null},"/software-engineering/programming-languages/SQL":{"title":"SQL","content":"\n\nTODO.","lastmodified":"2022-07-30T00:03:13.744004324Z","tags":null},"/software-engineering/programming-languages/TypeScript":{"title":"TypeScript","content":"\n![[software-engineering/programming-languages/assets/javascript-wallpaper.png|600]]\n\nTypeScript is a programming language made by Microsoft that is *superset* of [[software-engineering/programming-languages/JavaScript|JavaScript]]. The reason that TypeScript exists is to make complex JavaScript projects more maintainable and less error-prone by introducing a [[software-engineering/concepts/programming/Type System#Static Typing|static]] and [[software-engineering/concepts/programming/Type System#Strong Typing|strong]] type system. Essentially, it just gives developers a lot of quality-of-life improvements over JavaScript.\n\n*Note*: TypeScript gets compiled (or more precisely, '*transpiled*') to JavaScript in the end. This is not new, languages like CoffeeScript, Dart, Scala, etc. can all have JavaScript as what we call a *compilation target*.\n\n\u003e I learned TypeScript from the official docs and from the 'Programming TypeScript' textbook by Boris Cherny.\n\n**Why TypeScript is [loved](https://survey.stackoverflow.co/2022/#most-loved-dreaded-and-wanted-language-love-dread)**\n- Your IDE/editor gets more information about your code and give you very helpful intellisense and code-completion that is not possible with JavaScript. This reason alone, in my experience, pretty much negates any loss in developer velocity from using TypeScript over JavaScript.\n- Many errors will surface *as you're developing* rather than after your code is deployed to production and angry customers complain to you.\n- Types serve as a useful concise form of documentation for how your functions are to be used and what fields an object contain.\n- Complex objects are much *less unpleasant* to work with. You'll know what its *shape* is (basically what properties it has and what its nested objects look like), what properties are compulsory or optional and you'll actually know when you've mispelt a property name.\n- You'll *almost* never have `cannot read property '...' of undefined` again.\n\n## Setup\nInstall Node.js, `npm` or `yarn`. Then, install `tsc`, the open-source typescript compiler, as a dev dependency in a javascript project:\n```bash\nyarn init   # Inside the project root directory, if it's a new project.\nyarn add --dev typescript @types/node ts-node\n```\n### tsconfig.json\nEvery typescript project should have a `tsconfig.json` file at the root of the project directory. It tells `tsc` which files to compile, where to dump the resulting javascript, and so on. A basic config looks like this (but there are so many [more options](https://www.typescriptlang.org/tsconfig)):\n```json\n{\n\t\"compilerOptions\": {\n\t\t\"lib\": [   // Which APIs are available to the transpiled JS code? Eg. es2015 has Function.prototype.bind, etc.\n\t\t\t\"es2015\"\n\t\t],\n\t\t\"module\": \"commonjs\", // Which module system should be used by the transpiled JS code?\n\t\t\"outDir\": \"dist\",     // Where should the output JS files go?\n\t\t\"sourceMap\": true,    // Whether to generate a source map.\n\t\t\"strict\": true,       // All code must be properly typed.\n\t\t\"target\": \"es2015\"    // What JS version to compile to.\n\t},\n\t\"include\": [   // Directories containing .ts files we want to transpile.\n\t\t\"src\"\n\t]\n}\n```\nAlternatively, you can generate a `tsconfig.json` with `tsc --init`.\n\nSome recommended flags include:\n- `noImplicitThis` ‚Äì forces a type to be explicitly assinged to `this` inside functions. See [[software-engineering/programming-languages/TypeScript#this|TypeScript this]].\n- `noImplicitOverride` ‚Äì you must always use the `override` modifier for method overriding.\n- `noFallthroughCasesInSwitch` ‚Äì every case must either `break` or `return`.\n- [`esModuleInterop`](https://www.typescriptlang.org/tsconfig#esModuleInterop) ‚Äì makes it more smooth to consume JavaScript modules that use CommonJS, AMD or other module systems.\n\n## Typing\nBroadly speaking, in programming languages, a *type* is a [[maths/discrete-maths/Set Theory#Sets|set]] of values, plus the properties/methods available to them.\n\n### Assigning Types\nAssigning types is straightforward in TypeScript, you just postfix a variable or parameter with a colon and a type. \n```typescript\n// Typing variables.\nlet a: number = 42;\nlet b: string;\n```\n\n### Defining Types\nRemember, types are just [[maths/discrete-maths/Set Theory#Sets|sets]] of values. When you define a *type*, you are just defining a set of values. The following are all examples of custom types you can define:\n```typescript\ntype TwoOrFour = 2 | 4;                           // The set consisting of 2 and 4.\ntype Value = string | number;                     // The set of all strings and all numbers.\ntype RandomThings = \"Hello\" | 42 | null | RegExp; // The set consisting of \"Hello\", 42, null and all instances of `RegExp`.\n```\n\nAn important thing to understand about TypeScript (and many other statically-typed languages) is that it has separate namespaces for *values* and *types*. This means that in the following example, a variable identifier with the same name as a type alias are not in conflict. TypeScript can infer if you meant the *value* or the *type*.\n```typescript\ntype hello = \"world\";\nconst hello: hello = \"world\";\n```\n\n#### Type Alias\nYou can declare *type aliases* in a very similar way as to how you define variables. Type aliases are block-scoped, just like local variables.\n```typescript\ntype Person = { age: number, name: string };\n\n// Typescript will never infer that `me` is of type `Person` unless you explicitly say.\nconst me: Person = {\n\tage: 21,\n\tname: \"Tim\"\n};\n```\n\n### Interface\nInterfaces are basically an alternative to [[software-engineering/programming-languages/TypeScript#Type Alias|type aliases]], but are mostly better suited for defining object shapes. You can't use `\u0026` or `|` for interfaces, but you can use `extends`.\n```typescript\n// With type aliases, to add additional fields on top another type, you'd use `\u0026`.\ntype Employee = { id: string; }\ntype SoftwareEngineer = Employee \u0026 { techStack: string[]; }\n\n// With interfaces, you just use `extends`, similar to how you do class inheritance.\ninterface Employee { id: string }\ninterface SoftwareEngineer extends Employee { techStack: string[]; }\n```\n\n#### Classes vs. Interfaces\nUsing `interface` does not actually generate any javascript code when transpiled. Using `class`, however, will generate JavaScript code, which enables `instanceof` to work at runtime. A `class Foo { ... }` definition actually creates a *value* `Foo` that can be used in expressions, and a *type* `Foo` that can be used as a type. \n\nInterfaces don't let you use [[software-engineering/programming-languages/TypeScript#Access Modifiers|access modifiers]]. You can't supply implementations either.\n\nKeep these critical differences in mind when deciding between `class` or `interface`.\n\n### Assignability\nAssignability is about what the rules are around an assignment like this: `const a: A = b;`, where `b` is of type `B`. For assignment to be valid, it must be the case that:\n1. `B` is a subtype of `A` (basically that $B \\subseteq A$),\n2. ... or `B` is `any`. *Note*: this rule only exists to make it easier to interoperate with javascript code.\n\n#### Union and Intersection\nAgain, types are just *sets* of values. To expand the size of a set, you can union it with other sets, and to narrow the size of a set, you can intersect it other sets. In TypeScript, we use `|` to union two types and `\u0026` to intersect two types.\n```typescript\ntype Student = { id: string; degree: string };\ntype Tutor = { id: string; courses: string[] };\n\ntype StudentOrTutor = Student | Tutor;    // Set of all objects that are either `Student`, `Tutor`, or both.\ntype StudentAndTutor = Student \u0026 Tutor;   // Set of all objects containing all fields of `Student` AND `Tutor`.\n\nconst student: Student = { id: '111', degree: 'Bachelor of Science' };\nconst tutor: Tutor = { id: '222', courses: ['CS101'] };\nconst studentTutor: StudentAndTutor = {\n\tid: '333',\n\tdegree: 'Bachelor of Computer Science',\n\tcourses: ['CS201'],\n};\n\n// For `Student | Tutor`: you can assign any of: `Student`, `Tutor`, or `Student \u0026 Tutor`\nconst uniGoers: StudentOrTutor[] = [student, tutor, studentTutor];\n\n// For `Student \u0026 Tutor`: you can only have people who are simultaneously `Student` and `Tutor`.\nconst studentTutors: StudentAndTutor[] = [studentTutor];\n```\nTo make a type nullable, you can union it with `null` like this: `type MiddleName = string | null;`\n\n### TypeScript Built-In Types\nTypeScript introduces some new built-in data types that aren't present in JavaScript. These are: `any`, `unknown`, `void`, [`never`](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-never-type).\n#### any\nThe `any` type represents the set of *all* values. You can assign a variable of type `any` to a number, a string, a WebServer object, etc. Only use `any` as a last resort ‚Äì always prefer assigning the most specific type that you can. Often, people treat `any` as a way to 'opt' out of TypeScript for a small part of the code. When something is `any`, you are free to do erroneous things on it such as invoking methods on it that don't exist, using in arithmetic expressions, accessing undefined properties, etc.\n\n#### unknown\nThe `unknown` type represents the set of *all* values, just like `any`. The difference is that TypeScript does not allow you to use an `unknown` value until you perform [[software-engineering/programming-languages/TypeScript#typeof and instanceof|type checks]] \nor [[software-engineering/programming-languages/TypeScript#Refinement|refinement]] to narrow down what specific type the `unknown` value is. For this reason, `unknown` is considered the type-safe version of `any`.\n```typescript\nconst a: unknown = 30;\nif (typeof a === 'number') {\n\tconst b: number = a + 1; // Now that we are certain `a` is a number, we can use it as one.\n} else {\n\tconst b: number = a + 1; // Error.\n}\n```\n```typescript\nconst a: any = \"Hello\";\nconst b: unknown = \"World\";\n\na.toLowerCase();   // This is fine since `a` is `any`.\nb.toLowerCase();   // Error. We need a type check before \n```\n\n\u003e A useful way to think about `any` and `unknown` is: `any` means \"I don't care\", `unknown` means \"I don't know (yet)\". \n\n### Object Shape\nAn important part of using TypeScript effectively is in defining the *shape* of object values, or in other words, what properties they have and which ones must be assigned a value or are optional.\n```typescript\n// Let typescript infer the object shape.\n// `person` will be of type: { age: number, name: string }.\nconst person = {\n\tage: 42,\n\tname: \"Andrew\"\n};\n\n// You can also explicitly specify the object type. You might do this if you want to set narrower types for the properties.\nconst person: { age: number, name: \"Andrew\" } = {\n\tage: 42,\n\tname: \"Andrew\"\n};\n\n// Or more cleanly, define a type:\ntype Andrew = { age: number, name: \"Andrew\" };\nconst person: Andrew = {...};\n```\n**Note**: the built-in `object` type is the set of all objects, whether it's `{}`, `{hello: \"world\"}`, `[]`, `new Date()`, etc. It's only slightly more restrictive than `any`.\n\n#### Optional Properties\nBy default, all properties are treated as compulsory. To allow an object to not define a property, just postfix the property name with `?`.\n```typescript\ntype Person = {\n\tfirstName: string;\n\tlastName: string;\t\n\tmiddleName?: string;   // Objects of type `Person` can optionally set the `middleName` property.\n};\n```\n\n#### Immutable Properties\nYou can make properties immutable by prefixing the property name with the `readonly` property. It's like as if you declared a property as `const`, so once it's assigned for the first time, it cannot be reassigned.\n```typescript\ntype Person = {\n\tname: string;\n\treadonly dateOfBirth: string;\n};\n\nconst me: Person = { name: 'Tim', dateOfBirth: '09/03/2001' };\nme.name = 'Andrew';             // This is fine.\nme.dateOfBirth = '01/01/1970';  // Error.\n```\n\n#### Index Signatures\nWhen you want the flexibility for an object to contain more arbitrary properties with a certain key-value pair type, you can use the index signature syntax, `[key: K]: V`, where `key` can be any name you choose.\n```typescript\ntype FruitRatings = {\n\t[fruitName: string]: number;\n};\n\nconst myFruitRatings: FruitRatings = {\n\tapple: 6,\n\tbanana: 7,\n\tcherry: 9\n};\n```\n\n#### Indexed Access Types\nSee [indexed access types](https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html). When you define a type for an object shape, if you want to access a nested part of that shape as a type, you can just use the subscript operator `[]`.\n```typescript\ninterface Theme {\n\tcolour: {\n\t\tmode: 'light' | 'dark';\n\t\tpalette: {\n\t\t\tprimary: ['#0000FF', '#0044FF', '#0066FF', '#3388FF'];\n\t\t\tsecondary: ['#464646', '#616161', '#7E7E7E', '#AAAAAA'];\n\t\t};\n\t};\n}\n\ntype ColourOptions = Theme['colour'];\ntype Palette = Theme['colour']['palette'];\n```\nNope, you can't use the `.` operator as if you were accessing object properties.\n\n#### keyof\nThe `keyof` unary operator evaluates to the union of a type's keys.\n```typescript\ninterface Theme {\n\tcolour: {\n\t\tmode: 'light' | 'dark';\n\t\tpalette: {\n\t\t\tprimary: string[];\n\t\t\tsecondary: string[];\n\t\t};\n\t};\n}\n\ntype ColourProperties = keyof Theme['colour'];              // ‚Üí 'mode' | 'palette'\ntype PaletteProperties = keyof Theme['colour']['palette'];  // ‚Üí 'primary' | 'secondary'\n```\nThis is helpful for writing getter functions that retrieve values nested in an object:\n```typescript\nconst theme: Theme = {\n\tcolour: {\n\t\tmode: 'dark',\n\t\tpalette: {\n\t\t\tprimary: ['#0000FF', '#0044FF', '#0066FF', '#3388FF'],\n\t\t\tsecondary: ['#464646', '#616161', '#7E7E7E', '#AAAAAA'],\n\t\t},\n\t},\n};\n\nconst getPalette = (theme: Theme, palette: keyof Theme['colour']['palette']): string[] =\u003e {\n\treturn theme['colour']['palette'][palette];\n};\n\nconsole.log(getPalette(theme, 'primary'));\n```\n\n### Arrays\nTo denote a type as an array of items of type `T`, you can do `T[]` or `Array\u003cT\u003e` (they're [exactly the same](https://stackoverflow.com/questions/36842158/arraytype-vs-type-in-typescript)). \n```typescript\n// Array type declaration examples.\ntype Names = string[];\ntype People = { name: string; }[];\ntype Values = (string | number)[];\n```\nIn general, try to keep arrays *homogenous*, that is, of a singular type, otherwise you'd have to do type-checking before TypeScript can let you use the items of the array.\n```typescript\n// When arrays are not homogenous, that is, of one type, you'd have to do some type checking to work with its items.\nconst arr: (string | number)[] = [42, \"Hello\"];\n\narr.forEach(item =\u003e {\n\tif (typeof item === 'number') {\n\t\t// You can use `item` as a number after you've type-checked it.\n\t\tconst num = item * 3;\n\t\tconsole.log('Number: ', num);\n\t} else {\n\t\t// `item` must be a string\n\t\tconst s = item + \" world\";\n\t\tconsole.log('String: ', s);\n\t}\n})\n```\n\nArrays are always mutable by default in TypeScript, that is, you can reassign the value at any index and invoke methods that make in-place modifications like `push` or `reverse`. To make them immutable, you would prefix them with the `readonly` modifier.\n```typescript\ntype Names = readonly string[];\nconst radioheadMembers: Names = ['Thom', 'Johnny', 'Colin', 'Phil', 'Ed'];\n\nradioheadMembers[1] = 'Tim';  // Error.\n```\n\n### Tuples\nRemember, tuples are just *fixed-length arrays*. In typescript, we define a tuple by specifying the type of each item like: `[T1, T2, ...]`:\n```typescript\ntype FullName = [string, string, string?];  // You can make items optional in a tuple, just like for objects.\n                                            // Note: this is basically the same as: `[string, string] | [string, string, string]`.\nconst elon: FullName = [\"Elon\", \"Reeve\", \"Musk\"];\nconst jeff: FullName = [\"Jeff\", \"Bezos\"];\n```\nYou can also make use of the [[software-engineering/programming-languages/JavaScript#Rest Operator|rest operator]], `...`, to allow for tuples of arbitrary lengths.\n```typescript\ntype FullName = [string, string, ...string[]];\nconst queenElizabethII = ['Elizabeth', 'Alexandra', 'Mary', 'Windsor'];\n```\n\n**Caveat**: *tuples are not immutable by default*.\nUnlike in other languages like Python, the items of a tuple in TypeScript *can* be mutated, that is, reassigned after definition. To make tuples immutable, you would do the same thing as you would for making arrays immutable: prefix it with the `readonly` modifier.\n```typescript\ntype Coordinate = readonly [number, number];\nconst point: Coordinate = [1, 2];\n\npoint[0] = 3;   // Error.\n```\n\n### Enums\nEnums are data types that have a *fixed set* of constant values. They're a great way to group together a lot of related constants. *Note*: JavaScript doesn't have enums.\n```typescript\nenum Theme {\n\tLight,\n\tDark,\n\tHighContrastLight,\n\tHighContrastDark\n};\n\n// You access the fields of the enum in the same way that you'd access an object.\nconst theme: Theme = Theme.Dark;\n```\nIn the example above, every enum value gets implicitly assigned a counter value starting from 0. It's equivalent to doing the following:\n```typescript\nenum Theme {\n\tLight = 0,\n\tDark = 1,\n\tHighContrastLight = 2,\n\tHighContrastDark = 3\n}\n```\nYou can also map enum keys to string values instead of integers. \n```typescript\nenum Theme {\n\tLight = '#CCCCCC',\n\tDark = '#333333',\n\tHighContrastLight = '#FFFFFF',\n\tHighContrastDark = '#000000',\n}\n```\n\n#### Caveats\nOne annoying issue is that you can freely assign numbers to enum types that are clearly outside the bounds of the enum values.\n```typescript\nenum Theme {\n\tLight,\n\tDark,\n\tHighContrastLight,\n\tHighContrastDark,\n}\nconst theme: Theme = 6; // No complaints from TypeScript.\n```\nIn general, the official docs advise you to avoid enums unless they help significantly with readability. Alternatives to enums include string literals, eg. `type Theme = \"Light\" | \"Dark\" | ...`, or object literals, eg. `const Theme = { Light: \"Light\", Dark: \"Dark\", ... }`.\n\n### Type Inference\nYou don't have to always supply an explicit type. Often, there'll be enough context for TypeScript to figure it out without ambiguity. In general, we prefer type inference over explict assigning types to varaibles/parameters/etc. for conciseness.\n```typescript\nlet a: number = 42;   // There is no need to do this. It's clear what type `a` is from the RHS of the assignment.\nlet b = 42;           // Equivalent to above, but it lets typescript assign the type implicitly.\n```\nThis extends to functions as well, meaning that often you won't have to specify the return value.\n\n#### Type Widening/Narrowing\nAn important implicit rule in TypeScript is that when you let type inference happen for `const` variables, TypeScript will assign it the *narrowest type possible* since it knows that a `const` variable cannot possibly take any other value after its defined. Otherwise, TypeScript will infer the type to be wider than it might be.\n```typescript\nlet a = 2;    // `a` is of type `number`.\nconst b = 2;  // `b` is of type `2`, a specific member of `number`.\n```\n\n### typeof and instanceof\nAlthough type checking is done for you statically, there are times when you must perform run-time type checks such as when you're fetching external data. In these times, rely on JavaScript's operators: `typeof` and `instanceof`.\n1. Use the `instanceof` binary operator to check some value is of a custom type, or a complex built-in type like `RegExp`.\n\t- Note that `val instanceof T` works by checking if `T` exists anywhere along `val`'s [[software-engineering/programming-languages/JavaScript#Prototypes|prototype chain]]. This is why you get unintuitive results when you use `instanceof` on primitive types. For example, `42 instanceof Number` is `false`, but `new Number(42) instanceof Number` is `true`.\n2.  Use the `typeof` unary operator to check some value is some built-in primitive type such as `undefined`, `number`, `string`, `boolean`, etc.\n\n### Type Assertions\nWhen you're confident that some value should be a certain type but TypeScript isn't, you can make a type assertion with the `as` keyword. \n```typescript\nlet someVal: any = 123;\n\n// Here, you're basically telling TypeScript: \"I am 100% sure this is a number. Trust me.\"\nconst val = someVal as number;\n```\nYou can also make type assertions by prefixing an expression with `\u003cT\u003e`, eg. `\u003cPerson\u003eperson` which is exactly the same as `person as Person`.\n\u003e Aim to minimise your usage of type assertions like above. They're considered 'escape hatches' from the language and can prevent you from maximising the benefits of using a type system.\n\n#### Const Assertion\nUse `as const` to tell TypeScript to infer the value to its narrowest possible type.\n```typescript\nconst a = [1, 2, 3];           // ‚Üí Type: `number[]`\nconst b = [1, 2, 3] as const;  // ‚Üí Type: `readonly [1, 2, 3]`\n```\n\n#### Nonnull Assertion\nWhen you're confident a value is not null, you can postfix that value with `!` to assure TypeScript. If you cannot be confident, then just use a standard null-check: `if (_ === null) ...`.\n```typescript\ntype NullableString = string | null;\nconst s: NullableString = 'Hello';\n\n// This is basically saying: \"Don't worry TypeScript, I'm 100% sure `s` is not null.\"\nconsole.log(s!.toUpperCase());\n```\n\n### Refinement\nTypeScript's static analysis can handle *refinement* where, based on the control flow logic, TypeScript can narrow the type of the variable. Refinement can happen when you use `if`, the optional chaining operator `?.`, `||`, `switch`, `typeof`, `instanceof`, `in`, etc.\n```typescript\ntype CssWidth = number | string | undefined;\n\nconst getPixelWidth = (width: CssWidth): number =\u003e {\n\t// At this point, TypeScript knows `width` is `number | string | undefined`.\n\tif (typeof width === 'undefined') return 0;\n\n\t// At this point, TypeScript knows `width` is `number | string`.\n\tif (typeof width === 'number') return width;\n\n\t// At this point, TypeScript knows `width` is `string`. We can therefore use\n\t// string methods on `width` with confidence.\n\treturn Number(width.slice(0, width.search('px')));\n};\n\nconsole.log(getPixelWidth(undefined)); // 0\nconsole.log(getPixelWidth(10));        // 10\nconsole.log(getPixelWidth('480px'));   // 480\n```\n\nRefinement works with unioned objects, but it's best to use unique strings to help TypeScript infer types properly.\n```typescript\ninterface UserTextEvent {\n\ttype: 'TextEvent';\n\tvalue: string;\n\ttarget: HTMLInputElement;\n}\ninterface UserMouseEvent {\n\ttype: 'MouseEvent';\n\tvalue: [number, number];\n\ttarget: HTMLElement;\n}\n\ntype UserEvent = UserTextEvent | UserMouseEvent;\n\nconst handle = (event: UserEvent): void =\u003e {\n\tif (event.type === 'TextEvent') {\n\t\t// At this point, TypeScript is certain that `event` is `UserTextEvent`.\n\t\t// ...\n\t} else {\n\t\t// At this point, TypeScript is certain that `event` is `UserMouseEvent`.\n\t\t// ...\n\t}\n};\n```\nThis kind of type refinement is very useful when working with [[software-engineering/frameworks/Redux#Reducers|Redux reducers]].\n\n#### Type Guards\nRefinement doesn't work as expected when you use a function to do the type-checking. Any type-checking only contributes to refinement if it's in the same scope.\n```typescript\nconst isString = (s: unknown): boolean =\u003e {\n\treturn typeof s === 'string';\n}\n\nconst refinementTest = (val: string | number) =\u003e {\n\tif (isString(val)) {\n\t\tval.toLowerCase();   // Error. TypeScript still thinks `val` is `string | number`.\n\t\t// ...\n\t} else {\n\t\tconst num = val * 2; // Error. TypeScript still thinks `val` is `string | number`.\n\t\t// ...\n\t}\n}\n```\nTo fix this, you'd need to define a **type guard** which is a *predicate* function that confirms an argument is a given type. It looks like this:\n```typescript\nconst isString = (s: unknown): s is string =\u003e {\n\treturn typeof s === 'string';\n};\n```\n\n### Variance\nIt's useful to think of types as just *sets*. When $A$ is a subtype of $B$, it is basically just saying that $A \\subseteq B$.\n\n*Variance*, in programming language theory, is how subtyping works for generic types. It is concerned about the idea of whether a generic type like `List\u003cCat\u003e` is a subtype of `List\u003cAnimal\u003e`.\n\nThere are 4 kinds of variance:\n- *Invariance* ‚Äî says that `List\u003cT\u003e` is not a subtype of `List\u003cU\u003e` regardless of whether `T extends U`.\n- *Covariance* ‚Äî says that `List\u003cT\u003e` is a subtype of `List\u003cU\u003e` if `T extends U`.\n- *Contravariance* ‚Äî says that `List\u003cT\u003e` is a subtype of `List\u003cU\u003e` if `U extends T`, ie. going the other way of covariance.\n- *Bivariance* ‚Äî says that `List\u003cT\u003e` is a subtype of `List\u003cU\u003e` if either `T extends U` or `U extends T`.\n\nEvery language's type system has different rules around *variance*. As a programming language designer, if you were to allow covariance or contravariance over invariance, then you're allowing for greater flexibility in the type system, but it exposes programmers to greater risk of runtime type errors.\n\nTypeScript tends to be more relaxed by allowing functions to take in covariant arguments. For example, you can pass an argument so long as it is a subtype of the expected parameter, ie. covariant to the expected parameter, but this makes it possible to create run-time type errors like this:\n```typescript\ninterface EngineeringStudent {\n\tname: string;\n\tdiscipline: string;\n}\ninterface FirstYearEngineeringStudent {\n\tname: string;\n\tdiscipline?: string;   // This is basically: `string | undefined`.\n}                          // This makes `EngineeringStudent` a subtype of `FirstYearEngineeringStudent`!\n\n// Here, `student` can be `FirstYearEngineeringStudent` or any subtype of it.\nconst clearDiscipline = (student: FirstYearEngineeringStudent) =\u003e {\n\tdelete student.discipline;\n};\n\n// The dangers of accepting a covariant argument:\n// We can delete the non-optional `discipline` field and TypeScript will not complain.\nconst csStudent: EngineeringStudent = { name: 'Linus', discipline: 'Computer Science' };\nclearDiscipline(csStudent);\n\nconsole.log(csStudent.discipline);  // ‚Üí undefined\n```\n\n## Functions\n**Typing Function Delcarations**\nTo type a function declaration, you just assign types for each parameter it takes in and then specify the return type by postfixing the parameter list with a colon and a type.\n```typescript\n// Typing function parameters and return values.\n// To assign a return type to a function, you postfix the parameter list with a colon and a type.\n\n// Regular functions:\nfunction increment(num: number): number {\n\treturn num + 1;\n}\n\n// Arrow functions:\nconst decrement = (num: number): number =\u003e num - 1;\n```\n**Typing Function Expressions or Arrow Functions**\nWhat if you want to specify the type of a callback rather than a function declaration? You would use the syntax: `(param: Type, ...) =\u003e RetType`. Although the syntax is inspired by arrow functions, it is not actually defining a function.\n```typescript\ntype Greeting = (a: string, b: string) =\u003e void;\n\n// Note that the parameter names above don't need to match that of the assigned\n// callback's parameter names, they're purely for documentation.\nconst callback: Greeting = (name, message) =\u003e {\n\tconsole.log(`Hi, I'm ${name}. ${message}`);\n}\ncallback(\"Linus\", \"F*** you, Nvidia.\");\n```\n\n### Optional \u0026 Default Parameters\nJust like how you can make [[software-engineering/programming-languages/TypeScript#Optional Properties|object properties optional]] and [[software-engineering/programming-languages/TypeScript#Tuples|tuple items optional]], you can make function parameters optional by postfixing the parameter name with a `?`. Alternatively, you can set a default value for a parameter by assigning a value directly after the parameter name, which is pretty much the same as making it optional.\n```typescript\n// Optional parameter.\nconst greet = (name: string, message?: string) =\u003e {\n\tconsole.log(`Hi ${name}!`);\n\tif (message) console.log(message);\n}\n\n// Default parameter. Notice that the parameter type can often be inferred from the\n// default value that you supply.\n// You can also choose to explicitly set the type anyway like: \n//   `message: string = \"You rock.\"`\nconst greet = (name: string, message = \"You rock.\") =\u003e {\n\tconsole.log(`Hi ${name}! ${message}`);\n}\n```\n\n### Variadic Functions\nA **variadic function** is just one that takes in an arbitrary number of arguments. The vast majority of functions take in a fixed list of parameters, we call these 'fixed-arity' functions. Normally in JavaScript, defining a variadic function requires you to make use of the implicit [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) array in the function body. In TypeScript, it's way more intuitive and can be done in a type-safe way with the rest operator, `...`.\n```typescript\nconst max = (...nums: number[]): number =\u003e {\n\tif (!nums || nums.length === 0) return -Infinity;\n\treturn nums.reduce((maxSoFar, currNum) =\u003e (maxSoFar \u003e currNum) ? maxSoFar : currNum, -Infinity);\n}\n```\n\n### this\nIn JavaScript, `this` is a nightmare for most programmers to work with because its value is different depending on how it is called. In TypeScript, you can minimise surprises around the value of `this` by assigning a type to it as the first function parameter.\n\nTo illustrate the problem:\n```typescript\ntype Person = { name: string, greet: () =\u003e void };\nconst person: Person = {\n\tname: \"Linus Torvalds\",\n\tgreet: function() {\n\t\tconsole.log(`Hi, I'm ${this.name}`);\n\t}\n}\nperson.greet(); // This works as expected since `this` is bound to `person`.\n\nconst greet = person.greet;\ngreet();        // This fails since the `this` is lost and is no longer bound to `person`.\n```\nThe 'solution' is to assign a type for `this` so that the developer is warned when `this` takes on the wrong type when they invoke a function that uses it.\n```typescript\ntype Person = { name: string, greet: (this: Person) =\u003e void };\nconst person: Person = {\n\tname: \"Linus Torvalds\",\n\tgreet: function(this: Person) {\n\t\tconsole.log(`Hi, I'm ${this.name}`);\n\t}\n}\n```\n\n### Generators\nSee [[software-engineering/concepts/programming/Generators|generators]]. In JavaScript, you can create a [[JavaScript#Generators|generator function]] by postfixing `function` with an asterisk, `*`. *Note*: you cannot define arrow functions as generator functions (at least as of 2022's ES standard).\n```typescript\nfunction* fooGenerator() {\n\tyield 42;\n\tyield 24;\n}\n\nconst fooNums = fooGenerator();\nconsole.log(fooNums.next());    // ‚Üí { value: 42, done: false }\nconsole.log(fooNums.next());    // ‚Üí { value: 24, done: false }\nconsole.log(fooNums.next());    // ‚Üí { value: undefined, done: false }\n\n// You can loop through a generator's values with JavaScript's for-of loops.\nfor (const item of fooGenerator()) {\n    console.log(item);\n}\n```\nTypeScript automatically infers the return type of the generator to be `IterableIterator\u003cnumber\u003e`. To assign an explicit type for what gets yielded, do it the same way that you'd specify the return value, but wrap it around with `IterableIterator`.\n```typescript\nfunction* fooGenerator(): IterableIterator\u003cnumber\u003e {\n\t...\n}\n```\n\n### Iterators\nSee [[software-engineering/concepts/programming/Iterators|iterators]]. In JavaScript, an *iterable* is an object containing the `Symbol.iterator` property with the value being a function that returns an *iterator* (which can be done by defining Symbol.iterator to be a [[TypeScript#Generators|generator function]], which always returns an iterator). An *iterator* is an object that defines a `next` method which returns an object of shape: `{ value: any, done: boolean }`.\n\nAn object can be both an *iterable* and an *iterator* at the same time. When you invoke a generator function, for example, you get an object \nof type `IterableIterator` which is both, meaning it has a `Symbol.iterator` property, whose value is a function that returns an iterator, and the `next` method.\n```typescript\nconst favouriteNums = {\n\t*[Symbol.iterator]() {\n\t\tyield 42;\n\t\tyield 2;\n\t\tyield 4;\n\t}\n}\n\nfor (const item of favouriteNums) {\n\tconsole.log(item);\n}\n```\n**Note**: the syntax for defining `Symbol.iterator` as a generator function might seem strange. See this post for clarifications. As for the square brackets around `Symbol.iterator`, it's called the [computed property name syntax](https://stackoverflow.com/questions/32515598/square-brackets-javascript-object-key), introduced in ES6.\n\n### Function Overloading\nYou can define a function type that actually consists of multiple function signatures. See the [Function Overloads](https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads).\n\n## Generic Functions\nSee [[software-engineering/programming-languages/Generics|generics]]. In TypeScript, you can define generic functions by specifying a comma-separated list of generic type parameters in angle brackets `\u003c\u003e` right before the parameter list of function. You would use generic functions if you wanted a function to be reusable across multiple types without giving up type safety by resorting to `any`.\n```typescript\ntype Filter = \u003cT\u003e(array: T[], predicate: (elem: T) =\u003e boolean) =\u003e T[];\n\nconst filter: Filter = \u003cT\u003e(array: T[], predicate: (elem: T) =\u003e boolean) =\u003e {\n\tconst arr: T[] = [];\n\tarray.forEach((elem) =\u003e {\n\t\tif (predicate(elem)) arr.push(elem);\n\t});\n\treturn arr;\n};\n\n// TypeScript can infer that `T` should be `number`.\nconsole.log(filter([1, 2, 3, 4, 5], (num) =\u003e num % 2 === 0));\n\n// To explicitly set `T`, use angle brackets after the function name.\nconsole.log(filter\u003cnumber\u003e([1, 2, 3, 4, 5], (num) =\u003e num % 2 === 0));\n```\nTo make regular function declarations generic, you also place the generic type parameters between angle brackets right before the parameter list:\n```typescript\nfunction filter\u003cT\u003e(array: T[], predicate: (elem: T) =\u003e boolean) =\u003e { ... }\n```\n\n### Bind on Reference\nIn the above example, `T` gets *bound* when the function gets invoked, but you could also bind `T` whenever the type alias gets referenced by placing the generic type parameters *after* the type name instead of before the function parameter list:\n```typescript\ntype Filter\u003cT\u003e = (array: T[], predicate: (elem: T) =\u003e boolean) =\u003e T[];\n\n// Wherever you use `Filter`, you have to explicitly bind `T` like `Filter\u003cT\u003e`.\nconst filter: Filter\u003cnumber\u003e = (array, predicate) =\u003e ...;\n```\n\n### Bounded Polymorphism\nSometimes, saying that a generic function takes in type parameter of `T` is too permissive. Instead, we might want `T` to be a subtype of `U`, that is, we should accept type parameters that are 'at least' `U`. This is called *bounded polymorphism* or *constrained genericity*.\n```typescript\ntype Enemy = { health: number };\ntype Alien = Enemy \u0026 { galaxy: string };\ntype Cyborg = Enemy \u0026 { model: string };\n\ntype AttackEnemy = \u003cT extends Enemy\u003e(enemy: T, damage: number) =\u003e void;\nconst attackEnemy: AttackEnemy = \u003cT extends Enemy\u003e(enemy: T, damage: number) =\u003e {\n\tenemy.health -= damage;\n\tconsole.log(`Dealt ${damage}. Enemy now has ${enemy.health} HP left.`);\n};\n\nconst enemy: Enemy = { health: 20 };\nconst alienEnemy: Alien = { health: 50, galaxy: 'Andromed' };\nconst cyborgEnemy: Cyborg = { health: 100, model: 'Terminator Mk. II' };\n\nattackEnemy(enemy, 15);\nattackEnemy(alienEnemy, 10);\nattackEnemy(cyborgEnemy, 8);\nattackEnemy(\"Hello world\", 5);  // Fails because \"Hello world\" is not a subtype of `Enemy`.\n```\n![[software-engineering/programming-languages/assets/bounded-polymorphism.png|250]]\n\n## Object-Oriented Programming\nSee [[software-engineering/concepts/programming/Object Oriented Programming|Object Oriented Programming]].\n\n### Access Modifiers\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Encapsulation|encapsulation]]. TypeScript offers 3 access modifiers, which can be prefixed to any class field declaration:\n- `private`.\n- `protected` (which makes a member accessible to subclasses as well).\n- `public` .\nIf no access modifier is specified, then fields are `public` by default, unlike most languages which default to `private`.\n\nWhen prefixing a constructor's parameter with an access modifier, it'll declare the field and assign the given value implicitly. \n```typescript\nclass Person {\n\tconstructor(public name: string) {}\n}\n// ... is a shorthand that's equivalent to:\nclass Person {\n\tpublic name: string;\n\tconstructor(name: string) { this.name = name; }\n}\n\nconst person: Person = new Person('Linus Torvalds');\nconsole.log(person.name);\n```\n\n### Inheritance\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Inheritance|inheritance]]. In TypeScript, inheritance works in the same way and uses the same syntax as [[software-engineering/programming-languages/JavaScript#Inheritance|JavaScript's inheritance]].\n\n### Method Overriding\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Method Overidding|method overriding]]. By default, every method is '[[software-engineering/concepts/programming/Object Oriented Programming#Virtual Method|virtual]]', so you can override them all. To override a method in TypeScript, just copy the method signature and supply the new method body. As good practice, use the optional `override` modifier so that you're warned when you've got the base class' method signature wrong.\n```typescript\nclass Base {\n    // Methods are virtual by default.\n\tpublic foo(): void {\n\t\tconsole.log('Foo');\n\t}\n}\n\nclass Sub extends Base {\n    // Explicitly re-implementing the parent's `foo` method.\n\tpublic override foo(): void {\n\t\tconsole.log('Bar');\n\t}\n}\n```\n\n#### Abstract Classes\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Abstract Class|abstract classes]]. To make a class abstract, just prefix it with the `abstract` keyword.\n```typescript\nabstract class Employee { ... }\nclass SoftwareEngineer extends Employee { ... }\n```\n\n### Abstract Methods\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Abstract Method|abstract methods]]. Abstract methods must be inside abstract classes. To make a method abstract, use the `abstract` modifier, explicitly type the method signature and do not provide a body.\n```typescript\nabstract class Employee {\n\tconstructor(public salary: number) {}\n\tpublic getSalary(): number { return this.salary; }\n\tpublic abstract slackOff(): void;\n}\n\nclass SoftwareEngineer extends Employee {\n\tconstructor() { super(100000); }\n\tpublic override slackOff() { console.log('Time to browse r/ProgrammerHumor...'); }\n}\n\nconst linus: Employee = new SoftwareEngineer();\nlinus.slackOff();\n```\n\n### Generic Types in Classes/Interfaces\nYou can set class-scoped or interface-scoped generic type parameters:\n```typescript\nclass HashMap\u003cK, V\u003e { ... }\ninterface HashMap\u003cK, V\u003e { ... }\n```\n\n\n## Modules\nSee [[software-engineering/programming-languages/JavaScript#Modules|JavaScript modules]]. With TypeScript, you can additionally import/export type aliases and interfaces.\n\n**Note**: in import statements, you don't need to specify the `.ts` file extension. This means you can easily import [[software-engineering/programming-languages/TypeScript#Type Declaration Files|type declaration files]] with the extensionless name.\n\nIn `thing.ts`:\n```typescript\n// Notice that this file exports a value `Thing` and a type `Thing`, but\n// no name collision happens because 'values' and 'types' are tracked in\n// separate namespaces by the TypeScript compiler.\nexport type Thing = {\n\tval: number;\n};\nexport const Thing = {\n\tval: 42,\n};\n```\nIn `main.ts`:\n```typescript\n// Notice that you don't need to write the extension in the path: './thing.ts'.\nimport { Thing } from './thing';\n\nconst thing: Thing = Thing;\nconsole.log(thing);\n```\n\n## Error Handling\nSee [[software-engineering/programming-languages/JavaScript#Error Handling|JavaScript error handling]]. TypeScript doesn't introduce any new syntax for error handling over JavaScript, but the type system allows for streamlining how errors are treated in a project by developers.\n\n### Ways of Error Handling\nThere are 4 common patterns for handling errors in TypeScript projects, which are also mostly applicable to non-TypeScript projects:\n1. *Just return `null`.*\n   This reveals the least information in the event of an error, but it's the easiest to do. Constant null-checking is required throughout the code however, which can be laborious and verbose.\n2. *Throw an exception.*\n   When an exception is thrown, it must be caught by the caller in a try-catch block (or a `catch` callback if using promises) otherwise a full crash occurs. Making and throwing custom subclasses of `Error` would offer specific information to help with debugging and informing the user about the problem.\n   The main issue is that it's hard to enforce that programmers write the error-handling try-catch logic when they're lazy.\n3. *Return exceptions (rather than throw them)*.\n   This means a function will specify in its return type a union of the expected return type *and* the error classes that it could throw, such as in the following:\n   ```typescript\n\tconst getData = (): Data | NetworkError =\u003e {};\n   ```\n   By putting the error as part of the return type, the user of the function is unlikely to ignore error cases.\n   The idea here is very similar in spirit to [Java's `throws`](https://www.javatpoint.com/throws-keyword-and-difference-between-throw-and-throws) keyword.\n   The downside to this approach is that it'll lead to more verbose function signatures, especially if errors are simply 'bubbled' up the call stack.\n4. *Define and use the `Option` type*.\n  The idea comes from languages like Rust and Haskell. See Rust's documentation on [`std::option`](https://doc.rust-lang.org/std/option/).\n\n## Utility Types\nTypeScript gives you a bunch of [very useful built-in utility types](https://www.typescriptlang.org/docs/handbook/utility-types.html) that you can use to make working with complex types a breeze üå¨Ô∏è.\n\n### Mapping Types\nHere are some of the most useful utility types for sourcing types from other types:\n- `Partial\u003cT\u003e` ‚Äî T, but every property is optional.\n- `Omit\u003cT, Keys\u003e` ‚Äî T, but without the property in `Keys`, which is a union of string property names.\n- `Pick\u003cT, Keys\u003e` ‚Äî a type with properties `Keys`, a union of string property names, sourced from `T`.\n- `Readonly\u003cT\u003e` ‚Äî T, but every property is read-only.\n\nUsage examples:\n```typescript\ninterface Human {\n    limbs: string[];\n    organs: string[];\n    memories: string[];\n    soul: boolean;\n}\n\ntype SubHuman = Partial\u003cHuman\u003e;                                 // Human, but all properties are optional.\ntype Husk = Omit\u003cHuman, 'soul' | 'memories'\u003e;                   // Human, but without the soul or memories.\ntype SentimentalProperties = Pick\u003cHuman, 'soul' | 'memories'\u003e;  // Only the soul and memories of a human.\ntype FrozenHuman = Readonly\u003cHuman\u003e;                             // Human, but every property is immutable.\n\n// After experiencing Java programming, I am just a husk ;(\nconst me: Husk = {\n    limbs: [\"arms\", \"legs\", \"...\"],\n    organs: [\"half a brain\", \"heart\", '...'],\n};\n```\n\n**Note**: behind the scenes, utility types such as the ones above are realised through ['mapped types'](https://www.typescriptlang.org/docs/handbook/2/mapped-types.html).\n```typescript\n// This is the `Partial` type, implemented using mapped types.\n// Many other utility types are implemented in a very similar manner!\ntype MyPartial\u003cT\u003e = {\n    [K in keyof T]?: T[K];\n};\n```\n\n### Conditional Types\nHere are some of the most useful utility types that leverage [conditional typing](https://www.typescriptlang.org/docs/handbook/2/conditional-types.html), a TypeScript innovation.\n- `Exclude\u003cT, U\u003e` ‚Äî removes values in the set `U` from the set `T`.\n- `Extract\u003cT, U\u003e` ‚Äî picks out elements in `U` that are in `T`.\n- `NonNullable\u003cT\u003e` ‚Äî excludes `null` from the set `T`.\n- `ReturnType\u003cF\u003e` ‚Äî the return type of a function's typed signature.\n\n**Note**: just like how you can use the ternary operator, `(condition) ? expr1 : expr2` for conditional expression evaluation, you can use the ternary operator for conditional type evalution. This is what's used to implement those conditional utility types above.\n\n## Asynchronous Programming\nSee [[software-engineering/programming-languages/JavaScript#Asynchronous Programming|JavaScript asynchronous programming]]. \n\n## JavaScript Interoperability\nAn excellent reason to adopt TypeScript is that you don't have to rewrite your JavaScript codebase to begin benefiting from a type system.\n\n### Type Declaration Files\nA type declaration file, which goes with the extension `.d.ts`, associates types to JavaScript code. It's a file consisting **only** of *type-level* code, meaning you can't use expressions in there (which means no function implementations, variables, class implementations, etc. can be defined within). As a very loose analogy, `.d.ts` files are kind of like the `.h` header files in C or C++.\n\nIf you have a `hello-world.js` file, then the type declaration file must have the name, `hello-world.d.ts`.\n\n\u003e A type declaration is a way to tell TypeScript, ‚ÄúThere exists this thing that‚Äôs\ndefined in JavaScript, and I‚Äôm going to describe it to you.‚Äù (Programming TypeScript). \n\nNPM packages that once were intended only for JavaScript developers (eg. jQuery) can be made consumable by TypeScript developers by having these type declaration files. As a TypeScript dev, you'd be able to use pure JS libraries as if they were written in TypeScript.\n\nWhen type declarations don't ship with an NPM package, they can usually be install individually in the [@types organisation](https://www.npmjs.com/~types) on npm. The type declarations in [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped), a big community effort to bring types to popular JS libraries, are automatically published to the @types organisation.\n\nEg. to bring jQuery into a TypeScript frontend project, you'd do:\n```bash\nnpm install jquery --save              \nnpm install @types/jquery --save-dev  # Brings in all the type declaration files.\n```\n\n\n","lastmodified":"2022-07-30T00:03:13.748004324Z","tags":null},"/software-engineering/software-engineering/Agile":{"title":"Agile","content":"\nAgile is a *philosophy* for project management that is particularly useful for software engineering teams. An alternative to Agile is the [[software-engineering/software-engineering/Agile#Waterfall Methodology|Waterfall approach]].\n\nThere exists 'implementations' of Agile, which are called ***Agile methodologies***, such as:\n- [[software-engineering/software-engineering/Scrum|Scrum]]\n- [[software-engineering/software-engineering/Kanban|Kanban]]\n- [[software-engineering/software-engineering/Extreme Programming|Extreme programming (XP)]]\n\nAgile has an old [[software-engineering/software-engineering/Agile#Agile Manifesto|manifesto]] created by bunch of highly respected software engineers in 2001 due to frustrations over inefficient traditional project management methods (mainly [[software-engineering/software-engineering/Agile#Waterfall Methodology|the waterfall approach]]). Overall, Agile puts great emphasis on:\n1. Constantly launching small sets of features and using the feedback to inform the next set of features to be developed and shipped.\n2. The idea that requirements and plans are constantly in flux, so we must crunch down our iteration timeline to respond quickly to those changes.\n\n### Waterfall Methodology\nIn the traditional 'waterfall' approach to project management, teams plan out everything first, then execute on the plan. Essentially, everything is done in phases which collectively span a long time.\n\n![[software-engineering/software-engineering/assets/waterfall-methodology-diagram.png|500]]\n\nThe waterfall approach is named such because you cannot go to a previous phase, at least not in the short-term. It's a great management framework for projects that have fixed and clear requirements and a clear vision of what the end product will be. Sadly, software projects are rarely like that and benefit greatly from very quick development, deployment and feedback cycles which help the team re-orient the project scope so as to maximise the value delivered to customers.\n\n\n\n\n\n![[software-engineering/software-engineering/assets/agile-meme.png|500]]\n\n\n### Epics\nEpics serve as a container for [[software-engineering/software-engineering/Agile#User Stories|user stories]] and do not represent something that's deliverable in a single sprint, usually. They go by the same format of: *\"As a `userType`, I want `some behaviour`, so that `some reason`.\"*\n\n![[software-engineering/software-engineering/assets/epic-user-story-task-hierarchy.png|700]]\n\nEpics are the starting point. You come up with the epics first, then recursively break it down into its constituent user stories.\n\n### User Stories\nUser stories are statements of the following form:\n```\nAs a      {user type}\nI want to {use some feature in some way}\nSo that   {goal or benefit to the user}\n```\n\nIt's worded this way to be extremely straightforward to technical/non-technical people, capture business value, and it does not assert anything about what the design should be.\n\nUser stories are usually placed into a project backlog in a project management app like Jira.\n\n#### User Acceptance Criteria\nUser stories should have a concrete set of conditions that must be satisified in order to consider a user story *implemented*. This is the *user acceptance criteria*.\n\nYou can specify a user acceptance criteria with the given-when-then format:\n```\nGiven {context}\nWhen  {a specific action is performed}\nThen  {a set of consequences should occur}\n```\n\n#### Examples\n\n- **For a music app like Spotify:**\n\t- \"As a user, I want to be able to make a playlist of my favourite songs so that I can find them easily.\"\n\t- \"As a user, I want to follow artists so that I can be notified of new songs.\"\n\n## Agile Manifesto\nSourced from [manifesto](https://agilemanifesto.org/principles.html):\n1. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.\n2. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage.\n3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.\n4. Business people and developers must work together daily throughout the project.\n5. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\n6. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.\n7. Working software is the primary measure of progress.\n8. Agile processes promote sustainable development. The sponsors, developers and users should be able to maintain a constant pace indefinitely.\n9. Continuous attention to technical excellence and good design enhances agility.\n10. Simplicity ‚Äî the art of maximising the amount of work not done ‚Äî is essential.\n11. The best architectures, requirements, and designs emerge from self-organising teams.\n12. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behaviour accordingly.\n\nThe Agile Manifesto is declarative, not imperative. It doesn't tell you how to do anything, it's up to you to apply their principles. You can do that through [[software-engineering/software-engineering/Scrum|Scrum]], [[software-engineering/software-engineering/Kanban|Kanban]], etc. or combining practices you like from any of them.\n","lastmodified":"2022-07-30T00:03:13.752004325Z","tags":null},"/software-engineering/software-engineering/Extreme-Programming":{"title":"Extreme Programming","content":"\nTODO.\n","lastmodified":"2022-07-30T00:03:13.752004325Z","tags":null},"/software-engineering/software-engineering/Kanban":{"title":"Kanban","content":"\nTODO.\n","lastmodified":"2022-07-30T00:03:13.752004325Z","tags":null},"/software-engineering/software-engineering/Requirements-Engineering":{"title":"Requirements Engineering","content":"\n### Software Requirement Specification (SRS)\nA *software requirement specification* is a document, written for engineers and stakeholders alike, that describes what the project's features are and its business model. \n\nGenerally, a requirements document should cover:\n1. Project scope (a summary of what the project is, its features, its target audience, its boundaries, deliverable deadlines, etc.).\n2. [[software-engineering/software-engineering/Requirements Engineering#Functional Requirements|Functional requirements]] in the form of [[software-engineering/software-engineering/Agile#Epic|epics]] and [[software-engineering/software-engineering/Agile#User Stories|user stories]].\n3. System architecture.\n4. UI prototype.\n5. [[software-engineering/software-engineering/Requirements Engineering#Non-Functional Requirements|Non-functional requirements]].\n\nCommunication should be the priority, not formality, so you should make liberal use of diagrams, graphs and images.\n\n### Functional Requirements\nFunctional requirements are product features that are implementable by developers. They define **what the system does** and roughly look like the following:\n1. Authentication system allows user to log in with their Google account.\n2. The user can create new blogs.\n3. The user can comment on existing blogs.\n\n### Non-Functional Requirements\nNon-function requirements are requirements on the product that aren't features. They roughly look like this:\n- Must support 10000 concurrent users.\n- Latency must be below 100ms.\n- The bundle size must be below 1mb.\n","lastmodified":"2022-07-30T00:03:13.752004325Z","tags":null},"/software-engineering/software-engineering/Scrum":{"title":"Scrum","content":"\nTODO.\n\n### Scrum Roles\nA Scrum team's member each adopts a role:\n- *Product owner*\n    - Understanding customer requirements\n    - Creates the vision for what the product should be\n    - Maintains the backlog\n- *Scrum master*\n    - The middleman between product owner and dev team\n    - Assists task breakdown and planning\n    - Ensures completion of tasks\n- *Scrum team* ‚Äî the developers\n    - Breaks down *epic* to *stories/tasks*, then into *subtasks*\n    - Implements features and writes tests\n","lastmodified":"2022-07-30T00:03:13.752004325Z","tags":null}}