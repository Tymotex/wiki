{"/":{"title":"ðŸª´ Tim's Dev Wiki","content":"\nWelcome to my developer wiki!\n\n- [[software-engineering/Software Engineering|Software Engineering]]\n- [[economics/Microeconomics|Microeconomics]]\n- [[economics/Macroeconomics|Macroeconomics]]\n","lastmodified":"2022-07-13T00:04:49.572101218Z","tags":null},"/economics/Macroeconomics":{"title":"Macroeconomics","content":"\nMacroeconomics\n","lastmodified":"2022-07-13T00:04:49.572101218Z","tags":null},"/economics/Microeconomics":{"title":"Microeconomics","content":"\n==Hello world==\n\n","lastmodified":"2022-07-13T00:04:49.572101218Z","tags":null},"/maths/discrete-maths/Set-Theory":{"title":"","content":"\n## Sets\n","lastmodified":"2022-07-13T00:04:49.572101218Z","tags":null},"/software-engineering/Software-Engineering":{"title":"Software Engineering","content":"\n### Technologies\n#### Languages\n- [[software-engineering/programming-languages/TypeScript|TypeScript]]\n\n#### Frameworks\n- [[software-engineering/frameworks/Cypress|Cypress]]\n\n### Concepts\n#### Programming\n- [[software-engineering/concepts/programming/Generators|Generators]]\n- [[software-engineering/concepts/programming/Iterators|Iterators]]\n...\n","lastmodified":"2022-07-13T00:04:49.572101218Z","tags":null},"/software-engineering/aws/Availability-Zone":{"title":"","content":"### Availability Zones\n*Availability zones* (AZz) are basically just one or multiple physical [[Data Center|data centers]] in a [[Region|region]].\n- Availability zones \n\n","lastmodified":"2022-07-13T00:04:49.572101218Z","tags":null},"/software-engineering/aws/CloudFront":{"title":"","content":"AWS CloudFront is a CDN service to help you serve cached static and dynamic content to users with minimal latency. It's great because you can trust in its very high availability, and it also handles things like DDoS attacks and other network attacks well.","lastmodified":"2022-07-13T00:04:49.572101218Z","tags":null},"/software-engineering/aws/Data-Center":{"title":"","content":"![[Data center.png]]\nData centers are very large physical buildings that are dedicated to housing the computers that form the [[software-engineering/concepts/cloud/Cloud Computing|cloud]].\n- A data center's location is strategically chosen based on proximity to users (so as to minimise *round-trip times*, and therefore latency), proximity to workers, availability of land and electrical infrastructure, low natural disaster risks, and so on.\n","lastmodified":"2022-07-13T00:04:49.572101218Z","tags":null},"/software-engineering/aws/Edge-Location":{"title":"","content":"*AWS edge locations* are [[Data Center|data centers]] owned by trusted 3rd party, called an *AWS Partner*, that uses [[CloudFront]]. Together, the edge locations form the *edge network* between AWS and end users.\n\nWhen a user makes a network request to one of your services, the request goes to the edge location that has the lowest latency to reach. From there, cached content might be served back, or the edge location forwards the request to the *origin server* (which might be an S3 bucket, for example). This reduces the total **number of hops** between routers that a network request would otherwise need to go through in order to reach your service.\n","lastmodified":"2022-07-13T00:04:49.572101218Z","tags":null},"/software-engineering/aws/Region":{"title":"","content":"### Regions\nA *region* is literally a geographic region which contains 1 or more [[Availability Zone|availability zones]]. AWS ensures that there are a minimum of 2 AZs in every region.\n![[Region availability zone.png|500]]\nAWS has around 26 regions and 84 availability zones distributed across the world.\n- Regions typically have names like `us-east-1`, `us-east-2`, `ap-southeast-2` (Asia Pacific, Sydney), and so on. \n- Availability zones typically have names post-fixed with a character like `us-east-1a` and `us-east-1b`.\n![[AWS availability zone map.png|500]]\nNot all regions are equivalent. Some regions will access to services that are not available to others.\n","lastmodified":"2022-07-13T00:04:49.572101218Z","tags":null},"/software-engineering/aws/assets/Regions":{"title":"","content":"","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/aws/assets/Untitled":{"title":"","content":"","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/clean-code/Clean-Code":{"title":"Clean Code","content":"TODO.\n\n### Coupling\nCoupling describes how dependent one thing is on another. In object-oriented programming, it refers to how dependent one class is on another.\n\nAlthough coupling is unavoidable in some instances, you should generally prioritise minimising coupling because it tends to improve the maintainability of your code. When changing a single part of a *highly coupled* system, you might find yourself changing many other parts of the system.\n\nAnother important point about low coupling is that it makes unit tests and integration tests easier to write *and* maintain.\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/cloud/Cloud-Computing":{"title":"","content":"Cloud computing describes the usage of a network of remote computers managed by [[software-engineering/concepts/cloud/Cloud Provider|cloud providers]] to handle computing tasks like storing/serving files, running web servers, training machine learning models, etc. *instead* of provisioning your own on-premise computers.\n\nBy deploying your compute tasks in the cloud, you no longer have to worry about things like:\n- Buying and setting up dedicated computers.\n- Hiring an IT team to take care of those computers.\n- Dealing with inevitable hardware failures (backing up and restoring data, for example).\n- Paying for the physical space to put your computers and ensuring it's secure from adversaries.\n- [[software-engineering/concepts/cloud/Scaling]] to meet unexpected gain/reduction in usage.\n\nCloud computing is generally divided into 3 groups:\n- [[software-engineering/concepts/cloud/SaaS]], for user-facing, generally non-technical software products like Gmail or Google Drive.\n- [[software-engineering/concepts/cloud/PaaS]], for developer teams who don't want to manage the hardware and software for running computing tasks.\n- [[software-engineering/concepts/cloud/IaaS]], for admins to easily provision and monitor compute resources like storage, networking, RAM, etc.\n![[software-engineering/concepts/cloud/assets/SaaS-PaaS-IaaS.png|600]]\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/cloud/Cloud-Provider":{"title":"Cloud Provider","content":"\n**Cloud providers** are just companies who have set up this big network of remote computers and give you reasonable prices for running computing tasks on their computers. For lone developers or huge enterprises, it's almost always more cost-efficient and reliable to serve a web application on the cloud, for example, rather than acquiring and administrating the hardware resources themselves.\n\nCloud providers are able to give you reasonable prices because they leverage *economies of scale*, where the larger a company's production gets, the lower the average cost of producing their goods/services, in general.\n\nThe main cloud providers are AWS, Azure and GCP. There are also other cloud providers like DigitalOcean, Linode, Vultr, etc. but they aren't considered nearly as mature as the 'big 3' previously mentioned because they don't provide nearly as many services.\n\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/cloud/IaaS":{"title":"","content":"","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/cloud/PaaS":{"title":"","content":"","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/cloud/SaaS":{"title":"","content":"# SaaS\n\n\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/cloud/Scaling":{"title":"","content":"","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/computer-science/Program-Memory":{"title":"","content":"\n\n### Stack\nTODO.\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/computer-science/Stack-Frame":{"title":"","content":"TODO.\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/programming/Functional-Programming":{"title":"Functional Programming","content":"TODO.\n\nA [[software-engineering/concepts/programming/Programming Paradigm|programming paradigm]]\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/programming/Generators":{"title":"","content":"Generators are *just functions* which, when invoked, will give you a single value from a list of values. They're *stateful* functions which return the next value in a list of values for each successive invocation.\n\nUsually, programming languages will give you a `yield` keyword which works basically the same way as `return`, but when the function is invoked again, execution resumes after the last `yield`. For example, below is a generator in Python.\n```python\ndef foo_generator():\n\tyield 2\n\tyield 3\n\tyield 5\n\ng = foo_generator()\nprint(next(g))      # â†’ 2\nprint(next(g))      # â†’ 3\nprint(next(g))      # â†’ 5\n```\nAt each `yield` statement, execution is suspended at that line and exeuction resumes at the line right after until the next `yield` or until the function terminates.\n\n**Note**: normally, when you invoke a function, a [[software-engineering/concepts/computer-science/Stack Frame|stack frame]] gets allocated on the [[software-engineering/concepts/computer-science/Program Memory#Stack|stack]] section of memory. When you invoke a generator function, the 'stack' frame actually gets allocated in the [[software-engineering/concepts/computer-science/Program Memory#Heap|heap]] instead (at least in [CPython](https://github.com/python/cpython)) and so they persist separately from the regular function call stack.\n\n### Generators \u0026 Iterator\nAll *generators* are [[software-engineering/concepts/programming/Iterators|iterators]]. When you invoke a generator function, it returns an *iterator* which you can loop through by invoking some function/method like `next` on them (in the case of Python).\n\n### Why Use Generators?\nNormally, when you need a list of values of some kind, you'd call a function which returns that entire list of values back to you. Generators are *lazy*, so they only return one value of a stream of values at a time. In other words, you get values from a stream of values *on-demand* rather than getting all values upfront. This is great when you don't know how many values from a stream of values you might need. If you really needed the first 10 values, but you loaded all 1000 values upfront, for example, you're hogging an **unnecessarily large amount of memory**. With generators, you only really hold the memory for a single value of the list, so it's a really common way to optimise for memory usage.\n\nGenerators are also a great way to represent streams of infinite values. For example, it might make sense to write a prime numbers generator function only get the next prime number, on-demand.\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/programming/Iterators":{"title":"","content":"An **iterator** is an *object* that lets you loop through an **iterable**, usually by invoking, implicitly or explicitly, a `next` method.\n- In Python, iterators are objects that expose the `__next__`  [[Python#Dunder Methods|dunder method]] which can be invoked to retrieve the next value in the **iterable**.\n\nAn **iterable** is an object containing a collection of items that you can *get an **iterator** from*, usually, via a method. Iterables are stateless and have no concept of what element is the 'current' element in a traversal â€“ that is what the iterator handles.\n- In Python, that method is `__iter__`.\n- In C++, that method is usually `begin`.\n\nMany programming languages give you a for-loop variant that basically serves as syntactic sugar in using looping through the items in an **iterable**.\n- In Python, when you say `for item in iterable`, what happens behind the scenes is the iterable's `__iter__` method gets called to get an iterator, then `item` is assigned to whatever the iterator's `__next__` method returns. The for loop stops when `__next__` raises a `StopIteration` exception.\n- In C++, they're called *range-based for* loops with the syntax `for (T item : iterable) statements`.\n- In C#, they're called *foreach* loops with the syntax `foreach (T item in iterable) statements`.\n- In JavaScript, they're called *for of* loops with the syntax `for (let item of iterable) statements`\n- ... and so on.\n\n### Iterator Design Pattern\nThe purpose of iterators is to let the user access the elements of a data structure through a consistent interface, regardless of whether they're iterating through items in a vector, a binary search tree, a graph, a hash map, etc. All these data structures will provide a way for the user to get an iterator from them that can be used in a for loop, for example.\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/programming/Object-Oriented-Programming":{"title":"Object Oriented Programming","content":"Object-oriented programming is a [[Programming Paradigm|programming paradigm]] that sees programs as a collection of *objects* interacting with each other. *Objects* are just containers for some data (called 'fields') and functions (called 'methods').\n\nObject-oriented programming involves heavy usage of [[#Classes]] and enable us to make use of concepts like [[#Encapsulation]], [[#Inheritance]], [[#Polymorphism]], etc.\n\n### Classes\nTODO.\n\n#### Static Classes\nTODO.\n\n### Encapsulation\nEncapsulation is about *hiding the implementation details* of a class as much as possible. Doing so will tend to minimise [[software-engineering/concepts/clean-code/Clean Code|coupling]].\n\n**Access modifiers**\nAccess modifiers are used to explicitly apply different levels of visibility to the members of a class. OO programming languages will usually give you the following 3 access modifiers.\n- `private` â€“ only accessible within the class.\n- `protected` â€“ accessible within the class *and* within its subclasses.\n- `public` â€“ accessible by any class in the program.\n\nLanguages might have variations on how these access modifiers behave, as well as what the default visibility is when you omit the access modifier. Eg. In Java, a `protected` member is also visible to classes in the same package. \n\nIn general, prefer the most restricted visibility possible.\n\n### Inheritance\nInheritance (also called 'subclassing') is when you make one class derive from a base class, causing the child class to *inherit* the parent class' non-private members.\n\n**Differences between languages**\nLanguages will have different syntax for inheritance and ways for subclasses to access their parent class. They may also differ in whether they support [**multiple inheritance**](https://en.wikipedia.org/wiki/Multiple_inheritance) or not.\n- In C++, the inheritance might look like `class Sub : public Base`. *Note*: C++ has concepts like private/public inheritance that other languges don't have.\n- In JavaScript, inheritance looks like `class Sub extends Base`. Within the `Sub` class, you have access the base class' constructor and methods via the `super` keyword.\n- In C#, inheritance looks like `public class Sub : Base`. Subclasses can access the base class' members through the `base` keyword (which is similar to JavaScript's `super` keyword).\n\n### Polymorphism\nTODO.\n\n#### Static Polymorphism\nTODO.\n\n#### Dynamic Polymorphism\nTODO.\n\n### Method Overidding\nMethod overriding is when you make a subclass provide an implementation for a method that's defined in its base class. Method overriding enables **[[#Dynamic Polymorphism|runtime polymorphism]]**.\n\n**Differences between languages**\nIn many languages, overriding is implicitly done, but it's recommended to explicitly label it.\n- In TypeScript and C++, you can optionally add the `override` modifier.\n- In Java, you can optionally annotate overridden methods with `@Override`.\n- In C#, you must use the `override` modifier.\n\n### Abstract Class\nAn abstract class is just one you can't instantiate, *forcing* the user to choose and instantiate a specific concrete subclass that inherits from the abstract class. \n\nAbstract classes let you define **both** *concrete methods* and *abstract methods*. If you find that you don't need to define concrete methods, which is usually the majority of the time, then consider using an [[#Interface|interface]] instead.\n\n**Differences between languages**\nMaking a class abstract differs between programming languages.\n- In TypeScript, prefix a class with `abstract`.\n- In C#, prefix a class with `abstract`.\n- In C++, give the class at least one [[C++|pure virtual function]], eg. `virtual void foo() = 0;`. There is no `abstract` keyword.\n\n#### Abstract Method\n*You can only define abstract methods inside an abstract class*. Abstract methods are ones that **must be overridden** and implemented by the subclasses. If you want to provide a default implementation and allow for subclasses to optionally override a method, use [[#Virtual Method|virtual methods]] instead.\n\nYou cannot make abstract methods static.\n\n**Differences between languages**\nTo define abstract methods:\n- In TypeScript, you'd use the `abstract` modifier.\n- In C#, you'd use the `abstract` modifier.\n- In C++, define a pure virtual function: `virtual void foo() = 0;`.\n\n### Virtual Method\nVirtual methods are methods that can be overridden by subclasses. To force subclasses to implement a method, use [[#Abstract Method|abstract methods]] instead.\n\nYou cannot make virtual methods static.\n\n**Differences between languages**\nTo define virtual methods:\n- In some languages like C# and TypeScript, methods are virtual by default.\n- In C++, you'd use the `virtual` modifier, but it's a little complicated because you can still override methods without it. See [this StackOverflow post](https://stackoverflow.com/questions/2391679/why-do-we-need-virtual-functions-in-c).\n\n### Interface\nAn interface is a 'contract' that defines what a user can do with the classes that *implement* that interface. You define the methods (and sometimes constants) that the interface supports, and then leave the implementation details to the subclasses. An interface is not a class, so you cannot instantiate it.\n\nYou **cannot supply any implementation** inside interfaces. If you want to provide *some* concrete methods, then consider using an [[#Abstract Class|abstract class]] instead. That being said, some programming languages like C# let you implement a static members inside an interface.\n\n**Differences between languages**\n- In TypeScript, you define an interface like this: `interface Blog { ... }`, but it's also used generally outside of OO design.\n- In C#, you define an interface like this: `public interface IFoo { ... }`.\n- In C++, there is no native concept of interfaces, but you can simulate it by making an abstract class whose methods *are all* abstract, ie. all of them are pure virtual functions. Implementing an interface is therefore the same as inheritance.\nAll interface members are public by default.\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/programming/Programming-Paradigm":{"title":"Programming Paradigms","content":"A *programming paradigm* describes a general *strategy* for how to write software. Formally, a 'paradigm' in everyday English is:\n\u003e A set of assumptions, concepts, values, and practices that constitutes a way of viewing reality for the community that shares them.\n\nBelow is a hierarchy of very popular, battle-tested programming paradigms, each with their own pros and cons. You can solve pretty much *any* software problem in *any* paradigm, really, but the solution will differ in terms of scalability, maintainability, difficulty, etc.\n![[software-engineering/concepts/programming/assets/programming-paradigms.png]]\n**Note**: there are more paradigms than shown here.\n\nProgramming languages often support multiple programming paradigms. For example, JavaScript supports both [[software-engineering/concepts/programming/Object Oriented Programming|object-oriented programming]] and [[Functional Programming|functional programming]] (and more).\n\n### Imperative\nPrograms are a set of precise instructions for the machine to perform that mutate program state.\n- **Procedural** â€“ programs are just a sequential collection of data and functions (procedures) acting on that data. C is a classic example of a procedural language.\n- **Object-oriented** â€“ programs are just objects interacting with each other. Objects are just a container that groups together some data and methods (functions). \n\n### Declarative\nPrograms should be written descriptively, meaning that your code should always express the 'what' rather than the 'how'. SQL, for example, is a declarative language, since the statement `SELECT * FROM Table` expresses what you want, but the 'how' is delegated tot he SQL engine. Ultimately, \n- **Functional** â€“ programs are made by calling and composing functions.\n\nUltimately, languages that support a declarative paradigm are just abstractions over an imperative 'backend'.\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/programming/Type-System":{"title":"","content":"A *type system* is a set of rules defined by a programming language specification that assigns a *type* to every variable, expression, function, and possibly other things beyond those. \n\n### Why Type Systems Exist\nType systems exist for one reason: to help you write less buggy code in a more self-documenting way.\n- Giving variables, values, functions, etc. a *type* restricts the set of things you can do with them which helps us by minimising the chance of creating situations where the program tries to add the integer `3` to an instance of `Cat`. \n- It forces users of an interface to always supply an expected value.\n\n### Static Typing\nA *statically typed language* is one where the type system's rules are checked when you run the compiler (ie. at compile-time). It's called 'static' because any type system violations are caught before you execute a single line of your program.\n- Languages like [[C]] and [[Java]] are statically typed. Every valid C or Java program will always know what type an expression, variable, function has before execution.\n\n### Dynamic Typing\nA *dynamically typed language* is one where the type system's rules are checked during the execution of the program rather than at compile-time. In other words, nothing has a type until you run the program, and only then do the types get assigned to expressions, variables, functions, etc.\n- [[Python]] is a dynamically typed language. You could code up some very obvious type errors like `x = 1 + \"hi\"` but the program will run fine until it actually executes that line.\n- There is an important trade-off to recognise between static typing and dynamic typing: you would get fewer run-time errors with static typing, however dynamic typing affords you far more flexibility, which generally helps you implement things faster (at least in the short-term).\n\n### Strong Typing\nThere's a lack of a formal definition for this, but a *strongly typed* language is basically one where it is *not possible* for the developer to bypass the type system's rules. In other words, a value's type never changes in unexpected ways, such as through *implicit casts*.\n- [[Python]] is a strongly typed language. It's not possible to implicitly typecast values.\n- **Note**: a language can be both strongly and dynamically typed.\n\t```python\n\tx = 42\n\tx = \"Hello\"\n\t```\n\n### Weak Typing\nJust like *strong typing*, there is a lack of a formal definition, but in general: weakly typed programming languages are ones that have a more relaxed enforcement of its type system's rules, meaning that it's possible to violate/bypass them.\n- [[C]] is a classic weakly typed language. Pointers and integers are pretty much fully interchangeable, and you can freely convert a pointer of any type to a pointer of any other type.\n\t\u003e \"C is not a strongly-typed language, but as it has evolved, its type checking has been strengthened. \" - Dennis Ritchie.\n- [[JavaScript]] is also a weakly typed language. It's notorious for silently producing (sometimes hilariously) unintuitive results.\n\t```javascript\n\t\"11\" + 1 === \"111\"\n\t\"11\" â€” 1 === 10\n\n\t('b' + 'a' + + 'a' + 'a').toLowerCase() === \"banana\"   // See an explanation: https://stackoverflow.com/questions/57456188/why-is-the-result-of-ba-a-a-tolowercase-banana\n\t```\n \nSometimes, we talk about the relative *weakness* of the type system between different programming languages. Eg. C++ is not strongly typed, however it is consider 'stronger' than C.\n\n**Note**: people often confuse *weak* typing to mean *dynamic* typing, and *strong* typing with *static* typing. They're completely separate. For example, C is both weakly typed and statically typed, while Python is both strongly typed and dynamically typed.\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/testing/Arrange-Act-Assert":{"title":"","content":"The 'arrange, act, assert' mantra is a pattern for structuring your [[software-engineering/concepts/testing/Unit Testing|unit tests]] (as well as integration tests and e2e tests). \n\nThe contents of a test should be partitioned into 3 parts in the following order:\n1. **Arrange** â€“ the setup code that's required before you can test what you want to test.\n2. **Act** â€“ the code that executes what the test intends to do. \n3. **Assert** â€“ the code that makes assertions about what the aftermath should be. \n\nSome simple, concrete examples of this pattern:\n1. Unit testing a C++ function (using [[GoogleTest]]). This tests a `SymbolTable` class that's meant to be used as a supporting data structure for a [compiler project](https://github.com/Tymotex/Nand2Tetris).\n\t```c++\n\tTEST(SymbolTableTestSuite, InsertAndRetrieveTest) {\n\t    // Arrange.\n\t    SymbolTable symbol_table;\n\n\t\t// Act.\n\t    symbol_table.define(\"myVar\", \"int\", \"var\");\n\n\t\t// Assert.\n\t    EXPECT_EQ(symbol_table.data_type(\"myVar\"), \"int\");\n\t    EXPECT_EQ(symbol_table.declaration_type(\"myVar\"), DeclarationType::VAR);\n\t    EXPECT_EQ(symbol_table.segment_index(\"myVar\"), 0);\n\t}\n\t```\n1. Unit testing a frontend React component (using [[software-engineering/frameworks/Jest|Jest]]). This tests the breadcrumbs component on the portfolio website, [timz.dev](https://timz.dev).\n\t```typescript\n\tdescribe(\"Breadcrumbs\", () =\u003e {\n\t    test(\"All crumbs are rendered\", () =\u003e {\n\t\t\t// Arrange.\n\t        render(\n\t            \u003cBreadcrumbs\n\t                crumbs={[\n\t                    { title: \"Home\", url: \"/\" },\n\t                    { title: \"Projects\", url: \"/projects\" },\n\t                    {\n\t                        title: \"My Sentient Robot\",\n\t                        url: \"/projects/my-sentient-robot\",\n\t                    },\n\t                ]}\n\t            /\u003e,\n\t        );\n\n\t\t\t// Act.\n\t        const home = screen.getByText(/Home/i);\n\t        const projects = screen.getByText(/Projects/i);\n\t        const sentientRobot = screen.getByText(/My Sentient Robot/i);\n\n\t\t\t// Assert.\n\t        expect(home).toBeInTheDocument();\n\t        expect(projects).toBeInTheDocument();\n\t        expect(sentientRobot).toBeInTheDocument();\n\t    });\n    });\n\t```\n1. E2E testing a web app (using [[Cypress]]). This tests that the portfolio website, [timz.dev](https://timz.dev), is able to load the about page via a link on the homepage.\n\t```typescript\n\tdescribe(\"Portfolio page tests\", () =\u003e {\n\t    it(\"should render the about page after the 'about' link is clicked\", () =\u003e {\n\t        // Arrange.\n\t        cy.visit(\"http://localhost:3000\");\n\t        cy.wait(1000);\n\t\n\t        // Act.\n\t        cy.contains(\"About\").click(); // The homepage should show\n\t        cy.wait(1000);\n\t\n\t        // Assert.\n\t        cy.url().should(\"include\", \"/about\");\n\t        cy.contains(\"Who am I?\");\n\t    });\n\t});\n\t```\n\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/testing/End-To-End-Testing":{"title":"","content":"End-to-end (e2e) tests are tests that aim to simulate the user experience as closely as possible and will look almost like manual testing, but automated.\n\nAlthough end-to-end tests are immensely valuable, it's worth considering reasons why you might not want to write them:\n- They're slow to write and slow to run. It'll take a lot of valuable engineering time to write out e2e tests, and it'll consume valuable seconds of a cloud CI server that you're paying for.\n- They're often a lot more *brittle* than integration tests or unit tests, meaning that if your application requires some minor or major change, it might mean tweaking your e2e tests. This complicates software maintenance.\n\nIn general, only invest more resources into e2e tests when you've extracted most of the value from the tests lower in the Agile 'testing pyramid':\n![[software-engineering/concepts/testing/assets/testing-pyramid.png|300]]\n*[Image source](https://www.ministryoftesting.com/dojo/lessons/the-mobile-test-pyramid)*.\n\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/testing/Integration-Testing":{"title":"","content":"Integration tests, also called 'end-to-end' tests, are... TODO.\n\n\n\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/concepts/testing/Unit-Testing":{"title":"","content":"TODO.\n","lastmodified":"2022-07-13T00:04:49.576101189Z","tags":null},"/software-engineering/frameworks/Cypress":{"title":"Cypress","content":"Cypress is an [[software-engineering/concepts/testing/End To End Testing|end-to-end testing]] library for testing the entirety of a web app, including its frontend and backend, in a way that closely simulates how real users would use the app. It also has an API for writing [[software-engineering/concepts/testing/Integration Testing|integration tests]] and [[software-engineering/concepts/testing/Unit Testing|unit tests]]. \n\nCypress tests aim to simulate the user experience as closely as possible. This means that tests you write will usually start up a real browser process, navigate to the URL of your web app, then execute a series of user interactions (eg. clicking on links, buttons, sending keystrokes, etc.) and let you make assertions on how the document should respond and what its contents should have.\n\nThe purpose of end-to-end testing this way is to give you confidence that the user can perform critical actions without error. For example, you might have a test that verifies your web app's authentication system, the purchase of an item, the sending of a message, etc. Unit tests with [[Jest]], for example, wouldn't be sufficient for that purpose.\n\n### Writing Tests\n\nTODO.\n\nIn general, the [[software-engineering/concepts/testing/Arrange, Act, Assert|arrange, act, assert]] pattern for writing unit tests is also a useful way to structure e2e Cypress tests.\n\n**Note**: `describe` and `it` are sourced from [Mocha](https://mochajs.org/) and `expect` is sourced from [Chai](https://www.chaijs.com/), two core dependencies of Cypress.\n\n### Cypress CLI\nThe Cypress package ships with a powerful CLI. [Official reference](https://docs.cypress.io/guides/guides/command-line).\n\nSome basic commands to know and consider adding to the NPM scripts inside `package.json`:\n```bash\ncypress open                                       # Opens Cypress' Electron binary.\ncypress run --headed --no-exit --browser chrome    # Opens a Chrome browser to run Cypress tests.\ncypress run --browser chrome                       # Runs Cypress tests in a headless Chrome process.\n```\n\n### Running Cypress on a CI Server\n\nTODO.\n","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null},"/software-engineering/frameworks/GoogleTest":{"title":"","content":"TODO.\n","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null},"/software-engineering/frameworks/Jest":{"title":"","content":"TODO.\n","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null},"/software-engineering/frameworks/React":{"title":"","content":"TODO.\n","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null},"/software-engineering/frameworks/Vue.js":{"title":"","content":"# Vue.js\nVue.js is ...\n\n\n\n","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null},"/software-engineering/programming-languages/C":{"title":"","content":"","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null},"/software-engineering/programming-languages/C++":{"title":"C++","content":"\n\n#### Pure Virtual Function\nPure virtual functions are exactly the same as [[software-engineering/concepts/programming/Object Oriented Programming|abstract methods]].\n","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null},"/software-engineering/programming-languages/CSS":{"title":"","content":"","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null},"/software-engineering/programming-languages/Generics":{"title":"Generics","content":"Generic programming is about writing reusable functions, classes, etc. without compromising on [[software-engineering/concepts/programming/Type System|type safety]]. The primary motivation behind them is to keep code DRY, that is, to avoid code duplication.\n\nThe basic idea behind generic programming is that you can make functions and classes take a *generic type parameter*.\n\nTODO.\n","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null},"/software-engineering/programming-languages/Java":{"title":"","content":"","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null},"/software-engineering/programming-languages/JavaScript":{"title":"","content":"TODO.\n\nThere's also [[TypeScript]].\n\n\n\n### Rest Operator\nTODO.\n\n\n### Generators\nTODO.\n\n## Object Oriented Programming\n### Classes\nTODO.\n\n### Inheritance\nTODO.\n\n### Prototypes\nTODO.\n\n\n\n\n\n\n","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null},"/software-engineering/programming-languages/Python":{"title":"Python","content":"\n\n\n\n### Dunder Methods\nTODO.\n\n","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null},"/software-engineering/programming-languages/SQL":{"title":"","content":"\nTODO.","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null},"/software-engineering/programming-languages/TypeScript":{"title":"TypeScript","content":"TypeScript is a programming language made by Microsoft that is *superset* of [[JavaScript]]. The reason that TypeScript exists is to make complex JavaScript projects more maintainable and less error-prone by introducing a [[software-engineering/concepts/programming/Type System#Static Typing|static]] and [[software-engineering/concepts/programming/Type System#Strong Typing|strong]] type system. Essentially, it just gives developers a lot of quality-of-life improvements over JavaScript.\n\nTypeScript gets compiled (or more precisely, '*transpiled*') to JavaScript in the end. This is not new, languages like CoffeeScript, Dart, Scala, etc. can all have JavaScript as what we call a *compilation target*.\n\n**Why TypeScript is [loved](https://survey.stackoverflow.co/2022/#most-loved-dreaded-and-wanted-language-love-dread)**\n- Your IDE/editor gets more information about your code and give you very helpful intellisense and code-completion that is not possible with JavaScript. This reason alone, in my experience, pretty much negates any loss in developer velocity from using TypeScript over JavaScript.\n- Many errors will surface *as you're developing* rather than after your code is deployed to production and angry customers complain to you.\n- Types serve as a very useful form of documentation for how your functions are to be used and fields an object should contain. You can have a lot more confidence in refactoring a function when you have confidence about what the input types are.\n- Complex objects are much *less unpleasant* to work with. You'll know what its *shape* is (basically what properties it has and what its nested objects look like), what properties are compulsory or optional and you'll actually know when you've mispelt a property name.\n- You'll *almost* never have `cannot read property '...' of undefined` again.\n\nThe only main reasons *not* to use TypeScript are because:\n- You're stuck with a legacy JavaScript codebase.\n- You or your teammates are not willing to learn it, and you need to produce output fast in the short-term (like in a hackathon).\n- The project is a very simple or one-off thing that it's not worth setting up the build system.\n\n## Setup\nInstall Node.js, `npm` or `yarn`. Then, install `tsc`, the open-source typescript compiler, as a dev dependency in a javascript project:\n```bash\nyarn init   # Inside the project root directory, if it's a new project.\nyarn add --dev typescript @types/node ts-node\n```\n### tsconfig.json\nEvery typescript project should have a `tsconfig.json` file at the root of the project directory. It tells `tsc` which files to compile, where to dump the resulting javascript, and so on. A basic config looks like this (but there are so many [more options](https://www.typescriptlang.org/tsconfig)):\n```json\n{\n\t\"compilerOptions\": {\n\t\t\"lib\": [   // Which APIs are available to the transpiled JS code? Eg. es2015 has Function.prototype.bind, etc.\n\t\t\t\"es2015\"\n\t\t],\n\t\t\"module\": \"commonjs\", // Which module system should be used by the transpiled JS code?\n\t\t\"outDir\": \"dist\",     // Where should the output JS files go?\n\t\t\"sourceMap\": true,    // Whether to generate a source map.\n\t\t\"strict\": true,       // All code must be properly typed.\n\t\t\"target\": \"es2015\"    // What JS version to compile to.\n\t},\n\t\"include\": [   // Directories containing .ts files we want to transpile.\n\t\t\"src\"\n\t]\n}\n```\nAlternatively, you can generate a `tsconfig.json` with `tsc --init`.\n\nSome recommended flags include:\n- `noImplicitThis` â€“ forces a type to be explicitly assinged to `this` inside functions. See [[TypeScript#this]].\n- `noImplicitOverride` â€“ you must always use the `override` modifier for method overriding.\n\n## Typing\nBroadly speaking, in programming languages, a *type* is a [[Set Theory#Sets|set]] of values, plus the properties/methods available to them.\n\n### Assigning Types\nAssigning types is straightforward in TypeScript, you just postfix a variable or parameter with a colon and a type. \n```typescript\n// Typing variables.\nlet a: number = 42;\nlet b: string;\n```\n\n### Defining Types\nRemember, types are just [[Set Theory#Sets|sets]] of values. When you define a *type*, you are just defining a set of values. The following are all examples of custom types you can define:\n```typescript\ntype TwoOrFour = 2 | 4;                           // The set consisting of 2 and 4.\ntype Value = string | number;                     // The set of all strings and all numbers.\ntype RandomThings = \"Hello\" | 42 | null | RegExp; // The set consisting of \"Hello\", 42, null and all instances of `RegExp`.\n```\n\n#### Type Alias\nYou can declare *type aliases* in a very similar way as to how you define variables. Type aliases are block-scoped, just like local variables.\n```typescript\ntype Person = { age: number, name: string };\n\n// Typescript will never infer that `me` is of type `Person` unless you explicitly say.\nconst me: Person = {\n\tage: 21,\n\tname: \"Tim\"\n};\n```\n\n#### Union and Intersection\nAgain, types are just *sets* of values. To expand the size of a set, you can union it with other sets, and to narrow the size of a set, you can intersect it other sets. In TypeScript, we use `|` to union two types and `\u0026` to intersect two types.\n```typescript\ntype Student = { id: string; degree: string };\ntype Tutor = { id: string; courses: string[] };\n\ntype StudentOrTutor = Student | Tutor;    // Set of all objects that are either `Student`, `Tutor`, or both.\ntype StudentAndTutor = Student \u0026 Tutor;   // Set of all objects containing all fields of `Student` AND `Tutor`.\n\nconst student: Student = { id: '111', degree: 'Bachelor of Science' };\nconst tutor: Tutor = { id: '222', courses: ['CS101'] };\nconst studentTutor: StudentAndTutor = {\n\tid: '333',\n\tdegree: 'Bachelor of Computer Science',\n\tcourses: ['CS201'],\n};\n\n// For `Student | Tutor`: you can assign any of: `Student`, `Tutor`, or `Student \u0026 Tutor`\nconst uniGoers: StudentOrTutor[] = [student, tutor, studentTutor];\n\n// For `Student \u0026 Tutor`: you can only have people who are simultaneously `Student` and `Tutor`.\nconst studentTutors: StudentAndTutor[] = [studentTutor];\n```\n- To make a type nullable, you can union it with `null` like this: `type MiddleName = string | null;`\n\n### TypeScript Built-In Types\nTypeScript introduces some new built-in data types that aren't present in JavaScript. These are: `any`, `unknown`, `void`, [`never`](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-never-type).\n#### any\nThe `any` type represents the set of *all* values. You can assign a variable of type `any` to a number, a string, a WebServer object, etc. Only use `any` as a last resort â€“ always prefer assigning the most specific type that you can. Often, people treat `any` as a way to 'opt' out of TypeScript for a small part of the code. When something is `any`, you are free to do erroneous things on it such as invoking methods on it that don't exist, using in arithmetic expressions, accessing undefined properties, etc.\n\n#### unknown\nThe `unknown` type represents the set of *all* values, just like `any`. The difference is that TypeScript does not allow you to use an `unknown` value until you perform [[TypeScript#Type checking|type checks]] to narrow down what specific type the `unknown` value is. For this reason, `unknown` is considered the type-safe version of `any`.\n```typescript\nconst a: unknown = 30;\nif (typeof a === 'number') {\n\tconst b: number = a + 1; // Now that we are certain `a` is a number, we can use it as one.\n} else {\n\tconst b: number = a + 1; // Error.\n}\n```\n```typescript\nconst a: any = \"Hello\";\nconst b: unknown = \"World\";\n\na.toLowerCase();   // This is fine since `a` is `any`.\nb.toLowerCase();   // Error. We need a type check before \n```\n\u003e A useful way to think about `any` and `unknown` is: `any` means \"I don't care\", `unknown` means \"I don't know (yet)\". \n\n### Object Shape\nAn important part of using TypeScript effectively is in defining the *shape* of object values, or in other words, what properties they have and which ones must be assigned a value or are optional.\n```typescript\n// Let typescript infer the object shape.\n// `person` will be of type: { age: number, name: string }.\nconst person = {\n\tage: 42,\n\tname: \"Andrew\"\n};\n\n// You can also explicitly specify the object type. You might do this if you want to set narrower types for the properties.\nconst person: { age: number, name: \"Andrew\" } = {\n\tage: 42,\n\tname: \"Andrew\"\n};\n\n// Or more cleanly, define a type:\ntype Andrew = { age: number, name: \"Andrew\" };\nconst person: Andrew = {...};\n```\n**Note**: the built-in `object` type is the set of all objects, whether it's `{}`, `{hello: \"world\"}`, `[]`, `new Date()`, etc. It's only slightly more restrictive than `any`.\n\n#### Optional Properties\nBy default, all properties are treated as compulsory. To allow an object to not define a property, just postfix the property name with `?`.\n```typescript\ntype Person = {  \n\tfirstName: string;\n\tlastName: string;\t\n\tmiddleName?: string;   // Objects of type `Person` can optionally set the `middleName` property.\n};\n```\n\n#### Immutable Properties\nYou can make properties immutable by prefixing the property name with the `readonly` property. It's like as if you declared a property as `const`, so once it's assigned for the first time, it cannot be reassigned.\n```typescript\ntype Person = {\n\tname: string;\n\treadonly dateOfBirth: string;\n};\n\nconst me: Person = { name: 'Tim', dateOfBirth: '09/03/2001' };\nme.name = 'Andrew';             // This is fine.\nme.dateOfBirth = '01/01/1970';  // Error.\n```\n\n#### Index Signatures\nWhen you want the flexibility for an object to contain more arbitrary properties with a certain key-value pair type, you can use the index signature syntax, `[key: K]: V`, where `key` can be any name you choose.\n```typescript\ntype FruitRatings = {\n\t[fruitName: string]: number;\n};\n\nconst myFruitRatings: FruitRatings = {\n\tapple: 6,\n\tbanana: 7,\n\tcherry: 9\n};\n```\n\n### Arrays\nTo denote a type as an array of items of type `T`, you can do `T[]` or `Array\u003cT\u003e` (they're [exactly the same](https://stackoverflow.com/questions/36842158/arraytype-vs-type-in-typescript)). \n```typescript\n// Array type declaration examples.\ntype Names = string[];\ntype People = { name: string; }[];\ntype Values = (string | number)[];\n```\nIn general, try to keep arrays *homogenous*, that is, of a singular type, otherwise you'd have to do type-checking before TypeScript can let you use the items of the array.\n```typescript\n// When arrays are not homogenous, that is, of one type, you'd have to do some type checking to work with its items.\nconst arr: (string | number)[] = [42, \"Hello\"];\n\narr.forEach(item =\u003e {\n\tif (typeof item === 'number') {\n\t\t// You can use `item` as a number after you've type-checked it.\n\t\tconst num = item * 3;\n\t\tconsole.log('Number: ', num);\n\t} else {\n\t\t// `item` must be a string\n\t\tconst s = item + \" world\";\n\t\tconsole.log('String: ', s);\n\t}\n})\n```\n\nArrays are always mutable by default in TypeScript, that is, you can reassign the value at any index and invoke methods that make in-place modifications like `push` or `reverse`. To make them immutable, you would prefix them with the `readonly` modifier.\n```typescript\ntype Names = readonly string[];\nconst radioheadMembers: Names = ['Thom', 'Johnny', 'Colin', 'Phil', 'Ed'];\n\nradioheadMembers[1] = 'Tim';  // Error.\n```\n\n### Tuples\nRemember, tuples are just *fixed-length arrays*. In typescript, we define a tuple by specifying the type of each item like: `[T1, T2, ...]`:\n```typescript\ntype FullName = [string, string, string?];  // You can make items optional in a tuple, just like for objects.\n                                            // Note: this is basically the same as: `[string, string] | [string, string, string]`.\nconst elon: FullName = [\"Elon\", \"Reeve\", \"Musk\"];\nconst jeff: FullName = [\"Jeff\", \"Bezos\"];\n```\nYou can also make use of the [[JavaScript#Rest Operator|rest operator]], `...`, to allow for tuples of arbitrary lengths.\n```typescript\ntype FullName = [string, string, ...string[]];\nconst queenElizabethII = ['Elizabeth', 'Alexandra', 'Mary', 'Windsor'];\n```\n\n**Caveat**: *tuples are not immutable by default*.\nUnlike in other languages like Python, the items of a tuple in TypeScript *can* be mutated, that is, reassigned after definition. To make tuples immutable, you would do the same thing as you would for making arrays immutable: prefix it with the `readonly` modifier.\n```typescript\ntype Coordinate = readonly [number, number];\nconst point: Coordinate = [1, 2];\n\npoint[0] = 3;   // Error.\n```\n\n### Enums\nEnums are data types that have a *fixed set* of constant values. They're a great way to group together a lot of related constants. *Note*: JavaScript doesn't have enums.\n```typescript\nenum Theme {\n\tLight,\n\tDark,\n\tHighContrastLight,\n\tHighContrastDark\n};\n\n// You access the fields of the enum in the same way that you'd access an object.\nconst theme: Theme = Theme.Dark;\n```\nIn the example above, every enum value gets implicitly assigned a counter value starting from 0. It's equivalent to doing the following:\n```typescript\nenum Theme {\n\tLight = 0,\n\tDark = 1,\n\tHighContrastLight = 2,\n\tHighContrastDark = 3\n}\n```\nYou can also map enum keys to string values instead of integers. \n```typescript\nenum Theme {\n\tLight = '#CCCCCC',\n\tDark = '#333333',\n\tHighContrastLight = '#FFFFFF',\n\tHighContrastDark = '#000000',\n}\n```\n\n#### Caveats\nOne annoying issue is that you can freely assign numbers to enum types that are clearly outside the bounds of the enum values.\n```typescript\nenum Theme {\n\tLight,\n\tDark,\n\tHighContrastLight,\n\tHighContrastDark,\n}\nconst theme: Theme = 6; // No complaints from TypeScript.\n```\nIn general, the official docs advise you to avoid enums unless they help significantly with readability. Alternatives to enums include string literals, eg. `type Theme = \"Light\" | \"Dark\" | ...`, or object literals, eg. `const Theme = { Light: \"Light\", Dark: \"Dark\", ... }`\n\n### Type Inference\nYou don't have to always supply an explicit type. Often, there'll be enough context for TypeScript to figure it out without ambiguity. In general, we prefer type inference over explict assigning types to varaibles/parameters/etc. for conciseness.\n```typescript\nlet a: number = 42;   // There is no need to do this. It's clear what type `a` is from the RHS of the assignment.\nlet b = 42;           // Equivalent to above, but it lets typescript assign the type implicitly.\n```\nThis extends to functions as well, meaning that often you won't have to specify the return value.\n\n#### Type Widening/Narrowing [TODO]\nAn important implicit rule in TypeScript is that when you let type inference happen for `const` variables, TypeScript will assign it the *narrowest type possible* since it knows that a `const` variable cannot possibly take any other value after its defined.\n```typescript\nlet a = 2;    // `a` is of type `number`.\nconst b = 2;  // `b` is of type `2`, a specific member of `number`.\n```\n\t\n### Type Checking\nAlthough type checking is done for you statically, there are times when you must perform run-time type checks such as when you're fetching external data. In these times, rely on JavaScript's operators: `typeof` and `instanceof`.\n1. Use the `instanceof` binary operator to check some value is of a custom type, or a complex built-in type like `RegExp`.\n\t- Note that `val instanceof T` works by checking if `T` exists anywhere along `val`'s [[JavaScript#Prototypes|prototype chain]]. This is why you get unintuitive results when you use `instanceof` on primitive types. For example, `42 instanceof Number` is `false`, but `new Number(42) instanceof Number` is `true`.\n2.  Use the `typeof` unary operator to check some value is some built-in primitive type such as `undefined`, `number`, `string`, `boolean`, etc.\n\n### Type Assertions [TODO]\nWhen you're confident that some value should be a certain type but TypeScript isn't, you can make a type assertion with the `as` keyword.\n\nYou can also make type assertions by prefixing an expression with `\u003cT\u003e`, eg. `\u003cPerson\u003eperson` which is the same as `person as Person`.\n\n\n## Functions\n**Typing Function Delcarations**\nTo type a function declaration, you just assign types for each parameter it takes in and then specify the return type by postfixing the parameter list with a colon and a type.\n```typescript\n// Typing function parameters and return values.\n// To assign a return type to a function, you postfix the parameter list with a colon and a type.\n\n// Regular functions:\nfunction increment(num: number): number {\n\treturn num + 1;\n}\n\n// Arrow functions:\nconst decrement = (num: number): number =\u003e num - 1;\n```\n**Typing Function Expressions or Arrow Functions**\nWhat if you want to specify the type of a callback rather than a function declaration? You would use the syntax: `(param: Type, ...) =\u003e RetType`. Although the syntax is inspired by arrow functions, it is not actually defining a function.\n```typescript\ntype Greeting = (a: string, b: string) =\u003e void;\n\n// Note that the parameter names above don't need to match that of the assigned\n// callback's parameter names, they're purely for documentation.\nconst callback: Greeting = (name, message) =\u003e {\n\tconsole.log(`Hi, I'm ${name}. ${message}`);\n}\ncallback(\"Linus\", \"F*** you, Nvidia.\");\n```\n\n### Optional \u0026 Default Parameters\nJust like how you can make [[TypeScript#Object Shape|object properties optional]] and [[TypeScript#Tuples|tuple items optional]], you can make function parameters optional by postfixing the parameter name with a `?`. Alternatively, you can set a default value for a parameter by assigning a value directly after the parameter name, which is pretty much the same as making it optional.\n```typescript\n// Optional parameter.\nconst greet = (name: string, message?: string) =\u003e {\n\tconsole.log(`Hi ${name}!`);\n\tif (message) console.log(message);\n}\n\n// Default parameter. Notice that the parameter type can often be inferred from the\n// default value that you supply.\n// You can also choose to explicitly set the type anyway like: \n//   `message: string = \"You rock.\"`\nconst greet = (name: string, message = \"You rock.\") =\u003e {\n\tconsole.log(`Hi ${name}! ${message}`);\n}\n```\n\n### Variadic Functions\nA **variadic function** is just one that takes in an arbitrary number of arguments. The vast majority of functions take in a fixed list of parameters, we call these 'fixed-arity' functions. Normally in JavaScript, defining a variadic function requires you to make use of the implicit [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) array in the function body. In TypeScript, it's way more intuitive and can be done in a type-safe way with the rest operator, `...`.\n```typescript\nconst max = (...nums: number[]): number =\u003e {\n\tif (!nums || nums.length === 0) return -Infinity;\n\treturn nums.reduce((maxSoFar, currNum) =\u003e (maxSoFar \u003e currNum) ? maxSoFar : currNum, -Infinity);\n}\n```\n\n### this\nIn JavaScript, `this` is a nightmare for most programmers to work with because its value is different depending on how it is called. In TypeScript, you can minimise surprises around the value of `this` by assigning a type to it as the first function parameter.\n\nTo illustrate the problem:\n```typescript\ntype Person = { name: string, greet: () =\u003e void };\nconst person: Person = {\n\tname: \"Linus Torvalds\",\n\tgreet: function() {\n\t\tconsole.log(`Hi, I'm ${this.name}`);\n\t}\n}\nperson.greet(); // This works as expected since `this` is bound to `person`.\n\nconst greet = person.greet;\ngreet();        // This fails since the `this` is lost and is no longer bound to `person`.\n```\nThe 'solution' is to assign a type for `this` so that the developer is warned when `this` takes on the wrong type when they invoke a function that uses it.\n```typescript\ntype Person = { name: string, greet: (this: Person) =\u003e void };\nconst person: Person = {\n\tname: \"Linus Torvalds\",\n\tgreet: function(this: Person) {\n\t\tconsole.log(`Hi, I'm ${this.name}`);\n\t}\n}\n```\n\n### Generators\nSee [[software-engineering/concepts/programming/Generators|generators]]. In JavaScript, you can create a [[JavaScript#Generators|generator function]] by postfixing `function` with an asterisk, `*`. *Note*: you cannot define arrow functions as generator functions (at least as of 2022's ES standard).\n```typescript\nfunction* fooGenerator() {\n\tyield 42;\n\tyield 24;\n}\n\nconst fooNums = fooGenerator();\nconsole.log(fooNums.next());    // â†’ { value: 42, done: false }\nconsole.log(fooNums.next());    // â†’ { value: 24, done: false }\nconsole.log(fooNums.next());    // â†’ { value: undefined, done: false }\n\n// You can loop through a generator's values with JavaScript's for-of loops.\nfor (const item of fooGenerator()) {\n    console.log(item);\n}\n```\nTypeScript automatically infers the return type of the generator to be `IterableIterator\u003cnumber\u003e`. To assign an explicit type for what gets yielded, do it the same way that you'd specify the return value, but wrap it around with `IterableIterator`.\n```typescript\nfunction* fooGenerator(): IterableIterator\u003cnumber\u003e {\n\t...\n}\n```\n\n### Iterators\nSee [[software-engineering/concepts/programming/Iterators|iterators]]. In JavaScript, an *iterable* is an object containing the `Symbol.iterator` property with the value being a function that returns an *iterator* (which can be done by defining Symbol.iterator to be a [[TypeScript#Generators|generator function]], which always returns an iterator). An *iterator* is an object that defines a `next` method which returns an object of shape: `{ value: any, done: boolean }`.\n\nAn object can be both an *iterable* and an *iterator* at the same time. When you invoke a generator function, for example, you get an object \nof type `IterableIterator` which is both, meaning it has a `Symbol.iterator` property, whose value is a function that returns an iterator, and the `next` method.\n```typescript\nconst favouriteNums = {\n\t*[Symbol.iterator]() {\n\t\tyield 42;\n\t\tyield 2;\n\t\tyield 4;\n\t}\n}\n\nfor (const item of favouriteNums) {\n\tconsole.log(item);\n}\n```\n**Note**: the syntax for defining `Symbol.iterator` as a generator function might seem strange. See this post for clarifications. As for the square brackets around `Symbol.iterator`, it's called the [computed property name syntax](https://stackoverflow.com/questions/32515598/square-brackets-javascript-object-key), introduced in ES6.\n\n### Function Overloading\nYou can define a function type that actually consists of multiple function signatures. See the [Function Overloads](https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads).\n\n## Generic Functions\nSee [[Generics]]. In TypeScript, you can define generic functions by specifying a comma-separated list of generic type parameters in angle brackets `\u003c\u003e` right before the parameter list of function. You would use generic functions if you wanted a function to be reusable across multiple types without giving up type safety by resorting to `any`.\n```typescript\ntype Filter = \u003cT\u003e(array: T[], predicate: (elem: T) =\u003e boolean) =\u003e T[];\n\nconst filter: Filter = \u003cT\u003e(array: T[], predicate: (elem: T) =\u003e boolean) =\u003e {\n\tconst arr: T[] = [];\n\tarray.forEach((elem) =\u003e {\n\t\tif (predicate(elem)) arr.push(elem);\n\t});\n\treturn arr;\n};\n\n// TypeScript can infer that `T` should be `number`.\nconsole.log(filter([1, 2, 3, 4, 5], (num) =\u003e num % 2 === 0));\n\n// To explicitly set `T`, use angle brackets after the function name.\nconsole.log(filter\u003cnumber\u003e([1, 2, 3, 4, 5], (num) =\u003e num % 2 === 0));\n```\nTo make regular function declarations generic, you also place the generic type parameters between angle brackets right before the parameter list:\n```typescript\nfunction filter\u003cT\u003e(array: T[], predicate: (elem: T) =\u003e boolean) =\u003e { ... }\n```\n\n#### Bind on Reference\nIn the above example, `T` gets *bound* when the function gets invoked, but you could also bind `T` whenever the type alias gets referenced by placing the generic type parameters *after* the type name instead of before the function parameter list:\n```typescript\ntype Filter\u003cT\u003e = (array: T[], predicate: (elem: T) =\u003e boolean) =\u003e T[];\n\n// Wherever you use `Filter`, you have to explicitly bind `T` like `Filter\u003cT\u003e`.\nconst filter: Filter\u003cnumber\u003e = (array, predicate) =\u003e ...;\n```\n\n### Bounded Polymorphism\nSometimes, saying that a generic function takes in type parameter of `T` is too permissive. Instead, we might want `T` to be a subtype of `U`, that is, we should accept type parameters that are 'at least' `U`. This is called *bounded polymorphism* or *constrained genericity*.\n```typescript\ntype Enemy = { health: number };\ntype Alien = Enemy \u0026 { galaxy: string };\ntype Cyborg = Enemy \u0026 { model: string };\n\ntype AttackEnemy = \u003cT extends Enemy\u003e(enemy: T, damage: number) =\u003e void;\nconst attackEnemy: AttackEnemy = \u003cT extends Enemy\u003e(enemy: T, damage: number) =\u003e {\n\tenemy.health -= damage;\n\tconsole.log(`Dealt ${damage}. Enemy now has ${enemy.health} HP left.`);\n};\n\nconst enemy: Enemy = { health: 20 };\nconst alienEnemy: Alien = { health: 50, galaxy: 'Andromed' };\nconst cyborgEnemy: Cyborg = { health: 100, model: 'Terminator Mk. II' };\n\nattackEnemy(enemy, 15);\nattackEnemy(alienEnemy, 10);\nattackEnemy(cyborgEnemy, 8);\nattackEnemy(\"Hello world\", 5);  // Fails because \"Hello world\" is not a subtype of `Enemy`.\n```\n![[software-engineering/programming-languages/assets/bounded-polymorphism.png|250]]\n\n## Object-Oriented Programming\nSee [[software-engineering/concepts/programming/Object Oriented Programming|Object Oriented Programming]].\n\n### Access Modifiers\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Encapsulation|encapsulation]]. TypeScript offers 3 access modifiers, which can be prefixed to any class field declaration:\n- `private`.\n- `protected` (which makes a member accessible to subclasses as well).\n- `public` .\nIf no access modifier is specified, then fields are `public` by default, unlike most languages which default to `private`.\n\nWhen prefixing a constructor's parameter with an access modifier, it'll declare the field and assign the given value implicitly. \n```typescript\nclass Person {\n\tconstructor(public name: string) {}\n}\n// ... is a shorthand that's equivalent to:\nclass Person {\n\tpublic name: string;\n\tconstructor(name: string) { this.name = name; }\n}\n\nconst person: Person = new Person('Linus Torvalds');\nconsole.log(person.name);\n```\n\n### Inheritance\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Inheritance|inheritance]]. In TypeScript, inheritance works in the same way and uses the same syntax as [[software-engineering/programming-languages/JavaScript#Inheritance|JavaScript's inheritance]].\n\n### Method Overriding\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Method Overidding|method overriding]]. By default, every method is '[[software-engineering/concepts/programming/Object Oriented Programming#Virtual Method|virtual]]', so you can override them all. To override a method in TypeScript, just copy the method signature and supply the new method body. As good practice, use the optional `override` modifier so that you're warned when you've got the base class' method signature wrong.\n```typescript\nclass Base {\n    // Methods are virtual by default.\n\tpublic foo(): void {\n\t\tconsole.log('Foo');\n\t}\n}\n\nclass Sub extends Base {\n    // Explicitly re-implementing the parent's `foo` method.\n\tpublic override foo(): void {\n\t\tconsole.log('Bar');\n\t}\n}\n```\n\n#### Abstract Classes\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Abstract Class|abstract classes]]. To make a class abstract, just prefix it with the `abstract` keyword.\n```typescript\nabstract class Employee { ... }\nclass SoftwareEngineer extends Employee { ... }\n```\n\n### Abstract Methods\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Abstract Method|abstract methods]]. Abstract methods must be inside abstract classes. To make a method abstract, use the `abstract` modifier, explicitly type the method signature and do not provide a body.\n```typescript\nabstract class Employee {\n\tconstructor(public salary: number) {}\n\tpublic getSalary(): number { return this.salary; }\n\tpublic abstract slackOff(): void;\n}\n\nclass SoftwareEngineer extends Employee {\n\tconstructor() { super(100000); }\n\tpublic override slackOff() { console.log('Time to browse r/ProgrammerHumor...'); }\n}\n\nconst linus: Employee = new SoftwareEngineer();\nlinus.slackOff();\n```\n\n","lastmodified":"2022-07-13T00:04:49.58010116Z","tags":null}}