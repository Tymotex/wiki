{"/":{"title":"Tim's Dev Wiki","content":"\nHi! I'm Tim, a computer science student at the University of New South Wales. \n\nWelcome to my personal developer wiki. Learning is incredibly chaotic ‚Äî this is my attempt to establish some semblance of order to my monkey brain. This wiki contains things I learn about software engineering, computer science and a bunch of other areas of study. Since mid 2022, I finally decided to ditch [Notion](https://notion.so/) for [Obsidian](https://obsidian.md/) as my knowledge management system. I'm sharing this with the hope that it helps or inspires whoever stumbles upon it üòÉ.\n\nüå≤ These are my [evergreen notes](https://notes.andymatuschak.org/Evergreen_notes). They're a constant work in progress ‚Äî I'm pruning, editing and adding new notes as I piece together a better understanding of software engineering as well as other areas of study that interest me.\n\nüó∫Ô∏è To get around, use the big interactive graph above or start from the subject links below. Use `ctrl+k` to fuzzy search through the entire wiki.\n\nüíª Curious how I made this? I used the [Obsidian](https://obsidian.md/) editor to create a bunch of interconnected [markdown](https://www.markdownguide.org/) files, each of which correspond to a page in this wiki. To deploy those markdown files as a set of connected webpages, I forked \u003ca href=\"https://github.com/jackyzha0/quartz\"\u003eQuartz\u003c/a\u003e, tweaked the CSS and JavaScript to my liking, then published it to [GitHub Pages](https://pages.github.com/). See the source code for this project \u003ca href=\"https://github.com/Tymotex/wiki\"\u003ehere\u003c/a\u003e.\n\nüë®‚Äçüíª Who am I? See [timz.dev](https://timz.dev).\n\n---\n\n### Engineering\n- [[software-engineering/Software Engineering|Software Engineering]]\n","lastmodified":"2022-09-12T23:20:41.802338466Z","tags":null},"/.trash/articles/The-Joel-Test":{"title":"","content":"","lastmodified":"2022-09-12T23:20:41.802338466Z","tags":null},"/books/Barefoot-Investor":{"title":"Barefoot Investor","content":"\n","lastmodified":"2022-09-12T23:20:41.802338466Z","tags":null},"/books/Books":{"title":"Books","content":"\nTODO: this is a cool idea: https://jamesclear.com/book-summaries. Do 3 sentence summaries for each book that has made an impact on the way you think.\n-   What are the main ideas?\n-   If I implemented one idea from this book right now, which one would it be?\n-   How would I describe the book to a friend?\n\nTODO: this article is really worth re-reading: https://jamesclear.com/reading-comprehension-strategies. \n\n\n[[books/Pragmatic Programmer|Pragmatic Programmer]] by Andy Hunt and Dave Thomas.\n\n[[books/Don't Make Me Think|Don't Make Me Think]] by Steve Krug.\n\n\n","lastmodified":"2022-09-12T23:20:41.802338466Z","tags":null},"/books/Dont-Make-Me-Think":{"title":"Don't Make Me Think","content":"\n\u003e \"The human brain's capacity doesn't change from one year to the next, so the insights from studying human behaviour have a very long shelf life. What was difficult for users twenty years ago continues to be difficult today.\" ‚Äî Jakob Nielsen\n\n\u003e In the last few years, making things more usable has become almost everybody's responsibility. Visual designers and developers now often find themselves doing things like interaction design (deciding what happens next when the user clicks, taps, or swipes) and information architecture (figuring out how everything should be organised).\n\nI've personally found this to be very true. Thinking about how to arrange user interactions and where to put UI components wherever it makes sense tends to be a huge frictional point during development.\n\nUsability is defined to be a function of the following parameters:\n- Useful ‚Äî does it fulfil an important requirement?\n- Learnable ‚Äî do you have to think to know how to use it?\n- Delightful\n- Desirable ‚Äî is it pleasing?\n\nIn English, usability is whether:\n\u003e A person of average ability and experience can figure out how to use the thing to accomplish something without it being more trouble than it's worth.\n\n## Don't Make Me Think\nDesign decisions exist on a spectrum from *obvious* to *requiring thought*. Always prefer designs on the *obvious* side (a useful rule when disputing design conflicts with someone else).\n![[books/assets/obvious-spectrum.png]]\nAlways make clickable things *obviously clickable*.\n\n## Web Users Are Brain-Dead By Default\n\u003e Design for **scanning**, not for reading.\n\nPeople execute a very surface-level auto-pilot search algorithm for what they need from your website. Unless their purpose is to actually read your web content (like reading the words of a blog post), they will only notice the most visually obvious parts of the page that signal some useful purpose to them, almost always clicking the first they encounter.\n![[books/assets/user-scanning-webpages.png|400]]\n\nPeople usually perform a depth-first search through your site, not a breadth-first search!\n\u003e \"... several studies have shown that the back button is second only to clicking on links as the most used feature on the web.\" ([source](https://blog.httpwatch.com/2007/10/03/60-of-web-users-cant-be-wrong-dont-break-the-back-button))\n\nAlternatively, people may immediately look for a search box and enter a query there.\n\nPeople will always prefer to 'muddle through' any product in general, and only resort to reading instructions as a last resort.\n\n### Web Conventions\nPrefer taking advantage of web conventions. Eg. the brand name and icon should usually exist on the top left of a navbar.\n\u003e Innovate when you *know* you have a better idea, but take advantage of conventions when you don't.\n\nFacebook, for example, popularised the usage of the hamburger icon. Leverage this convention to tuck away seldom used features behind the menu.\n![[books/assets/hamburger-menu-icon.png|100]]\n\n### Visual Hierarchy\n*Visual hierarchy* is the arrangement and styling of elements on a webpage according to their importance. You use this to control the order of elements in which the user's eyes scan through on the webpage.\n\n\u003e A good visual hierarchy saves us work by preprocessing the page for us, organising and prioritising its contents in a way that we can grasp almost instantly.\n\n### Visual Noise\nRuthlessly strip or de-emphasise the unimportant UI elements and text. \n\n**Krug's Third Law of Usability**:\n\u003e Get rid of half the words on each page, then get rid of half of what's left.\n\n### Format Text\n- Generously use informative heading text (h1, h2, h3, ...). This allows scanning for the part of the web page most interesting to the user.\n- Keep paragraphs very short.\n- Generously use bulleted lists.\n\n## Navigation\nNavigation serves two critical purposes: \n1. It tells you where you currently are.\n2. It tells you what's here.\n\n### Primary Navigation\nThe web convention for navigation is to have something that looks like this at the top of every content page and to highlight on the navigator which page you're currently on:\n![[books/assets/standard-site-header.png|500]]\n- Always have a logo and/or distinguished typeface for the site ID. It should always take you home.\n- Always keep the utility buttons minimal. Only show the most frequently used. The rest should be stowed away in the footer or in a different menu.\n\n### All Pages Must Have Names\n*All pages must have a name*, just as all streets have names and all intersections have street signs. It must be present on the document and given emphasis, and not just only present in the tab's name or highlighted in the navigation UI.\n![[books/assets/page-name-examples.png|600]]\n\n### Breadcrumbs\nBreadcrumbs are concise navigators that don't contribute much visual noise to a page. Here are some best practices:\n1. Place it at the top.\n2. Use the right chevron ‚Ä∫ to separate parts of it.\n3. Highlight the last breadcrumb.\n\n## Homepage\nHomepages must make clear *what the site is*. They are responsible for creating the first impression and generating traffic towards other subpages.\n\n**Note**: yes, it's unlikely that a large amount of traffic begins from the homepage (instead, it'll be from direct links to subpages from Google search results, for example), but often people will navigate to the homepage if they find the content on the subpages interesting. You still need to get the homepage right.\n\n**Things to have**:\n- The primary navigation at the top, including the site ID, utility buttons and navigation buttons.\n- A tagline, typically sitting right under or next to the site ID. Know the difference between a [tagline and a motto](https://chevronediting.com.au/tagline-motto-slogan-difference) however.\n- A welcome blurb.\n- A learn more link to a page with the finer details.\n- An embedded demo video of the product or business.\n\nDon't crowd the homepage with too many leads, especially promotions.\n\u003e \"Any shared resource will inevitably be destroyed by overuse.\" (see the [Tragedy of the Commons](https://en.wikipedia.org/wiki/Tragedy_of_the_commons))\n\n## Usability Testing\nUsability tests involve getting users individually to try out the website/app/product, seeing how they feel about it and if it solves their problems, and noting what problems they run into.\n\n\u003e After you've worked on a site for even a few weeks, you can't see it freshly anymore... The only way to find out if it really works is to watch other people try to use it.\n\n\u003e Testing one user early in the project is better than testing 50 near the end.\n\n\u003e Every web development team should spend **one morning a month** doing usability testing.\n\nFor each of those usability testing sessions, just get 3 people to use your website. Give them a list of tasks to do using your website, observe them, then take notes. The goal is to get actionable insights, not conduct a scientific experiment that would require a large sample size.\n- Those 3 people need not be from your target audience. They will still run into usability problems.\n- [There are strategies for finding users](https://www.nngroup.com/reports/how-to-recruit-participants-usability-studies/). The simple way is to ask your friends and acquaintances, or post an ad somewhere. Offer a decent stipend.\n    - You can use unmoderated remote testing like [UserTesting](https://www.usertesting.com/).\n\n### Design Disputes\nEveryone has their own concept of what UI is pleasant to use and what UI is not. \n\u003e \"All web users are unique. And all web use is basically idiosyncratic.\"\n\nThe only antidote to resolving design disputes about what UI to use and how it should be designed is to build out a crude version and give it to users for testing.\n\n## Affordances\nAn *affordance* is a set of visual cues in an element that imply the usage of that element.\n![[books/assets/affordance.png|500]]\n\n## Goodwill\nIn addition to designing sites that don't make you think, you should strive to make design decisions that are 'kind' to your user.\n\nSome examples not-so-kind practices:\n- Making you sign up *after* doing something time-consuming. Eg. if you've used some online video editor, you might have been prompted to make an account after you've made your *edits*. Sometimes they may even charge you to download your edited video.\n- Forcing you to supply personal details when signing up.\n- Incessant popups.\n- Hiding, de-emphasising or prefilling a button or input that they don't want you to click/change. Eg. automatically checking the 'subscribe me to all marketing emails' button.\n\nSome examples of kind practices:\n- Show all important information upfront, like fees, rather than hiding them away further along some process and exploiting the user's feeling of sunk cost.\n- Providing *real* FAQs.\n- Preventing common errors. My personal favourite is Gmail's warning popup that you might have forgotten to make an attachment.\n    ![[books/assets/gmail-attachment-warning.png|450]]\n\n\n","lastmodified":"2022-09-12T23:20:41.802338466Z","tags":null},"/books/Pragmatic-Programmer":{"title":"Pragmatic Programmer","content":"\n### Being a Craftsman\n\u003e Care about your craft.\n\n\u003e Never run on auto-pilot. Constantly be thinking and critiquing your work in real time.\n\nThere is always opportunity to exercise your individual craftsmanship and individuality.\n\n### Being a Student\n\u003e Every day, work to refine the skills you have and to add new tools to your repertoire.\n\n\u003e Your knowledge and experience are your most important day-to-day professional assets.\n\n\u003e Your ability to learn new things is your most important strategic asset.\n\n#### Learning Goals\nSourced from the chapter, \"Your Knowledge Portfolio\".\n- Learn a new language a year, at least. \n- Read at least one engineering book each month. Try to match the book's topic with something that will aid in the current project you're working on.\n\t\u003e While there's a glut of short-form essays and occasionally reliable answers on the web, for deep understanding you need long-form books.\n- Read at least one non-technical book each month.\n- Attend social meetups and conferences.\n- Constantly read about latest technology trends.\nThe purpose need not be to advance your career or enrich your resume. It should be to constantly push your ability to learn and think deeply.\n\n### Being Pragmatic\nConstantly consider the business value in your work.\n\n### Being a Team Player\n\u003e Trust in a team is absolutely essential for creativity and collaboration according to the research literature.\n\n\u003e There's one technique that you must use if you want people to listen to you: *listen to them*.\n\n\u003e Unless you work in a vacuum, you need to be able to communicate. The more effective that communication, the more influential you become.\n\n#### Stone Soup\nWhen you're in a unique position with an idea but would struggle to marshal the team's focus and resources and approval to work towards it, simply start it by yourself. \n\u003e People find it easier to join an ongoing success. Show them a glimpse of the future and you'll get them to rally around.\n\n### Software Entropy\nSoftware systems will always tend to accumulate software rot and technical debt. \n\nDo your absolute best to not leave bad designs and poor code unfixed. Have patience and fix each of them as they arise. Every time you allow 'broken windows' to stay unfixed, you let entropy win and start atrophying you and your team's morale. *[Hopelessness is contagious](https://pubmed.ncbi.nlm.nih.gov/7932064/)*\n\u003e Neglect accelerates software rot faster than any other factor.\n\n\u003e Just tell yourself, \"No broken windows.\"\n\nWhen you find a problem. Fix it right now.\n\n### ETC\nGood designs are *easier to change* (*ETC*) than bad design. Generally, prefer to adopt an approach that is easier to change. As a general (and oversimplified but still useful) rule, the quality of a design is measured by the ease with which you can make changes to that design.\n\nThis implies that you should always prefer decoupled and cohesive modules over tight coupling.\n\n### DRY\n*Don't repeat yourself* is a classic acronym that means much more than just not copy and pasting your code and tweaking it slightly. The main concern is duplication of *knowledge*. When knowledge is duplicated, it is no longer a single source of truth and therefore can cause inconsistency.\n\n\u003e Some instances of code duplication are not violations of DRY. If tweaking one thing does not mean tweaking another, then those things are separate pieces of *knowledge*, generally.\n\nFor example, two different CSS rules have `float: left;` doesn't necessarily count as a violation of DRY.\n\nBlindly striving towards DRY can lead to forced abstractions and over-engineered code that's harder to maintain.\n\n### Orthogonality\nTwo parts of a software system are said to be *orthogonal* if changes in one do not affect the other. Always strive to make unrelated parts of a system orthogonal. Ie. decouple and isolate things as much as you can.\n\nFor example, the user interface should usually be orthogonal to the database schemas.\n\nThe primary purpose of [[books/Pragmatic Programmer#Refactoring|refactoring]] is to improve orthogonality between parts of the software and improve readability.\n\n### Tracer Bullets\n\n![[tracer-bullet-development.png|550]]\n([source](https://www.freecodecamp.org/news/lessons-learned-from-the-pragmatic-programmer-and-the-clean-coder/))\n\n### Prototyping\nPrototyping is a standard way to try out the feasibility of an idea and prove a concept without significant investment in time and resources. What you produce is meant to be discarded.\n\u003e Prototyping is a learning experience. Its value lies not in the code produced, but in the lessons learned. That's really the point of prototyping.\n\nThings that are great candidates for prototyping are:\n- System architecture. Draw out the main components and how they interact with each other on LucidChart.\n- UI. Draw it on Figma or sketch something very low fideltiy on paper.\n- Algorithms. Write it out in quick-to-write scripting language.\n\n### Debugging\n\u003e Embrace the fact that debugging is **problem solving**, and attack it as such.\n\nWhen fixing bugs, *always start by reproducing it*. Write a test that executes those steps and asserts the state to be what you expect in the bug-free version. Use a debugger to step through the code via the failing test.\n\n- **Binary chopping**:\n\tUse a divide-and-conquer binary search approach to isolating where the problem might be. You'll converge on the problematic code very quickly.\n- **Logging**:\n\tAlso called *printf debugging*. This is primitive, but effective for simple bugs. It's still a good strategy for debugging problems where time is a factor such as concurrent programs.\n- **Rubber ducking**:\n\tExplain the bug to someone else. It's effective because it forces you to explicitly state your assumptions and consequently begin to question them, which often leads to the bug source. A rubber duck is traditionally used. \n\n### Assertions\n\n\n### Design by Contract\n\n\n### Finite State Machines\n\n### Observer Pattern\n\n### Publish/Subscribe\nPublish/subscribe (pubsub) is a generalisation of the observer pattern.\n\n### Transforming\nIt's helpful to think of programming problems as data transformation problems. Consider what pipeline of transforms is necessary to get from the input to the expected output.\n\nSome languages let you use a pipeline operator like `|\u003e` to write something like\n`\"hello world\" |\u003e capitaliseTitle() |\u003e print()`, which is equivalent to `print(capitaliseTitle(\"hello world\"))`. The outcome is the same, but the pipelining approach is often a very different way of thinking that suits a lot of programming problems and leads to flatter and cleaner code.\n\nThe programming language doesn't need to support a pipelined operator for you to think and express code in this manner.\n\n### Inheritance Tax\nInheritance couples a child to its parent and all its ancestors. Even worse, any object calling methods on the child is *also* coupled to its parent and all its ancestors. There's also the multiple inheritance problem... and the lack of support for it in languages like Java and the confusing semantics of it in C++.\n\nAnother problem is that when you inherit from a class, you are probably unnecessarily inheriting a bloated set of methods and properties. This does have some performance impacts, causing the object to take longer to initialise and more memory to store ([source](https://stackoverflow.com/questions/54362591/does-inheritance-can-affect-performances-of-an-application)).\n\nIn general, always prefer these 3 alternatives instead of inheritance.\n1. Interfaces.\n2. Delegation.\n3. Mixins and traits.\n\n### Managing Configuration\nIf your app needs some configuration values (like IP addresses, credentials, etc.) that might change after deployment to production, you should keep them behind an external service that serves them.\n\nIt should not be the case that you have to restart your application for changes to configuration to take effect, especially if your app must be highly available.\n\nConsider *Configuration as a Service*.\n\n## Refactoring\nRefactoring is the \n\u003e \"disciplined technique for restructuring an existing body of code, altering its internal structure without changing its external behaviour.\" ‚Äî Martin Fowler.\n\n\u003e Time pressure is often used as an excuse for not refactoring. But this excuse just doesn't hold up: *fail to refactor now, and there'll be a far greater time investment to fix the problem down the road*, when there are more dependencies to reckon with.\n\n\u003e Manage the pain: if it hurts now, it's going to hurt more later... Don't live with broken windows.\n\nAlways have a test suite to provide insurance that your refactoring efforts don't break the original design's correctness. In other words, have confidence you don't cause regression bugs.\n\n## Testing\nAn underrated reason to write tests is because it forces you be a client of your code rather than a consumer.\n\u003e A test is the first user of your code.\n\nWhen you're a client of the code, you're **forced to understand the specifications for the code you intend to write** rather than 'working it out as you go along'. It's a common mistake to start coding a function without a clear understanding of its inputs and outputs, and what the [happy path](https://en.wikipedia.org/wiki/Happy_path) is and what the error cases are.\n\n\u003e Making your stuff testable also reduces its coupling.\n\nA fortunate consequence of writing unit tests is that it helps you decouple the thing you're testing from the rest of the system. For example, if you're testing a function that needs to talk with the database, then you would need to pass in a mock database interface from the unit test. This helps with decoupling that function because it might otherwise directly consume a global database handle.\n```c++\nvoid do_something() {\n\tglobal_db.get_thing();\n}\n\nvoid do_something(Database db) {\n\tdb.get_thing();\n}\n```\n\n\u003e All software you write *will* be tested‚Äîif not by you and your team, then by the eventual users‚Äîso you might as well plan on testing it thoroughly.\n\n\u003e You really only have a few choices:\n\t- Test first (TDD)\n\t- Test during\n\t- Test never (which is what people mean when they say \"test later\")\n\nTesting *is* programming. It's not something to be thrown over the wall to dedicated 'testers'.\n\n### TDD\nBeing a TDD zealot and blindly following its steps rigorously all the time might seem like good practice, however it can lead you to endlessly polish the easy problems and build out features from the bottom-up rather than focusing on the end-to-end. Always remember the bigger picture of what you need to get done in the long term.\n\n### Ad-Hoc Testing\nAd-hod testing is when you test the system in an improvisational way (by essentially just stumbling around observing for errors). It's a good way for generating more unit tests that you didn't think of.\n\n### Property-Based Testing\nTODO.\n\nProperty-based testing is about verifying invariants. It's complementary to your regular suite of unit tests.\n\n## Security\n1. Minimise attack surface area.\n\t- Never trust user inputted data. Always sanitise it before usage and storage.\n\t- Less code is easier to secure. Prefer less code.\n2. Principle of Least Privilege. If a task requires a certain authorisation level, then grant the minimum set of permissions possible and revoke it as soon as possible.\n1. Set secure default values. Let the user decide how they trade off convenience for security.\n2. Encrypt sensitive data. Never store personally identifiable information in plaintext. In the event of a breach, the encrypted values are useless to the attacker.\n3. Maintain security updates. When you need a security update, your system is vulnerable to a *known* exploit.\n\n## Naming\nThink *\"what is my motivation for creating this?\"*\n```java\npublic void deductPercent(double amount);\n\n// ... what is my motivation for creating this? Oh, it's to apply a discount.\n\npublic void applyDiscount(Percentage amount);\n```\n\n## Agile\nThe *Pragmatic Programmer* authors, Andy and Dave, were part of the group of software developers who got together to write the [Agile manifesto](https://agilemanifesto.org/) (another member of that group was Robert C. Martin, the author of *Clean Code*).  \n\n\u003e \"Agile is not a noun\"\n\nAgile mandates nothing about what processes you follow. It's literally just a set of guiding values.\n","lastmodified":"2022-09-12T23:20:41.802338466Z","tags":null},"/books/Simple-Path-to-Wealth":{"title":"Simple Path to Wealth","content":"\n\nThere is an endless amount of investment pathways available, but the main ones to focus on are low-cost index funds and broad-based stock index funds and broad-based bond index funds.\n\n\u003e \"If you get a couple of things right, you can profoundly change your financial life without having to dwell on it, and you can get on with doing things that are more important to you and to the world.\"\n\nThinking that you can pick individual stocks and win. Yes, that's how Warren Buffett got rich, but the ability to do what he did is extraordinarily rare. Don't be full of yourself thinking you can pull the same thing off. The research shows that less than 1% of active funds outperform index funds over 30 years.\n\nJL Collins doesn't like *dollar-cost averaging*. It's just delaying the risk according to him. \n\nJust put a substantial amount of your income into the market regularly. \n\nWhen the market drops, you should celebrate because you're getting more shares than otherwise. Selling should not be an option when your goal is to build wealth rather than *preserve* wealth.\n\n\u003e \"Time in the market is more powerful than timing the market.\"\n","lastmodified":"2022-09-12T23:20:41.802338466Z","tags":null},"/economics/Macroeconomics":{"title":"Macroeconomics","content":"\n![[economics/assets/macroeconomics-wallpaper.png|600]]\n\nAn *economy* is simply the sum of all transactions that make it up. *Economic growth* is driven by transactions, ie. spending. *Macroeconomics* is the study of the aggregate behaviour of economies and aggregate variables such as a country's GDP, unemployment rate, inflation rate, etc. which are mainly produced by government statistical agencies like the [ABS](https://www.abs.gov.au/) in Australia.\n\n- [[economics/macroeconomics/GDP|GDP]]\n- [[economics/macroeconomics/Inflation|Inflation \u0026 CPI]]\n- [[economics/macroeconomics/Labour Market|Labour market]]\n- [[economics/macroeconomics/Interest|Interest]]\n- [[economics/macroeconomics/Savings and Investments|Savings and investments]]\n- [[economics/macroeconomics/Income-Expenditure Model|Income-expenditure model]]\n- [[economics/macroeconomics/Fiscal Policy|Fiscal policy]]\n- [[economics/macroeconomics/Public Debt|Public debt]]\n- [[economics/macroeconomics/Private Banks|Private banks]]\n- [[economics/macroeconomics/Money|Money]]\n- [[economics/macroeconomics/Monetary Policy|Monetary policy \u0026 cash rate]]\n- [[economics/macroeconomics/Aggregate Supply and Demand Model|Aggregate supply and demand model]]\n- [[economics/macroeconomics/International Trade|International trade]]\n- [[economics/macroeconomics/Exchange Rate|Exchange rate]]\n- [[economics/macroeconomics/Economic Growth|Economic growth]]\n\n","lastmodified":"2022-09-12T23:20:41.806338498Z","tags":null},"/economics/Microeconomics":{"title":"Microeconomics","content":"\n==Hello world==\n","lastmodified":"2022-09-12T23:20:41.806338498Z","tags":null},"/economics/macroeconomics/Aggregate-Supply-and-Demand-Model":{"title":"Aggregate Supply and Demand","content":"\nThe [[economics/macroeconomics/Income-Expenditure Model|income-expenditure model]] aims to determine the short-run real GDP. The *aggregate supply and demand model* aims to determine the real GDP in both the short-run and long-run.\n\n\u003e Note that the aggregate demand and aggregate supply curves are different in meaning fundamentally to the marginal benefit and marginal cost curves in microeconomic contexts.\n\n### Aggregate Demand (AD)\nRecall that the planned aggregate expenditure in a 4-sector economy is given as $PAE = C+I^P+G+X-M$.\n\nOne core assumption is that a rise in $r$ will tend to reduce consumption and planned investment. We can assume they are affected in the following way:\n- $C=C_{0}+c(Y-T)-\\alpha r$, where $\\alpha \u003e0$.\n- $I^{P}= I_{0}- \\beta r$, where $\\beta \u003e 0$.\n\nPlugging these in and solving for the equilibrium real GDP, we get:\n$$\n\\begin{align}\n\tY_\\text{equilibrium}\u0026=PAE=\\big[C_{0}+c(Y-T) -\\alpha r\\big]+ \\big[I_{0}- \\beta r\\big] + G_0 + X_0 -mY \\notag \\\\\n\t\u0026= \\frac{1}{1-c(1-t)+m}\\bigg( \\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0}\\big)- r(\\alpha + \\beta) \\bigg). \\notag\\\\\n\\end{align}\n$$\n\nNow we've made $Y_\\text{equilibrium}$ a function of $r$, we have a simple model for predicting the effects of [[economics/macroeconomics/Monetary Policy|monetary policy]] on real GDP.\n\nTo express $Y_\\text{equilibrium}$ as a function of $\\pi$, we can assume that the central bank will use the [[economics/macroeconomics/Cash Rate#Simple Policy Rule|simple policy rule]] reaction function which tells them to increase the real interest rate in response to an increase in inflation rate. With this assumption, we can relate the real interest rate with the inflation rate, $r= r_{0}+\\gamma\\pi$ and express $Y_\\text{equilibrium}$ as a function of $\\pi$:\n\n$$\n\\begin{align}\n\tY_\\text{equilibrium} \u0026= \\frac{1}{1-c(1-t)+m}\\bigg( \\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0}\\big)- r(\\alpha + \\beta) \\bigg), \\notag\\\\\n\t\u0026= \\frac{1}{1-c(1-t)+m}\\bigg( \\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0}\\big)- (r_{0}+\\gamma\\pi)(\\alpha + \\beta) \\bigg), \\notag\\\\\n\t\\notag\\\\\n\t\\text{Supposing }k \u0026= \\frac{1}{1-c(1-t)+m}, \\notag\\\\\n\tY_\\text{equilibrium} \u0026= k\\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0} - r_0(\\alpha + \\beta)\\big)-k\\gamma(\\alpha +\\beta)\\pi. \\notag\\\\\n\t\\notag\\\\\n\\end{align}\n$$\nSupposing $A_{0} = k \\underbrace{\\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0} - r_0(\\alpha + \\beta)\\big)}_{\\text{Exogenous variables}}$, we now have an equation representing the aggregate demand curve:\n$$\\colorbox{#FFFFBF}{$ Y_\\text{equilibrium} = A_0-k\\gamma(\\alpha +\\beta)\\pi$},$$\nwhich relates the real GDP to the inflation rate. Although the AD curve links the real GDP and inflation, it does not determine them. That's where we need the aggregate supply curve.\n\n![[economics/macroeconomics/assets/aggregate-demand-curve.png|500]]\n\nChanges to the exogenous variables in the constant $A_0 = k\\big(C_{0}- cT_{0}+ I_{0}+ G_{0}+ X_{0} - r_0(\\alpha + \\beta)\\big)$ will cause shifts in the AD curve, often called *AD shocks*. \n\nNote that when productivity is low, ie. real GDP is low, prices are high.\n\n### Aggregate Supply (AS)\nIn the [[economics/macroeconomics/Income-Expenditure Model|income-expenditure model]], we assumed that the prices would stay fixed in the short run. In the aggregate supply and demand model, we assume that the business will choose the new prices, thereby setting the actual inflation rate, based on 3 factors:\n1. \u003cmark style=\"background: #ADCCFFA6;\"\u003eThe *expected* inflation rate.\u003c/mark\u003e \n   \n\t**Rational expectations hypothesis** ‚Äî asserts that people always factor in *all* relevant information, producing the best theoretical possible forecast on what the future inflation rate will be. The actual and expected value differ by a completely unpredictable margin, $\\omega$:  $\\pi_\\text{actual}=\\pi_\\text{expected}+\\omega$\n\t\n\t**Adaptive expectations hypothesis** ‚Äî asserts that people will use historical data only in their prediction of the future inflation rate, ie. that $\\pi_\\text{actual}=\\pi_{\\text{prev}}$, which makes the AS curve a simple horizontal line:\n\t\t![[economics/macroeconomics/assets/adaptive-expectations-hypothesis-aggregate-supply-curve.png|380]]\n\t\n\t*Inflation shocks* are when there are changes to the inflation rate. Events that might cause inflation shocks include changes in commodity prices and foreign exchange rates. Factoring in inflation shocks, we'd have $\\pi_\\text{actual} = \\pi_\\text{prev}+\\epsilon$, where $\\epsilon$ is the size of the inflation shock. Note that inflation shocks, although temporary in nature, cause permanent effects to the inflation rate since the adaptive expectations hypothesis asserts that the next period's inflation rate retains the previous period's inflation rate.\n2. \u003cmark style=\"background: #ADCCFFA6;\"\u003eShifts in the aggregate demand curve which impact the business' production costs.\u003c/mark\u003e \n3. \u003cmark style=\"background: #ADCCFFA6;\"\u003eSize of the [[economics/macroeconomics/Output Gap|output gap]] is.\u003c/mark\u003e \n\t\n\tWhen there exists a short-run expansionary output gap like below for example, businesses will initially ramp up production levels to meet increased demand, but over time they'll experience increased production costs and inflate their prices. When all businesses behave this way, then in aggregate, it'll cause inflation to increase and close the output gap.\n\t\n\t![[economics/macroeconomics/assets/aggregate-supply-expansionary-output-gap.png|500]]\n\n### Applications\n\nIf households were to collectively become more optimistic about wage growth and were to start consuming more, then this could cause an increase in $C_0$, causing an AD shock that shifts the curve up, causing the real GDP to increase but with inflation staying constant in the short-run:\n\n![[economics/macroeconomics/assets/ad-shock-example-1.png|500]]\n\nProgressing towards the long-run, the AS curve will shift up to close the expansionary output gap.\n\n![[economics/macroeconomics/assets/ad-shock-example-2.png|500]]\n\nInflation will keep increasing until $Y_\\text{equilibrium}=Y^*$.\n\n![[economics/macroeconomics/assets/ad-shock-example-3.png|500]]\n\nWhen an inflation shock happens and shifts the AS curve upwards, it'll be the case that in the long run, the inflation rate will drop to the same level prior to the shock.\n\n![[economics/macroeconomics/assets/inflation-shock-example-1.png|500]]\n\nNotice how the economy 'self-corrects' in the long run. Does this mean that [[economics/macroeconomics/Fiscal Policy|fiscal]] and [[economics/macroeconomics/Monetary Policy|monetary]] policy are unnecesssary? No, because they can accelerate the self-correction and minimise the negative effects of AD shocks and inflation shocks.\n\nNote that in the above example, the government and central bank could choose to 'accommodate' the inflation shock by implement tax cuts (or some other policy) to shift up the AD curve and meet the higher inflation value. Doing this will mean that the contractionary gap is closed quicker, but the higher inflation will tend to persist instead of being temporary. If they don't want higher inflation to persist (in order to ensure they meet an inflation target), then they can simply do nothing and let the self-correction proceed.\n\n![[economics/macroeconomics/assets/accommodating-inflation-shock.png|500]]\n\n\n\n\n\n\n\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Asset-Bubble":{"title":"Asset Bubble","content":"\nIn finance and economic contexts, a 'bubble' is when the price for a class of assets, such as real estate, grows substantially over a short period of time, but largely as a result of ['irrational exuberance'](https://www.thebalance.com/irrational-exuberance-quotes-dangers-and-examples-3305937) and herd mentality. Since the demand is 'artificial' and not largely based on any 'real' value of the asset, the bubble is often 'bursts' or 'crashes', resulting in sometimes catastrophic reductions in the demand of that asset.\n\nLower [[economics/macroeconomics/Interest|interest rates]] often contribute to the expansion of asset bubbles since people are encouraged to borrow more and invest in assets.\n\nSome notable examples of bubbles:\n- The burst housing bubble in 2007ish which sparked the *Global Financial Crisis*.\n- The Dot-com bubble in the late 1990s was a stock market bubble associated with the massive growth in the use of the internet.\n- The cryptocurrency bubble.\n- The 2022 tech bubble which wrecked the stock prices of many tech companies and resulted in mass layoffs.\n- The [Australian property bubble](https://en.wikipedia.org/wiki/Australian_property_bubble), maybe.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Bonds":{"title":"Bonds","content":"\nA *bond* is an [I.O.U](https://www.investopedia.com/terms/i/iou.asp), a formal acknowledgement about a loan and its regular payments between the lender and borrower. Bonds are a type of [[finance/investment/Securities|security]] known as *debt securities* and are sometimes called 'fixed-income securities'. They're considered a low risk investment.\n\nGovernments and businesses will sell bonds, or borrow money in other words, to fund their expenses. For instance, the government might sell bonds to the private sector to fund public infrastructure development, schools, military equipment, etc. A business might sell bonds to hire people and buy capital goods such as computers.\n\nThere are also *investment bonds* which let you invest in managed share funds. They let you avoid capital gains tax after 10 years when you sell.\n\n### Bond Value\nIn general, the gross return on investment for an asset is generally expressed as: $\\frac{P_{t} + I}{P_{t-1}}$, where $P_{t}$ is the current price, $P_{t-1}$ is the previous price, and $I$ is the income (dividend) in the form of regular payments for holding the asset.\n\nA bond has the following properties which dictate its value:\n- *Principal* ‚Äî the amount of money given.\n- *Term* ‚Äî time by which the principal must be repaid, ie. the deadline.\n- *Coupon payment* ‚Äî regular payment to the lender.\n- *Coupon rate* ‚Äî the interest rate on the bond.\n\nBonds can be traded on the *bond market*.\n\nRemember, $100 now is worth more than $100 in the future in almost all situations. The simple reason for this is because we can earn interest on the $100 by putting it in a savings account, for example. The value of a bond needs to take this into account by discounting the future value of payments:\n$$\\colorbox{#FFFFBF}{$V_t=\\frac{\\text{coupon payment}_{1}}{1+i}+\\frac{\\text{coupon payment}_{2}}{(1+i)^2}+\\ldots \\text{further rounds of payments.}+\\frac{P+\\text{coupon payment}_{n}}{(1+i)^n}$}$$\nBond price and the market interest rate are inversely related. Rises in the market interest rate decrease the value of a bond.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Business-Cycle":{"title":"Business Cycle","content":"\nBusiness cycles are the observed fluctations in production.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Cash-Rate":{"title":"Cash Rate","content":"\nThe cash rate, which is set by the [[economics/macroeconomics/Central Bank|RBA]] as part of its [[economics/macroeconomics/Monetary Policy|monetary policy]], is a short-term interest rate charged on the 'overnight' loans between banks.\n- To 'tighten' monetary policy means to raise the cash rate to discourage lending and therefore lower production.\n- To 'loosen' monetary policy means to lower the cash rate to incentivise lending and therefore boost production.\n\n## How does the interest rate affect you and the economy?\nWhen the central bank *raises interest rates*, it'll eventually propagate through the economy, causing private banks to increase the interest rates they offer for savings accounts and the rates they charge on loans, notably *variable-rate mortgages*. When this happens, consumers like you are incentivised to **save more money** and spend less on consumption, which means that businesses will experience less demand for their goods, thus be less inclined to raise prices, hence **reducing the inflation rate**.\n\n\u003e Notably, house prices will tend to drop because mortgage repayments are higher, so people are collectively less willing to take on a bigger mortgage to buy a house.\n\nFor businesses, a higher interest rate will discourage them from taking out loans and make capital investments. They'll hire fewer people, lay off more people or cut wages, resulting in a rise in [[economics/macroeconomics/Labour Market|unemployment]] and reduction in disposable income.\n\nThere are potentially disastrous consequences to the economy when the central bank changes the interest rate, so they must be very careful about how big the hikes are and for long they're imposed on the economy.\n- When interest rates are increased too much, the economy might enter a [[economics/macroeconomics/GDP#Recession|recession]].\n- When interest rates are decreased too much or not increased by enough, inflation may 'spiral' towards [[economics/macroeconomics/Inflation#Hyperinflation|hyperinflation]].\n\nInterest rate changes can take a long time (eg. 2 years) to propagate through the economy and actually affect it. The central bank needs to produce an accurate forecast about where the economy might be headed to inform their decision about how much to change the interest by.\n\n---\n\n## Payment Settlement\nSuppose Commbank owes Westpac an outstanding $10 million AUD. The payment needs to proceed through accounts held at the RBA, called **Exchange Settlement Accounts (ESA)** which must never have a negative balance. Commbank transfers $10 million from their ESA to Westpac‚Äôs ESA. \n\nIf Commbank ever has insufficient funds in their reserve, then it must borrow those funds from another bank which expects full repayment in $\u003c24$ hours (which is where the term ‚Äòovernight‚Äô comes from). When borrowing from other banks' ESAs, the loans are charged an interest rate known as the *cash rate*.\n\nThere are 3 interest rates that the RBA defines:\n- $i^T$ ‚Äî the RBA‚Äôs target cash rate.\n- $i^T-0.25$ ‚Äî the interest rate RBA pays to banks for their ESAs. The $0.25$ is a typical value, but it can be tweaked.\n- $i^T+0.25$ ‚Äî the interest rate for banks to borrow from other banks‚Äô ESAs.\n\nThis creates a 50 basis point ‚Äòchannel‚Äô which defines the range the actual cash rate value can be in. *Note*: a 'basis point' is just $\\frac{1}{100}$ of $1\\%$. \n\n![[economics/macroeconomics/assets/cash-rate-channel-system.png|500]]\n\n## Open Market Operations\n*Open market operations* is the trading of goverment bonds between the central bank and the private sector. The RBA mainly buys bonds from banks to increase their ESA and therefore the [[economics/macroeconomics/Money#Money Supply|money supply]], and sells bonds to banks to decrease their ESA and bring down money supply.\n\n## Supply \u0026 Demand for ES Funds\nBelow is the demand curve for banks' ES funds in the overnight cash market.\n\n![[economics/macroeconomics/assets/ES-funds-demand-curve.png|500]]\n\nBelow is the supply curve for ES funds in the overnight cash market.\n\n![[economics/macroeconomics/assets/ES-funds-supply-curve.png|500]]\n\nSupply is affected exogenously by the value of the open market operations the RBA undertakes with banks, and the transfers government make to households (by transferring funds into the bank‚Äôs ESA, therefore increasing ES funds).\n\nBy undertaking open market operations, the RBA can push the supply curve to intersect with the demand curve as shown above. This is how the RBA sets the *actual* cash rate to be the *target* cash rate that they‚Äôve announced.\n\n## Expectations Hypothesis\nThe *expectations hypothesis* predicts how short-term interest rates like the cash rate affects the long-term interest rates after sufficient time. Basically, it predicts how the interest rate set by the central bank will propagate throughout the rest of the economy, influencing the interest rates charged by private banks on loans and savings.\n\nThe long-term interest rate, $i^N_0$, is simply the average of the current interest rate (at term 0) and all *expected* future interest rates. This is summarised in the following equation:\n$$\n\t\\colorbox{#FFFFBF}{$i^N_0 = \\frac{1}{N}(i^1_0+i^2_1+\\ldots+i^N_{N-1})$}\n$$\nwhere $i^\\alpha_\\beta$ is the interest rate associated with a loan spanning $\\alpha$ total terms starting from at time $\\beta$.\n\nGenerally, the cash rate can be expected to have a very large effect on the mortgage rate, savings bank account interest rates, exchange rate (currency tends to appreciate when cash rate rises), and so on.\n\n## Policy Rules\nA *policy rule*, also called a *monetary policy reaction function* (PRF), is a simple approximation of how the cash rate affects macroeconomic variables and therefore is a model that describes how central banks choose their policy interest rates. \n\n#### Taylor Rule\nThe *Taylor rule* is a well-known policy rule, which asserts:\n$$\\colorbox{#FFFFBF}{$i_\\text{nominal cash rate}=1+1.5\\pi+0.5\\tilde{Y}$},$$\nwhere $\\tilde{Y}$ is the output gap. Alternatively, using the *real* cash rate, this would be $r_\\text{real cash rate} = 1 + 0.5\\pi + 0.5\\tilde{Y}$.\n\n#### Simple Policy Rule\nThe simple monetary policy reaction function is:\n$$\n\tr = r_{0}+ \\gamma \\pi.\n$$\nHere, $\\gamma$ is a value chosen by the central bank to represent their *sensitivity to inflation*. A higher $\\gamma$ results in a larger increase in the cash rate by the RBA. The constant, $r_0$ is the real cash rate when inflation is $0\\%$.\n\n![[economics/macroeconomics/assets/simple-policy-rule-graph.png|500]]\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Central-Bank":{"title":"Central Bank","content":"\nThe central bank is a financial institution that is trusted with controlling the *supply of money*, implementing [[economics/macroeconomics/Monetary Policy|monetary policies]], and regulating the behaviour of [[economics/macroeconomics/Private Banks|private banks]] and other financial instutions through [reserve requirements](https://www.investopedia.com/terms/r/requiredreserves.asp). Their main goal is to ensure economic stability by ensuring macroeconomic variables such as inflation, unemployment rate, etc. all stay in reasonable values.\n\nThe vast majority of countries have their own central bank, which is said to be politically independent, so not owned by the government, and also not motivated by profits like a regular private bank would be. Monetary policy and [[economics/macroeconomics/Fiscal Policy|fiscal policy]] are independent, however they're both powerful economic tools for affecting macroeconomic variables. One criticism of fiscal policy is that it can be politically motivated, while monetary policies tend to be more impartial because the central bank operates mostly independently of politics. Ideally, monetary policies and fiscal policies should support each other in their goals and should be coordinated.\n\nThe central bank can be considered as a 'bank for banks'. Private banks can borrow money from central banks and deposit money to the central bank and earn interest from doing so. Central banks are sometimes seen as the 'lender of last resort' because they can bail out financial institutions that are struggling with debt and prevent private banks from [[economics/macroeconomics/Private Banks|becoming insolvent]], for example.\n\nIn Australia, the central bank is the [Reserve Bank of Australia](https://www.rba.gov.au/), in the US, it's the [Federal Reserve](https://www.federalreserve.gov/).\n\n![[economics/macroeconomics/assets/RBA-building.png|450]]\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Economic-Growth":{"title":"Economic Growth","content":"\n*Economic growth* is the general improvement in *living standards*, which is representable through an indicator like *real [[economics/macroeconomics/GDP|GDP]] per capita*.\n\nSupposing $y=\\frac{Y_\\text{real}}{\\text{Population}}$, the economic growth rate from $t-1$ to $t$ is\n$$\n    g = \\frac{y_{t}- y_{t-1}}{y_{t-1}}.\n$$\nMaking $y_t$ the subject, and then extrapolating across time periods $[0, t]$, we have:\n$$\n\\begin{align}\n    y_{t} \u0026= (1 + g) \\cdot y_{t-1},\\\\\n    \u0026= (1+g)^{2} \\cdot y_{t-2} \\\\\n    \u0026= (1+g)^{t} \\cdot y_0. \\\\\n\\end{align}\n$$\nA small difference in $g$ across a long span of time will result in enormous differences because of the compounding effect.\n\n## Purchase Power Parity\nThe **Purchase Power Parity** exchange rate uses a standard basket of goods and services to assess economic productivity and living standards across different countries.\n\n## Aggregate Production Function\nAn aggregate production function is a function of variables such as aggregate physical capital stock, aggregate labour quantity used, general level of factor productivity, etc. \n\nThe [Cobb-Douglas Production Function](https://en.wikipedia.org/wiki/Cobb%E2%80%93Douglas_production_function) is an example of an aggregate production function that produces real GDP as a function of labour, physical capital and technology and has the the form:\n$$\n     Y_\\text{real} = AK^{\\alpha}L^{1-\\alpha},\n$$\nwhere $A$ is 'factor productivity', $K$ is physical capital, $L$ is labour input, and $0 \u003c \\alpha \u003c 1$.\n\nA notable property of this function is that if you were to double capital $K$ and labour $L$ (representing the quantity and quality of human capital), the production output doubles. This property is called *constant returns to scale*.\n\n- *Marginal product of labour*: $MPL = \\frac{\\delta Y}{\\delta L} = (1-\\alpha)\\frac{Y}{L}$\n- *Marginal product of capital*: $MPK = \\frac{\\delta Y}{\\delta L} = \\alpha\\frac{Y}{K}$\n\n**Capital Per Worker**\nThe average worker productivity is given by $\\frac{Y}{L}=A(\\frac{K}{L})^\\alpha$. Since $0 \u003c \\alpha \u003c 1$, increases in $\\frac{K}{L}$ result in *diminishing increases* in worker productivity. Letting $y=\\frac{Y}{L}$ and $k=\\frac{K}{L}$ (the *capital per worker*), we have $y=Ak^\\alpha$.  \n\n**Growth of Productivity**\nThe change in aggregate production is given by\n$$\n    \\Delta Y = \\Delta A + \\alpha \\Delta K + (1 - \\alpha) \\Delta L,\n$$\nwhich can be rearranged to get the growth in productivity, $\\Delta A$,\n$$\n    \\Delta A = \\Delta Y - \\alpha \\Delta K - (1 - \\alpha) \\Delta L.\n$$\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Exchange-Rate":{"title":"Exchange Rate","content":"\nThe exchange rate is the pricing of one country's currency relative to other currencies.\n\n*Bilateral nominal exchange rate* is rate at which two countries can exchange their currencies. In Australia, we express the exchange rate towards every other foreign currency like $e=\\frac{\\text{Foreign Currency}}{AUD}$. A higher $e$ means that $\\$1 \\text{ AUD}$ buys more of that foreign currency.\n\n*Bilateral real exchange rate* measures the price of *domestic* goods \u0026 services relative to the price of the same *foreign* goods \u0026 services. It's useful to use a price index like the CPI to compare the prices of goods and services broadly in different economies.\nThe real exchange rate, $\\frac{e\\times P_\\text{home}}{P_\\text{foreign}}$, gives some measure of *international competitiveness*. If a country's goods \u0026 services become less expensive, that is $P_\\text{home}$ becomes lower, then it'll tend to have higher net exports.\n\n## Models of Nominal Exchange Rate\n### Law of One Price\nThe *Law of One Price* asserts that a tradable good should be priced the same irrespective of where it's coming from (after the application of taxes and transportation costs). If this is not the case (which it indeed isn't in practice), people can exploit the price difference and make a profit.\n\n### Purchasing Power Parity\nThe *purchasing power parity* is an idea that extends the *Law of One Price* to a general basket of goods and services instead of just one good or service. It asserts that the exchange rate between two currencies will change to reflect the price levels within the two countries, ie. that \n\n$$\n\\begin{align}\n\te\u0026=\\frac{P_\\text{foreign}}{P_\\text{home}}, \\\\\n\t\\Delta e \u0026= \\pi_\\text{foreign} -\\pi_\\text{home}.\n\\end{align}\n$$ \nA rise in prices, or higher inflation, in the home country will reduce $e$, making it so that the home currency purchases less of the foreign currency. \n\n## Foreign Exchange Market\nThe supply and demand model is useful for seeing how the exchange rate is set between two currencies. In the AUD/USD exchange market, a greater preference for US goods by Australians would push the supply curve to the right, and likeiwse, a greater preference for Australian goods by US residents would push the demand for AUD to the right.\n\n![[economics/macroeconomics/assets/aud-supply-and-demand.png|500]]\n\n### Fixed Exchange Rates\nIt's possible to sustain an overvalued fixed exchange rate for the home country's currrency if the central bank purchases the excess supply of the home country's currency\n\n![[economics/macroeconomics/assets/aud-nzd-exchange-market.png|400]]\n\nIf market participants doubt the long-term sustainability of an fixed exchange rate, they might sell their holdings of the currency on the inflated value in aggregate, launching what's called a *[speculative attack](https://en.wikipedia.org/wiki/Speculative_attack)*.\n\n### Effect of Monetary Policy\nWhen [[economics/macroeconomics/Monetary Policy|monetary policy]] tightens in a country, increasing the [[economics/macroeconomics/Cash Rate|interest rates]] will tend to reduce the country's demand for foreign goods \u0026 services and increase foreign demand for domestic goods \u0026 services, causing the home country's currency to appreciate. A loosening of monetary policy tends to depreciate the country's currency.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Fiscal-Policy":{"title":"Fiscal Policy","content":"\n**Fiscal policies** are the policies around the usage of government income and expenditure in an effort to positively affect macroeconomic variables like [[economics/macroeconomics/Inflation|inflation]], [[economics/macroeconomics/Labour Market|unemployment rate]], etc.\n\nFiscal policies include things like:\n- Tax cuts which are reductions to how much tax you'd pay on your personal income.\n- Transfer payments, which are direct payments the government makes to individuals without anything in return. This is usually done to fairly distribute wealth, or to subsidise something (eg. the [JobKeeper policy](https://treasury.gov.au/coronavirus/jobkeeper) was introduced in the COVID-19 pandemic).\n- Subsidising home renovations (eg. [solar panel rebate](https://www.energysaver.nsw.gov.au/save-solar)).\n\nGovernment expenditure occupies about 20% of a country's [[economics/macroeconomics/GDP|GDP]].\n![[economics/macroeconomics/assets/gdp-pie.png|500]]\n\n## 3-Sector Economy\nConsidering a three-sector economy in the [[economics/macroeconomics/Income-Expenditure Model|income-expenditure model]], we'd have $Y = C+I^P+G$.\n\nSuppose we have the **tax function**: $T=T_0 + tY$, with $t$ being the *marginal propensity to tax*, or *marginal tax rate*. At equilibrium GDP, we would have: \n$$\n\tY=PAE=\\frac{1}{1-c(1-t)}\\underbrace{(C_0-cT_0+I_0+G_0)}_{\\text{Exogenous expenditure}}.\n$$\nExpressed in changes, this would be:\n$$\n\t\\Delta Y=PAE=\\frac{1}{1-c(1-t)}(\\Delta C_0- c \\Delta T_0+\\Delta I_0+\\Delta G_{0}).\\tag{1}\n$$\nThis lets you assess how changing one exogenous variable would change the equilibrium GDP. Notice that with the multiplier $\\frac{1}{1-c(1-t)}$, an increase in government spending $G_0$ would cause a rise of $\\frac{1}{1-c(1-t)}$ which is always larger than $\\$1$ to the real GDP.\n\n**Opening the Economy**\nWhen we open this 3-sector economy to international trade, we'd have $PAE=C+I^P+G+X-M$. Using the following substitutions, we can derive the equilibrium GDP and its multiplier:\n$$\n\\begin{align}\n\tC\u0026=C_{0+c(Y-T)}\\\\\n\tI^P\u0026=I_0\\\\\n\tG\u0026=G_0\\\\\t\n\tX\u0026=X_0\\\\\n\tM\u0026=mY\\\\\n\tY\u0026=\\frac{1}{1-\\big(c(1-t)-m\\big)}(C_0-cT_0+G_0+I_0+X_0)\\\\\n\\end{align}\n$$\n\n### Balanced Budget Multiplier\nA surprising result from equation $(1)$ is that you can increase government expenditure $G_0$ and taxes $T_0$ by the *same amount* but still end up with a positive change in the GDP. The *balanced budget multiplier* can be determined as:\n$$\n\t\\frac{\\Delta Y_\\text{equilibrium}}{\\Delta G_0} = \\frac{1-c}{1-c(1-t)}.\n$$\nThis means that fiscal policies can help with closing *contractionary [[economics/macroeconomics/Output Gap|output gaps]]*. For instance, you could achieve the following shift in the $PAE$ curve.\n\n![[economics/macroeconomics/assets/fiscal-policy-eliminates-output-gap.png|400]]\n\nThis shift is achieved by cutting taxes $T_0$ and/or increasing $G_0$. Likewise, when faced with undesirably high inflation, governments can implement a contractionary fiscal policy that closes *expansionary output gaps*. Importantly, fiscal policies have a large effect on [[economics/macroeconomics/Public Debt|government debt]]. Expansionary fiscal policies reduce government budget and contractionary fiscal policies increase government budget.\n\n### Automatic Fiscal Stabiliser\nAn **automatic fiscal stabiliser** is a tax or government transfer payments system that helps dampen _business cycle_ fluctuations. Eg. marginal tax rate systems and welfare payments are examples of automatic stabilisers.\n\nConsider the case where all exogenous variables except $I_0$ are constant in a closed 3-sector economy, so: $\\Delta Y=\\frac{1}{1-c(1-t)}(\\Delta I_0)$. Here, the amplitude of each [[economics/macroeconomics/Business Cycle|business cycle]] can be controlled by tweaking the marginal tax rate $t$ and therefore the multiplier.\n\n![[economics/macroeconomics/assets/automatic-fiscal-stabiliser.png|400]]\n\n**Discretionary fiscal policies** are ones undertaken explicitly by the government to counter fluctuations in the business cycle.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/GDP":{"title":"GDP","content":"\n**GDP** (*gross domestic product*) is the **monetary** value of all the *domestically-produced **final** goods and services* in a country during a given period. The Australian GDP value is usually announced by the [ABS](https://www.abs.gov.au/) every quarter (3 months). GDP is regarded as a *standard* measure of the *level of production* of a country and its purpose is to serve as an indicator for the size an economy. An increase in a country's GDP indicates that it is undergoing economic growth (an increase in the amount of goods and services produced by the country).\n\n**GDP per capita** is the GDP divided by the country‚Äôs population. It's used as an indicator for labour productivity and living standards ([[economics/macroeconomics/GDP#GDP and Economic Welfare|with many caveats]]).\n\n*Some figures from 2020, rounded loosely:*\n\n| Country     | GDP                 | GDP Per Capita |\n| ----------- | ------------------- | -------------- |\n| Australia   | $1.33 trillion USD  | $52000 USD     | \n| U.S         | $20.94 trillion USD | $64000 USD     |\n| China       | $14.72 trillion USD | $10000 USD     |\n| New Zealand | $0.21 trillion USD  | $42000 USD     |\n\n*Sample of Australia's quarterly GDP, sourced from the ABS.* Australia's annual GDP in 2015 is simply the sum of all 4 quarterly GDPs, which in this case, is roughly $\\$1.6$ trillion AUD.\n\n| Quarter        | GDP            |\n| -------------- | -------------- |\n| March 2015     | $404.1 billion |\n| June 2015      | $405.4 billion |\n| September 2015 | $408.9 billion |\n| December 2015  | $410.4 billion |\n\n### GDP and Economic Welfare\nAlthough correlated, GDP is *not* a measure of societal wellbeing. *GDP per capita* is a better indicator but still does not capture the full picture of wellbeing. Notably, GDP omits [[economics/microeconomics/Externalities|negative externalities]] associated with production, such as pollution, and does not take into account whether a country's wealth is 'fairly' distributed.\n\n### What Contributes to GDP?\nGDP only counts the transaction of ***final*** goods and services, which are goods and services that have reached the final owner and will not be resold. This means that the transaction of all intermediate **goods** do not contribute to a country‚Äôs GDP, otherwise it would be double counted.\n\n\u003e Ô∏èGDP *does not count the value of the inputs*, only the price paid by a **final consumer**.\n\n#### Examples\n- If you grow your own vegetables, that doesn‚Äôt count to GDP. If you buy vegetables from a supermarket however, then that *will* contribute to the GDP.\n    - **Note**: supermarkets purchasing fruits/vegetables for their inventory would be counted to GDP *even* if they‚Äôre not sold to customers. The *final consumer* here is the supermarket since they‚Äôre the last owner of the good.\n- If a constructor purchases materials to buy a house which eventually is sold to a family, the GDP only counts the transaction between the constructor and the family. Ie. we do not count the value of the *inputs to production* such as the bricks, cement, glass, etc.\n- ‚ÄòHousehold production‚Äô such as cooking and child care are *mostly* excluded from the GDP, purely because it‚Äôs too hard to valuate those goods \u0026 services.\n- A change in ownership of an asset like buying/selling shares doesn‚Äôt count to GDP.\n    - Buying an *existing* property doesn‚Äôt count either, but buying a *newly* constructed property is counted. Again, what matters is that GDP is only counted once per asset and never again along the chain of ownership.\n- Watching YouTube contributes to the GDP since you‚Äôre driving a transaction between YouTube and the advertisers paying to put their ads on YouTube.\n- **The location of the production of the good/service matters**. Eg. if you‚Äôre on holiday in New Zealand and you teach a computer science lesson for $1000 NZD, then that counts to New Zealand's GDP, not your country‚Äôs GDP, since the service was produced in New Zealand.\n\n#### Estimating Value\nWhen some good/service does not have a *concrete* price or market value, we can estimate it by calculating the sum of the *value of the inputs* used to *produce* that good or service. This is often done for services provided by the government. \n\nFor instance, if a firefighter is alerted of an incident and has to drive somewhere to put out a fire, that service might have no payment associated with it, but it‚Äôll still contribute to the GDP. The value it contributes is simple a sum of the value of the inputs necessary to provide that service (cost of labour, fuel, extinguisher materials, etc.).\n\n#### Imports/Exports\nBuying imported goods **does not** contribute to our country‚Äôs GDP, however it **does contribute** to the exporting country‚Äôs GDP.\n\nIf you‚Äôre a foreigner working in Australia, your work contributes to the Australian GDP but not to that of your home country.\n\n\u003e *Exports contribute* to our GDP. Imports do not.\n\n## Calculating GDP\nThe GDP value is obtainable through 3 main ways: the [[economics/macroeconomics/GDP#Production Approach|production approach]], [[economics/macroeconomics/GDP#Expenditure Approach|expenditure approach]] and [[economics/macroeconomics/GDP#Income Approach|income approach]]. These are all meant to arrive at the same value in theory, but in practice, each will have their own measurement errors and report slightly different values of GDP. The ABS takes the average of the 3 values and reports that as the official GDP value in their announcements.\n\n*Note*: we use $Y$ as the symbol for GDP.\n\n### Production Approach\nIn the production approach, we measure GDP as the difference between the value of outputs and the value of inputs in producing those outputs.\n\nGDP is calculated as: $Y \\equiv \\text{gross value of output } - \\text{ intermediate costs}$ .\n\nIn other words, it‚Äôs the total *value-added* of all transactions in a country.\n\n### Expenditure Approach\nIn the expenditure approach, we measure GDP as the total money spent on *domestically produced final* goods and services by everyone (individuals/businesses in Australia and other countries who consume what Australia supplies).\n\nWe can calculate GDP based on total expenditures from different sources: \n$$\\colorbox{#ffffbf}{$Y\\equiv C+I+G+(X-M)$}.$$\n- $C$ ‚Äî **household** **consumption spending**. Ie. how much households spend.\n\t- The goods consumed can be categorised into *durable* (longer-lived items whose ownership can be transferred) and *non-durable* (single-use items, like food).\n- $I$ ‚Äî **gross private investment**. Ie. how much businesses spend.\n\t- This can be further categorised as: dwelling construction costs, non-dwelling construction costs, machinery/equipment costs, etc.\n- $G$ ‚Äî **government spending**.\n- $X$ ‚Äî **exports**. Ie. how much the rest of the world purchases from us (Australia).\n- $M$ ‚Äî **imports**. Ie. how much we (Australia) spend on imports from the rest of the world.\n\t- $NX = X - M$ ‚Äî **net exports**.\n\n### Income Approach\nIn the income approach, we calculate GDP as the total income generated by the production of all goods and services.\n\nGDP is calculated as: \n$$Y\\equiv \\text{labour income + capital income + }\\underbrace{\\text{(indirect taxes - subsidies)}}_{\\text{Net indirect taxes}}.$$\nExpressed differently and assuming $0$ net indirect taxes,\n$$Y \\equiv (W \\times L) + (R \\times K),$$\nwhere $W \\times L$ is the wage per ‚Äòunit‚Äô of labour times the total labour and $R\\times K$ is the rate of return times the total capital.\n\n## Real vs. Nominal GDP\n\n***Nominal GDP*** counts everything at *current prices*. It therefore does not account for [[economics/macroeconomics/Inflation|inflation]]. This means that the value of nominal GDP can change year-to-year even when the rate of production has stayed the same, because some goods/services have become more or less valuable over time.\n\n***Real GDP*** counts the changes in production by holding prices constant at a chosen *base year*‚Äôs prices. Which base year you choose affects the real GDP calculated in other years. It's basically *nominal GDP*, but adjusted for inflation.\n\n## Recession\nA *recession* is a period, typically several months, where production levels have declined from previous levels and unemployment rates are high. There is no universal formal definition of a recession, but it's typically identified as two consecutive quarters where GDP growth has been negative, which means that the total final goods and services produced in the country has reduced for 6 months straight.\n\nA *depression* is like a recession, but it lasts for many years, is more destructive, and is much rarer.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Income-Expenditure-Model":{"title":"Income-Expenditure Model","content":"\nThe income-expenditure model of GDP, also called the *Keynesian* model since it was pioneered by [Keynes](https://en.wikipedia.org/wiki/John_Maynard_Keynes), is a model that asserts that the real GDP at equilibrium is entirely determined by the *desired level* of aggregate expenditure on domestically-produced final goods \u0026 services by all people, households, firms, foreigners and the government. This is called the **planned aggregate expenditure**, $PAE$.\n\nBasically, the income-expenditure model expects a country's GDP to be equal to the planned aggregate expenditure, ie. the equilibrium condition is:\n$$\n\tY_\\text{equilibrium}=PAE=C+I^P + G+ NX.\n$$\nSee the [[economics/macroeconomics/GDP#Expenditure Approach|expenditure approach of calculating GDP]].\n- $I^P$ is the *planned* investment as opposed to *actual* investment $I$. They differ in value because of unplanned changes to firms‚Äô inventories, given by: $I=I^P+\\Delta\\text{Inv}_\\text{unplanned}$.\n- *Unplanned inventory* ‚Äî the difference between the *actual* expenditure and the *planned* expenditure.\n\n### Assumptions\nA key assumption of the income-expenditure model is that **prices of goods \u0026 services are *‚Äòfixed‚Äô* (or *‚Äòsticky‚Äô*)**. It assumes that firms will *not* change the prices of their goods \u0026 services in response to a change in demand for them in the *short-run*. Instead, they'll respond by adjusting their level of production. \n\n*Note*: this is a fair assumption since firms cannot know whether it‚Äôs reasonable to change costs so quickly, due to **[[economics/macroeconomics/Inflation#'Costs' of Inflation|menu costs]]**. Why? Suppose you‚Äôre a cafe owner. When there's a sudden influx of demand, you would probably crank up the level of production rather than increasing the cost of coffee. Eventually in the long-run, if you see that this demand persists then you‚Äôd increase prices.\n\n### Disequilibrium\nThe business sector can produce at a level greater than or less than the $PAE$, in which case the economy would be in *disequilibrium*. \n\nIf $Y \u003e PAE$, businesses have produced more goods \u0026 services than all sectors were willing to purchase. This leads to an unplanned increase in their inventories, and will prompt businesses to reduce their production levels accordingly, causing GDP to fall until the equilibrium condition $Y = PAE$ is satisfied.\n\nLikewise, if $Y \u003c PAE$, then businesses have produced less than what all sectors were willing to purchase, unexpectedly depleting their inventories. They'll ramp up production, until $Y = PAE$.\n\nGraphically, it looks like this:\n\n![[economics/macroeconomics/assets/income-expenditure-equilibrium.png|700]]\n\n### Consumption Function\nIn the income-expenditure model, we model household consumption, $C$, using the **[Keynesian consumption function](https://www.investopedia.com/terms/c/consumptionfunction.asp)**: \n$$\n\tC=C_0+c\\underbrace{(Y-T)}_{\\text{Disp. income}}.\n$$\n- $C_0$ is an exogenous variable representing how much households will spend on consumption when their disposable income is $0$. An assumption here is that $C_0 \u003e 0$.\n- $c$ is the **marginal propensity to consume**, $MPC$. A key assumption is that $0\u003cc\u003c1$. In the above consumption function, if your income were to rise by $\\$1$, your marginal propensity to consume is how much of that $\\$1$ you will spend on consumption instead of save.\n\t- *Note*: we also call $1-c$ the *marginal propensity to consume*.\n- **Average propensity to consume**, $APC$, is the percentage of income that is spent rather than saved. It can be obtained as $APC=\\frac{C}{Y-T} = \\frac{C_0}{Y-T}+c$.\n\n*Household consumption is a stable and major contributor to GDP, sitting at around $\\approx 60\\%$ in Australia.*\n![[economics/macroeconomics/assets/household-consumption-gdp-share.png|500]]\n\n### 2-Sector Economy\nConsider an economy that only consists of households and businesses. In this case, we'd have $Y=C+I^P$. At equilibrium, we can see that:\n$$\n\\begin{align}\n\tY_\\text{Equilibrium}\u0026=PAE=C+I_0 \\notag\\\\\n\t\u0026= C_0 + cY + I_0 \\notag\\\\\t\n\t\u0026=\\frac{1}{1-c}(C_0+I_0),\\tag{1}\\\\\n\\end{align}\n$$\nwhere $\\frac{1}{1-c}$ is called the *multiplier*.\n\n**Savings and Investment**\nAt equilibrium, the savings is equal to the planned investment:\n$$\n\\begin{align}\n\tY \u0026= PAE \\notag\\\\\n\t\u0026 = C+I^P\\notag\\\\\n\tY - C \u0026= I^P\\notag\\\\\n\tS \u0026= I^P. \\notag\\\\\n\\end{align}\n$$\nFrom the consumption function, we can express a saving function,\n$$\n\\begin{align}\n\tS \u0026= Y - C \\\\ \n\t\u0026= Y - (C_0 + cY)\\\\\n\t\u0026= -C_0 + (1-c)Y,\n\\end{align}\n$$\n\n![[economics/macroeconomics/assets/income-expediture-2-sector-savings-and-investment.png|500]]\n\n**Opening the 2-Sector Economy**\nNow let's the consider the economy that includes imports/exports. We have $PAE = C + I^P + X - M$. Assuming that the imports scales linearly with GDP: $M=mY$, where $0\u003cm\u003cc$ is the *marginal propensity to import*, we can derive:\n$$\n\\begin{align}\n\tY_\\text{Equilibrium} \u0026= PAE = C+ I^P +X -M \\\\\n\t\u0026= C_0 +cY + I_0 + X_0 - mY \\\\\n\t\u0026= \\frac{1}{1-(c-m)}(C_0+I_0 + X_0). \\tag{2}\\\\\n\\end{align}\n$$\nComparing this result with $(1)$, we see that opening the economy makes the multiplier smaller.\n\n### Paradox of Thrift\nThe *'paradox of thrift'* is a paradox where an increase in exogenous household saving, $C_0$, which shifts the aggregate saving function up, does not actually increase the amount of *real* savings. This is because a collective effort of every household to save simply causes the production levels to drop, meaning a reduction in equilibrium GDP and the effects of saving are nullified as shown:\n\n![[economics/macroeconomics/assets/paradox-of-thrift-graph.png|500]]\n\n\u003e The Paradox of Thrift suggests that while it may be wise for an individual to save money when income is low and job prospects are precarious, it could be collectively disastrous if everyone is thrifty together.\n\nThe paradox of thrift is an example of a *[fallacy of composition](https://en.wikipedia.org/wiki/Fallacy_of_composition)*. An example of the fallacy of composition: when you stand up amongst a crowd to get a better view of something, it only works when a few people do it. When everyone does it, then the gains from standing up are nullified. At that point, it would be equivalent to if everyone remained seated.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Inflation":{"title":"Inflation","content":"\nInflation describes a period where *prices in an economy are increasing*, or alternatively, the decline of the purchasing power of a country‚Äôs currency. Likewise, *deflation* describes a period where prices are falling. The *inflation rate* describes a value for how much the prices for goods and services have increased in an economy from one point of time to another.\n\nThe [[economics/macroeconomics/Central Bank|central bank]] measures inflation using a *price index*, which is a value that is representative of the aggregate price level. One standard and very commonly chosen price index central banks use to measure inflation is the [[economics/macroeconomics/Inflation#Consumer Price Index|consumer price index (CPI)]]. Inflation is measured in terms of the CPI between the current year, $CPI$, and its previous year, $CPI_{-1}$:\n$$\n\t\\pi=\\big( \\frac{CPI-CPI_{-1}}{CPI_{-1}} \\big) \\times 100\n$$\n*Note*: we use $\\pi$ as the symbol for inflation.\n\nInflation is generally bad for your savings because the same amount of money will purchase fewer goods and services in the future. During inflation, you‚Äôre incentivised to minimise holdings of currency and ‚Äòstore‚Äô wealth in other assets.\n\nInflation is sometimes classified into 3 types:\n- **Cost-push inflation** is when the costs of a business producing goods and services rises (due to shortages in materials, increases in wage, etc.), causing the price of those goods and services charged to consumers to rise. This assumes demand for the business' output hasn't changed.\n- **Demand-pull inflation** is when the demand for a good or service increases while the supply doesn't, causing prices to rise for that good or service.\n- **Built-in inflation** is when *expectations* about future increases in price are the thing that's pushing prices up.\n\n## Consumer Price Index\nThe consumer price index (CPI) value aims to represent changes to the cost of living experienced by typical households. It does this by comparing the price of a *fixed basket* of ‚Äòstandard‚Äô goods/services that households consume at a base year with the price of that same basket of goods/services in subsequent years. The items in such a basket might include milk, clothes, chicken, fruit, etc., basically a huge set of things that are usually good representatives of the average urban consumption (since it's based on real data and constant price sampling).\n$$\n\tCPI = \\frac{\\texttt{basket\\_cost(current\\_year)}}{\\texttt{basket\\_cost(base\\_year)}}.\n$$\nTo get the CPI for a year $n$ with base year $m$, first calculate the cost of the basket in year $m$ with year $m$ prices, then calculate the cost of the same basket but with year $n$‚Äôs prices. Finally, the CPI is the ratio of the price of the basket calculated at year $n$‚Äôs prices to the price of the basket calculated at year $m$‚Äôs prices.\n\nEg. Consider the following:\n\t\n\t\t![[economics/macroeconomics/assets/cpi-calculation-example.png|400]]\nThe CPI at year 2010 is given by: $CPI=\\frac{100\\times3 + 50 \\times 10}{100 \\times 5 + 50 \\times 10}$.\n\n**Shortfalls of CPI:**\n- When the quality of an item in the basket changes (eg. a phone gets a hardware upgrade), the CPI value fails to capture that. This means the reported CPI might over-estimate increases in living cost. This is called *quality adjustment bias*.\n- CPI does not take into account the *substitution effect*. Eg. when beef becomes expensive, people will tend to substitute away towards chicken, however the CPI will report its value assuming people continue consuming the same amount of the same things in the fixed basket. This is called *substitution bias*.\n\n## Optimal Inflation Rate\nIt‚Äôs typically desirable for economies to maintain a low and stable inflation rate over time, usually in the ballpark of 1-3% per year. This is usually controlled through [[economics/macroeconomics/Fiscal Policy|fiscal]] and [[economics/macroeconomics/Monetary Policy|monetary]] policies.\n\nHaving an inflation rate above zero will tend to grow the economy. Although highly contended, [[economics/macroeconomics/Income-Expenditure Model|Keynesian economics]] argues in the short-run, it takes some time for the decrease in purchasing power of money to fall, so there is a 'window of opportunity' where before inflation 'kicks in' and errodes people's savings, prices all stay the same allowing people or businesses with more money to acquire more goods \u0026 services, growing the country's real GDP. This is what governments may try to exploit to grow the economy, but it's a move that has historically backfired hard for some economies.\n\nAiming for an inflation rate of around 1-3% reduces the likelihood of deflation, which is usually agreed to be more destructive than a little bit of inflation. For example, in deflationary periods, when you expect prices in the future to be lower, then you might hold off on purchasing. Preventing a transaction like this causes businesses to have lower income, resulting in higher unemployment and lower productivity in an economy.\n\nHigh inflation tends to be self-reinforcing. When too high, it's easy for countries to lose the ability to control the escalation towards hyperinflation, which amplifies all the [[economics/macroeconomics/Inflation#Undesirable Effects of Inflation|undesirable effects of inflation]].\n\n## Undesirable Effects of Inflation\n- Inflation can be particularly bad for some parties when it‚Äôs *unanticipated*.\n  \n  Eg. Suppose a bank loans you $1000 with an interest rate calculated based on its *expected rate of inflation* for the loan period. If the inflation is in fact higher than what the bank expected, then you will be repaying the loan in dollars with less purchasing power. Ie. there has been an unintended redistribution of real wealth in your favour, as the borrower.\n- **Menu costs** ‚Äî the cost of having to *literally* re-printing physical menus to reflect new cost, or any other process that needs to take place to update costs of items in a high-inflation environment.\n- **Shoe-leather cost** ‚Äî the real cost associated with the process of conducting transactions with banks. Inflation increases the transactions you‚Äôd make with the bank since you‚Äôd want to minimise the amount of currency you have (because they‚Äôre decreasing in value).\n  \n  The term ‚Äòshoe-leather‚Äô cost is the cost associated with *literally* wearing out the shoe leather each time you take a physical trip to the bank (back in the early 2000s, that is). Generally however, shoe-leather cost refers to the real cost of making transactions with banks which doesn't just involve wearing out your shoes. \n - The poorer bracket of people in society tend to have a higher [[economics/macroeconomics/Income-Expenditure Model#Consumption Function|marginal propensity to consume]]. A reduction in purchasing power of their money will hurt them more than more affluent individuals. Poorer households typically have less assets that act as a *hedge* against inflation, such as real estate or gold.\n\n### Hyperinflation\nWhen the inflation rate escalates uncontrollably. This tends to result in a sudden drop in living standards as people can no longer afford the same basket of goods and services. People will tend to hoard goods, creating shortages. People become bankrupt. Banks may become insolvent. Governments fail to provide critical services, payments and infrastructure. Everything basically falls apart.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Interest":{"title":"Interest","content":"\nInterest is the *cost of borrowing money*. Borrowing money enables you to acquire goods and services that will produce value. Lending $\\$100$ is only worth doing with the expectation that you get some amount greater than $\\$100$ back. Lending $\\$100$ makes poorer, reducing your ability to acquire goods and services that will produce value, hence you want to be compensated for *more than you have lent*. 'Interest' literally means 'compensation for loss' from the Latin word 'interesse'.\n\nWhen you make a deposit of $\\$100$ to a [[economics/macroeconomics/Private Banks|private bank]], you're forgoing the privilege of being able to use that $\\$100$ with the expectation of being paid a certain interest rate for letting the bank do what it wants with you money. Note that although [[economics/macroeconomics/Private Banks|private banks]] each set their own interest rates on savings accounts and on loans, they're all directly influenced by the [[economics/macroeconomics/Cash Rate|interest rate]] set by the [[economics/macroeconomics/Central Bank|central bank]].\n\nRemember, the economy is not a [zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). In theory, the act of lending/borrowing should result in a win-win scenario and create a net increase in 'value' in the game (economy). The [economic pie tends to keep on growing](https://en.wikipedia.org/wiki/Growing_the_pie).\n\n\u003e Fundamentally, the concept of *interest* exists because all humans value something more when they can use it today versus tomorrow because life is finite.\n\nInterestingly, the [Islamic banking](https://en.wikipedia.org/wiki/Islamic_banking_and_finance) system prohibits monetary interest for religious reasons, instead it sets up other non-monetary incentive structures to reward lenders.\n\n## Nominal vs. Real Interest\n**Nominal interest rate** ‚Äî the *monetary* interest charged on a loan. It does not take into account the effects of [[economics/macroeconomics/Inflation|inflation]].\n\n**Real interest rate** ‚Äî the interest charged on loan *adjusted for inflation*. The real interest rate can be approximated by the difference between the nominal interest rate and inflation rate: $r \\approx i - \\pi$, where $i$ is nominal interest rate and $\\pi$ is the inflation rate *over the period of the loan* (eg. 1 year).\n\nIf you're a lender and want to earn a real interest rate of 5%, for example, and you're expecting the inflation rate to be 2%, then you should set the nominal interest rate to be 7%.\n\n## Fisher Effect\nThe **Fisher Effect** asserts that nominal interest rate will increase 1:1 with inflation, ie. that every 1% rise in inflation will have a corresponding 1% rise in nominal interest rate.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/International-Trade":{"title":"International Trade","content":"\n### Balance of Payments\nThe *balance of payments* is a record of transactions between residents and foreigners. It consists of the *current account* and the *capital and financial account*\n- **Current account**: $\\text{Curr. Account = }NX + \\text{Primary income}+\\text{Transfers}$.\n\t- Goods and services trade: $NX=X-M$.\n\t- Factor income flows, called *net primary income*: $\\text{Payments to us} - \\text{Payments to other countries' residents}$.\n\t- Transfer payments, called *net secondary income*, which includes international aid, for example.\n- **Capital and financial account**: $\\text{Cap. \\\u0026 Fin. Account = Balance on Cap. Account + Balance on Fin. Account}$.\n\t- Capital account: the acquisition/disposal of non-financial assets, and capital transfers.\n\t- Financial account: the trade of financial assets between residents and foreigners.\n\nIt should be the case (in accounting) that $\\text{Current Account} + \\text{Cap. \\\u0026 Fin. Account} = 0$. In practice, there are measurement errors causing $\\text{Current Account} \\approx -\\text{Cap. \\\u0026 Fin. Account}$. The difference is called the *net errors and omissions*.\n\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Labour-Market":{"title":"Labour Market","content":"\nThe labour market, also called the *job market*, is the market for the supply of skills and time from employees and demand from businesses to hire those people. The unemployment rate and productivity levels are two important macroeconomic variables.\n\n![[economics/macroeconomics/assets/labour-market-taxonomy.png|250]]\n\nSome terminology.\n- **Working-age population**: The population consisting of people who are 15 years and older and not part serving in the military.\n- **Labour force**: Members of the working-age population are either a member of the labour force or not. People may not be in the labour force for a number of reasons: eg. disabilities, and even people who are depressed about not finding a job and have given up. A member of the labour force may be employed or unemployed. Note: the workforce, on the other hand, is the set of people who are actively working, excluding the unemployed people.\n- **Employed**: You are considered *employed* if you work ‚â•1 hour per week and earn money for doing so. The exception is that if you‚Äôre working for a family business, then that ‚â•1 hour of work need not be paid. \n\t- **Full-time employment**: If you work ‚â•35 hours per week.\n\t- **Part-time employment**: If you work \u003c35 hours but ‚â•1 hour per week.\n- **Unemployed**: If you are in the *labour force* and are *not employed* *and* are **actively seeking employment**, you are formally *unemployed* and will contribute to the *unemployment rate*.\n- **Underemployment**: underemployment is a lack of utilisation of your labour. There are two types:\n\t- **Time-related underemployment**: when you are willing to work for more hours than you currently are offered to work for.\n\t- **Skill-related underemployment**: when you are working in a job that does not utilise much of your skillset.\n- **Unemployment rate**: the percentage of the *labour force* that are formally *unemployed*: $u = \\frac{\\texttt{num\\_unemployed}}{\\texttt{labour force size}} \\times 100$.\n- **Participation rate**: the percentage of the *working-age population* that is a part of the *labour force*: $\\text{participation rate} = \\frac{\\texttt{labour force size}}{\\texttt{working age population}} \\times 100$.\n\n## Types of Unemployment\nUnemployment is categorised into 3 groups: *frictional*, *structural* and *cyclical*.\n1. **Frictional** ‚Äî temporary unemployment as a result of transitioning between different jobs or from full-time university.\n    \n    Change in level of unemployment is given by: $\\Delta U = sL - fU$, where:\n    - $s$ is the job separation rate\n    - $L$ is the number of employed people\n    - $f$ is the job finding rate\n    - $U$ is the number of unemployed people.\n    \n    The long-run frictional unemployment is given by: $u = \\frac{s}{s+f} \\times 100$, derived by combining $\\Delta U = sL - fU$ with $\\text{labour force}=L+U$.\n    \n2. **Structural** ‚Äî unemployment as a result of fundamental changes to an economy. For example, automation technology might radically change certain industries, causing many people to be made redundant. Structural unemployment involves unemployment arising from insufficient worker skill and job locations being too physically far away.\n    - Policies that address structural unemployment involve re-training programs for assisting the transition of workers to different industries.\n3. **Cyclical** ‚Äî temporary unemployment as a result of changes over the ***business cycle***. The cyclical unemployment rate is strongly correlated with recessions.\n    - Cyclical unemployment can become classified as *structural unemployment* when the skills of a cyclically unemployed person go out of demand after the business cycle downturn.\n    - The **natural rate of unemployment**, given by: $u^* = \\text{frict. unemployment + struct. unemployment}$, represents the unemployment rate that‚Äôs independent of fluctuations in real GDP.\n    - The cyclical unemployment rate is the difference between total unemployment $u$ and natural unemployment $u^*$, which is: $\\text{Cyclical unemployment rate }= u - u^*$.\n\n## Output Gap\nThe **utilisation rate** is the rate at which businesses actually utilise their factors of production, primarily labour and capital. Businesses are assumed to have granular control over whether they have a high or low utilisation rate. There is a *normal utilisation rate* where labour and capital are neither overutilised or underutilised that is considered economically sustainable in the long-term. If ***all*** businesses operate at such a utilisation rate, then we achieve the value of the **potential real GDP**, $Y^*$, or also known as the **potential output**. It‚Äôs hard to measure/estimate potential GDP.\n\nThe **output gap** is the difference between the real GDP $Y$ and the *real potential GDP $Y^*$*: $\\text{Output gap} = Y - Y^*$, or expressed as a percentage, $\\text{Output gap} = \\frac{Y-Y^*}{Y^*}\\times 100$.\n- When the output gap is negative, we call it a *contractionary gap*. Likewise, we call it an *expansionary gap* when the output gap is positive.\n- Persistent contractionary gaps imply an underutilisation of labour \u0026 capital, meaning that we‚Äôre not producing as much as we could.\n- Persistent expansionary gaps imply an overutilisation of labour \u0026 capital. It typically drives inflation to higher rates since prices of goods and services increase in response to higher demand.\n\nThe output gap serves as a useful indicator that informs [[economics/macroeconomics/Fiscal Policy|fiscal]] and [[economics/macroeconomics/Monetary Policy|monetary]] policies.\n\n### Okun‚Äôs Law\nOkun‚Äôs law is an empirical result that states how a country‚Äôs *cyclical unemployment* rate changes when the **output gap** changes.\n$$\n\t\\underbrace{\\frac{Y-Y^*}{Y^*}\\times 100}_{\\text{Output gap (percentage)}}  = - \\beta \\underbrace{(u - u^*)}_{\\text{Cycl. unempl. rate}}\n$$\nThis relationship states that the **output gap** is directly proportional to the negative of the **cyclical unemployment rate**. In Australia, the $\\beta$ coefficient is estimated to be somewhere around 2, which means that with a 1% rise in cyclical unemployment rate we‚Äôll expect a 2% drop in output gap. We determine $\\beta$  empirically through statistics.\n\n*Note*: a negative cyclical unemployment rate implies that workers who *would be* frictionally or structurally unemployed have been temporarily pulled into jobs.\n\n## Labour Supply \u0026 Demand\nThe labour market can be modelled with the following supply and demand curves:\n\n![[economics/macroeconomics/assets/labour-supply-and-demand.png|400]]\n\n- *Marginal product of labour*, $MPL$ ‚Äî the additional output produced when you supply an extra 1 unit of labour (with all other factors of production held constant). \n- *Value of marginal product of labour*, $VMPL$ ‚Äî the monetary value of the additional output produced for each extra unit of labour, ie. $p\\times MPL$, where $p$ is the price per unit of output. This represents the labour demand curve.\n\t- Improvements to worker productivity (eg. more capital goods or better technology) will shift the labour demand curve to the right.\n\t- *Diminishing marginal product*. The ability of each additional worker to help us diminishes. Each new worker produces less than the previous. It‚Äôs a valid assumption when you‚Äôre holding capital fixed.\n\t- The optimal amount for a firm is when $\\text{marginal benefit}=\\text{marginal cost}$, ie. when $VMPL$ gained for an additional work is greater than or equal to the cost of hiring that extra worker.\n- *Real wage*, $\\frac{W}{P}$‚Äî the nominal wage divided by some measure of the price of goods \u0026 services (eg. CPI).\n\n**Observations**\n- Shifts in the aggregate labour supply curve can happen due to immigration, birth rate changes, retirement age changes, and any number of other things that influence the general willingness for the population to participate in the labour market.\n- At equilibrium, everyone who is willing to work for the market real wage *will* be employed.\n- Factors such as minimum wage laws, labour unions, taxes keep us away from market equilibrium real wage.\n\t![[economics/macroeconomics/assets/minimum-wage-on-labour-market.png|300]]\n\tHere, $L^s-L^d$ is the number of people who *would be willing* to work but cannot find employment.\n- A higher minimum wage will increase unemployment rates, *theoretically*.\n\n\t![[economics/macroeconomics/assets/labour-tax.png|300]]\n\t\n\tAdding taxes on labour will pull the labour supply curve left since fewer people will be willing to work for a lower net wage.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Liquidity":{"title":"Liquidity","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Monetary-Policy":{"title":"Monetary Policy","content":"\nMonetary policy is a modification of the [[economics/macroeconomics/Monetary Policy#Money Supply|supply of money]] by the [[economics/macroeconomics/Central Bank|Central bank]], usually in an effort to reduce [[economics/macroeconomics/Inflation|inflation]], [[economics/macroeconomics/Interest|interest rates]] or some other macroeconomic variable, and to ensure the stability of a country‚Äôs currency, minimal unemployment rate, and general welfare of citizens. \n\nCentral banks will announce a **target** value for the macroeconomic variable they're trying to influence. For instance, most central banks announce a target inflation rate of $2$ to $3\\%$ on average. To actually work towards achieving such a target, the central bank will tweak a variable called an **instrument** that these macroeconomic variables, of which the central banks cannot directly control, depend on. The [[economics/macroeconomics/Cash Rate|cash rate]] is one of the most influential policy instruments the RBA tweaks in monetary policies.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Money":{"title":"Money","content":"\nFundamentally, *money* is a:\n1. **Medium of exchange** ‚Äî an asset that makes trading efficient by eliminating the *inefficiencies of bartering*, a form of trading where two parties exchange goods and relies on mutual desire of the others‚Äô goods, called a *[double coincidence of wants](https://en.wikipedia.org/wiki/Coincidence_of_wants)*.\n   \n   Eg. in bartering, you might trade a video game for someone‚Äôs book, but they must be someone who wants that video game for them to agree to that exchange.\n    - *Commodity currencies* ‚Äî money in the form of assets which have intrinsic value, such as precious metals.\n    - *Fiat money* ‚Äî money in the form of something that has no/very little intrinsic value, such as a cash note. \n2. **Unit of account** ‚Äî the value of everything is measured in terms of the same standard, a dollar, in the same way that all lengths are quantifiable with the standard unit, the *meter*.\n3. **Store of value** ‚Äî money can be accumulated and be used to acquire things in the future. People collectively trust in the value of holding money over time.\n   \n    Money is not the only store of value. You could store your value in the form of other assets like a house or shares. Money, being the medium of exchange, has the advantage of being *perfectly liquid* meaning that you can directly use it to purchase something. You can‚Äôt use a house to purchase something, at least not directly.\n\n\u003e Australia's physical currency is produced by the RBA and [Royal Australian Mint](https://www.ramint.gov.au/).\n\n### Money Measures\nIn modern economies, money takes the form of _physical currency_ (notes/coins) and private bank deposits.\n\nSome standard measures of money used by Australia. *Some figures as of 2022, sourced from the [RBA](https://www.rba.gov.au/publications/bulletin/2018/sep/money-in-the-australian-economy.html)*\n| Currency    | Description                                                                                   | value             |\n| ----------- | --------------------------------------------------------------------------------------------- | ----------------- |\n| Currency    | Physical notes and coins produced by the [[economics/macroeconomics/Sectors\\|public sector]]. | ~74 billion AUD   |\n| M1          | *Currency*, plus private bank deposits.                                                       | ~357 billion AUD  |\n| M3          | *M1*, plus any deposits made to non-banks.                                                    | ~2086 billion AUD |\n| Broad money | *M3*, plus all the money borrowed from private sector.                                        | ~2096 billion AUD |\n\n### Money Supply\nMoney supply is the amount of money circulating in the economy. It can be a measure of currency, M1, or other standard measures of money.\n\n### Money Demand\nMoney demand is basically how much money we, in aggregate, would like to hold in our bank accounts (as opposed to lower liquidity assets):\n$$\\colorbox{#FFFFBF}{$M^D=P\\times L(Y, i)$},$$\nwhere $P$ is the aggregate price level and $L$ is the [liquidity preference function](https://en.wikipedia.org/wiki/Liquidity_preference), which is a function of real GDP and interest rate. A decrease in the [[economics/microeconomics/Opportunity Cost|opportunity cost]] of holding money will shift the money demand curve up.\n\nThe *liquidity preference function* looks like this:\n\n![[economics/macroeconomics/assets/liquidity-preference-function.png|500]]\n*Sourced from [Intelligent Economist](https://www.intelligenteconomist.com/liquidity-preference-theory/).*\n\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Private-Banks":{"title":"Private Banks","content":"\nPrivate banks are *financial intermediaries* that make household savings available for borrowing. \n\nWhen you make a deposit of physical currency to a bank, you are converting physical currency into an increase in the number representing the the value of your bank account. \n\nDeposits represent a liability for the bank. \n\nBanks make money by incentivising people to make deposits that they can earn a small interest on, and then making that deposited money available for borrowing at a higher interest rate. The money they make is in the difference between the two.\n\n### Bank Balance Sheet\n\n![[economics/macroeconomics/assets/private-bank-balance-sheet.png|400]]\n\nTo start a bank, you need an initial fund, called the 'shareholders' equity capital', or just 'equity'. Suppose you start a bank with $100 AUD equity. This also means the bank has $100 in its *reserves*.\n\n![[economics/macroeconomics/assets/private-bank-initial-balance.png|300]]\n\nSuppose a customer gets a $1000 loan from our bank. They'd have a deposit account with $1000. Our balance sheet would record a $1000 loan as an *illiquid* financial asset and a deposit of $1000. \n\nNote that we essentially 'created' money out of thin air. We say that the borrower has $1000 available, but we don't need to actually provide it until they withdraw it from our reserves. When they do withdraw more than is in our reserves, we must either attract more deposits to build up our reserves or borrow it from someplace else. If we fail to do either, then we'll become *insolvent*, ie. unable to pay back depositors and therefore operate.\n\nWe must do our best to ensure that $\\text{Assets} \u003e \\text{Liabilities}$.\n\n### Bank Run\nWhen someone wants to withdraw more money than the bank has in its reserves, then it‚Äôll have to actively attract more deposits *or* they‚Äôll have to resort to borrowing the necessary money from the central bank or other financial institutions in the [[economics/macroeconomics/Central Bank|overnight cash market]].\n\nA bank run is when *a lot of people* all try to withdraw their deposits in full from the bank, and the bank becomes *insolvent*, where the bank is no longer able to pay back people's deposits. The unfortunate thing is that the mass panic about the bank becoming insolvent is what *causes* the bank to become insolvent, just like how [panic buying](https://en.wikipedia.org/wiki/Panic_buying) causes shortages.\n\nEven when $\\text{Assets}\u003e\\text{Liabilities}$ on the balance sheet, it is still possible for banks to become insolvent if they have insufficient *liquid* assets to meet a sudden increase in demand for withdrawal.\n\n#### Surviving Bank Runs\n**Central bank bailout**\nThe [[economics/macroeconomics/Central Bank|central bank]] can help bail out banks that are on the verge of becoming insolvent, however they shouldn‚Äôt do this liberally. The general rule is that the central bank should lend to a bank only if it is *solvent* (ie. $\\text{Assets} \u003e \\text{Liabilities}$ in their balance sheet), but they're simply just lacking in *liquid* assets to pay deposits with.\n\n**Deposit insurance**\nGovernments can provide deposit insurance that guarantee you can withdraw currency up to some maximum value. In Australia, the government promises you deposits of up to 250000 AUD can be withdrawn without fear of the bank losing your savings. This insurance doesn‚Äôt come for free ‚Äî the government charges a fee to banks to have this insurance, and the banks in turn charge the depositor by lowering the deposit rates or charging more admin fees.\n\n### Prudential Regulations\nGovernment regulations set by [APRA](https://www.apra.gov.au/what-prudential-regulation), called 'prudential' or 'macro-prudential' regulations, require banks (and other financial institutions like super funds, insurance companies, etc.) to adhere to certain balance sheet values in order to prevent becoming insolvent.\n\nFor a bank, there are the following ratios that must be above/below a prescribed safe value:\n1. **Leverage ratio** ‚Äî $\\frac{\\text{Loans}}{\\text{Equity}}$ should be below a ceiling value. \n\t- Note that $\\text{Equity = Loans + Reserves - Debt}$. Equity provides a buffer to prevent banks becoming insolvent.\n1. **Reserve-deposit ratio** (*liquidity coverage ratio*) ‚Äî $\\frac{\\text{Reserves}}{\\text{Deposits}}$ should be above some floor value. It's also called 'liquidity coverage' ratio because there must be sufficient liquid reserves to meet sudden withdrawal demand.\n2. **Capital ratios** ‚Äî a ratio of equity to a weighted risk measure of their assets. A [[economics/macroeconomics/Bonds|government bond]], for example, is far less risky financial asset than a mortgage arranged with someone with low income.\n3. **Net stable funding ratios** ‚Äî a value associated with the sources of bank funding. For example, longer-term loans corresponds to a lower likelihood of currency withdrawal.\n4. **Loan to value ratio** ‚Äî a limit on the amount someone can borrow to hold a certain asset. For instance, a loan-to-value ratio of $0.8$ means that banks will lend a maximum of $80\\%$ of the market value of an asset.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Public-Debt":{"title":"Public Debt","content":"\n**Public debt**, also called *government debt* or *national debt*, is the financial liabilities of the government. Since raising taxes is not always reasonable, nearly all governments have to borrow money from the [[economics/macroeconomics/Sectors|private sector]] to meet their expenses. The main way governments borrow money is buy selling *securities* known as **[[economics/macroeconomics/Bonds|government bonds]]**. \n\nThe government's *budget balance* is expressed as: \n$$\n\tBB=T-G,\n$$\nwhere $T$ is taxes and $G$ is government spending.\n- When $BB \u003c 0$, we say there's a **budget deficit**.\n- When $BB \u003e 0$, we say there's a **budget surplus**.\n\nThe governments debt at a time $t$ is expressed as $D_t = D_{t-1} - BB_t$, basically the previous debt minus the *budget balance* over the time between $t-1$ and $t$.\n\n### Golden Rule of Public Investment\nA golden rule for public investment says:\n- Government expenditures that benefit the current taxpayers should be paid for using *their* taxes.\n- Government investments that are long-lived, such as the construction of hospitals, should be funded through government borrowing.\n\nThe aim is to be fairer to each generation. Your children shouldn‚Äôt have to pay off debts that paid for things which you can enjoy now but which they cannot enjoy in their time.\n\n### Government Budget Constraint\nThe government budget constraint equation is given as:\n$$\n\\begin{align}\n\t-(T_t-G_t) \u0026= D_t-D_{t-1} \\\\ \n\t-(\\tilde{T_t} - TR_t - rD_{t-1} - G_t)\u0026= D_t - D_{t-1},\\\\\n\\end{align}\n$$\nrearranging terms, we have:\n$$\n\t\\underbrace{G_t+TR_t+rD_{t-1}}_{\\text{Expenses}} = \\underbrace{\\tilde{T_t} + D_t - D_{t-1}}_{\\text{Funding sources}}.\n$$\nRemember, $T_t=\\tilde{T_t}-TR_t-rD_{t-1}$ consists of tax revenue $\\tilde{T_t}$ , transfer payments $TR_t$ and interest on debt $rD_{t-1}$. \n\nWe call the equation above the government 'budget constraint' because we can see that the only way to fund expenses is to either raise taxes or borrow.\n\n### Sustainability of Public Debt\nThe *debt-to-GDP ratio* is the standard way we assess whether a country's total public debt is sustainable in the long-term. \n\nAustralia's public debt-to-GDP ratio is sitting at ~60% as of 2022, which is regarded as sustainable. Japan's debt-to-GDP ratio, however, is at about +200%, the highest of any developed country. Public debt may be owed to domestic households or firms, or foreign residents.\n\nAn equation for the change in debt-to-GDP ratio is derived from:\n\n$$\n\\begin{align}\n\tD_t \u0026= D_{t-1} - BB_t \\\\\n\t\u0026=D_{t-1}+rD_{t-1}-(\\tilde{T_t}-G_t - TR_t) \\\\\n\t\u0026=D_{t-1}+rD_{t-1}-PBB_t \\\\\n\t\\frac{D_t}{Y_t}\t\u0026=\\frac{D_{t-1}(1+r)}{Y_t}-\\frac{PBB_t}{Y_t}\n\\end{align}\n$$\n\nAssuming GDP grows at a constant rate $g$, we can use $Y_t=Y_{t-1}(1+g)$ to obtain:\n\n$$\n\\begin{align}\n\t\\frac{D_t}{Y_t} \u0026= \\frac{D_{t-1}(1+r)}{Y_{t-1}(1+g)}-\\frac{PBB_t}{Y_t} \\\\\n\td_t\u0026= \\frac{d_{t-1}(1+r)}{1+g}-pbb_t\\\\\n\td_t-d_{t-1}\u0026= \\frac{(r-g)d_{t-1}}{1+g} - pbb_t \\\\\n\t\\Delta d_t \u0026= \\frac{(r-g)d_{t-1}}{1+g} - pbb_t.\n\\end{align}\n$$\n-   $g$ is the real growth rate of GDP.\n-   $r$ is the real interest rate.\n-   $PBB=\\tilde{T_t}-G_t - TR_t$ is the *primary budget balance*, consisting of taxes $\\tilde{T_t}$, government bond interest payments $G_t$, and transfer payments $TR_t$.\n-   $pbb_t=\\frac{PBB}{Y}$.\n\nFrom the above equation, running a budget surplus (ie. making $pbb_t$ positive) is the best way to reduce debt. Alternatively, if you can achieve $r\u003cg$, then you can still reduce debt that way.\n\nIn general, a higher public debt to GDP ratio results in a reduction in real GDP growth.\n\n**Crowding out:**\nSee [[economics/macroeconomics/Savings and Investments|savings and investment]]. When the government borrows more, it tends to shift the national savings curve to the left (remember that national savings is a function of government balance), causing the equilibrium real interest rate to rise and therefore the investment demand curve to fall.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Quantity-Theory":{"title":"Quantity Theory","content":"\nThe *quantity theory of money* asserts that the price of goods and services is proportional to the *money supply* in the economy, assuming everything else is held constant. Basically, if you double how much money exists in the economy, then prices will simply double in response over time due to inflation.\n\n### Velocity of Money\nThe *'velocity' of money* is a measure of the rate at which mone circulates in the economy. It's the number of times $1 is exchanged in a time period. A higher velocity of money is indicative of economic growth.\n\nThe velocity of money is calculated as the ratio of nominal GDP to the money supply,\n\n$$\n\\begin{align}\n\tV \u0026\\equiv \\frac{Y_\\text{nominal}}{M} \\\\\n\t\u0026\\equiv \\frac{PY_\\text{real}}{M},\n\\end{align}\n$$\nwith $P$ being the aggregate price level.\n\nWhen we assume that $Y$ and $M$ are exogenous, or in other words, constant, then we'll have\n\n$$\n\tP \\propto M,\n$$\n$$\n\t\\Delta P=\\colorbox{#ffffbf}{$\\pi = \\Delta M$}.\n$$\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Savings-and-Investments":{"title":"Savings and Investments","content":"\n## Investment\nAn **investment**, in macroeconomics, is the act of purchasing new capital goods to bolster productivity.\n- **Private investment** ‚Äî any investment made by households/businesses. Eg. buying equipment, software, computers, buildings (new dwelling), etc.\n- **Public investment** ‚Äî any investment made by the government such as infrastructure.\n\n**Capital stock** ‚Äî encompasses everything in an economy that enables businesses to generate future sales such as buildings, bridges, literally everything like that.\n- *Accumulation of capital stock*: $K_1 = I_1 + \\underbrace{ K_0(1-\\delta)}_{\\text{Depreciation}}$. The stock at the end of a period is equal to the stock at the start of the period, plus any more investments made over that period, minus the depreciation of the stock at the start.\n    - Typically, capital goods are *durable*, meaning they can be consumed multiple times over a longer time period, and can be sold after some use.\n\nThe decision of whether a business purchases capital goods (ie. invests) follows the familiar marginal cost-benefit analysis in microeconomics. \n- Marginal benefit: **value of the marginal product of capital**, $VMPK = MPK\\times \\text{price per unit}$ ‚Äî value of the marginal product of capital ($MPK$).\n- Marginal cost: **user cost of capital**, $UC = P_K + \\underbrace{iP_K}_{\\text{Interest}}-\\underbrace{(1 - \\delta)}_{\\text{Dep.}} \\times\\underbrace{(P_K+\\Delta P_K)}_{\\text{End-of-year market price}}$ ‚Äî the cost for holding the capital asset for 1 year, for example. Note that we can resell the capital good since it‚Äôs *durable*.\n    - A simpler approximation is given as $UC\\approx P_K\\big( i + \\delta - \\frac{\\Delta P_K}{P_K} \\big)$.\n    - An even further simplification is assuming that changes in the market price $\\frac{\\Delta P_K}{P_K}$ is equal to inflation $\\pi$, giving $UC\\approx P_K(r+\\delta)$, where $r = i - \\pi$.\n\nWe will only invest in a capital good if the **value of marginal product of capital** (margin benefit) equals the **user cost of capital** (marginal cost), ie. when $VMPK=UC$.\n\n![[economics/macroeconomics/assets/investment-demand-curve.png|200]]\n\n### Savings (in Closed Economies)\nThe amount of **savings** is the difference between income and consumption.\n- **Household savings** ‚Äî $\\text{gross household saving} = \\text{disposable income }- \\text{ consumption expenditure}$, where:\n    - Disposable income can be broken down as: $Y_\\text{disp. income} = Y_\\text{gross income} - \\text{taxes}+\\text{government transfers} + \\text{government interest payments} - \\text{business retained earnings}$.\n        - *Government transfers* is the money you receive from the government directly ‚Äòfor free‚Äô (eg. [youth allowance](https://www.servicesaustralia.gov.au/youth-allowance)).\n        - *Government interest payments* is the interest the government pays you for holding _government [[economics/macroeconomics/Bonds|bonds]]_.\n        - Business retained earnings is the profit that a business won‚Äôt pay out as dividends to [[finance/investment/Stocks|shareholders]].\n    - *Accumulation of wealth*: $W_1 = W_0 + \\text{household savings} + \\text{net capital gains}$. The change in wealth for a household is given by how much they saved and how much their assets have gained in value.\n-   **Business savings** ‚Äî savings are in the form of *retained earnings*, ie. the profit that businesses don‚Äôt distribute to owners and shareholders as dividends.\n-   **Government savings** ‚Äî $\\text{public savings} = \\text{taxes} - \\text{gov. transfers} - \\text{gov. interest payments}$ also called [[economics/macroeconomics/Public Debt|government budget balance]]. \n\n**National Saving (Supply) and Investment Demand:**\n_National saving_ is the *sum* of all household, business and government savings: $NS(r)= S(r)+\\text{Business Savings} + \\text{Gov. Savings}$, where business and government savings are *exogenous* variables, that is, variables whose value is determined by factors outside the current model.\n\nCombining the national saving curve with the investment demand curve, we get an aggregate savings supply and aggregate investment demand graph curve for a closed economy. Remember, both curves depend on the real interest rate $r$. The equilibrium condition is when $NS(r) = I(r)$.\n\n![[economics/macroeconomics/assets/national-savings-vs-investment-demand-curve.png|500]]\n\nWhen the [[economics/macroeconomics/Central Bank|RBA]] sets a higher [[economics/macroeconomics/Cash Rate|interest rate]], that means higher borrowing costs, so people will tend to save instead of invest. Likewise, setting a lower interest rate encourages households to consume more and businesses to invest more.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/macroeconomics/Sectors":{"title":"Sectors","content":"\n*Sectors* are partitions of the economy that contain similar business activities. They might produce similar goods or services such as mining or farming.\n\n![[economics/macroeconomics/assets/sectors-of-the-economy.png|350]]\n\nIn macroeconomics, we often partition the economy into the **private sector** and **public sector**.\nThe *private sector* is the part of the economy that consists of households and businesses. The government and anything that's associated with the government constitutes the *public sector*.\n","lastmodified":"2022-09-12T23:20:41.810338531Z","tags":null},"/economics/microeconomics/Externalities":{"title":"Externalities","content":"\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/economics/microeconomics/Market":{"title":"Market","content":"\nA market consists of all the buyers and sellers making transactions for a specific class of good or service. For instance, there is a wheat market, stock market, [[economics/macroeconomics/Labour Market|labour market]], even dating market... and so on.\n\n### Perfectly Competitive Markets\nTODO.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/economics/microeconomics/Opportunity-Cost":{"title":"Opportunity Cost","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/economics/microeconomics/Supply-and-Demand":{"title":"Supply and Demand","content":"\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/Effective-Engineer":{"title":"Effective Engineer","content":"\nSome enlightening non-technical ideas I've come across and expanded upon which have helped me be a more effective engineer.\n\n---\n\n### Soft Skills\n*Soft skills* encompass communication skills, teamwork skills, work ethic and just having a growth mindset and seeing your interactions with others as a non-zero sum game.\n- [[effective-engineer/soft-skills/Charisma|Charisma]]\n- [[effective-engineer/soft-skills/Negotiation|Negotiation]]\n- [[effective-engineer/soft-skills/Leadership|Leadership]]\n- [[effective-engineer/soft-skills/Performance Reviews|Performance reviews]]\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/entrepreneurship/Entrepreneurship":{"title":"Entrepreneurship","content":"\nSome scattered ideas about entrepreneurship, sourced from books:\n- *Complete Software Developer's Career Guide* by John Sonmez.\n- *So Good They Can't Ignore You* by Cal Newport.\n\n\u003e \"Assume the business will fail, then do the smallest amount of initial setup and work to get it started.\" ‚Äî John Sonmez\n\nIn other words, direct as much of your efforts to what matters ‚Äî which is getting your idea developed and ship as soon as possible. Forget all the branding and business laws, etc. That all matters, but not if your business isn't going to survive.\n\nStart building the business *during* your 9-5 job. If you can't tolerate this, give up. You're not mentally fit for this pursuit.\n\nLearn [[effective-engineer/entrepreneurship/Sales|sales]] and [[effective-engineer/entrepreneurship/Marketing|marketing]]. Successful entrepreneurs who aren't competent salespeople don't exist.\n\nBe prepared for life to truly suck as an entrepreneur.\n\n\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/entrepreneurship/Marketing":{"title":"Marketing","content":"\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/entrepreneurship/Sales":{"title":"Sales","content":"\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/passion/Work-Life-Balance":{"title":"Work-Life Balance","content":"\nThis is a heavily opinionated topic. People have deeply conflicting beliefs of how concretely one should segregate 'work' and 'life'.\n\nSome probably controversial opinions I hold, sourced from people I look up to:\n- Work/life balance shouldn't exist. You just have the wrong mindset if you're worrying about it.\n\t\u003e \"To achieve true work/life balance, at least how I see it, is to not achieve it at all, but to blue the lines so well that everything becomes 'life'\" ‚Äî John Sonmez.\n- Give your company your 40 hours per week, then give however much you can beyond that to working for yourself. Spend the time you would otherwise spend overworking by working on other things in your life that make you more valuable, like your own software projects, online courses, reading, a side business, etc.\n- You have the capacity to enjoy literally every second of your life, provided you are *present*.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/productivity/Context-Switching":{"title":"Context Switching","content":"\nContext switching is very bad.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/productivity/Deep-Work":{"title":"","content":"\u003e These ideas are sourced from Cal Newport's 'Deep Work' book, my personal observations about when I am most effective in complex technical endeavours and the blogs of some of the most effective software engineers out there.\n\n*Deep work* sessions are long *uninterrupted* periods of time where you are able to \"learn hard things fast and produce at an elite level\".\n\nTODO: Link context switching\n\nYour output quantity/quality is simply $\\text{Time spent} \\times \\text{Intensity of focus}$. Time is an incredibly scarce resource, so the main way to improve your output is to increase the intensity of focus.\n- Avoid emails like the plague. Mute all email notifications, at least for the deep work sessions you schedule.\n- Avoid TODO[[effective-engineer/productivity/Context Switching]]. This is incredibly deadly for software engineers where working on a project or fixing a bug requires you to hold so much information and context inside your brain's working memory (much like the volatile main memory of computer systems).\n\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/soft-skills/Charisma":{"title":"Charisma","content":"\n### First Impressions\nThey can't be reversed. Humility is always an excellent quality, however aim to represent yourself with an authentic level of confidence *and* curiosity. \n\n### Dress Code\n*The way that you dress matters*, even when the dress code is non-existent where you work (as they often are for tech companies). People will always judge you based on your appearance, no exceptions, and that's a fact of life. See the ['Halo Effect'](https://en.wikipedia.org/wiki/Halo_effect).\n\nFurthermore, dressing in professional clothes reinforces your identity as a professional to yourself and others, and you will tend to conduct yourself in a way that is congruent with this identity.\n\n### Contradictions\nPersonality/appearance contrasts are polarising and inexplicably magnetic. \n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/soft-skills/Conflict":{"title":"Soft Skills","content":"\n\u003e Ideas sourced from 'How to Win Friends and Influence People' by Dale Carnegie and 'The Complete Software Developer's Career Guide' by John Sonmez.\n\nDo not avoid it when it arises. It's *always* mutually beneficial to resolve it. \n\n\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/soft-skills/Leadership":{"title":"Leadership","content":"\n\u003e Ideas sourced primarily from 'Extreme Ownership' by Jocko Willink.\n\n\n\n### Lead By Example\nGood leaders *always lead by example* and do themselves what they ask from their team. They will always hold themselves to a higher level of accountability before the team.\n\nThis implies that you must always be willing to get into the front lines, just like in the battlefield as a general. If you want your team to adopt Agile methodologies, you must demonstrate that you're actively using it first. If you want your team to have a strong work ethic, you must demonstrate that yourself. \n\n### Responsibility\nBeing a good leader means to assume $100\\%$ responsible for **every** single failure you encounter in your team's endeavours, and ultimately in your personal life and relationships. You are always to blame. *No exceptions*.\n\u003e There are no bad teams, only bad leaders.\n\nWhen your team members screw up or even actively sabotage things, it is still your fault. You could have trained them better, confirmed that they were in agreeance with plans, etc. Likewise, when the team is successful, you must ensure the credit is distributed to the team's members, *not to yourself*.\n\n### Subordinate Leadership (Delegation)\nTrain and trust your members.\n\nTODO.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/soft-skills/Mentorship":{"title":"Mentorship","content":"\n### Selflessness\nAlways show your willingness to help your peers, *even to the extent of putting them before yourself*. It is much better to build a reputation as a selfless, giving person that aggressively pushes themselves and everyone else up instead of *only* themselves.\n\nCompetition is good, but drop any desire to 'beat' the other person in your personal interactions with them. Always demonstrate authentic selflessness and a desire to see the other person succeed. \n\nStop treating your career as a zero-sum game. Drop the idea that you need to beat everyone else and keep your knowledge and 'secrets' hidden to maximise your job security.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/soft-skills/Negotiation":{"title":"Negotiation","content":"\nThe consensus seems to be to *always negotiate*.\n\n\n\u003e Ideas sourced from 'Never Split the Difference' by Chris Voss.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/soft-skills/Networking":{"title":"Networking","content":"\n### Networking Misconceptions\nNetworking, the act of deliberately developing professional contacts, must be done with the intent of giving as many people what they want as possible. Approaching it with a self-serving mindset is incorrect. For this reason, it is best done when you're *not actively looking for things from people*, ie. a job. When you make networking about providing value to others, it stops being something you dread doing. It's a long-term investment and is meant to be built over years and to deliver value over years, not days.\n\nNetworking is to be done everywhere, not just at your university on-campus networking fair. You should seek opportunities all the time to deliver value to the new people you come across.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/soft-skills/Performance-Reviews":{"title":"Performance Reviews","content":"\nPerformance reviews are *bullshit*, but you must play the game to win.\n\n### Schedule Regular Reviews\nYou must have regular one-on-one discussion with your manager/boss about your performance. Ideally weekly or fortnightly at a minimum.\n\nDirectly ask how you are doing and what can be improved. Make your goals known to your manager/boss. For instance, if you're trying to get promoted from an L3 engineer to an L4 engineer, make that obvious every conversation. You must be clear about your goals if they're promotion-related because a good review **does not imply** a promotion!\n\nMaintain [[effective-engineer/soft-skills/Performance Reviews#Document Everything|documentation]] for their response (an email or a Google Docs document, for example). People are subconsciously inclined to stay congruent with their past behaviours and statements, according to the [Consistency Principle of Persuasion](https://en.wikipedia.org/wiki/Consistency_(negotiation)). If they communicate that you're meeting the requirements for whatever goal, then documenting things will compel them to commit to what they said.\n\n### Document Everything\n*Document everything* to a borderline autistic extent. \n1. Create daily logs and weekly reports of your high-level progress.\n2. Manage a growing knowledgebase.\n3. Note the books you've read and other educational pursuits that show improvement.\n4. Save all the emails where you have received praise for you work.\n\nPut up a fight if you haven't been promoted when you expected to be. If you document *everything*, you'll have a mountain of evidence to support your case that cannot be ignored.\n\n### Promotions \u0026 Raises\nPrefer adopting more responsibility and 'bigger' job titles than more money, because the money will naturally follow in the long term. You cannot attain a promotion by working hard quietly, you absolutely must be aggressive in pursuit of it. You don't get opportunities - you make them.  \n\nAgain, make it absolutely clear to management that you want a promotion and intend to [[effective-engineer/soft-skills/Performance Reviews#Document Everything|prove]] you meet the requirements for one.\n\nAn extremely powerful case for a promotion is if you can prove, with numbers, that you are worth more than you cost.\n\n**Avoid ultimatums**: Although it sounds like the most powerful 'checkmate' move to make in order to get what you want, don't give your boss an ultimatum where you demand a promotion/pay rise or leave the job by accepting a higher-paying offer. You'll piss off people, but more importantly they'll be motivated to find a replacement for you because you'll be seen to be more of a liability than an asset. Some companies have strict policies that compel managers to never negotiate.\n\n**Job hop**: it's a reliable way to get a 'promotion', just at another company. Doing it every 2-3 years seems to be the norm, and it forces you to constantly stay in demand.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/effective-engineer/soft-skills/Personal-Brand":{"title":"Personal Brand","content":"\nUnfortunately, to have impact in this world requires you to build reputation and understanding how to influence people. To do all this, you need to build up a *personal brand*.\n\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/Finance":{"title":"Finance","content":"\nFinance is the study of money and assets and the management of them.\n\n\u003e What's the difference between finance and economics? Finance is concerned about managing money while economics is a social science focusing on how human‚Äôs make decisions around the allocation of scarce resources. Finance and economics are different disciplines, however *they inform each other*.\n\n---\n## Personal Finance \u0026 Investing\n- [[finance/investment/Investing|Investing]]\n\t- [[finance/investment/Mutual Funds|Mutual funds]]\n\t\t- [[finance/investment/Index Funds|Index funds]]\n\t\t- [[finance/investment/Exchange Traded Funds|Exchange traded funds (ETFs)]]\n\t- [[finance/investment/Stocks|Stocks]]\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Angel-Investors":{"title":"Angel Investors","content":"\nAngel investors are just really rich people who are willing to lend their own money to fund a startup's initial venture. Startups often perfer angel investors over other forms of funding because they generally get better terms.\n\nAngel investors are considered the opposite of [[finance/investment/Venture Capital|venture capitalists]], since they're focused on business viability than helping to start a business.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Collateral":{"title":"Collateral","content":"\nIn loan agreements, collateral is an asset that the borrower has to forfeit if they default on their loan. This collateral is usually valuable and can offset the loss of the lender in the case of a defaulting borrower.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Derivatives":{"title":"Derivatives","content":"\nTODO.\n\n\n[[finance/investment/Options|options]] and [[finance/investment/Futures|futures]].\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Efficient-Market-Hypothesis":{"title":"Efficient Market Hypothesis","content":"\nThe *Efficient Market Hypothesis* is a theory that asserts that share prices always factor in all information, meaning they're always traded at their fair value, making it impossible for investors to 'beat the market' indefinitely. A result following from this idea is that the risk-reward tradeoff is perfectly symmetrical.\n\nThe truth of this theory is highly debated and the firmness of people's belief in it ranges on a spectrum. Strong supporters of this theory believe that no level of analysis and strategising is futile and will never produce any net profit over time. It makes sense for them to prefer investing in [[finance/investment/Investing#Active vs Passive Investing|passively managed]] investment vehicles like [[finance/investment/Index Funds|index funds]] and [[finance/investment/Exchange Traded Funds|ETFs]] instead of actively managed ones.\n\nPeople who do not support the efficient market theory will believe that it's possible for skilled and experience analysts to exploit *market inefficiencies* (which are situations where an asset's price does not accurately reflect its true value) to reliably generate a return.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Exchange-Traded-Funds":{"title":"Exchange Traded Funds","content":"\nExchange traded funds (ETFs) are a subclass of [[finance/investment/Mutual Funds|mutual funds]] that are very similar to [[finance/investment/Index Funds|index funds]], with the main difference being that you can buy/sell shares whenever the stock market is open as opposed to only once a day. ETFs and index funds are sometimes used interchangeably incorrectly.\n\nAn ETF *is* a [[finance/investment/Securities|security]], so it is tradeable and has a share price that rises/falls.\n\n### ETFs vs Index Funds\nPick index funds over ETFs if you want to remove the temptation of impulse buying/selling stocks and let you automatically reinvest earnings back into your account.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Futures":{"title":"Futures","content":"\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Hedge-Fund":{"title":"Hedge Fund","content":"\n*Hedge funds* are [[finance/investment/Investing#Active vs Passive Investing|actively managed]] services that pool together money from a bunch of investors and then use certain investment strategies to achieve high returns and will distribute a share of the profit to the clients. They're considered risky investments and sometimes are only exclusive to clients with high net worth. Part of the reason they're riskier to invest in is because they are less regulated than other investment funds like [[finance/investment/Mutual Funds|mutual funds]] and because they borrow a lot of money to take advantage of [[finance/investment/Leverage|leverage]]. \n\nIn plain English, a *hedge* is some form of protection against financial losses. To \"hedge one's bet\" means to avoid commitment in the face of difficult choices. A hedge fund therefore means, in a more literal sense, a protection of money, however they gradually got riskier after the invention of the concept in 1949.\n\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Index-Funds":{"title":"Index Funds","content":"\n*Index funds* are a subclass of [[finance/investment/Mutual Funds|mutual funds]] that are [[finance/investment/Investing#Active vs Passive Investing|passively managed]] instead of [[finance/investment/Investing#Active vs Passive Investing|actively managed]]. They track a specific [[finance/investment/Market Index|market index]].\n\n[[finance/investment/Index Funds|Index funds]], and *index investing* in general, were 'invented' by a guy named *Jack Bogle* in the 1970s, who founded [Vanguard](https://www.vanguard.com.au/). He essentially got sick of mutual funds charging people so much for active management. He's credited with being the person who has helped investors create more wealth than anyone else on the planet.\n\nThe expenses associated with *actively managed mutual funds* (those that have people monitoring investment performance) tend to be considerably higher than *passively managed mutual funds* (ie. index funds). Roughly, actively managed mutual funds often charge $1\\text{-}2\\%$ of your account balance per year while index funds charge well below $1\\%$.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Investing":{"title":"Investing","content":"\nAn *investment* is the purchase of an asset or commodity with the expectation of it producing income for you or appreciating in value. *Investing* is the set of theory and practices around making smart investments that aid you in meeting your financial goals.\n\n1. Understand the power of compounding. Start early and invest regularly.\n2. Understand [[finance/investment/Portfolio#Diversification|diversification]].\n3. Only invest in what you understand. \n4. Would you want to be an owner of that business? \n\n\u003e The main difference between a *trader* and an *investor* is how long they hold the asset. Traders focus on capitalising on short-term trends.\n\n\n### Defensive vs. Growth Investments\nInvestments are generally divided into two types: *defensive* and *growth*. Defensive investments are lower risk and tend to protect your wealth rather than grow it. Growth investments are riskier and tend to grow your wealth rather than preserve it. Usually, bonds are considered defensive assets while stocks are considered growth assets.\n\nPrefer defensive investments if you need to meet shorter-term financial goals, such as saving for a home deposit in 2 years, or to reduce the volatility of your portfolio [(source)](https://moneysmart.gov.au/how-to-invest/choose-your-investments).\n\n### Tax\nAny income you get from your investments in the form of savings interest, dividends (even if it's reinvested as part of dividend reinvestment plan), rental income, capital gains (from property, shares, crypto), etc. is taxed at your [marginal tax rate](https://moneysmart.gov.au/income-tax/income-tax-calculator). Investment income must be included in your [[finance/personal-finance/Tax Return|tax return]]. Costs involved with buying, holding and selling an investment asset is tax deductible. Even the interest accrued on a loan you take to invest in something is also tax deductible. If you pay management fees to a mutual fund or pay for investment advice, those are also tax deductible.\n\nA *tax-effective* investment is one where the tax you pay on the investment income is less than your marginal tax rate. Salary-sacrificed [[finance/personal-finance/Superannuation|super]] contributions are considered *tax-effective* since it gets taxed at a low 15%, up to a point ([source](https://moneysmart.gov.au/how-to-invest/investing-and-tax)).\n\n## Investing in the Stock Market\nSee [[finance/investment/Stock Market|stock market]].\n\n\u003e Ideas here are sourced from:\n\u003e - 'The Intelligent Investor' by Benjamin Graham\n\u003e - 'A Beginner's Guide to the Stock Market' by Mattew Krater\n\u003e - 'The Barefoot Investor' by Scott Pape\n\u003e - Investopedia articles\n\u003e - [New Money](https://www.youtube.com/c/AussieWealthCreation).\n\u003e - ... and advice from investing pioneers such as Warren Buffett, Charlie Munger, etc.\n\n### Buying, Holding and Selling Shares\n\nTrack your share purchases and the market value of the shares at the time you buy them because you can claim some [[finance/investment/Investing#Tax|tax deductions]] on them.\n\n\n### Active vs. Passive Investing\n*Active* management involves monitoring the performance of an investment portfolio and making decisions about whether to buy, sell or hold and asset. It aims to 'beat the market' by adopting certain investing strategies and does not support the [[finance/investment/Efficient Market Hypothesis|efficient market hypothesis]] which implies it's not possible to 'beat the market' over the long run.\n\n*Passive* management, known as 'index investing', is about mirroring a [[finance/investment/Market Index|market index]] and is usually associated with [[finance/investment/Index Funds|index funds]] and [[finance/investment/Exchange Traded Funds|ETFs]]. They help *diversify* you across the whole part of the market.\n\nWhether active or passive investment outperforms the other in the long term is an ongoing debate.\n\nWarren Buffett, the world's most successful active *value investor*, recommends most people to pursue passive investing over attempting to do active investing yourself because passive investing removes the irrationality from buy/sell decisions that you're victim to.\n\n### Value vs. Growth Investing\n*Value investing* is about being able to see the intrinsic value of something, then buying that thing when its priced lower than the intrinsic value. *Value investors* believe the stock market to overreact to good or bad news and set prices that aren't reflective of the true value of a stock, which gives rise to an opportunity to profit.\n\nPut simply, if you know the *true* value of jewelry, and you find some overlooked cheap jewelry in a garage sale, then you would obviously exploit the opportunity.\n\n*Growth investing*, on the other hand, is about investing in the stock of smaller companies whose earnings are expected to climb at a much higher rate than established companies.\n\n### Stocks vs. Bonds\nStocks represent ownership, bonds represent loans. Each have their own pros/cons, but in general: bonds are lower risk and have lower returns. When you're young and don't have strict target dates for financial goals, just go for stocks and allocate a greater percentage of your portfolio to bonds when you require more certainty about your investment returns.\n\n### Capital Gains\nTODO.\n\nTODO: *Capital gains tax*.\n\n\n### Investing Strategies\n\n\u003e Random youtube comment: For beginners, i would go 95-97% funds / etfs and 3%-5% a stock you like. Gets you into the habit of researching stocks and looking at daily life and what companies impact you.\n\n\n#### Index Funds\nIt's widely recommended that most investors should just make monthly investments ([[finance/investment/Investing#Dollar-Cost Averaging DCA|dollar-cost averaging]]) to a low-cost [[finance/investment/Index Funds|index fund]].\n\u003e \"Most investors, both institutional and individual, will find that the best way to own common stocks is through an index fund that charges minimal fees. Those following this path are sure to beat the net results (after fees and expenses) delivered by the great majority of investment professionals\" ‚Äî Warren Buffett's 1996 Letter to Shareholders.\n- In Australia in year 2022, index funds in the S\u0026P/ASX 200 outperformed $\\approx 70\\text{-}80\\%$ of actively managed funds run by professionals.\n\nJack Bogle recommends to always commit to investing in an index fund, even if they're priced at all-time highs and you're convinced that they're overvalued. \n\n![[finance/investment/assets/s\u0026p-investing-in-local-peaks.png|500]]\n\n\u003e \"Never think you know more than the market does.\" ‚Äî Jack Bogle.\n\nHistorically, the only time investing in index funds has not worked has been when people cave into their emotions and deviate from their commitment to dollar-cost average invest into an index fund and attempt to beat the market on their own. Just stay the course.\n\n#### Dollar-Cost Averaging (DCA)\nTODO.\n\nDCA is about regularly putting money into an investment pursuit over the long term, rather than chucking in a huge sum at 'the right time'.\n\nWarren Buffett recommends to do this and commit to it for the long term.\n\nDollar-cost averaging protects you from making irrational decisions and the effects of large market fluctuations.\n\n![[finance/investment/assets/S\u0026P-dollar-cost-averaging.png|400]]\n\n#### The Buffett/Munger Approach\n1. Understand the business.\n2. Check for a durable competitive advantage.\n3. Management has integrity and talent.\n4. Ensure a marign of safety. \n\nTODO: Explain each.\n\n#### Patience\n\u003e \"You don't make money when you buy and you don't make money when you sell. You make money when you wait.\" ‚Äî Charlie Munger.\n\nFor active investors, be patient. For passive investors, proceed to regularly invest as normal.\n\n#### Emotions\n\nAvoid headlines.\n\n### Macroeconomic Effects\nMacroeconomic events and variables have a huge effect on stock market performance.\n\n#### Investing During High Inflation\n\u003e \"Like virginity, a stable price level seems capable of maintenance, but not of restoration\" ‚Äî Warren Buffett describing inflation and how escalating prices are permanent.\n\nA favourable company to invest in during inflationary periods has two properties:\n1. The freedom to jack up or fine-tune their prices without significantly dropping market share values. Eg. Apple, since they have a unique competitve advantage, can freely increase their prices without huge consequences to their share price. People generally won't try to substitute away to other competitors.\n2.  Low working capital. In other words, the company should be able to generate a lot of cash from little input and have a scalable business model. Eg. Meta can just increase ad frequency to generate more cash, while Ford would have to invest in new factories and equipment.\nAdvice [sourced](https://arichlife.com.au/how-warren-buffett-says-to-invest-during-high-inflation/) from Warren Buffett.\n\n#### Interest Rates\nAt lower [[economics/macroeconomics/Interest|interest rates]], stock market prices will more easily rise (I think. Need a source and explanation for this).\n\nAt higher interest rates, it's harder for stock prices to rise.\n\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Leverage":{"title":"Leverage","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Market-Index":{"title":"Market Index","content":"\nhttps://www.investopedia.com/terms/m/marketindex.asp\n\nA *market index* is a value published by a financial data company that's meant to broadly capture the value of some section of a market. \n\nAn *index*, in most stats, economics and finance contexts, is just a representative value of an asset in a set of assets. *Indexes* are meant to accurately summarise the state of some market by picking out parts of the stock market and producing a value, usually by simply taking the mathematical weighted average. Indexes are created to serve as a simple indicator/benchmark of stock market performance that provide a useful summary at a glance. Note that there are indexes that also cover non-stock assets such as gold, oil, currencies, etc.\n\nTo be clear with terminology, you can't invest in an *index*, but you *can* invest in an [[finance/investment/Index Funds|index fund]] that mirrors an index such that an $n\\%$ increase in the index value will mean a corresponding $n\\%$ increase in your balance.\n\n### The 9 Major Market Indexes\n- **S\u0026P 500** captures the top companies participating in the US stock market. It's the most followed index in the world.\n- **Dow Jones Industrial Average** consists of the 30 largest companies in the US, so basically a subset of the companies in the S\u0026P 500.\n- **Nasdaq Composite Index** consists of 3000+ stocks and is heavily biased towards tech companies.\n- **MSCI World** captures majors stocks across 23 developed countries. This index provides some indication of the worldwide economic health.\n- **MSCI Emerging Markets** captures stocks across 24 emerging market countries, which are developing countries like India, China, etc.\n- **S\u0026P GSCI Commodity Index** captures commodities like oil, precious metals, agricultural produce, livestock, etc.\n- **Dow Jones Real Estate Index** captures the performance of [[finance/investment/Real Estate Investment Trusts|real estate investment trusts (REIT)]], mainly.\n- **Dollar Index** captures currency purchasing power of the US dollar relative to other major currencies.\n- **VIX**, also called the 'fear index', captures the level of fear in the stock market by tracking the price of [[finance/investment/Options|options]].\n\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Mutual-Funds":{"title":"Mutual Funds","content":"\nMutual funds are a managed investment service that collects together the money of many investors like you to purchase a specific set of [[finance/investment/Securities|securities]]. They're suited for people who want to participate in the stock market but minimise the time spent on buy/sell decisions about certain stocks.\n\nWhen you buy a share of a mutual fund, you are getting a slice of the profits they get from their investment decisions. They're managed by financial professionals, although whether this is a [[finance/investment/Investing#Active vs Passive Investing|good thing or not]] is debatable.\n\nBuying a share in a mutual fund is a good way to [[finance/investment/Portfolio#Diversification|diversify]] your investment portfolio since the mutual fund will often buy a wide range of assets.\n\nThere are many different kinds of mutual funds:\n- *Equity mutual funds* invest in stocks.\n- *Fixed-income mutual funds* invest in bonds.\n- *Index mutual funds* invest in a whole [[finance/investment/Market Index|index]] like [S\u0026P 500](https://www.investopedia.com/terms/s/sp500.asp).\n- *Country mutual funds* invest only the securities in a single country.\n- *Growth stock mutual funds* invest in [[finance/investment/Investing#Value vs Growth Investing|growth stocks]] instead of stocks in large established companies. Watch out for the *turnover ratio*.\n\n### Picking a Mutual Fund\nThe *prospectus* gives information about how the fund operates, its fees, performance data, etc.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Options":{"title":"Options","content":"\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Portfolio":{"title":"Portfolio","content":"\nAn *investment portfolio* is just a set of assets, typically [[finance/investment/Securities|securities]] like [[finance/investment/Stocks|stocks]] and [[economics/macroeconomics/Bonds|bonds]], and cash, but it can also include real estate, commodities, etc. What's inside your portfolio, or in other words, what you *asset allocation mixes* are, depends on your own *risk tolerance*, which depends largely on your age and financial goals. \n\n### Diversification\n*Diversification* is just about investing in a set of assets with varying levels of risk/return rather than fully investing in one type of asset. You can also diversify *within* an asset class. For example, when investing in shares, to diversify means to have a share portfolio spanning several companies than just 1 or a few companies.\n\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Real-Estate":{"title":"Real Estate","content":"\nTODO.\n\nNot recommended by finance book authors like Scott Pape or JL Collins as an investment strategy. \n\nUnderstand that buying a home should really be thought of as a lifestyle decision, not as an investment vehicle.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Real-Estate-Investment-Trusts":{"title":"Real Estate Investment Trust","content":"\n\n\nNote: [[books/Barefoot Investor|Barefoot Investor]] encourages you to consider REITs as an alternative investment choice to buying an investment property.\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Securities":{"title":"Securities","content":"\nA *security* is a tradable financial asset. They exist as a way for businesses and goverments to acquire money to fund their *ventures* and operations.\n\nSecurities are a type of *financial instrument*, which is a contract between parties that serves as evidence of an agreement or ownership over assets.\n\n\u003e It‚Äôs called a security ‚Äúbecause there is a secure financial contract that is transferable, meaning it has clear, standardised, recognized terms, so can be bought and sold via the financial markets,‚Äù ([source](https://english.stackexchange.com/questions/247926/how-did-security-semantically-shift-to-mean-tradable-financial-asset#:~:text=They%20are%20called%20securities%20because,sold%20via%20the%20financial%20markets.)).\n\nSecurities are divided into 3 categories mainly:\n1. Debt securities like [[economics/macroeconomics/Bonds|bonds]].\n2. Equities such as [[finance/investment/Stocks|stocks]].\n3. Derivatives such as [[finance/investment/Futures|futures]], [[finance/investment/Options|options]], etc.\n\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Stock-Market":{"title":"Stock Market","content":"\n\u003e The stock market is the greatest opportunity machine ever created.\n\nThe *stock market*, also called the *share market*, is the buy/sell [[economics/microeconomics/Market|market]] for [[finance/investment/Stocks|stocks]]. Even though it‚Äôs called ‚Äòstock market‚Äô, you can also trade other securities like [[finance/investment/Exchange Traded Funds|ETFs]], corporate [[economics/macroeconomics/Bonds|bonds]], [[finance/investment/Derivatives|derivatives]] based on stocks, commodities, currencies and bonds in the stock market. To buy stocks, you need a broker.\n\n### Stock Exchanges\nA *stock exchange* is a centralised place that has the infrastructure to facilitate the trading of stocks. NASDAQ, NYSE and ASX are examples of *stock exchanges*. Note that in stock exchanges, you're only trading with existing shareholders, not the company itself (usually).\n\n![[finance/investment/assets/asx-physical-entrance.png|250]]\n\n*The ASX's (Australian Stock Exchange) physical building.*\n\n### Understanding the Stock Market\nThe basis of the stock market's existence is the incentive for companies to acquire funding to execute their ideas and the incentive for individuals with money (called investors) to invest and benefit from the success of those companies.\n\nAs a company becomes more profitable, its stocks increase in value (demand). The reverse also happens.\n\nThe profitability of a company can fluctuate massively ‚Äî due to material shortages, leadership changes, bad publicity, new regulations, etc. \n\n\nThe stock market is an example of something closely resembling a [[economics/microeconomics/Market#Perfectly Competitive Markets|perfectly competitive market]]. Share prices are determined by [[economics/microeconomics/Supply and Demand|supply and demand]].\n\nPeople buy shares through *brokers*.\n\n\n\n\nhttps://www.youtube.com/watch?v=8QaP43sFO5A\u0026ab_channel=Benjamin\n\n\nThe stock market is a [complex adaptive system](https://en.wikipedia.org/wiki/Complex_adaptive_system). Unlike in the context of maths and science, you can't predict how the overall system behaves just by knowing how each part of the system behave. \n\n#### Things that affect the stock market\n\n- When [[economics/macroeconomics/Central Bank|central banks]] raise or drop the [[economics/macroeconomics/Cash Rate|interest rate]].\n\n\n### History of the Stock Market\n\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Stocks":{"title":"Stocks","content":"\n*Stocks* represent pieces of official ownership, called 'ownership equity', of a business. \n\nStocks are traded in the [[finance/investment/Stock Market|stock market]].\n\nStocks are [[finance/investment/Securities|securities]].\n\n\n*Shares* are the smallest denomination of company stock.\n\nOwning shares in a company makes you a *shareholder* of that company. Shareholders get to vote and sometimes get a portion of the business' profits, called [[finance/investment/Stocks#Dividends|dividends]]. If the company *becomes more profitable* between the time you bought the shares and the time you sell it, you'll have [[finance/investment/Investing#Capital Gains|capital gains]] on the shares.\n\nYour ownership is quantifiable as: $\\frac{\\text{Company X stocks that you have}}{\\text{Total Company X stocks}} \\times 100\\%$.\n\nCompanies will usually have millions or billions of total shares, called 'outstanding shares'.\n\nYour ownership gives you voting power in meetings and elections within the company. Generally, 1 share held gives you 1 vote, however this is set by the company, who can also split off shares into different classes where one class' shares have a greater weighting than another in terms of voting power.\n\n\n### FAQ\nSome questions I grappled with in trying to understand stocks.\n\n#### What is the intrinsic value of a stock?\n\n#### Why do people seem to reliably generate wealth in the stock market?\nAlthough it's seen and believed that many people lose a lot of money through trading in the stock market and that it's a risky endeavour, most investors still highly recommend you to participate in the stock market.\n\nTODO.\n\n#### What's the difference between stocks, shares and equities?\nIn everyday conversation, all 3 are the same. Formally, however, there are differences:\n- *Stock*: a representation of ownership in a company.\n- *Share*: the smallest denomination of company stock.\n- *Equity*: generally, it's the ownership of assets that have liabilities associated with them. For example, a *home equity* is the difference between the market value and the remaining balanced owed on a mortage.\n\nThe *stock market*, *share market* and *equity market* all refer to the same thing.\n\n#### Why are stocks called 'stocks'?\nIn medieval Europe, people recorded debts by etching marks on tally sticks and splitting them. When split, the stick would have a very unique pattern of splitting that was hard to tamper with. The longer part was called the 'stock', given to the lender, the shorter part was called the 'foil', given to the borrower. These sticks were considered legal proofs of transactions for hundreds of years until the 1800s.\n\n  ![[finance/investment/assets/tally-sticks.png|150]]\n  \n#### Why do companies sell stocks?\nWhen companies choose to list themselves on a *stock exchange* like the Nasdaq, they're provided with [[economics/macroeconomics/Liquidity|liquidity]] and a means to acquire money for capital investment. The tradeoff is that they're subject to greater expenses and tighter regulation.\n\nTo grow your company into an *empire* requires you to have access to a huge amount of capital, ie. money to invest in your ventures and operations. When a company can attract investors by listing themselves on the stock market, they'll be able to lease an office, hire more people, get more equipment, pursue more marketing efforts, etc.\n\nAn alternative way for companies to raise capital is to sell [[economics/macroeconomics/Bonds|bonds]]. Many companies will opt to sell both stocks and bonds. The act of selling shares is called *equity financing* and the act of selling bonds is called *debt financing*. For most startups, they simply don't have the assets to really sustainably meet debt payments, so equity financing is the preferred route, where they don't have to pay as much as they grow.\n\nCompanies can also acquire funding from [[finance/investment/Venture Capital|venture capital]] firms or [[finance/investment/Angel Investors|angel investors]].\n\n#### How do companies decide how many 'total shares' there are? Is there a difference between having a total number of shares of 1 million vs. 1 billion?\n \n\n### Dividends\nA dividend is a payment distributed by the company to shareholders, usually every 3 months. Many companies won't pay dividends and will reinvest it back into the company.\n\nThere are *dividend reinvestment plans* which automatically use the cash payment you'd usually get to buy more of the company's stock.\n\n### Common Shares vs. Preferred Shares\nShares are usually either *common shares* and *preferred shares*. Preferred shareholders get priority over common shareholders when receiving dividends and the assets if the company [[finance/investment/Stocks#Liquidation|liquidates]].\n\n### Liquidation\nLiquidation is when a business dies. When liquidated, a business' assets are distributed to shareholders proportionally based on how many shares each of them own.\n\nBusinesses die when they become *insolvent*, which means that their liquid assets \n\n### IPO (Initial Public Offering)\nAn *initial public offering* (IPO) is when a private company sells shares to the general public for the first time.\n\nTo IPO, a company must clear certain requirements by the [SEC](https://www.sec.gov/).\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/investment/Venture-Capital":{"title":"Venture Capital","content":"\nTODO. venture capital and angel investors.\n\n\n\n\n","lastmodified":"2022-09-12T23:20:41.834338729Z","tags":null},"/finance/personal-finance/Insurance":{"title":"Insurance","content":"\nInsurance is a means of guaranteeing that you will be compensated a substantial amount of money in recovery of an event like damage to an asset (property, vehicle, etc), illness, injury, death, etc. You pay insurance companies a premium and in exchange they will guarantee a safety net for you which can help you more easily bounce back from catastrophic financial events. It's a powerful psychological purchase because you have certainty that you will continue to be financially secure, even if the worst tragedies of life occur. \n\nAn ***excess*** is an out-of-pocket payment you make when you make claims. Insurance policies may let you pay a greater excess in return for a smaller premium. When you have an asset that‚Äôs covered by insurance damaged for $1000 and the excess is $400, then the insurance company pays $600.\n\nThe ***premium*** is the amount you pay as part of an insurance contract. The value of the premium takes into account the insurance company‚Äôs view on how much of a risk you are, or in other words, how likely you are to make a claim and cause them lose money.\n","lastmodified":"2022-09-12T23:20:41.838338762Z","tags":null},"/finance/personal-finance/Medicare":{"title":"Medicare","content":"\nMedicare is Australia's healthcare insurance scheme, backed by the government. All citizens and permanent residents get access to health services for free or very low costs (eg. visits to a general practitioner, medically necessary surgeries, prescription drugs, etc.).\n\nMedicare is funded through the *Medicare levy* (2% of your taxable income) and *Medicare levy surcharge*. The levy is *in addition to* your regular income tax and is collected the same way. *Everyone must pay the levy* unless they meet [some exceptional criteria](https://www.servicesaustralia.gov.au/medicare-and-tax).\n","lastmodified":"2022-09-12T23:20:41.838338762Z","tags":null},"/finance/personal-finance/Real-Estate":{"title":"Real Estate","content":"\nSources:\n- https://www.choosi.com.au/life-insurance/articles/investing-property-or-shares\n- https://moneysmart.gov.au/property-investment\n- https://www.aussiefirebug.com/property-vs-shares/\n\nLow interest rates and government incentives make real estate investment more attractive.\n\nProperty is usually less volatile and less risky.\n\n\nRental income can cover most or all of the mortgage, however you cannot rely on it because there may be times where your property is vacant.\n\n*Positive gearing* is where you take a loan to invest, but the income from the investment exceeds your loan's repayments, ie. you're getting a positive net income despite the loan repayments. *Negative gearing* is when you take a loan to invest, but the income from that investment is still lower than the loan repayment. \n- For *positively geared investments*, you have to pay tax on your rental income. For *negatively geared investments*, you can claim a tax deduction on the loss, which is better enjoyed by high income earners. \n\nProperty expenses are tax deductible. This includes interest on your mortgage.\n\nReal estate investment mostly does not require special domain knowledge.\n\n- Property is illiquid.\n- Costs associated with buying, holding and selling a property:\n    - **Stamp duty** ‚Äî a one-off tax payment associated with your purchase of a property. It's a function of location, property type and property value.\n        - Concessions/Exemptions may exist as incentives for first home buyers. \n        - It's also called *transfer duty* in states other than NSW.\n        - You must pay the stamp duty shortly after the property's purchase.\n    - Conveyancing fees\n    - Legal fees\n    - Real estate agent fees\n    - Search fees\n    - Pest and building reports\n    - Insurance\n    - Landlord insurance\n    - **Body corporate** ‚Äî \n    - Land tax\n    - Repairs and maintenance \n    - TODO: strata?\n    - Capital gains tax, if the property has increased in value\n- Settlement periods can span weeks or months.\n- You can borrow huge amounts of money to acquire a property and therefore can take advantage of higher *leverage*, which is an investment strategy involving borrowing money to increase potential returns. It's sometimes 'unfair' to compare % capital growth between shares and property if you don't account for the 'cheap' leverage you can get through acquiring a property through a mortgage.\n    - You can also borrow money to invest in shares, just not as much. Doing this is called 'investing on margin', and you are subject to *margin calls* where the lender can request back their money if the value of the securities you invest in fall below a threshold.\n\n- You must have a secure enough income stream to meet mortgage repayments.\n- You must be able to respond to increases in mortgage repayments from interest rate hikes.\n\nPicking an investment property:\n- Find areas of high growth, high rental yield, low vacancy rates.\n- What are proposed developments in the suburb?\n- Consider: \n    - Distance to reputable schools.\n    - Distance to shopping centres and transport.\n    - Garage.\n    - Bathrooms.\n\nYour property is exempt from capital gains tax if you're an Australian resident and you've lived in the home for the whole period of owning it and has not been used for business activity.\n\n**House buying process**:\n1. Contact a bank or mortgage broker to acquire a *pre-approval*. How much you can borrow is a function of your income, job history, credit rating, etc.\n2. Inspect the home for damage, broken things, pests, etc. Consider paying for a thorough pest and building inspection.\n3. Get a conveyancer to review the contract.\n\n\n","lastmodified":"2022-09-12T23:20:41.838338762Z","tags":null},"/finance/personal-finance/Superannuation":{"title":"Superannuation","content":"\n*Superannuation* is a government policy that forces your employer to skim ~10% (the [Super Guarantee rate](https://www.australiansuper.com/superannuation/superannuation-articles/2019/11/superannuation-guarantee-what-you-need-to-know)) off your salary and deposits it to your super fund. It was implemented by the Australian government to force individuals to save for retirement. It‚Äôs basically the Australian version of the US‚Äô 401k. Generally, the superannuation contributions are subject to a much more lenient tax rate (~15%).\n\nYou can access the money in your superannuation account after you reach the ‚Äòpreservation age‚Äô, which is when you‚Äôre age 55-60, however this varies. There are no (legal) ways to access your super account, barring some exceptional circumstances (on compassionate grounds, home deposits, etc.).\n\n### Super Funds\n*Super funds* are financial institutions that manage your superannuation money and will invest it for you. Examples of super funds include UniSuper, SunSuper, Cbus Super, etc. \n\nSuper funds usually give you a choice of different investment options that differ in risk/returns (‚Äògrowth‚Äô, ‚Äòbalanced‚Äô, ‚Äòconservative‚Äô, ‚Äòethical‚Äô, etc.). By default, the ‚Äòbalanced‚Äô investment option will be chosen for you which spreads your money out across shares and cash, typically 70% in shares or property and 30% in fixed interest. Some super funds may allow you more granular control over which asset classes your money is dumped into. UniSuper, for example, lets you dump however much you want into international shares, Australian shares, property, cash, etc.\n\n#### Retail Super Funds \u0026 Industry Super Funds\nThere are *retail super funds* and *industry super funds*. They differ in what they do with profits.\n\n**Retail super fund**: distributes profit to shareholders. These are usually associated with banks. Some retail super funds include Suncorp, ANZ Smart Choice Super, etc.\n\n**Industry super fund**: are not-for profit, so profits are returned to members. These include super funds like AustralianSuper, UniSuper, SunSuper. They‚Äôre called industry funds because they used to mainly be associated with specific industries, but they‚Äôre mostly open to the public now.\n\n\u003e Historically (as of 2022, at least), industry super funds have outperformed retail super funds.\n\n#### Picking a Super Fund\nAs advised by [moneysmart](https://moneysmart.gov.au/how-super-works/choosing-a-super-fund), search for the super fund's *'product disclosure statement'* and consider the following properties:\n- Investment return performance (look at the last 5 years and beyond)\n- Fees. They‚Äôre usually deducted from your balance each month and can either be a percentage or fixed amount.\n- [[finance/personal-finance/Insurance|Insurance]]. Super funds usually give some insurance coverage to members by default. They include: life insurance, income protection and/or disability insurance. A premium will be deducted from your super for having this coverage.\n\nJust use the government's [YourSuper comparison tool](https://www.ato.gov.au/YourSuper-Comparison-Tool/) to pick out a super. Alternatively, you can use non-government comparison tools like [Canstar](https://www.canstar.com.au/superannuation/), but remember that they're a business and may run promotions for certain institutions.\n\n### Salary Sacrifice\nAn Australia-specific term for an arrangement between you and your employer where you trade a portion of your salary for some benefit from the employer, provided at no greater cost to them. Eg. [[books/Barefoot Investor|Barefoot Investor]] recommends arranging a salary sacrifice to increase the employer‚Äôs super contributions to 15%.\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/finance/personal-finance/Tax":{"title":"Tax","content":"\nTaxes are payments that you *must* pay to the government, mainly through your income, capital gains and dividends. Taxes also exist on transactions for specific goods and services, as well as on specific imports from a specific country (which we call *tariffs*). It exists to provide income to the government which then uses the money to fund public healthcare, education, defence, infrastructure, and other public goods and services.\n\n*Tax withholding* is the income tax that is taken out of your gross income by your employer that is routed to the ATO. This is part of the *pay-as-you-go* (PAYG) system implemented by the government to 'tax at the source'.\n\n## Tax Evasion \u0026 Tax Avoidance\n*Tax evasion* or *tax fraud* is the illegal act of lying about your income or claiming an unpermitted tax deduction with the intention of reducing your tax. An easy way to accidentally commit tax fraud is by using the same capital asset, such as a car or computer, for personal *and* business use, or by not reporting cash payments you receive from others. Clear record-keeping helps to avoid such accidents. \n\n*Tax avoidance* is strategically minimising the amount of tax you pay, within legality. It mostly does not involve deception or dishonesty like in tax evasion.\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/finance/personal-finance/Tax-Return":{"title":"Tax Return","content":"\nA tax return is a document that reports your income (from work, interest on bank accounts, investments, etc.) and expenses. You file tax returns annually in Australia, and doing so is called ‚Äòlodging‚Äô your tax return. It‚Äôs something you must do if you have had tax taken out of your pay over the tax year (spanning from July 1 to 30th of June).\n- Your employer gives you an income statement that shows how much you earned and how much tax was deducted from your pay.\n- You could pay a tax professional to help you do your tax return, or you can do it yourself with the help of tax software, like TaxSlayer.\n\n### Tax Deductions\nTax deductions are work-related expenses that you can claim to reduce your tax. To claim something as work-related, you have to be able to prove that it‚Äôs helped you earn income. You must keep your purchase receipts around for 5 years after the claim (you can manage it in the ATO app's [myDeductions](https://ato.gov.au/mydeductions) tool).\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/lifestyle/Routine":{"title":"Routine","content":"\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/lifestyle/Workflow":{"title":"Workflow","content":"\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/maths/Maths":{"title":"Maths","content":"\n\u003e \"Mathematics is the language with which God has written the universe.\" ‚Äî Galileo Galilei.\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/maths/discrete-maths/Set-Theory":{"title":"Set Theory","content":"\n## Sets\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/private/Health/Healthy-Meals":{"title":"Meals","content":"\n| Ingredient | Description                                                                     |\n| ---------- | ------------------------------------------------------------------------------- |\n| Beans      | Very long shelf-life when dried                                                 |\n| Chickpeas  | Very long shelf-life when dried                                                 |\n| Fish       | Always prefer fresh over frozen if prioritising nutrient retention and quality. | \n\n**Avoid list**:\n- Unprocessed foods.\n- Sugar.\n- Salad dressing.\n- \n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/private/Health/Nutrition":{"title":"Nutrition","content":"\n*Nutrition* is the study of *nutrients*, which are substances consumed by organisms that are necessary for survival.\n\nNutrients are subclassed into:\n1. Proteins.\n2. Carbohydrates.\n3. Fats.\n4. Vitamins.\n5. Minerals \u0026 electrolytes.\n6. Water.\n7. fibre (although whether this is a nutrient is not clear).\n\nSome tl;dr notes:\n- $\\approx 85\\%$ of your energy is sourced from fats and carbs. The remaining $\\approx 15\\%$ is sourced from proteins. ([Source](https://healthinfo.healthengine.com.au/introduction-to-nutrition))\n    - The brain consumes $\\approx 55\\%$ of total energy.\n- All carbs must be processed into glucose for metabolism.\n\n## Proteins\n\n\n## Carbohydrates\n\nCarbohydrates are subdivided into:\n1. *Monosaccharides*\n    1. Glucose\n    2. Fructose\n    3. Galactose\n2. *Disaccharides* \n    1. Sucrose\n    2. Lactose\n    3. Maltose\n3. *Polysaccharides* \n    1. Starch\n    2. Fibre\n\nAll carbohydrates must be reduced to glucose first before metabolism.\n\n## Fats\n\n## Vitamins\n\n## Minerals\n\n## Water\n\n## fibre\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/private/Law/Law":{"title":"Law","content":"\n\n**Questions**\n- Why does there not exist a global set of laws?\n    - Why is it the case that certain drugs are legal in one state, yet illegal in another?\n- \n\n---\n\n*Law* is a set of rules used to get society to conform to certain behaviours. They're enforced by governments and exist primarily to ensure society works effectively.\n\nLaws exist to ensure the\n\nLaw is classified into two scopes: *public law* and *criminal law*.\n\n- *Legal system* ‚Äî the set of laws in a country or place and how they're made and enforced.\n- *Legislation* ‚Äî a law or set of laws, or the process making of new laws.\n- *Legislature* ‚Äî a group of people with the authority to make new laws. \n- *Legislative* ‚Äî having the authority to make new laws.\n- *Statutes* ‚Äî \n- *Decrees* ‚Äî \n- *Tribunal* ‚Äî \n- *Jurisdiction* ‚Äî the authority, or entity with the authority, to interpret and apply the law.\n- *(Court) Litigation*\n- *Judge*\n- *Judicial* \n- *Judiciary* ‚Äî branch of government that judges when laws have been violated based on evidence presented in court cases.\n- *Constitution* ‚Äî a set of rules. The *Constitution of Australia* is a document     that came into force on the first day of 1901.\n- *Federation* ‚Äî a group of self-governing states with a central government.\n- *Commonwealth* ‚Äî a political union of 56 countries, most of which are former British Empire territories.\n- *Referendum*\n- *Common Law* ‚Äî \n- *Allegation*\n- *Acquittal*\n- *(Arrest) Warrant*\n- *(Search) Warrant*\n- *(On) Bail*\n- *(On) Parole*\n- *Court*\n- *Defendant*\n- *Exhibit*\n- *Felony*\n- *Jury*\n    - *Jury pool*\n- *Parliament* ‚Äî \n- *Hearsay*\n- *Impeachment*\n- *Jurisprudence*\n- *Lawsuit*\n- *Litigation*\n- *Objection*\n- *Plaintiff*\n- *Probation*\n- *Prosecute*\n- *Public defenders*\n- *Solicitor*\n- *Attorney*\n- *Sentence*\n- *Testimony*\n    - *Testify*\n- *Verdict*\n- *High Court*\n\n## Australian Legal System\n\n\n\n### How Laws Are Made\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/DevOps":{"title":"DevOps","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/Site-Reliability-Engineering":{"title":"Site Reliability Engineering","content":"\n\nSee [[software-engineering/site-reliability-engineering/Monitoring|monitoring]]\n\n\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/Software-Engineering":{"title":"Software Engineering","content":"\n*Software engineering* is the set of theory and practices around making computers do what you want it to do. Below is a list of notes written in my exploration of software technologies and concepts.\n\n### Programming Languages\n- [[software-engineering/programming-languages/TypeScript|TypeScript]]\n- [[software-engineering/programming-languages/Go|Go]]\n- [[software-engineering/programming-languages/Rust|Rust]]\n\n### Technologies\n- [[software-engineering/technologies/Cypress|Cypress]]\n- [[software-engineering/technologies/Vue|Vue.js]]\n- [[software-engineering/technologies/Nuxt|Nuxt.js]]\n- [[software-engineering/technologies/Docker|Docker]]\n- [[software-engineering/technologies/Docker Compose|Docker Compose]]\n- [[software-engineering/technologies/Tailwind|Tailwind]]\n- [[software-engineering/technologies/NGINX|NGINX]]\n- [[software-engineering/technologies/PostgreSQL|PostgreSQL]]\n- [[software-engineering/technologies/Flutter|Flutter]]\n- [[software-engineering/technologies/Firebase|Firebase]]\n- [[software-engineering/technologies/Figma|Figma]]\n\n### Software Engineering\n- [[software-engineering/software-engineering/Requirements Engineering|Requirements]]\n- [[software-engineering/software-engineering/Agile|Agile]]\n\n### Concepts\n- **Programming**\n\t- [[software-engineering/concepts/programming/Generators|Generators]]\n\t- [[software-engineering/concepts/programming/Iterators|Iterators]]\n- **DevOps**\n\t- [[software-engineering/concepts/devops/Virtual Machines|Virtual machines]]\n\t- [[software-engineering/concepts/devops/Containers|Containers]]\n\t- [[software-engineering/concepts/devops/Hypervisor|Hypervisors]]\n- **Fullstack engineering**\n\t- [[software-engineering/concepts/full-stack-dev/State Management|State management]]\n- **Architecture**\n\t- [[software-engineering/concepts/architecture/Microservice|Microservices]]\n\t- [[software-engineering/concepts/architecture/Monolith|Monoliths]]\n- **Operating systems**\n\t- [[software-engineering/concepts/operating-systems/User Space and Kernel Space|Userland \u0026 Kernel Space]]\n- **Graphics**\n    - [[software-engineering/concepts/graphics/SVGs|SVGs]]\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/aws/Availability-Zone":{"title":"Availability Zone","content":"\n### Availability Zones\n*Availability zones* (AZz) are basically just one or multiple physical [[software-engineering/aws/Data Center|data centers]] in a [[software-engineering/aws/Region|region]].\n- Availability zones \n\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/aws/CloudFront":{"title":"CloudFront","content":"\nAWS CloudFront is a [[software-engineering/concepts/cloud/CDNs|CDN]] service to help you serve cached static and dynamic content to users with minimal latency. It's great because you can trust in its very high availability, and it also handles things like DDoS attacks and other network attacks well.","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/aws/Data-Center":{"title":"Data Center","content":"\n![[Data center.png]]\nData centers are very large physical buildings that are dedicated to housing the computers that form the [[software-engineering/concepts/cloud/Cloud Computing|cloud]].\n- A data center's location is strategically chosen based on proximity to users (so as to minimise *round-trip times*, and therefore latency), proximity to workers, availability of land and electrical infrastructure, low natural disaster risks, and so on.\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/aws/Edge-Location":{"title":"Edge Location","content":"\n*AWS edge locations* are [[software-engineering/aws/Data Center|data centers]] owned by trusted 3rd party, called an *AWS Partner*, that uses [[software-engineering/aws/CloudFront|CloudFront]]. Together, the edge locations form the *edge network* between AWS and end users.\n\nWhen a user makes a network request to one of your services, the request goes to the edge location that has the lowest latency to reach. From there, cached content might be served back, or the edge location forwards the request to the *origin server* (which might be an S3 bucket, for example). This reduces the total **number of hops** between routers that a network request would otherwise need to go through in order to reach your service.\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/aws/Region":{"title":"Region","content":"\n### Regions\nA *region* is literally a geographic region which contains 1 or more [[software-engineering/aws/Availability Zone|availability zones]]. AWS ensures that there are a minimum of 2 AZs in every region.\n\n![[software-engineering/aws/assets/Region availability zone.png|500]]\n\nAWS has around 26 regions and 84 availability zones distributed across the world.\n- Regions typically have names like `us-east-1`, `us-east-2`, `ap-southeast-2` (Asia Pacific, Sydney), and so on. \n- Availability zones typically have names post-fixed with a character like `us-east-1a` and `us-east-1b`.\n\n![[software-engineering/aws/assets/AWS availability zone map.png|500]]\n\nNot all regions are equivalent. Some regions will access to services that are not available to others.\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/aws/assets/Regions":{"title":"","content":"","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/aws/assets/Untitled":{"title":"","content":"","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/architecture/Load-Balancer":{"title":"Load Balancer","content":"\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/architecture/Microservice":{"title":"Microservice","content":"\n*Microservice architecture* aims split off an application's set of functionalities into small, specialised [[software-engineering/concepts/cloud/SaaS|services]] that run inside [[software-engineering/concepts/devops/Containers|containers]].\n\nMicroservice architectures try to solve scaling challenges faced by [[software-engineering/concepts/architecture/Monolith|monolithic]] applications.\n- When some functionality in your monolithic app receives significantly more traffic than another, you can't really scale that functionality up independently. You'd have to deploy another instance of your whole monolithic app. In microservice architectures, when service $A$ is experiencing a lot of traffic, you simply spawn another instance of service $A$.\n- If your monolithic app is written in Java, then new functionalities must also be written in Java. \n- When the codebase for your monolithic app is huge and everything is deeply intertwined with each other like spaghetti, it's harder for developers to add new things, fix bugs and maintain. In microservice architectures, the services are separated by and communicate through well-defined abstractions so developers can specialise in a smaller part of the overall application.\n- Failures in one part of the monolithic app might just crash the whole system. In microservice architectures, failures in one service are isolated to that service.\n- If you update one part of a monolithic app, the entire app needs to be re-released, basically. In microservice architectures, every service can go through an independent CI/CD pipeline and updates to services are independent of one another.\n\nIn essence, microservice architecture is just a way of decoupling the parts inside a monolithic architecture.\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/architecture/Monolith":{"title":"Monolith","content":"\nIn *monolithic architectures*, every part of the application is developed and shipped as a tightly coupled whole. \n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/architecture/Pub-Sub":{"title":"Pub-Sub","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/architecture/Reverse-Proxy":{"title":"Reverse Proxy","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/architecture/Serverless":{"title":"Serverless","content":"\n*Serverless computing* is basically about getting servers in the [[software-engineering/concepts/cloud/Cloud Computing|cloud]] to execute some code snippets ([[software-engineering/concepts/cloud/FaaS|FaaS]]) or utilise something like a database service with a pay-as-you-go pricing model (typically) and with no need to be concerned with capacity planning, horizontal scaling, hardware failure, etc.\n\n\u003e 'Serverless' is a bit of a misleading name because the code obviously still executes on actual servers, they're just not maintained by you so can essentially be oblivious to their existence from a black-box perspective.\n\n**Note**: for some reason I had always assumed serverless computing and [[software-engineering/concepts/architecture/Microservice|microservice]] had something to do with each other. They don't, but they're occasionally used in the same project. *Serverless* is about how you run an app, while *microservices* are about how you architect an app. They're both very frequently encountered in cloud computing.\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/clean-code/Clean-Code":{"title":"Clean Code","content":"TODO.\n\n### Coupling\nCoupling describes how dependent one thing is on another. In object-oriented programming, it refers to how dependent one class is on another.\n\nAlthough coupling is unavoidable in some instances, you should generally prioritise minimising coupling because it tends to improve the maintainability of your code. When changing a single part of a *highly coupled* system, you might find yourself changing many other parts of the system.\n\nAnother important point about low coupling is that it makes unit tests and integration tests easier to write *and* maintain.\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/cloud/BaaS":{"title":"BaaS","content":"\n*BaaS (backend as-a-service)* is a set of cloud services that you can use instead of writing your own backend for it. Standard features such as user authentication and cloud storage for user photos, videos shouldn't be an implementation priority since it's likely not central to your app's business value. BaaS vendors maintain all the infrastructure for the servers providing these standard backend services and give you SDKs that you can use to work with it directly from your frontend codebase.\n\nIt's a great option if you're a startup and must maintain very low operational costs while still building something that can eventually scale up to thousands of users.\n\n![[software-engineering/concepts/cloud/assets/what-is-backend-as-a-service.svg|700]]\n*(Sourced from [Cloudflare](https://www.cloudflare.com/learning/serverless/glossary/backend-as-a-service-baas/))*\n\nGoogle's [[software-engineering/technologies/Firebase|Firebase]] is one example of a BaaS platform.\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/cloud/CDNs":{"title":"CDNs","content":"\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/cloud/Cloud-Computing":{"title":"Cloud Computing","content":"\nCloud computing describes the usage of a network of remote computers managed by [[software-engineering/concepts/cloud/Cloud Provider|cloud providers]] to handle computing tasks like storing/serving files, running web servers, training machine learning models, etc. *instead* of provisioning your own on-premise computers.\n\nBy deploying your compute tasks in the cloud, you no longer have to worry about things like:\n- Buying and setting up dedicated computers.\n- Hiring an IT team to take care of those computers.\n- Dealing with inevitable hardware failures (backing up and restoring data, for example).\n- Paying for the physical space to put your computers and ensuring it's secure from adversaries.\n- [[software-engineering/concepts/cloud/Scaling|Scaling]] to meet unexpected gain/reduction in usage.\n\nCloud computing is generally divided into 3 groups:\n- [[software-engineering/concepts/cloud/SaaS|SaaS]], for user-facing, generally non-technical software products like Gmail or Google Drive.\n- [[software-engineering/concepts/cloud/PaaS|PaaS]], for developer teams who don't want to manage the hardware and software for running computing tasks.\n- [[software-engineering/concepts/cloud/IaaS|IaaS]], for admins to easily provision and monitor compute resources like storage, networking, RAM, etc.\n\n![[software-engineering/concepts/cloud/assets/SaaS-PaaS-IaaS.png|400]]\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/cloud/Cloud-Provider":{"title":"Cloud Provider","content":"\n**Cloud providers** are just companies who have set up this big network of remote computers and give you reasonable prices for running computing tasks on their computers. For lone developers or huge enterprises, it's almost always more cost-efficient and reliable to serve a web application on the cloud, for example, rather than acquiring and administrating the hardware resources themselves.\n\nCloud providers are able to give you reasonable prices because they leverage *economies of scale*, where the larger a company's production gets, the lower the average cost of producing their goods/services, in general.\n\nThe main cloud providers are AWS, Azure and GCP. There are also other cloud providers like DigitalOcean, Linode, Vultr, etc. but they aren't considered nearly as mature as the 'big 3' previously mentioned because they don't provide nearly as many services.\n\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/cloud/FaaS":{"title":"FaaS","content":"\n*FaaS* (functions as-a-service) is a class of [[software-engineering/concepts/cloud/Cloud Computing|cloud computing]] services which let you run a bit of code on a server somewhere in response to events or HTTP requests. The pay-as-you-go pricing is great when you don't want or need a [[software-engineering/concepts/devops/Virtual Machines|VM]] running 24/7 that only occasionally needs to execute some routine. Cloud vendors like AWS or Google Cloud provide *FaaS* platforms like AWS Lambda and [[software-engineering/technologies/Google Cloud#Cloud Run|Cloud Run]] which can execute your code in response to events.\n\n![[software-engineering/concepts/cloud/assets/faas.png|800]]\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/cloud/IaaS":{"title":"IaaS","content":"\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/cloud/PaaS":{"title":"PaaS","content":"\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/cloud/SaaS":{"title":"SaaS","content":"\n# SaaS\n\n\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/cloud/Scaling":{"title":"Scaling","content":"\n","lastmodified":"2022-09-12T23:20:41.842338794Z","tags":null},"/software-engineering/concepts/computer-science/Program-Memory":{"title":"Program Memory","content":"\n\n\n### Stack\nTODO.\n","lastmodified":"2022-09-12T23:20:41.846338827Z","tags":null},"/software-engineering/concepts/computer-science/Stack-Frame":{"title":"Stack Frame","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.846338827Z","tags":null},"/software-engineering/concepts/cybersecurity/Certificate-Authority":{"title":"Certificate Authority","content":"\n\n","lastmodified":"2022-09-12T23:20:41.846338827Z","tags":null},"/software-engineering/concepts/cybersecurity/SSL-and-TLS":{"title":"SSL","content":"\n","lastmodified":"2022-09-12T23:20:41.846338827Z","tags":null},"/software-engineering/concepts/databases/ACID":{"title":"ACID","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.846338827Z","tags":null},"/software-engineering/concepts/databases/NoSQL":{"title":"NoSQL","content":"\n\u003e In this set of notes, we only consider *document-oriented* databases such as MongoDB and [[software-engineering/technologies/Firebase|Firebase]]. There are also other types of NoSQL databases such as graph databases (like [Neo4j](https://neo4j.com/)) and simple key-value stores like [Redis](https://redis.io/) or [Memcached](https://memcached.org/).\n\n*NoSQL* (\"**n**ot **o**nly SQL\") databases are those that ditch the idea of defining data using relational theory involving tables, rows and columns and linking them together.\n\n**Why NoSQL over relational databases?**\nThe main two reasons are *flexibility* and *easier scaling*:\n1. NoSQL uses flexible data models that are easier to modify in response to changes in business requirements or the query patterns of the users compared to relational databases.\n2. Database servers are easier to scale horizontally through [[software-engineering/concepts/databases/Sharding|database sharding]]. It's challenging to shard relational databases.\n\n## Data Modeling\nAlthough non-relational databases don't have tables, rows and columns, and are often chosen in anticipation of changes to the data model, you still need to have a concrete idea of what the data model/schemas for your application look like. \n\n### Don't Nest Deeply\n*Don't nest deeply* is a usual best practice for designing document schemas.\n\nWhen you fetch a document or part of a document, *you fetch everything inside it*. In the case of managed databases like Firebase realtime db, the permissions applied to a document or a part of it also apply to the children. When your data actually belongs together all or most of the time, it's okay and encouraged to nest them to avoid having to do multiple queries. When this is not the case, you overfetch data. In fact, managed DBs might enforce a limit on document size (1MiB for Firebase).\n```json\n{\n  \"users\": {\n    \"Andrew\": {\n      \"email\": \"...\"\n      \"blogs\": {\n        \"Why I love C\": {...},\n        \"Why I hate JavaScript\": {...},\n        // ... and so on. This could be a huge list of blogs and all their contents!\n      }\n    }\n  }\n}\n```\nIf you fetched `Andrew`, you'd also fetch all his blogs regardless of whether you needed them to render your UI or not. To improve this model, see [[software-engineering/concepts/databases/NoSQL#Normalisation vs. Denormalisation|normalisation/denormalisation]].\n\n### Normalisation vs. Denormalisation\nSee [[software-engineering/concepts/databases/Normalisation|normalisation]]. *Denormalisation* is duplicating data to simplify queries. It's encouraged by [Firebase](https://www.youtube.com/watch?v=vKqXSZLLnHA\u0026ab_channel=Firebase) when you want to improve read performance.\n\nWhen you want to avoid nesting deeply, aim to **flatten** your data structures by extracting out nested JSON sub-structures in your document schema to separate collections, then linking them together through IDs or other fields. Doing this means that those two collections can be fetched independently, which improves read performance and query simplicity.\n```json\n{\n  \"users\": {\n    \"Andrew\": {\n      \"email\": \"...\"\n      // References to data elsewhere.\n      \"blogs\": [          \n        \"Why I love C\",\n        \"Why I hate JavaScript\",\n        // ...\n      ]\n    }\n  },\n  \"blogs\": {\n      \"Why I love C\": {...},\n      \"Why I hate JavaScript\": {...},\n      // ...\n  }\n}\n```\n\nWhen you flatten data structures however, you inevitably increase *data duplication* or *redundancy* where the same data appears in multiple locations in the database. This is very common and often unavoidable in non-relational databases. \n\nGenerally, when denormalising, you are **improving read performance at the cost of write performance** because it takes extra work to propagate updates to maintain [[software-engineering/concepts/databases/ACID|database consistency]] and correct stale data. The act of propagating updates to maintain consistency is called '*multi-path updates*' which helps to correct stale data/references or remove *orphaned references* (also called *dangling references*) which are references to deleted documents still held by other documents.\n\nYou must balance your usage of both normalisation and denormalisation. When deciding whether to nest or not to nest, you must think about your business requirements:\n- In displaying your UI, would flattening your document schema minimise frequent over-fetching of data? Or would nesting make more sense because the data is tightly coupled together and therefore should be fetched in one query?\n- How often users will need to perform a certain read query? If the answer is *very frequently*, then prefer denormalising.\n","lastmodified":"2022-09-12T23:20:41.846338827Z","tags":null},"/software-engineering/concepts/databases/Normalisation":{"title":"Normalisation","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.846338827Z","tags":null},"/software-engineering/concepts/databases/Sharding":{"title":"Sharding","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/design-patterns/Builder-Pattern":{"title":"Builder Pattern","content":"\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/design-patterns/Factory-Pattern":{"title":"Factory Pattern","content":"\nThe *Factory* pattern aims to give you a way to make objects... TODO.\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/devops/CI":{"title":"CI","content":"\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/devops/Containers":{"title":"Containers","content":"\nA *container* is a ***process* running in its own *isolated [[software-engineering/concepts/operating-systems/User Space and Kernel Space|user space]]***, that runs an app within. It contains everything required to run the app, which is basically the app's source code and all its dependencies.\n- You can have multiple containers running on the same machine, and they will share the same host operating system services and resources.\n- Containers are defined by a manifest file, which details everything necessary to get your app running within it. In [[software-engineering/technologies/Docker|Docker's]] case, that manifest file is the *Dockerfile*.\n- The best thing about containers, as developers using a containerisation technology like [[software-engineering/technologies/Docker|Docker]], is that it gives you a lot of confidence that your app will work exactly the same, regardless of what environment it's running in.\n\nRunning in an 'isolated' user space means that the container believes itself to be the only process running on the machine and has its own concept of CPU, memory, filesystem, network, etc., much like a [[software-engineering/concepts/devops/Virtual Machines|virtual machine]]. Everything else, like what other processes are running on the machine, are not visible from within the container (try running `ps` from a shell within a container).\nBasically, from each container's point of view, they have an entire operating system to themselves.\n\u003e [Namespaces](https://en.wikipedia.org/wiki/Linux_namespaces) and [cgroups](https://en.wikipedia.org/wiki/Cgroups) (control groups) are what enable containers able to be run in an isolated user space and have their compute resources able to be monitored and restricted.\n\nAlthough containers are considered quite light on computing resources, it'll never match the performance of running the app as a process directly.\n\n### Containers vs. Virtual Machines\nContainers are pretty much like [[software-engineering/concepts/devops/Virtual Machines|system virtual machines]], but they tend to use far fewer compute resources (like CPU, memory and disk space) and are quicker to spawn, making them great for on-demand [[software-engineering/concepts/cloud/Scaling|scaling]]. This is they're considered substantially more 'lightweight' than virtual machines.\n\nWhen multiple containers are running on the same host OS, they're sharing the same host OS services and compute resources. When multiple virtual machines are running on the same host OS, they won't \n\nDeploying multiple VMs onto a single machine will involve creating complete guest OSs and libs for each. There is no sharing of them.\n\nThe containers running on the same machine will share the host OS's resources. Deploying more containers will not mean duplicating guest OSs. You will be able to deploy more containers on a machine than VMs.\n\nSupposing you had 3 services to be deployed, you could either spin up 3 separate VMs, each with an entire OS contained within, or you could spin up 3 containers, each sharing the same host OS kernel services. Both ways would work, but opting for containers is a much more resource-efficient and quicker deployment strategy.\n![[software-engineering/concepts/devops/assets/virtual-machine-vs-containers.png|600]]\n*(Image sourced from Nick Janetakis.)*\n\nPrior to the widespread adoption of the cloud, the traditional way to deploy an app is simply to set up a physical set of computers in a server room, then run the app on those computers without any virtualisation. This method has a very expensive upfront cost, challenging to scale, and will result in poor utilisation of compute resources. That's why microservice architectures deployed onto the cloud have become the standard.\n![[software-engineering/concepts/devops/assets/traditional-virtualised-container-deployments.png|800]]\n\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/devops/Hypervisor":{"title":"Hypervisor","content":"\nA *hypervisor*, in most contexts, is the *software* that creates and runs [[software-engineering/concepts/devops/Virtual Machines|virtual machines]]. [VMWare](https://www.vmware.com/au.html) is an example of a hypervisor that you might use for running a different OS on a personal work computer (eg. running Ubuntu on a computer whose main OS is Windows 11). AWS has its own [Nitro](https://aws.amazon.com/ec2/nitro/) hypervisor that is being used to create EC2 instances. \n\nIn [[software-engineering/concepts/operating-systems/Kernel|kernels]], the position of highest privilege is called the supervisor. The prefix 'hyper-' is a stronger variant of the prefix 'super-', so the hypervisor is named such because it is basically the *supervisor of supervisors*.\n\nThe computer that runs a hypervisor is called a *host machine* while the virtual machines within are call *guest machines*. Hypervisors handle resource allocation to guests VMs, eg. it handles CPU scheduling among other things.\n\n![[software-engineering/concepts/devops/assets/hypervisor.png|500]]\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/devops/VPC":{"title":"VPC","content":"\nVirtual private cloud.\nTODO.\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/devops/Virtual-Machines":{"title":"Virtual Machines","content":"\n## System Virtual Machine\n\n\u003e \"A 'virtual machine' was originally defined by¬†Popek and Goldberg¬†as 'an efficient, isolated duplicate of a real computer machine.''\"\n\nA *virtual machine* (VM) is a computer system that is created by software. It is meant to function indistinguishably from an actual discrete physical computer system would, meaning that a virtual machine has its own concept of what CPU it has, memory capacity, network interface, storage and so on.\n- A single physical computer can run multiple VMs.\n- Virtual machines are created and managed by [[software-engineering/concepts/devops/Hypervisor|hypervisors]].\n- VMs are literally *just files*, called *images*, stored on the host machine.\n\nWhere virtual machines are used:\n- They make up a huge part of [[software-engineering/concepts/cloud/Cloud Computing|the cloud]].\n- Running [[software-engineering/concepts/devops/CI|CI]] tasks, production web servers, and many cloud services.\n- When you need a Linux environment for your personal work computer, which unfortunately is using Windows ü§¢. You might need this to run apps that you otherwise couldn‚Äôt.\n- Malware testing and reverse engineering. You can take advantage of the isolation of the VM to execute malware and observe how it works. This is not foolproof, some sophisticated malware can detect that it‚Äôs in a VM!\n\n### VM Architecture\nA single physical computer can run multiple VMs. This is how its set up in the servers that make up the cloud:\n\n![[software-engineering/concepts/devops/assets/hosted-virtual-machine-architecture.png|400]]\n\n## Process Virtual Machine\nIn most contexts, the usage of the term 'virtual machines' actually refers to the *system virtual machines* described above. Otherwise, it describes *process virtual machines* which is quite different.\n\nA *process virtual machine* is the software that is used to provide a platform-independent environment to execute a program.\n\nThe *JVM, Java Virtual Machine*, is an example of a process virtual machine. It is just a regular process on the computer, and its job is simply to execute Java bytecode.\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/devops/assets":{"title":"","content":"","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/full-stack-dev/SPAs":{"title":"SPAs","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/full-stack-dev/Server-Side-Rendering":{"title":"Server-Side Rendering","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/full-stack-dev/State-Management":{"title":"State Management","content":"\n*State*, in this context, is just the read/write data that a UI project like a React app needs. State management is about avoiding making a mess of this data when you have a complex component hierarchy with some distantly related components that need to read/modify the same part of state.\n\nSuppose you have an app whose component hierarchy looks like this:\n![[software-engineering/technologies/assets/example-app-hierarchy.png|400]]\nWithout a state management framework, if you wanted to make it so that the `AddBlogBtn` adds a new blog that is then rendered in `BlogList`, you'd have to bubble up the event up to a common ancestor of `AddBlogBtn` and `BlogList` and then have new props be passed down to `BlogList`.\n\n![[software-engineering/technologies/assets/example-app-without-state-management.png|400]]\n\nIn this example, it's not so bad, but when the component hierarchy is much larger (which it often is in practice), then the 'sharing' and manipulation of common state between very distant relatives in the component tree quickly becomes complex because you'd have to pass data through many layers, across components that don't actually need that data, just to get that data to the component that needs it which is further down in the tree. This problem is called ['prop drilling'](https://kentcdodds.com/blog/prop-drilling). This is a very common problem in UI projects and so there exists many different strategies for avoiding this, each with their own tradeoffs to consider (which usually include short-term productivity vs. long-term productivity, elegance vs. comprehensiveness, etc.).\n\nBroadly, those strategies are:\n- Flux (eg. through [Vuex](https://vuex.vuejs.org/)).\n- [[software-engineering/technologies/Redux|Redux]] (eg. through [React Redux](https://react-redux.js.org/)).\n- [React Context](https://reactjs.org/docs/context.html).\n\nRedux, for example, centralises the app's state by extracting out all the main parts of state into a global 'store' and allows all components, regardless of where they are in the hierarchy, to read/write to that store. Any updates to the shared global state made by one component are immediately 'received' by other components dependent on the part of the global state that was updated.\n![[software-engineering/concepts/full-stack-dev/assets/redux-example.png|400]]\n\n\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/full-stack-dev/Static-Site-Generation":{"title":"Static Site Generation","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/full-stack-dev/Tree-Shaking":{"title":"Tree Shaking","content":"\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/full-stack-dev/UI-Design":{"title":"UI Design","content":"\nSee https://tymz.notion.site/UI-UX-7fb9a728bfc946fcbe92ff640b371a2d.\n\n---\n## Note for Developers\nDesign is not fundamentally about making things pretty. The prettiness of a thing you design is often a side effect of making it usable, accessible, learnable and delightful to use. This makes design problems *engineering problems*.\n\u003e \"Most people make the mistake of thinking design is what it looks like, people think it's this veneer ‚Äî that the designers are handed this box and told, 'Make it look good!' That's not what we think design is. It's not just what it looks like and feels like. **Design is how it works**.\" ‚Äî *Steve Jobs*.\n\n**Always prototype designs before you code**. Never design from your code. Use a tool like [[software-engineering/technologies/Figma|Figma]], Photoshop, Illustrator, or just pen and paper.\n\n## Aesthetic-Usability Effect\nThe *aesthetic-usability effect* is a phenomenon where humans perceive more aesthetic designs as more intuitive/easier to use than those considered to be less aesthetically pleasing (even if it is *not* easier to use).\n\nThis is a well-studied phenomenon, not just a claim about human behaviour. If you focus on designing a product focusing heavily on usability, it will inevitably be seen as aesthetic. Conversely, if you polish your visuals, it will be seen as more usable and users will be more tolerant of poor usability.\n\nThis is related to the [Halo effect](https://en.wikipedia.org/wiki/Halo_effect).\n\n## Gestalt Principles\n[Gestalt theory](https://en.wikipedia.org/wiki/Gestalt_psychology) asserts that the human brain always seeks to group components and identify structures and patterns. Some useful practical principles from Gestalt theory:\n- *Similarity*. Group similar things together and the user will perceive them as similar without thought.\n- *Proximity*. Similar things are put closer together. Your UI should arrange things similar in purpose in close proximity and keep them far from things different in purpose.\n![[software-engineering/concepts/full-stack-dev/assets/gestalt-proximity-similarity.png|250]]\n(*[source](https://jackwestin.com/resources/mcat-content/perception/gestalt-principles)*)\n\n## Spacing\n**Negative spacing** is a useful weapon against visual noise. It helps the read scan for what they need. Consider using:\n- Larger padding and margin.\n- Larger line spacing and letter spacing.\n\n## Typography\n\u003e **Typography makes a huge difference**. Invest time in picking one that best expresses your frontend's 'personality'.\n\n**Font pairing** is a common practice where you pick two (or more) fonts that contrast with each other. For some reason, this looks better:\n![[software-engineering/concepts/full-stack-dev/assets/font-pairing.png|500]]\nUse generators online or [handpicked font pairings](https://www.fontpair.co/) rather than sticking to one font.\n\n## Colour\nFigma recommends to use black, white, one primary colour, one secondary and tones of each. Note that:\n- Tint ‚Äî the addition of white to a colour.\n- Shade ‚Äî the addition of black to a colour.\n- Tone ‚Äî the addition of grey to a colour (ie. tinting and shading).\n","lastmodified":"2022-09-12T23:20:41.85033886Z","tags":null},"/software-engineering/concepts/graphics/SVGs":{"title":"SVGs","content":"\nSVG (*scalable vector graphics*) is an image format that defines images using vectors in XML on a cartesian plane rather than pixels, like PNG or JPEG, which we call *bitmapped* or *raster* image formats.\n\nSome advantages SVGs have over other image formats:\n- Retains image quality at any zoom level, unlike .png files. This is the main advantage.\n- For simple SVGs, it's easy to modify the image by tweaking the source code (which is just XML, usually).\n- They are sometimes more performant if the image is not visually complex. For example, they're great for displaying icons on webpages.\n- You can manipulate SVGs elements on a webpage with JavaScript and apply CSS styles to them, like regular HTML elements.\n\n![[software-engineering/concepts/graphics/assets/raster-vs-vector.png|400]]\n\nYou can define any image using vectors or pixels, however which choice is better depends on how you expect to use the image. \n- For logos, SVGs are better.\n- For diagrams, charts, figures, SVGs are better.\n- For images with 'clean lines' and simple shapes, SVGs are probably better.\n- For photographs, wallpapers and other images composed of very complex visuals, then SVGs aren't ideal because they'll be huge in size. \n\n## Drawing SVGs\nIt's hard to create SVGs by manually writing the XML code for the individual vectors that comprise an image. Instead, you should be using tools like Figma, Illustrator, Photoshop, etc. and you can also use some of these tools to convert between SVG and raster image formats. You can even use javascript libraries like [[software-engineering/technologies/D3|D3.js]] to create SVGs.\n\n## SVG Elements\nJust as HTML provides elements like `\u003cp\u003e`, `\u003cdiv\u003e`, `\u003ctable\u003e` for describing documents, SVG provides elements like `\u003cg\u003e`, `\u003ccircle\u003e`, `\u003cline\u003e` for defining images.\n\nThere are lot of SVG elements. See this [full reference on MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Element).\n\n### Important Details\n- In XML, you should specify the `xmlns` attribute which sets the XML namespace. Doing this is to [prevent name collisions](https://stackoverflow.com/questions/1181888/what-does-xmlns-in-xml-mean) where, for example, `\u003cg\u003e` might appear in a context outside of the SVG definition. Specifying the namespace removes the ambiguity about what `\u003cg\u003e` and other SVG elements are meant to do.\n- Element ordering matters, just like in HTML. Elements defined later are rendered on top of previous elements.\n- Basic styling of SVG elements can be done with the `fill`, `fill-*` and `stroke`, `stroke-*` attributes.\n\n### \\\u003csvg\\\u003e\n`\u003csvg\u003e` is the root element of an image, just like how `\u003chtml\u003e` is the root element of a document. You must always bind the `xmlns` to a namespace URI, eg. `\u003csvg xmlns=\"http://www.23.org/2000/svg\"\u003e`.\n\nUsing this element, we define the coordinate system:\n![[software-engineering/concepts/graphics/assets/svg-coordinate-system.png|220]]\n**Attributes**:\n- `width` and `height` of the SVG container on an HTML document.\n- `viewBox` defines the portion of the SVG 'canvas' to display.\n\n### \\\u003cg\\\u003e\n`\u003cg\u003e` doesn't draw anything, it just groups together other basic shapes. The point of doing this is to be able to apply transformations to a whole group of elements, and set attributes like `fill` that should be inherited by all of its children.\n\n### \\\u003crect\\\u003e\n- `x` and `y` set the coordinate of where the top left corner of the rectangle sits.\n- `width` and `height` set the dimensions.\n- `rx` and `ry` set the horizontal and vertical border radii.\n\n### \\\u003ccircle\\\u003e, \\\u003cellipse\\\u003e\n- `cx`, `cy` set the center coordinates.\n- `r` sets the radius\n- `rx`, `ry` set the x and y radius for an ellipse.\n\n### \\\u003cline\\\u003e\nLines are defined based on a starting coordinate $(x_{1}, y_1)$ and ending coordinate $(x_{2},y_2)$.\n\n**Attributes**:\n- `x1`, `y1`\n- `x2`, `y2`\n\n### \\\u003cpath\\\u003e\nPath elements can draw any shape, including the default ones like rect, circle, line, etc. You define them by specifying the `d` (data) attribute, which is a sequence of commands.\n\n**[Path commands](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#path_commands)**:\n- **Move-to**:\n    - `M 3 5` ‚Äî moves from to the absolute coordinate $(3, 5)$.\n    - `m 3 5` ‚Äî moves 3 units right and 5 units down relative to the current coordinate.\n- **Line-to**:\n    - `H 10` ‚Äî draws a horizontal line from the current point until `x=10` on the coordinate system.\n    - `V 10` ‚Äî draws a vertical line from the current point until `y=10` on the coordinate system.\n- **Closing the path**:\n    - `Z` ‚Äî this just draws a line back to the initial point, closing the path. This is usually used as the last command.\n- **Quadratic B√©zier**. You define them with a starting point, a control point and an ending point. The starting point is simply where the current coordinate is, so you don't have to specify it.\n    - $\\texttt{Q }x_c,y_{c}\\texttt{  }x_2,y_2$\n    ![[software-engineering/concepts/graphics/assets/quadratic-bezier.gif|300]]\n- **Cubic B√©zier**. They're like quadratic bezier curves, but with another control point.\n    - $\\texttt{C }x_{c1},y_{c2}\\texttt{  }x_{c2},y_{c2}\\texttt{  }x_2,y_2$\n    ![[software-engineering/concepts/graphics/assets/cubic-bezier.gif|300]]\n- **Arc**. These are just the sections of circles or ellipses. See [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths#arcs).\n\n### \\\u003cpolygon\\\u003e\nPolygons are all n-sided shapes. You define them by simply specifying a list of points.\n- `points` ‚Äî a list of coordinate points. A list of coordinates $(0, 1), (2, 5), (3, 2)$ looks like `\u003cpolygon points=\"0, 1 2, 5 3, 2\"`.\n\n### \\\u003ctext\\\u003e\nYou can also add text to any SVG. You control its location with `x` and `y` attributes, and just like for regular HTML text, you can apply CSS style rules like `font-family`, `font-weight`, etc.\n\nAdditional attributes specific to `\u003ctext\u003e` include:\n- [`text-anchor`](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-anchor)\n- [`alignment-baseline`](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/alignment-baseline)\n\n\n","lastmodified":"2022-09-12T23:20:41.854338893Z","tags":null},"/software-engineering/concepts/networking/DNS":{"title":"DNS","content":"\n\n## DNS Resource Records\nTODO.\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/networking/OSI-Model":{"title":"OSI Model","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/operating-systems/Kernel":{"title":"Kernel","content":"\nThe *kernel* is the part of the OS that is closer to hardware and provides abstractions such as system calls, memory management, process management, device driving, etc. The operating system, on the other hand, is the kernel *plus* the [[software-engineering/concepts/operating-systems/User Space and Kernel Space|userland]] things like standard libraries, [GNU core utilities](https://en.wikipedia.org/wiki/List_of_GNU_Core_Utilities_commands), etc.\n![[software-engineering/concepts/operating-systems/assets/os-and-kernel.png|350]]\n*(Sourced from Tutorialspoint)*\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/operating-systems/User-Space-and-Kernel-Space":{"title":"User Space \u0026 Kernel Space","content":"\nMost operating systems will divide the computer's [[software-engineering/concepts/operating-systems/Virtual Memory|virtual memory]] into two parts: the *user space* (or *userland*) and the *kernel space*. The kernel space is a partition of virtual memory whose contents are protected from direct access by non-operating system software like your regular scripts, apps and daemons. Only the kernel, device drivers and other critical OS software can freely read/write to the kernel space. Everything else can read/write only to user space.\n\n![[software-engineering/concepts/operating-systems/assets/userland-and-kernel-space.png|400]]\n\nThe main motivation for this is to prevent malicious or unintentionally destructive programs from wrecking havoc on the computer system by manipulating critical operating system data.\n\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/operating-systems/Virtual-Memory":{"title":"Virtual Memory","content":"\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/AOT":{"title":"AOT","content":"\n*AOT (ahead-of-time) compilation* involves compiling an entire application's source code into an executable (or some other target) before running the application. This is the traditional type of compilation model for [[software-engineering/programming-languages/C|C]], [[software-engineering/programming-languages/C++|C++]], [[software-engineering/programming-languages/Go|Go]] and similar languages. Compilers like `gcc` are AOT compilers.\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/Actors":{"title":"","content":"","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/Code-Splitting":{"title":"Code Splitting","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/Concurrency":{"title":"Concurrency","content":"\nTODO:\nconcurrency vs. asynchronous\nconcurrency vs. multithreading\nconcurrency vs. parallelism\n\nWhen talking about concurrency issues, it often involves concurrent access to the same shared data in memory, however, it can involve concurrent access to other resources such as files and databases.\n\n*Concurrency* and *parallelism* have very similar meanings in English, but there is a distinction to be clarified about their meanings in computer science contexts:\n1. **Concurrency** is just when 2+ parts of the code of a program **can** run at the same time on different cores of a CPU, different CPUs of a computer, or different computers connected to each other. \n2. **Parallelism** is when they **do** run at the same time.\n\n\u003e \"Concurrency is a software mechanism, and parallelism is a hardware concern.\" - *Pragmatic Programmer*.\n\n\nTODO:\nCritical region.\n\nSee [[software-engineering/concepts/programming/Actors|actors]]\n\nSee [[software-engineering/concepts/programming/Mutex|mutex]].\n\nSee [[software-engineering/concepts/programming/Semaphore|semaphores]].\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/Functional-Programming":{"title":"Functional Programming","content":"TODO.\n\nA [[software-engineering/concepts/programming/Programming Paradigm|programming paradigm]]\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/Generators":{"title":"Generators","content":"\nGenerators are *just functions* which, when invoked, will give you a single value from a list of values. They're *stateful* functions which return the next value in a list of values for each successive invocation.\n\nUsually, programming languages will give you a `yield` keyword which works basically the same way as `return`, but when the function is invoked again, execution resumes after the last `yield`. For example, below is a generator in Python.\n```python\ndef foo_generator():\n\tyield 2\n\tyield 3\n\tyield 5\n\ng = foo_generator()\nprint(next(g))      # ‚Üí 2\nprint(next(g))      # ‚Üí 3\nprint(next(g))      # ‚Üí 5\n```\nAt each `yield` statement, execution is suspended at that line and exeuction resumes at the line right after until the next `yield` or until the function terminates.\n\n**Note**: normally, when you invoke a function, a [[software-engineering/concepts/computer-science/Stack Frame|stack frame]] gets allocated on the [[software-engineering/concepts/computer-science/Program Memory#Stack|stack]] section of memory. When you invoke a generator function, the 'stack' frame actually gets allocated in the [[software-engineering/concepts/computer-science/Program Memory#Heap|heap]] instead (at least in [CPython](https://github.com/python/cpython)) and so they persist separately from the regular function call stack.\n\n### Generators \u0026 Iterator\nAll *generators* are [[software-engineering/concepts/programming/Iterators|iterators]]. When you invoke a generator function, it returns an *iterator* which you can loop through by invoking some function/method like `next` on them (in the case of Python).\n\n### Why Use Generators?\nNormally, when you need a list of values of some kind, you'd call a function which returns that entire list of values back to you. Generators are *lazy*, so they only return one value of a stream of values at a time. In other words, you get values from a stream of values *on-demand* rather than getting all values upfront. This is great when you don't know how many values from a stream of values you might need. If you really needed the first 10 values, but you loaded all 1000 values upfront, for example, you're hogging an **unnecessarily large amount of memory**. With generators, you only really hold the memory for a single value of the list, so it's a really common way to optimise for memory usage.\n\nGenerators are also a great way to represent streams of infinite values. For example, it might make sense to write a prime numbers generator function only get the next prime number, on-demand.\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/Generics":{"title":"Generics","content":"Generic programming is about writing reusable functions, classes, etc. without compromising on [[software-engineering/concepts/programming/Type System|type safety]]. The primary motivation behind them is to keep code DRY, that is, to avoid code duplication.\n\nThe basic idea behind generic programming is that you can make functions and classes take a *generic type parameter*.\n\nTODO.\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/Interpreter":{"title":"Interpreter","content":"\nInterpreters are programs that take in source code and executes it directly *without* compiling it to machine code. Instead, a common way interpreters are implemented is to parse source code, compile it to an intermediate representation (often called *bytecode*), then hands that off to a [[software-engineering/concepts/devops/Virtual Machines#Process Virtual Machine|virtual machine]] to execute.\n\nInterpreters may or may not use a [[software-engineering/concepts/programming/JIT|JIT]] compiler.\n\n## Interpretation vs Compilation\n\u003e Interpretation and compilation are not mutually exclusive and are not simply alternatives of each other. Likewise, *interpreted languages* and *compiled languages* don't necessarily mean that they must be only put through an interpreter or compiler respectively. \n\n*Interpretation* is just \"given this source code, do what it says\", which is basically just executing the source code directly (from the programmer's perspective). *Compilation* is a mapping from language A to language B, like converting C++ code into x86 machine code.\n\nWhen we say a language is a *compiled language* or *interpreted language*, it really just means that the canonical or official compilation model intended by the language designers is to have the language be fed through a compiler or interpreter, respectively. Whether or not a language is compiled/interpreted is *not* a property that's tied to the programming language, but rather **how it's implemented**. A *compiled language* like C++ does actually have interpreters you can use for it, and an *interpreted language* like Python does have compilers.\n\n\u003e You can have both compilers and interpreters for the same programming language. \n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/Iterators":{"title":"Iterators","content":"\nAn **iterator** is an *object* that lets you loop through an **iterable**, usually by invoking, implicitly or explicitly, a `next` method.\n- In Python, iterators are objects that expose the `__next__`  [[software-engineering/programming-languages/Python#Dunder Methods|dunder method]] which can be invoked to retrieve the next value in the **iterable**.\n\nAn **iterable** is an object containing a collection of items that you can *get an **iterator** from*, usually, via a method. Iterables are stateless and have no concept of what element is the 'current' element in a traversal ‚Äì that is what the iterator handles.\n- In Python, that method is `__iter__`.\n- In C++, that method is usually `begin`.\n\nMany programming languages give you a for-loop variant that basically serves as syntactic sugar in using looping through the items in an **iterable**.\n- In Python, when you say `for item in iterable`, what happens behind the scenes is the iterable's `__iter__` method gets called to get an iterator, then `item` is assigned to whatever the iterator's `__next__` method returns. The for loop stops when `__next__` raises a `StopIteration` exception.\n- In C++, they're called *range-based for* loops with the syntax `for (T item : iterable) statements`.\n- In C#, they're called *foreach* loops with the syntax `foreach (T item in iterable) statements`.\n- In JavaScript, they're called *for of* loops with the syntax `for (let item of iterable) statements`\n- ... and so on.\n\n### Iterator Design Pattern\nThe purpose of iterators is to let the user access the elements of a data structure through a consistent interface, regardless of whether they're iterating through items in a vector, a binary search tree, a graph, a hash map, etc. All these data structures will provide a way for the user to get an iterator from them that can be used in a for loop, for example.\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/JIT":{"title":"JIT","content":"\n*JIT (just-in-time) compilation* is when source code (or *bytecode*) gets compiled on-demand at runtime *as it executes* rather than prior to being executed. JIT compilation is a feature of an [[software-engineering/concepts/programming/Interpreter|interpreter]]. Traditionally, source code is compiled to machine code directly by an [[software-engineering/concepts/programming/AOT|AOT compiler]] like `gcc` for C and C++, meaning no further compilation is done during execution.\n\n## JIT vs. AOT\n- JIT tends to be better during development. AOT tends to be better during production, but not necessarily always since a JIT compiler works at runtime, it can make optimisations like inlining functions that are invoked frequently (which minimises the overhead in the low level operation of setting up a function context).\n    - In languages like Dart and TypeScript, it's common to use a JIT compiler during development and then compile everything for production using an AOT compiler.\n- JIT tends to be less secure than AOT because of [JIT spraying exploits](https://en.wikipedia.org/wiki/JIT_spraying).\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/Mutex":{"title":"Mutex","content":"\n\u003e \"Tip 59: Use actors for concurrency without shared state.\" ‚Äî *Pragmatic Programmer*.\n\n\n\n\n\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/Object-Oriented-Programming":{"title":"Object Oriented Programming","content":"Object-oriented programming is a [[software-engineering/concepts/programming/Programming Paradigm|programming paradigm]] that sees programs as a collection of *objects* interacting with each other. *Objects* are just containers for some data (called 'fields') and functions (called 'methods').\n\nObject-oriented programming involves heavy usage of [[software-engineering/concepts/programming/Object Oriented Programming#Classes|classes]] and enable us to make use of concepts like [[software-engineering/concepts/programming/Object Oriented Programming#Encapsulation|encapsulation]], [[software-engineering/concepts/programming/Object Oriented Programming#Inheritance|inheritance]], [[software-engineering/concepts/programming/Object Oriented Programming#Polymorphism|polymorphism]], etc.\n\n### Classes\nTODO.\n\n#### Static Classes\nTODO.\n\n### Encapsulation\nEncapsulation is about *hiding the implementation details* of a class as much as possible. Doing so will tend to minimise [[software-engineering/concepts/clean-code/Clean Code|coupling]].\n\n**Access modifiers**\nAccess modifiers are used to explicitly apply different levels of visibility to the members of a class. OO programming languages will usually give you the following 3 access modifiers.\n- `private` ‚Äì only accessible within the class.\n- `protected` ‚Äì accessible within the class *and* within its subclasses.\n- `public` ‚Äì accessible by any class in the program.\n\nLanguages might have variations on how these access modifiers behave, as well as what the default visibility is when you omit the access modifier. Eg. In Java, a `protected` member is also visible to classes in the same package. \n\nIn general, prefer the most restricted visibility possible.\n\n### Inheritance\nInheritance (also called 'subclassing') is when you make one class derive from a base class, causing the child class to *inherit* the parent class' non-private members.\n\n**Differences between languages**\nLanguages will have different syntax for inheritance and ways for subclasses to access their parent class. They may also differ in whether they support [**multiple inheritance**](https://en.wikipedia.org/wiki/Multiple_inheritance) or not.\n- In C++, the inheritance might look like `class Sub : public Base`. *Note*: C++ has concepts like private/public inheritance that other languges don't have.\n- In JavaScript, inheritance looks like `class Sub extends Base`. Within the `Sub` class, you have access the base class' constructor and methods via the `super` keyword.\n- In C#, inheritance looks like `public class Sub : Base`. Subclasses can access the base class' members through the `base` keyword (which is similar to JavaScript's `super` keyword).\n\n### Polymorphism\nTODO.\n\n#### Static Polymorphism\nTODO.\n\n#### Dynamic Polymorphism\nTODO.\n\n### Method Overidding\nMethod overriding is when you make a subclass provide an implementation for a method that's defined in its base class. Method overriding enables **[[software-engineering/concepts/programming/Object Oriented Programming#Dynamic Polymorphism|runtime polymorphism]]**.\n\n**Differences between languages**\nIn many languages, overriding is implicitly done, but it's recommended to explicitly label it.\n- In TypeScript and C++, you can optionally add the `override` modifier.\n- In Java, you can optionally annotate overridden methods with `@Override`.\n- In C#, you must use the `override` modifier.\n\n### Abstract Class\nAn abstract class is just one you can't instantiate, *forcing* the user to choose and instantiate a specific concrete subclass that inherits from the abstract class. \n\nAbstract classes let you define **both** *concrete methods* and *abstract methods*. If you find that you don't need to define concrete methods, which is usually the majority of the time, then consider using an [[software-engineering/concepts/programming/Object Oriented Programming#Interface|interface]] instead.\n\n**Differences between languages**\nMaking a class abstract differs between programming languages.\n- In TypeScript, prefix a class with `abstract`.\n- In C#, prefix a class with `abstract`.\n- In C++, give the class at least one [[software-engineering/programming-languages/C++|pure virtual function]], eg. `virtual void foo() = 0;`. There is no `abstract` keyword.\n\n#### Abstract Method\n*You can only define abstract methods inside an abstract class*. Abstract methods are ones that **must be overridden** and implemented by the subclasses. If you want to provide a default implementation and allow for subclasses to optionally override a method, use [[software-engineering/concepts/programming/Object Oriented Programming#Virtual Method|virtual methods]] instead.\n\nYou cannot make abstract methods static.\n\n**Differences between languages**\nTo define abstract methods:\n- In TypeScript, you'd use the `abstract` modifier.\n- In C#, you'd use the `abstract` modifier.\n- In C++, define a pure virtual function: `virtual void foo() = 0;`.\n\n### Virtual Method\nVirtual methods are methods that can be overridden by subclasses. To force subclasses to implement a method, use [[software-engineering/concepts/programming/Object Oriented Programming#Abstract Method|abstract methods]] instead.\n\nYou cannot make virtual methods static.\n\n**Differences between languages**\nTo define virtual methods:\n- In some languages like C# and TypeScript, methods are virtual by default.\n- In C++, you'd use the `virtual` modifier, but it's a little complicated because you can still override methods without it. See [this StackOverflow post](https://stackoverflow.com/questions/2391679/why-do-we-need-virtual-functions-in-c).\n\n### Interface\nAn interface is a 'contract' that defines what a user can do with the classes that *implement* that interface. You define the methods (and sometimes constants) that the interface supports, and then leave the implementation details to the subclasses. An interface is not a class, so you cannot instantiate it.\n\nYou **cannot supply any implementation** inside interfaces. If you want to provide *some* concrete methods, then consider using an [[software-engineering/concepts/programming/Object Oriented Programming#Abstract Class|abstract class]] instead. That being said, some programming languages like C# let you implement a static members inside an interface.\n\n**Differences between languages**\n- In TypeScript, you define an interface like this: `interface Blog { ... }`, but it's also used generally outside of OO design.\n- In C#, you define an interface like this: `public interface IFoo { ... }`.\n- In C++, there is no native concept of interfaces, but you can simulate it by making an abstract class whose methods *are all* abstract, ie. all of them are pure virtual functions. Implementing an interface is therefore the same as inheritance.\nAll interface members are public by default.\n\n## Criticisms of OOP\nSee [Object-Oriented Programming is Bad](https://www.youtube.com/watch?v=QM1iUe6IofM).\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/Programming-Paradigm":{"title":"Programming Paradigms","content":"A *programming paradigm* describes a general *strategy* for how to write software. Formally, a 'paradigm' in everyday English is:\n\u003e A set of assumptions, concepts, values, and practices that constitutes a way of viewing reality for the community that shares them.\n\nBelow is a hierarchy of very popular, battle-tested programming paradigms, each with their own pros and cons. You can solve pretty much *any* software problem in *any* paradigm, really, but the solution will differ in terms of scalability, maintainability, difficulty, etc.\n![[software-engineering/concepts/programming/assets/programming-paradigms.png]]\n**Note**: there are more paradigms than shown here.\n\nProgramming languages often support multiple programming paradigms. For example, JavaScript supports both [[software-engineering/concepts/programming/Object Oriented Programming|object-oriented programming]] and [[software-engineering/concepts/programming/Functional Programming|functional programming]] (and more).\n\n### Imperative\nPrograms are a set of precise instructions for the machine to perform that mutate program state.\n- **Procedural** ‚Äì programs are just a sequential collection of data and functions (procedures) acting on that data. C is a classic example of a procedural language.\n- **Object-oriented** ‚Äì programs are just objects interacting with each other. Objects are just a container that groups together some data and methods (functions). \n\n### Declarative\nPrograms should be written descriptively, meaning that your code should always express the 'what' rather than the 'how'. SQL, for example, is a declarative language, since the statement `SELECT * FROM Table` expresses what you want, but the 'how' is delegated tot he SQL engine. Ultimately, \n- **Functional** ‚Äì programs are made by calling and composing functions.\n\nUltimately, languages that support a declarative paradigm are just abstractions over an imperative 'backend'.\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/Semaphore":{"title":"Semaphores","content":"\nA semaphore is something that only one thread can own. It's used to coordinate access to a shared resource by forcing threads to first acquire the semaphore before accessing the resource. If a thread sees that the semaphore has already been acquired, then it must wait for it to be unlocked by the thread that is currently holding it.\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/programming/Type-System":{"title":"Type System","content":"\nA *type system* is a set of rules defined by a programming language specification that assigns a *type* to every variable, expression, function, and possibly other things beyond those. \n\n### Why Type Systems Exist\nType systems exist for one reason: to help you write less buggy code in a more self-documenting way.\n- Giving variables, values, functions, etc. a *type* restricts the set of things you can do with them which helps us by minimising the chance of creating situations where the program tries to add the integer `3` to an instance of `Cat`. \n- It forces users of an interface to always supply an expected value.\n\n### Static Typing\nA *statically typed language* is one where the type system's rules are checked when you run the compiler (ie. at compile-time). It's called 'static' because any type system violations are caught before you execute a single line of your program.\n- Languages like [[software-engineering/programming-languages/C|C]] and [[software-engineering/programming-languages/Java|Java]] are statically typed. Every valid C or Java program will always know what type an expression, variable, function has before execution.\n\n### Dynamic Typing\nA *dynamically typed language* is one where the type system's rules are checked during the execution of the program rather than at compile-time. In other words, nothing has a type until you run the program, and only then do the types get assigned to expressions, variables, functions, etc.\n- [[software-engineering/programming-languages/Python|Python]] is a dynamically typed language. You could code up some very obvious type errors like `x = 1 + \"hi\"` but the program will run fine until it actually executes that line.\n- There is an important trade-off to recognise between static typing and dynamic typing: you would get fewer run-time errors with static typing, however dynamic typing affords you far more flexibility, which generally helps you implement things faster (at least in the short-term).\n\n### Strong Typing\nThere's a lack of a formal definition for this, but a *strongly typed* language is basically one where it is *not possible* for the developer to bypass the type system's rules. In other words, a value's type never changes in unexpected ways, such as through *implicit casts*.\n- [[software-engineering/programming-languages/Python|Python]] is a strongly typed language. It's not possible to implicitly typecast values.\n- **Note**: a language can be both strongly and dynamically typed.\n\t```python\n\tx = 42\n\tx = \"Hello\"\n\t```\n\n### Weak Typing\nJust like *strong typing*, there is a lack of a formal definition, but in general: weakly typed programming languages are ones that have a more relaxed enforcement of its type system's rules, meaning that it's possible to violate/bypass them.\n- [[software-engineering/programming-languages/C|C]] is a classic weakly typed language. Pointers and integers are pretty much fully interchangeable, and you can freely convert a pointer of any type to a pointer of any other type.\n\t\u003e \"C is not a strongly-typed language, but as it has evolved, its type checking has been strengthened. \" - Dennis Ritchie.\n- [[software-engineering/programming-languages/JavaScript|JavaScript]] is also a weakly typed language. It's notorious for silently producing (sometimes hilariously) unintuitive results.\n\t```javascript\n\t\"11\" + 1 === \"111\"\n\t\"11\" ‚Äî 1 === 10\n\n\t('b' + 'a' + + 'a' + 'a').toLowerCase() === \"banana\"   // See an explanation: https://stackoverflow.com/questions/57456188/why-is-the-result-of-ba-a-a-tolowercase-banana\n\t```\n \nSometimes, we talk about the relative *weakness* of the type system between different programming languages. Eg. C++ is not strongly typed, however it is consider 'stronger' than C.\n\n**Note**: people often confuse *weak* typing to mean *dynamic* typing, and *strong* typing with *static* typing. They're completely separate. For example, C is both weakly typed and statically typed, while Python is both strongly typed and dynamically typed.\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/testing/Arrange-Act-Assert":{"title":"Arrange, Act, Assert","content":"\nThe 'arrange, act, assert' mantra is a pattern for structuring your [[software-engineering/concepts/testing/Unit Testing|unit tests]] (as well as integration tests and e2e tests). \n\nThe contents of a test should be partitioned into 3 parts in the following order:\n1. **Arrange** ‚Äì the setup code that's required before you can test what you want to test.\n2. **Act** ‚Äì the code that executes what the test intends to do. \n3. **Assert** ‚Äì the code that makes assertions about what the aftermath should be. \n\nSome simple, concrete examples of this pattern:\n1. Unit testing a C++ function (using [[software-engineering/technologies/GoogleTest|GoogleTest]]). This tests a `SymbolTable` class that's meant to be used as a supporting data structure for a [compiler project](https://github.com/Tymotex/Nand2Tetris).\n\t```c++\n\tTEST(SymbolTableTestSuite, InsertAndRetrieveTest) {\n\t    // Arrange.\n\t    SymbolTable symbol_table;\n\n\t\t// Act.\n\t    symbol_table.define(\"myVar\", \"int\", \"var\");\n\n\t\t// Assert.\n\t    EXPECT_EQ(symbol_table.data_type(\"myVar\"), \"int\");\n\t    EXPECT_EQ(symbol_table.declaration_type(\"myVar\"), DeclarationType::VAR);\n\t    EXPECT_EQ(symbol_table.segment_index(\"myVar\"), 0);\n\t}\n\t```\n1. Unit testing a frontend React component (using [[software-engineering/technologies/Jest|Jest]]). This tests the breadcrumbs component on the portfolio website, [timz.dev](https://timz.dev).\n\t```typescript\n\tdescribe(\"Breadcrumbs\", () =\u003e {\n\t    test(\"All crumbs are rendered\", () =\u003e {\n\t\t\t// Arrange.\n\t        render(\n\t            \u003cBreadcrumbs\n\t                crumbs={[\n\t                    { title: \"Home\", url: \"/\" },\n\t                    { title: \"Projects\", url: \"/projects\" },\n\t                    {\n\t                        title: \"My Sentient Robot\",\n\t                        url: \"/projects/my-sentient-robot\",\n\t                    },\n\t                ]}\n\t            /\u003e,\n\t        );\n\n\t\t\t// Act.\n\t        const home = screen.getByText(/Home/i);\n\t        const projects = screen.getByText(/Projects/i);\n\t        const sentientRobot = screen.getByText(/My Sentient Robot/i);\n\n\t\t\t// Assert.\n\t        expect(home).toBeInTheDocument();\n\t        expect(projects).toBeInTheDocument();\n\t        expect(sentientRobot).toBeInTheDocument();\n\t    });\n    });\n\t```\n1. E2E testing a web app (using [[software-engineering/technologies/Cypress|Cypress]]). This tests that the portfolio website, [timz.dev](https://timz.dev), is able to load the about page via a link on the homepage.\n\t```typescript\n\tdescribe(\"Portfolio page tests\", () =\u003e {\n\t    it(\"should render the about page after the 'about' link is clicked\", () =\u003e {\n\t        // Arrange.\n\t        cy.visit(\"http://localhost:3000\");\n\t        cy.wait(1000);\n\t\n\t        // Act.\n\t        cy.contains(\"About\").click(); // The homepage should show\n\t        cy.wait(1000);\n\t\n\t        // Assert.\n\t        cy.url().should(\"include\", \"/about\");\n\t        cy.contains(\"Who am I?\");\n\t    });\n\t});\n\t```\n\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/testing/End-To-End-Testing":{"title":"End To End Testing","content":"\nEnd-to-end (e2e) tests are tests that aim to simulate the user experience as closely as possible and will look almost like manual testing, but automated.\n\nAlthough end-to-end tests are immensely valuable, it's worth considering reasons why you might not want to write them:\n- They're slow to write and slow to run. It'll take a lot of valuable engineering time to write out e2e tests, and it'll consume valuable seconds of a cloud CI server that you're paying for.\n- They're often a lot more *brittle* than integration tests or unit tests, meaning that if your application requires some minor or major change, it might mean tweaking your e2e tests. This complicates software maintenance.\n\nIn general, only invest more resources into e2e tests when you've extracted most of the value from the tests lower in the Agile 'testing pyramid':\n![[software-engineering/concepts/testing/assets/testing-pyramid.png|300]]\n*[Image source](https://www.ministryoftesting.com/dojo/lessons/the-mobile-test-pyramid)*.\n\n","lastmodified":"2022-09-12T23:20:41.858338926Z","tags":null},"/software-engineering/concepts/testing/Integration-Testing":{"title":"Integration Testing","content":"\nIntegration tests, also called 'end-to-end' tests, are... TODO.\n\n\n\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/concepts/testing/Unit-Testing":{"title":"Unit Testing","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/C":{"title":"C","content":"\n\n### Spiral Rule\nSee [the Clockwise/Spiral Rule](https://c-faq.com/decl/spiral.anderson.html).\nTODO.\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/C++":{"title":"C++","content":"\n\n#### Pure Virtual Function\nPure virtual functions are exactly the same as [[software-engineering/concepts/programming/Object Oriented Programming|abstract methods]].\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/CSS":{"title":"CSS","content":"\n*CSS* (Cascading Style Sheets) is a declarative language for describing document styling. Also see [[software-engineering/programming-languages/SCSS|SCSS]].\n\n## Writing Maintainable CSS\nSome simple guidelines for writing maintainable CSS code. See [MaintainableCSS](https://maintainablecss.com/).\n- Prefer semantic class names.\n    ```html\n    \u003c!-- Semantic --\u003e\n    \u003cdiv class=\"searchResults\"\u003e\n    \u003c!-- Not semantic --\u003e\n    \u003cdiv class=\"red pull-down m-2\"\u003e\n    ```\n    \u003e \"... use values that describe the nature of the content, rather than values that describe the desired presentation of the content\"\n- Stick with a naming convention like this:\n    ```css\n    .module[-component][-state] { ... }\n\n    /* Examples: */\n    .breadcrumbs-link { ... }\n    .breadcrumbs-link-disabled { ... }\n    .breadcrumbs-separator { ... }\n    ```\n- Avoid using IDs just as hooks for styling.\n- Avoid undoing styling rules, eg. resetting styles provided by bootstrap or by another one of your CSS rules elsewhere.\n- Write comments as if you were documenting regular program source code, *especially if you write rules that are meant to solve an issue*. CSS is usually a huge pain for people, so please remember to help your future self, and especially others working with your code.\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/Dart":{"title":"Dart","content":"\n![[software-engineering/programming-languages/assets/dart-wallpaper.png|700]]\n\nDart is a [[software-engineering/concepts/programming/Type System#Static Typing|statically-typed]] and [[software-engineering/concepts/programming/Object Oriented Programming|object-oriented]] programming language, designed specifically for building cross-platform apps/frontends that can be run on Android, iOS, native desktop (Windows, macOS, Linux) and web browsers. Its syntax is similar to a merging of Java, JavaScript and TypeScript. Although it's intended to be used for building frontends, Dart can also be used on the server, just like JavaScript.\n\n## Compilation Model\nThe Dart [[software-engineering/concepts/devops/Virtual Machines#Process Virtual Machine|virtual machine]], which ships with the [Dart SDK](https://dart.dev/get-dart), enables Dart code to be compiled to the native (machine) code for mobile devices or desktops.\n\nDart source code can also be transpiled to [[software-engineering/programming-languages/JavaScript|JavaScript]] for the web browser (using [dart2js](https://dart.dev/tools/dart2js), which also ships with the Dart SDK).\n\nJIT compilation. \n\nAOT compilation.\n\n## Core\n\n**Questions**\n- ' vs \"\n- When invoking functions, you can set named parameters like `color: Colors.red`\n- Callbacks: `(params) { ... }` and `(params) =\u003e ...`?\n- `const`\n---\n\n`final`\nFloored division: `5 ~/ 2 == 2`\n\nTernary operator: `() ? () : ()`.\n\n\nAny identifier whose name starts with `_` becomes privately scoped to the file it's in. No other file in the project can access that identifier.\n\n\nSet: `\u003cType\u003e{}`\n\nArray: `\u003cType\u003e[]`\n \n## Dart Libraries\nTODO core libraries: https://dart.dev/guides/libraries/library-tour\n\nTODO: pub.dev\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/Go":{"title":"Go","content":"\n![[software-engineering/programming-languages/assets/go-wallpaper.png|800]]\n\nGo is a [[software-engineering/concepts/programming/Programming Paradigm|statically-typed]] *compiled* language inspired by [[software-engineering/programming-languages/C|C]] in design, but aims to provide memory safety, ease of usage, and the high performance of close-to-metal languages like [[software-engineering/programming-languages/C++|C++]] and [[software-engineering/programming-languages/Rust|Rust]], which Go is often compared to. The main overarching difference is that Go makes language design decisions that favour ease of usage over speed.\n\nNotably, Go is credited for improving the developer experience in writing [[software-engineering/concepts/programming/Concurrency|concurrent]] code with concurrency constructs built into the language. It's also credited with very fast compilation/build times, which is one reason why Go is prevalent in [[software-engineering/DevOps|DevOps]].\n\nGo is general-purpose, but it's typically used for building:\n- Backend servers in combination with a framework like [Gin](https://gin-gonic.com/).\n- Complex scripts and CLIs, especially as an [[software-engineering/Site Reliability Engineering|SRE]]. For one-off scripts, [[software-engineering/programming-languages/Python|Python]] is quicker to write, but for long-lived scripts used frequently, Go might be better.\n- Data-intensive algorithms.\n\n---\n\n\u003e I learned Go mainly from the official ['A Tour of Go'](https://go.dev/tour/) tutorial and official docs.\n\n## Packages\nAll Go programs consist of *packages*, which consist of source files defining a bunch of functions, variables, etc. Program execution starts in the `main` package. \n\nOutside of the standard library, there is a rich Go packages ecosystem searchable at [pkg.go.dev](https://pkg.go.dev). This is an [awesome community list](https://awesome-go.com/) of packages.\n\n### Imports\nImport statements like `import fmt` creates a binding `fmt` that lets you access the package's functions.\n- If you do `import math/rand`, it uses the last name in the path to create the binding, creating the `rand` binding in this case.\n- It's preferred to group import statements into parentheses:\n\t```go\n\timport (\n\t    \"fmt\"\n\t    \"math\"\n\t)\n\t```\n\n### Exports\nA binding is exported if it starts with a capital letter, otherwise, it remains only accessible within its package. It's that simple.\n\n## Variables\nVariables are declared with `var` and can be done at the package-level or function-level.\n```go\n// Package-level variables.\nvar foo string = \"Hi\"\n\nfunc main() {\n\t// Function-level variables.\n\tvar bar int = 42\n\n\t// An equivalent short-hand syntax using :=\n\t// Note how the type of `baz` is inferred.\n\tbaz := 24\n}\n```\n- Types always come *after* the variable/parameter name, like [[software-engineering/programming-languages/TypeScript|TypeScript]]. **Why?** In short, with C-style type declaration, complex types quickly become unreadable, eg. `int (*foo)(int (*)(int, int), int)`. By specifying the type after the symbol name, you have significantly more readable complex types: `foo func(func(int, int) int, int) int` ([official blog](https://go.dev/blog/declaration-syntax)).\n- Uninitialised variables will take on a default value defined by the language standard: `0` for numeric types, `false` for boolean, `\"\"` for strings.\n\n### const\nLike in JavaScript, you can make bindings `const` which prevents them from being reassignable after being declared.\n```go\nconst Pi = 3.14\n```\n\n## Type System\nGo is statically-typed, so the type of every symbol should be known at compile-time.\n\n### Primitive Types\nGo's primitive types include: `bool`, `string`, `int` (and all its variants like `uint` and `int64`), `float32`,`float64`, `complex64` and `complex128` for complex numbers.\n\n## Functions\nFunctions declarations look like this in Go. \n```go\nfunc foo(a int) int {   // \n\treturn a + 42;\n}\n```\n\n### Multiple Return Values\nUnlike most languages, you can return multiple values without needing to wrap it in a data structure.\n```go\nfunc foo() (int, int) {\n\treturn 42, 24\n}\n\nfunc main() {\n\ta, b := foo()    // a ‚Üí 42, b ‚Üí 24.\n}\n```\n\n## Basic Constructs\n### Looping\nAll looping is done with `for`. You never use parentheses.\n```go\n// Regular for-loop.\nfor i := 1; i \u003c 42; i++ {\n\t// ...\n}\n\n// While loops.\nfor i \u003c 42 {\n\t// ...\n}\n```\n\n### If-Else\nGo has regular `if`, `else if`, `else` like most languages, but you never use parentheses.\n```go\nfunc main() {\n\ttheme := \"dark\"\n\tif theme == \"dark\" {\n\t\tfmt.Println(\"üåô\")\n\t} else if theme == \"light\" {\n\t\tfmt.Println(\"‚òÄÔ∏è\")\n\t} else {\n\t\tfmt.Println(\"üé®\")\n\t}\n}\n```\n\n### Switch\nGo has a switch-case construct like most languages, but it's unnecessary to `break` after each case to prevent 'running through' each case.\n```go\nswitch theme {\n\tcase \"dark\":\n\t\tfmt.Println(\"üåô\")\n\tcase \"light\":\n\t\tfmt.Println(\"‚òÄÔ∏è\")\n\tdefault:\n\t\tfmt.Println(\"üé®\")\n}\n\n// Switch-case blocks don't need a switch condition. You can omit it to write a cleaner\n// version of a long if-else-if sequence.\nswitch {\n\tcase x \u003e 0:    // if \n\t\t// ...\n\tcase x \u003c 0:    // else if\n\t\t// ...\n\tdefault:       // else\n\t\t// ...\n}\n```\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/HTML":{"title":"HTML","content":"\n## SVGs\nSee [[software-engineering/concepts/graphics/SVGs|SVGs]]. You can put SVGs into an HTML document in the following ways:\n1. You can just put the `\u003csvg\u003e` element in directly.\n2. You can link to an SVG file with `\u003cimg src=\"my.svg\"\u003e`.\n3. You can link to an SVG file with a raster fallback with `\u003cobject data=\"my.svg\" type=\"image/svg+xml\"\u003e\u003cimg src=\"fallback.png\" /\u003e\u003c/object\u003e\"`\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/Java":{"title":"Java","content":"\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/JavaScript":{"title":"JavaScript","content":"\nTODO.\n\nThere's also [[software-engineering/programming-languages/TypeScript]].\n\n\n\n### Rest Operator\nTODO.\n\n\n### Generators\nTODO.\n\n## Object Oriented Programming\n### Classes\nTODO.\n\n### Inheritance\nTODO.\n\n### Prototypes\nTODO.\n\n\n## Modules\nFirst, a brief timeline of JavaScript's weird module system development:\n- **1995**: JavaScript was born, but there was no concept of modules which made building complex applications extremely hard. Without modules, a single huge javascript file might be shipped to the user.\n- **2009ish**: people introduced a module system to take advantage of the [[software-engineering/concepts/programming/Code Splitting|code splitting]] optimisation technique where modules are lazily loaded.\n- **2009ish**: Node.js was developed and introduced the [[software-engineering/programming-languages/JavaScript#CommonJS|CommonJS]] module standard, but this was only usable in server-side environments.\n\t- **2011**: [Browserify](https://browserify.org/) made it possible to use `require` in frontend projects.\n- **2009ish**: the [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) module standard was popularised.\n- **2015**: ES2015 standardised the [ES Modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) `import`/`export` syntax.\n\n### CommonJS\nTODO.\n\n\n### Dynamic Import\n`import(path)`\n\n## Asynchronous Programming\n\n### Event Loop\nTODO.\n\n\n\n.. multiplexing tasks over a single thread, which means there is no need for mutexes, semaphores and other concurrency helpers.\n\nan event-looped model is different from a multithreaded model.\n\nWhen you *do use real multithreading* in JavaScript (through [[software-engineering/programming-languages/JavaScript#Web Workers|Web Workers]] in a browser environment or forking to create child processes in a server environment), you rarely use shared memory, meaning there's no need to coordinate concurrent access to shared resources.\n\n### Web Workers\nTODO.\nWeb workers are background threads. They can \n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/Node.js":{"title":"Node.js","content":"\nTODO.\n\n\n\n\n## Filesystem APIs\n\n**Note**: In Node.js, the convention is generally for functions like `fs.readFile`, `fs.appendFile`, etc. to take in a callback as their *last argument* which has the signature `(error, data) =\u003e {...}`.\n\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/Python":{"title":"Python","content":"\n\n\n\n### Dunder Methods\nTODO.\n\n\n### Virtual Environments\n\n```bash\npython3 -m venv ./venv    # Create a virtual environment \n```\n\n\nBasic python installation\n```\n```\n\n\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/Rust":{"title":"Rust","content":"\nTODO: continue at chapter 3 in The Rust Programming Language book: https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html.\n\n![[software-engineering/programming-languages/assets/rust-wallpaper.png|800]]\n\u003e \"Rust's greatest ambition is to eliminate the trade-offs that programmers have accepted for decades by providing safety *and* productivity, speed *and* ergonomics.\" ‚Äî *The Rust Programming Language*\n\nRust is a [[software-engineering/concepts/programming/Type System#Strong Typing|strong]] [[software-engineering/concepts/programming/Type System#Static Typing|statically typed]] low-level programming language that supports many [[software-engineering/concepts/programming/Programming Paradigm|programming paradigms]]. It's designed to have comparable performance to C/C++ while offering great developer experience and preventing pitfalls in low-level programming such as memory leaks, security vulnerabilities, etc.\n\n\u003e Rust is named after [a fungus](https://en.wikipedia.org/wiki/Rust_(fungus)) that is robust, distributed, and parallel.\n\nWhen you install Rust, you also get the following CLIs:\n- `rustup` ‚Äî a Rust version manager.\n- `rustc` ‚Äî the [[software-engineering/concepts/programming/AOT|ahead-of-time]] Rust compiler, similar to `gcc` for C/C++. For bigger projects, you'd use `cargo` to compile and run the project, not `rustc`.\n- `cargo` ‚Äî the dependency manager *and* build tool.\n- `rustfmt` ‚Äî a formatter for enforcing code style.\n\n## Core\nEvery Rust program must implement one `main` function as the entrypoint to the program.\n\n### Variables\nDeclare variables with `let`.\n- All variables are immutable by default.\n    - In languages like JavaScript or C++, you'd explicitly specify this with the `const` qualifier.\n- Use the `mut` qualifier to allow a variable to be assigned to another value after initialisation.\n    ```rust\n    let mut i = 0;\n    ```\n- Rust implements type inference, similar to TypeScript.\n- *Variable shadowing* is allowed. Instead of getting a 'variable redefinition' error, Rust lets you reuse the same binding which is useful for when you need to typecast.\n    ```rust\n    let mut meaningOfLife: String = \"Forty two\";\n    let meaningOfLife: u32 = 42;\n    ```\n\n#### References\nYou can pass a reference to a variable in function calls so that they read/write to the same variable's memory. Like variables, *references are immutable by default*, even if it's a reference to a mutable variable.\n\n```rust\nlet mut buffer = String::new();\nio::stdin()\n    .read_line(\u0026mut buffer)\n    .expect(\"Failed to read from stdin.\");\n```\n\n### Functions\n### Macros\nYou invoke macros the same way as invoking functions, but you append `!` to the macro name.\nEg. `println!(\"Hello world\")` invokes the `println` macro.\n\n### Strings\n\nExpressions can be interpolated into strings with `{}`. For example: `\"Hello {name}\"`.\n\n### Imports\n\nLike C++, Rust has a standard library accessible under the `std` namespace. \n\nWrite `use` statements to bring new bindings into scope in the current file. For example: `use std::io`.\n\n### Memory Management\nRust does not use a garbage collector to implement memory safety like in most languages. Instead, it achieves memory safety through *ownership and borrowing*.\n\n### Pattern Matching\n`match` expressions consist of *arms*, each of which contain a pattern/condition and the code to execute when that pattern/condition is matched. \n\n### Traits\n\n### Error Handling\nError handling is done through `std::result::Result`. \n... `Result` is an enum that can exist in multiple states, eg. `Ok` and `Err`.\n- `Ok` wraps around the successful path's expected value.\n- `Err` contains information about the failure.\n\n### Cargo\nRust projects using Cargo must go by a standard directory structure where all source code is kept in `src`. \n```bash\ncargo new \u003cproject_name\u003e  # Creates a new directory, boilerplate and `Cargo.toml` file.\ncargo build               # Compiles the project, dumping to output to a `target` directory.\n    --release             #   ‚Üí builds and optimised executable for production.\ncargo run                 # Compiles and runs the project.\ncargo check               # Sanity-checking that compilation works. Doesn't produce executables.\n\ncargo doc --open          \n``` \n\nWe call dependencies 'crates'. They can either be *binary crates*, which build to an executable, or *library crates*, which contain code that is to be consumed by other crates. External dependencies are fetched from the registry: [crates.io](https://crates.io/).\n\n## WebAssembly\n\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/SCSS":{"title":"SCSS","content":"\n*SCSS* (Sassy CSS) is a superset of [[software-engineering/programming-languages/CSS|CSS]] with more quality of life language features such as:\n- Variables.\n- Nested rules.\n- Mixins.\n- Modules.\n- Partials.\n\nSCSS is transpiled into CSS that the browser can interpret by a preprocessor.\n\n**SCSS vs. Sass**:\nThey're actually two different syntaxes. SCSS is the newer syntax, while Sass is an older syntax that uses Python-like indentation:\n![[software-engineering/programming-languages/assets/scss-vs-sass.png|500]]\nSCSS is more commonly used.\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/SQL":{"title":"SQL","content":"\n\nTODO.","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/programming-languages/TypeScript":{"title":"TypeScript","content":"\n![[software-engineering/programming-languages/assets/javascript-wallpaper.png|600]]\n\nTypeScript is a programming language made by Microsoft that is *superset* of [[software-engineering/programming-languages/JavaScript|JavaScript]]. The reason that TypeScript exists is to make complex JavaScript projects more maintainable and less error-prone by introducing a [[software-engineering/concepts/programming/Type System#Static Typing|static]] and [[software-engineering/concepts/programming/Type System#Strong Typing|strong]] type system. Essentially, it just gives developers a lot of quality-of-life improvements over JavaScript.\n\n*Note*: TypeScript gets compiled (or more precisely, '*transpiled*') to JavaScript in the end. This is not new, languages like CoffeeScript, Dart, Scala, etc. can all have JavaScript as what we call a *compilation target*.\n\n\u003e I learned TypeScript from the official docs and from the 'Programming TypeScript' textbook by Boris Cherny.\n\n**Why TypeScript is [loved](https://survey.stackoverflow.co/2022/#most-loved-dreaded-and-wanted-language-love-dread)**\n- Your IDE/editor gets more information about your code and give you very helpful intellisense and code-completion that is not possible with JavaScript. This reason alone, in my experience, pretty much negates any loss in developer velocity from using TypeScript over JavaScript.\n- Many errors will surface *as you're developing* rather than after your code is deployed to production and angry customers complain to you.\n- Types serve as a useful concise form of documentation for how your functions are to be used and what fields an object contain.\n- Complex objects are much *less unpleasant* to work with. You'll know what its *shape* is (basically what properties it has and what its nested objects look like), what properties are compulsory or optional and you'll actually know when you've mispelt a property name.\n- You'll *almost* never have `cannot read property '...' of undefined` again.\n\n## Setup\nInstall Node.js, `npm` or `yarn`. Then, install `tsc`, the open-source typescript compiler, as a dev dependency in a javascript project:\n```bash\nyarn init   # Inside the project root directory, if it's a new project.\nyarn add --dev typescript @types/node ts-node\n```\n### tsconfig.json\nEvery typescript project should have a `tsconfig.json` file at the root of the project directory. It tells `tsc` which files to compile, where to dump the resulting javascript, and so on. A basic config looks like this (but there are so many [more options](https://www.typescriptlang.org/tsconfig)):\n```json\n{\n\t\"compilerOptions\": {\n\t\t\"lib\": [   // Which APIs are available to the transpiled JS code? Eg. es2015 has Function.prototype.bind, etc.\n\t\t\t\"es2015\"\n\t\t],\n\t\t\"module\": \"commonjs\", // Which module system should be used by the transpiled JS code?\n\t\t\"outDir\": \"dist\",     // Where should the output JS files go?\n\t\t\"sourceMap\": true,    // Whether to generate a source map.\n\t\t\"strict\": true,       // All code must be properly typed.\n\t\t\"target\": \"es2015\"    // What JS version to compile to.\n\t},\n\t\"include\": [   // Directories containing .ts files we want to transpile.\n\t\t\"src\"\n\t]\n}\n```\nAlternatively, you can generate a `tsconfig.json` with `tsc --init`.\n\nSome recommended flags include:\n- `noImplicitThis` ‚Äì forces a type to be explicitly assinged to `this` inside functions. See [[software-engineering/programming-languages/TypeScript#this|TypeScript this]].\n- `noImplicitOverride` ‚Äì you must always use the `override` modifier for method overriding.\n- `noFallthroughCasesInSwitch` ‚Äì every case must either `break` or `return`.\n- [`esModuleInterop`](https://www.typescriptlang.org/tsconfig#esModuleInterop) ‚Äì makes it more smooth to consume JavaScript modules that use CommonJS, AMD or other module systems.\n\n## Typing\nBroadly speaking, in programming languages, a *type* is a [[maths/discrete-maths/Set Theory#Sets|set]] of values, plus the properties/methods available to them.\n\n### Assigning Types\nAssigning types is straightforward in TypeScript, you just postfix a variable or parameter with a colon and a type. \n```typescript\n// Typing variables.\nlet a: number = 42;\nlet b: string;\n```\n\n### Defining Types\nRemember, types are just [[maths/discrete-maths/Set Theory#Sets|sets]] of values. When you define a *type*, you are just defining a set of values. The following are all examples of custom types you can define:\n```typescript\ntype TwoOrFour = 2 | 4;                           // The set consisting of 2 and 4.\ntype Value = string | number;                     // The set of all strings and all numbers.\ntype RandomThings = \"Hello\" | 42 | null | RegExp; // The set consisting of \"Hello\", 42, null and all instances of `RegExp`.\n```\n\nAn important thing to understand about TypeScript (and many other statically-typed languages) is that it has separate namespaces for *values* and *types*. This means that in the following example, a variable identifier with the same name as a type alias are not in conflict. TypeScript can infer if you meant the *value* or the *type*.\n```typescript\ntype hello = \"world\";\nconst hello: hello = \"world\";\n```\n\n#### Type Alias\nYou can declare *type aliases* in a very similar way as to how you define variables. Type aliases are block-scoped, just like local variables.\n```typescript\ntype Person = { age: number, name: string };\n\n// Typescript will never infer that `me` is of type `Person` unless you explicitly say.\nconst me: Person = {\n\tage: 21,\n\tname: \"Tim\"\n};\n```\n\n### Interface\nInterfaces are basically an alternative to [[software-engineering/programming-languages/TypeScript#Type Alias|type aliases]], but are mostly better suited for defining object shapes. You can't use `\u0026` or `|` for interfaces, but you can use `extends`.\n```typescript\n// With type aliases, to add additional fields on top another type, you'd use `\u0026`.\ntype Employee = { id: string; }\ntype SoftwareEngineer = Employee \u0026 { techStack: string[]; }\n\n// With interfaces, you just use `extends`, similar to how you do class inheritance.\ninterface Employee { id: string }\ninterface SoftwareEngineer extends Employee { techStack: string[]; }\n```\n\n#### Classes vs. Interfaces\nUsing `interface` does not actually generate any javascript code when transpiled. Using `class`, however, will generate JavaScript code, which enables `instanceof` to work at runtime. A `class Foo { ... }` definition actually creates a *value* `Foo` that can be used in expressions, and a *type* `Foo` that can be used as a type. \n\nInterfaces don't let you use [[software-engineering/programming-languages/TypeScript#Access Modifiers|access modifiers]]. You can't supply implementations either.\n\nKeep these critical differences in mind when deciding between `class` or `interface`.\n\n### Assignability\nAssignability is about what the rules are around an assignment like this: `const a: A = b;`, where `b` is of type `B`. For assignment to be valid, it must be the case that:\n1. `B` is a subtype of `A` (basically that $B \\subseteq A$),\n2. ... or `B` is `any`. *Note*: this rule only exists to make it easier to interoperate with javascript code.\n\n#### Union and Intersection\nAgain, types are just *sets* of values. To expand the size of a set, you can union it with other sets, and to narrow the size of a set, you can intersect it other sets. In TypeScript, we use `|` to union two types and `\u0026` to intersect two types.\n```typescript\ntype Student = { id: string; degree: string };\ntype Tutor = { id: string; courses: string[] };\n\ntype StudentOrTutor = Student | Tutor;    // Set of all objects that are either `Student`, `Tutor`, or both.\ntype StudentAndTutor = Student \u0026 Tutor;   // Set of all objects containing all fields of `Student` AND `Tutor`.\n\nconst student: Student = { id: '111', degree: 'Bachelor of Science' };\nconst tutor: Tutor = { id: '222', courses: ['CS101'] };\nconst studentTutor: StudentAndTutor = {\n\tid: '333',\n\tdegree: 'Bachelor of Computer Science',\n\tcourses: ['CS201'],\n};\n\n// For `Student | Tutor`: you can assign any of: `Student`, `Tutor`, or `Student \u0026 Tutor`\nconst uniGoers: StudentOrTutor[] = [student, tutor, studentTutor];\n\n// For `Student \u0026 Tutor`: you can only have people who are simultaneously `Student` and `Tutor`.\nconst studentTutors: StudentAndTutor[] = [studentTutor];\n```\nTo make a type nullable, you can union it with `null` like this: `type MiddleName = string | null;`\n\n### TypeScript Built-In Types\nTypeScript introduces some new built-in data types that aren't present in JavaScript. These are: `any`, `unknown`, `void`, [`never`](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-never-type).\n#### any\nThe `any` type represents the set of *all* values. You can assign a variable of type `any` to a number, a string, a WebServer object, etc. Only use `any` as a last resort ‚Äì always prefer assigning the most specific type that you can. Often, people treat `any` as a way to 'opt' out of TypeScript for a small part of the code. When something is `any`, you are free to do erroneous things on it such as invoking methods on it that don't exist, using in arithmetic expressions, accessing undefined properties, etc.\n\n#### unknown\nThe `unknown` type represents the set of *all* values, just like `any`. The difference is that TypeScript does not allow you to use an `unknown` value until you perform [[software-engineering/programming-languages/TypeScript#typeof and instanceof|type checks]] \nor [[software-engineering/programming-languages/TypeScript#Refinement|refinement]] to narrow down what specific type the `unknown` value is. For this reason, `unknown` is considered the type-safe version of `any`.\n```typescript\nconst a: unknown = 30;\nif (typeof a === 'number') {\n\tconst b: number = a + 1; // Now that we are certain `a` is a number, we can use it as one.\n} else {\n\tconst b: number = a + 1; // Error.\n}\n```\n```typescript\nconst a: any = \"Hello\";\nconst b: unknown = \"World\";\n\na.toLowerCase();   // This is fine since `a` is `any`.\nb.toLowerCase();   // Error. We need a type check before \n```\n\n\u003e A useful way to think about `any` and `unknown` is: `any` means \"I don't care\", `unknown` means \"I don't know (yet)\". \n\n### Object Shape\nAn important part of using TypeScript effectively is in defining the *shape* of object values, or in other words, what properties they have and which ones must be assigned a value or are optional.\n```typescript\n// Let typescript infer the object shape.\n// `person` will be of type: { age: number, name: string }.\nconst person = {\n\tage: 42,\n\tname: \"Andrew\"\n};\n\n// You can also explicitly specify the object type. You might do this if you want to set narrower types for the properties.\nconst person: { age: number, name: \"Andrew\" } = {\n\tage: 42,\n\tname: \"Andrew\"\n};\n\n// Or more cleanly, define a type:\ntype Andrew = { age: number, name: \"Andrew\" };\nconst person: Andrew = {...};\n```\n**Note**: the built-in `object` type is the set of all objects, whether it's `{}`, `{hello: \"world\"}`, `[]`, `new Date()`, etc. It's only slightly more restrictive than `any`.\n\n#### Optional Properties\nBy default, all properties are treated as compulsory. To allow an object to not define a property, just postfix the property name with `?`.\n```typescript\ntype Person = {\n\tfirstName: string;\n\tlastName: string;\t\n\tmiddleName?: string;   // Objects of type `Person` can optionally set the `middleName` property.\n};\n```\n\n#### Immutable Properties\nYou can make properties immutable by prefixing the property name with the `readonly` property. It's like as if you declared a property as `const`, so once it's assigned for the first time, it cannot be reassigned.\n```typescript\ntype Person = {\n\tname: string;\n\treadonly dateOfBirth: string;\n};\n\nconst me: Person = { name: 'Tim', dateOfBirth: '09/03/2001' };\nme.name = 'Andrew';             // This is fine.\nme.dateOfBirth = '01/01/1970';  // Error.\n```\n\n#### Index Signatures\nWhen you want the flexibility for an object to contain more arbitrary properties with a certain key-value pair type, you can use the index signature syntax, `[key: K]: V`, where `key` can be any name you choose.\n```typescript\ntype FruitRatings = {\n\t[fruitName: string]: number;\n};\n\nconst myFruitRatings: FruitRatings = {\n\tapple: 6,\n\tbanana: 7,\n\tcherry: 9\n};\n```\n\n#### Indexed Access Types\nSee [indexed access types](https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html). When you define a type for an object shape, if you want to access a nested part of that shape as a type, you can just use the subscript operator `[]`.\n```typescript\ninterface Theme {\n\tcolour: {\n\t\tmode: 'light' | 'dark';\n\t\tpalette: {\n\t\t\tprimary: ['#0000FF', '#0044FF', '#0066FF', '#3388FF'];\n\t\t\tsecondary: ['#464646', '#616161', '#7E7E7E', '#AAAAAA'];\n\t\t};\n\t};\n}\n\ntype ColourOptions = Theme['colour'];\ntype Palette = Theme['colour']['palette'];\n```\nNope, you can't use the `.` operator as if you were accessing object properties.\n\n#### keyof\nThe `keyof` unary operator evaluates to the union of a type's keys.\n```typescript\ninterface Theme {\n\tcolour: {\n\t\tmode: 'light' | 'dark';\n\t\tpalette: {\n\t\t\tprimary: string[];\n\t\t\tsecondary: string[];\n\t\t};\n\t};\n}\n\ntype ColourProperties = keyof Theme['colour'];              // ‚Üí 'mode' | 'palette'\ntype PaletteProperties = keyof Theme['colour']['palette'];  // ‚Üí 'primary' | 'secondary'\n```\nThis is helpful for writing getter functions that retrieve values nested in an object:\n```typescript\nconst theme: Theme = {\n\tcolour: {\n\t\tmode: 'dark',\n\t\tpalette: {\n\t\t\tprimary: ['#0000FF', '#0044FF', '#0066FF', '#3388FF'],\n\t\t\tsecondary: ['#464646', '#616161', '#7E7E7E', '#AAAAAA'],\n\t\t},\n\t},\n};\n\nconst getPalette = (theme: Theme, palette: keyof Theme['colour']['palette']): string[] =\u003e {\n\treturn theme['colour']['palette'][palette];\n};\n\nconsole.log(getPalette(theme, 'primary'));\n```\n\n### Arrays\nTo denote a type as an array of items of type `T`, you can do `T[]` or `Array\u003cT\u003e` (they're [exactly the same](https://stackoverflow.com/questions/36842158/arraytype-vs-type-in-typescript)). \n```typescript\n// Array type declaration examples.\ntype Names = string[];\ntype People = { name: string; }[];\ntype Values = (string | number)[];\n```\nIn general, try to keep arrays *homogenous*, that is, of a singular type, otherwise you'd have to do type-checking before TypeScript can let you use the items of the array.\n```typescript\n// When arrays are not homogenous, that is, of one type, you'd have to do some type checking to work with its items.\nconst arr: (string | number)[] = [42, \"Hello\"];\n\narr.forEach(item =\u003e {\n\tif (typeof item === 'number') {\n\t\t// You can use `item` as a number after you've type-checked it.\n\t\tconst num = item * 3;\n\t\tconsole.log('Number: ', num);\n\t} else {\n\t\t// `item` must be a string\n\t\tconst s = item + \" world\";\n\t\tconsole.log('String: ', s);\n\t}\n})\n```\n\nArrays are always mutable by default in TypeScript, that is, you can reassign the value at any index and invoke methods that make in-place modifications like `push` or `reverse`. To make them immutable, you would prefix them with the `readonly` modifier.\n```typescript\ntype Names = readonly string[];\nconst radioheadMembers: Names = ['Thom', 'Johnny', 'Colin', 'Phil', 'Ed'];\n\nradioheadMembers[1] = 'Tim';  // Error.\n```\n\n### Tuples\nRemember, tuples are just *fixed-length arrays*. In typescript, we define a tuple by specifying the type of each item like: `[T1, T2, ...]`:\n```typescript\ntype FullName = [string, string, string?];  // You can make items optional in a tuple, just like for objects.\n                                            // Note: this is basically the same as: `[string, string] | [string, string, string]`.\nconst elon: FullName = [\"Elon\", \"Reeve\", \"Musk\"];\nconst jeff: FullName = [\"Jeff\", \"Bezos\"];\n```\nYou can also make use of the [[software-engineering/programming-languages/JavaScript#Rest Operator|rest operator]], `...`, to allow for tuples of arbitrary lengths.\n```typescript\ntype FullName = [string, string, ...string[]];\nconst queenElizabethII = ['Elizabeth', 'Alexandra', 'Mary', 'Windsor'];\n```\n\n**Caveat**: *tuples are not immutable by default*.\nUnlike in other languages like Python, the items of a tuple in TypeScript *can* be mutated, that is, reassigned after definition. To make tuples immutable, you would do the same thing as you would for making arrays immutable: prefix it with the `readonly` modifier.\n```typescript\ntype Coordinate = readonly [number, number];\nconst point: Coordinate = [1, 2];\n\npoint[0] = 3;   // Error.\n```\n\n### Enums\nEnums are data types that have a *fixed set* of constant values. They're a great way to group together a lot of related constants. *Note*: JavaScript doesn't have enums.\n```typescript\nenum Theme {\n\tLight,\n\tDark,\n\tHighContrastLight,\n\tHighContrastDark\n};\n\n// You access the fields of the enum in the same way that you'd access an object.\nconst theme: Theme = Theme.Dark;\n```\nIn the example above, every enum value gets implicitly assigned a counter value starting from 0. It's equivalent to doing the following:\n```typescript\nenum Theme {\n\tLight = 0,\n\tDark = 1,\n\tHighContrastLight = 2,\n\tHighContrastDark = 3\n}\n```\nYou can also map enum keys to string values instead of integers. \n```typescript\nenum Theme {\n\tLight = '#CCCCCC',\n\tDark = '#333333',\n\tHighContrastLight = '#FFFFFF',\n\tHighContrastDark = '#000000',\n}\n```\n\n#### Caveats\nOne annoying issue is that you can freely assign numbers to enum types that are clearly outside the bounds of the enum values.\n```typescript\nenum Theme {\n\tLight,\n\tDark,\n\tHighContrastLight,\n\tHighContrastDark,\n}\nconst theme: Theme = 6; // No complaints from TypeScript.\n```\nIn general, the official docs advise you to avoid enums unless they help significantly with readability. Alternatives to enums include string literals, eg. `type Theme = \"Light\" | \"Dark\" | ...`, or object literals, eg. `const Theme = { Light: \"Light\", Dark: \"Dark\", ... }`.\n\n### Type Inference\nYou don't have to always supply an explicit type. Often, there'll be enough context for TypeScript to figure it out without ambiguity. In general, we prefer type inference over explict assigning types to varaibles/parameters/etc. for conciseness.\n```typescript\nlet a: number = 42;   // There is no need to do this. It's clear what type `a` is from the RHS of the assignment.\nlet b = 42;           // Equivalent to above, but it lets typescript assign the type implicitly.\n```\nThis extends to functions as well, meaning that often you won't have to specify the return value.\n\n#### Type Widening/Narrowing\nAn important implicit rule in TypeScript is that when you let type inference happen for `const` variables, TypeScript will assign it the *narrowest type possible* since it knows that a `const` variable cannot possibly take any other value after its defined. Otherwise, TypeScript will infer the type to be wider than it might be.\n```typescript\nlet a = 2;    // `a` is of type `number`.\nconst b = 2;  // `b` is of type `2`, a specific member of `number`.\n```\n\n### typeof and instanceof\nAlthough type checking is done for you statically, there are times when you must perform run-time type checks such as when you're fetching external data. In these times, rely on JavaScript's operators: `typeof` and `instanceof`.\n1. Use the `instanceof` binary operator to check some value is of a custom type, or a complex built-in type like `RegExp`.\n\t- Note that `val instanceof T` works by checking if `T` exists anywhere along `val`'s [[software-engineering/programming-languages/JavaScript#Prototypes|prototype chain]]. This is why you get unintuitive results when you use `instanceof` on primitive types. For example, `42 instanceof Number` is `false`, but `new Number(42) instanceof Number` is `true`.\n2.  Use the `typeof` unary operator to check some value is some built-in primitive type such as `undefined`, `number`, `string`, `boolean`, etc.\n\n### Type Assertions\nWhen you're confident that some value should be a certain type but TypeScript isn't, you can make a type assertion with the `as` keyword. \n```typescript\nlet someVal: any = 123;\n\n// Here, you're basically telling TypeScript: \"I am 100% sure this is a number. Trust me.\"\nconst val = someVal as number;\n```\nYou can also make type assertions by prefixing an expression with `\u003cT\u003e`, eg. `\u003cPerson\u003eperson` which is exactly the same as `person as Person`.\n\u003e Aim to minimise your usage of type assertions like above. They're considered 'escape hatches' from the language and can prevent you from maximising the benefits of using a type system.\n\n#### Const Assertion\nUse `as const` to tell TypeScript to infer the value to its narrowest possible type.\n```typescript\nconst a = [1, 2, 3];           // ‚Üí Type: `number[]`\nconst b = [1, 2, 3] as const;  // ‚Üí Type: `readonly [1, 2, 3]`\n```\n\n#### Nonnull Assertion\nWhen you're confident a value is not null, you can postfix that value with `!` to assure TypeScript. If you cannot be confident, then just use a standard null-check: `if (_ === null) ...`.\n```typescript\ntype NullableString = string | null;\nconst s: NullableString = 'Hello';\n\n// This is basically saying: \"Don't worry TypeScript, I'm 100% sure `s` is not null.\"\nconsole.log(s!.toUpperCase());\n```\n\n### Refinement\nTypeScript's static analysis can handle *refinement* where, based on the control flow logic, TypeScript can narrow the type of the variable. Refinement can happen when you use `if`, the optional chaining operator `?.`, `||`, `switch`, `typeof`, `instanceof`, `in`, etc.\n```typescript\ntype CssWidth = number | string | undefined;\n\nconst getPixelWidth = (width: CssWidth): number =\u003e {\n\t// At this point, TypeScript knows `width` is `number | string | undefined`.\n\tif (typeof width === 'undefined') return 0;\n\n\t// At this point, TypeScript knows `width` is `number | string`.\n\tif (typeof width === 'number') return width;\n\n\t// At this point, TypeScript knows `width` is `string`. We can therefore use\n\t// string methods on `width` with confidence.\n\treturn Number(width.slice(0, width.search('px')));\n};\n\nconsole.log(getPixelWidth(undefined)); // 0\nconsole.log(getPixelWidth(10));        // 10\nconsole.log(getPixelWidth('480px'));   // 480\n```\n\nRefinement works with unioned objects, but it's best to use unique strings to help TypeScript infer types properly.\n```typescript\ninterface UserTextEvent {\n\ttype: 'TextEvent';\n\tvalue: string;\n\ttarget: HTMLInputElement;\n}\ninterface UserMouseEvent {\n\ttype: 'MouseEvent';\n\tvalue: [number, number];\n\ttarget: HTMLElement;\n}\n\ntype UserEvent = UserTextEvent | UserMouseEvent;\n\nconst handle = (event: UserEvent): void =\u003e {\n\tif (event.type === 'TextEvent') {\n\t\t// At this point, TypeScript is certain that `event` is `UserTextEvent`.\n\t\t// ...\n\t} else {\n\t\t// At this point, TypeScript is certain that `event` is `UserMouseEvent`.\n\t\t// ...\n\t}\n};\n```\nThis kind of type refinement is very useful when working with [[software-engineering/technologies/Redux#Reducers|Redux reducers]].\n\n#### Type Guards\nRefinement doesn't work as expected when you use a function to do the type-checking. Any type-checking only contributes to refinement if it's in the same scope.\n```typescript\nconst isString = (s: unknown): boolean =\u003e {\n\treturn typeof s === 'string';\n}\n\nconst refinementTest = (val: string | number) =\u003e {\n\tif (isString(val)) {\n\t\tval.toLowerCase();   // Error. TypeScript still thinks `val` is `string | number`.\n\t\t// ...\n\t} else {\n\t\tconst num = val * 2; // Error. TypeScript still thinks `val` is `string | number`.\n\t\t// ...\n\t}\n}\n```\nTo fix this, you'd need to define a **type guard** which is a *predicate* function that confirms an argument is a given type. It looks like this:\n```typescript\nconst isString = (s: unknown): s is string =\u003e {\n\treturn typeof s === 'string';\n};\n```\n\n### Variance\nIt's useful to think of types as just *sets*. When $A$ is a subtype of $B$, it is basically just saying that $A \\subseteq B$.\n\n*Variance*, in programming language theory, is how subtyping works for generic types. It is concerned about the idea of whether a generic type like `List\u003cCat\u003e` is a subtype of `List\u003cAnimal\u003e`.\n\nThere are 4 kinds of variance:\n- *Invariance* ‚Äî says that `List\u003cT\u003e` is not a subtype of `List\u003cU\u003e` regardless of whether `T extends U`.\n- *Covariance* ‚Äî says that `List\u003cT\u003e` is a subtype of `List\u003cU\u003e` if `T extends U`.\n- *Contravariance* ‚Äî says that `List\u003cT\u003e` is a subtype of `List\u003cU\u003e` if `U extends T`, ie. going the other way of covariance.\n- *Bivariance* ‚Äî says that `List\u003cT\u003e` is a subtype of `List\u003cU\u003e` if either `T extends U` or `U extends T`.\n\nEvery language's type system has different rules around *variance*. As a programming language designer, if you were to allow covariance or contravariance over invariance, then you're allowing for greater flexibility in the type system, but it exposes programmers to greater risk of runtime type errors.\n\nTypeScript tends to be more relaxed by allowing functions to take in covariant arguments. For example, you can pass an argument so long as it is a subtype of the expected parameter, ie. covariant to the expected parameter, but this makes it possible to create run-time type errors like this:\n```typescript\ninterface EngineeringStudent {\n\tname: string;\n\tdiscipline: string;\n}\ninterface FirstYearEngineeringStudent {\n\tname: string;\n\tdiscipline?: string;   // This is basically: `string | undefined`.\n}                          // This makes `EngineeringStudent` a subtype of `FirstYearEngineeringStudent`!\n\n// Here, `student` can be `FirstYearEngineeringStudent` or any subtype of it.\nconst clearDiscipline = (student: FirstYearEngineeringStudent) =\u003e {\n\tdelete student.discipline;\n};\n\n// The dangers of accepting a covariant argument:\n// We can delete the non-optional `discipline` field and TypeScript will not complain.\nconst csStudent: EngineeringStudent = { name: 'Linus', discipline: 'Computer Science' };\nclearDiscipline(csStudent);\n\nconsole.log(csStudent.discipline);  // ‚Üí undefined\n```\n\n## Functions\n**Typing Function Delcarations**\nTo type a function declaration, you just assign types for each parameter it takes in and then specify the return type by postfixing the parameter list with a colon and a type.\n```typescript\n// Typing function parameters and return values.\n// To assign a return type to a function, you postfix the parameter list with a colon and a type.\n\n// Regular functions:\nfunction increment(num: number): number {\n\treturn num + 1;\n}\n\n// Arrow functions:\nconst decrement = (num: number): number =\u003e num - 1;\n```\n**Typing Function Expressions or Arrow Functions**\nWhat if you want to specify the type of a callback rather than a function declaration? You would use the syntax: `(param: Type, ...) =\u003e RetType`. Although the syntax is inspired by arrow functions, it is not actually defining a function.\n```typescript\ntype Greeting = (a: string, b: string) =\u003e void;\n\n// Note that the parameter names above don't need to match that of the assigned\n// callback's parameter names, they're purely for documentation.\nconst callback: Greeting = (name, message) =\u003e {\n\tconsole.log(`Hi, I'm ${name}. ${message}`);\n}\ncallback(\"Linus\", \"F*** you, Nvidia.\");\n```\n\n### Optional \u0026 Default Parameters\nJust like how you can make [[software-engineering/programming-languages/TypeScript#Optional Properties|object properties optional]] and [[software-engineering/programming-languages/TypeScript#Tuples|tuple items optional]], you can make function parameters optional by postfixing the parameter name with a `?`. Alternatively, you can set a default value for a parameter by assigning a value directly after the parameter name, which is pretty much the same as making it optional.\n```typescript\n// Optional parameter.\nconst greet = (name: string, message?: string) =\u003e {\n\tconsole.log(`Hi ${name}!`);\n\tif (message) console.log(message);\n}\n\n// Default parameter. Notice that the parameter type can often be inferred from the\n// default value that you supply.\n// You can also choose to explicitly set the type anyway like: \n//   `message: string = \"You rock.\"`\nconst greet = (name: string, message = \"You rock.\") =\u003e {\n\tconsole.log(`Hi ${name}! ${message}`);\n}\n```\n\n### Variadic Functions\nA **variadic function** is just one that takes in an arbitrary number of arguments. The vast majority of functions take in a fixed list of parameters, we call these 'fixed-arity' functions. Normally in JavaScript, defining a variadic function requires you to make use of the implicit [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) array in the function body. In TypeScript, it's way more intuitive and can be done in a type-safe way with the rest operator, `...`.\n```typescript\nconst max = (...nums: number[]): number =\u003e {\n\tif (!nums || nums.length === 0) return -Infinity;\n\treturn nums.reduce((maxSoFar, currNum) =\u003e (maxSoFar \u003e currNum) ? maxSoFar : currNum, -Infinity);\n}\n```\n\n### this\nIn JavaScript, `this` is a nightmare for most programmers to work with because its value is different depending on how it is called. In TypeScript, you can minimise surprises around the value of `this` by assigning a type to it as the first function parameter.\n\nTo illustrate the problem:\n```typescript\ntype Person = { name: string, greet: () =\u003e void };\nconst person: Person = {\n\tname: \"Linus Torvalds\",\n\tgreet: function() {\n\t\tconsole.log(`Hi, I'm ${this.name}`);\n\t}\n}\nperson.greet(); // This works as expected since `this` is bound to `person`.\n\nconst greet = person.greet;\ngreet();        // This fails since the `this` is lost and is no longer bound to `person`.\n```\nThe 'solution' is to assign a type for `this` so that the developer is warned when `this` takes on the wrong type when they invoke a function that uses it.\n```typescript\ntype Person = { name: string, greet: (this: Person) =\u003e void };\nconst person: Person = {\n\tname: \"Linus Torvalds\",\n\tgreet: function(this: Person) {\n\t\tconsole.log(`Hi, I'm ${this.name}`);\n\t}\n}\n```\n\n### Generators\nSee [[software-engineering/concepts/programming/Generators|generators]]. In JavaScript, you can create a [[JavaScript#Generators|generator function]] by postfixing `function` with an asterisk, `*`. *Note*: you cannot define arrow functions as generator functions (at least as of 2022's ES standard).\n```typescript\nfunction* fooGenerator() {\n\tyield 42;\n\tyield 24;\n}\n\nconst fooNums = fooGenerator();\nconsole.log(fooNums.next());    // ‚Üí { value: 42, done: false }\nconsole.log(fooNums.next());    // ‚Üí { value: 24, done: false }\nconsole.log(fooNums.next());    // ‚Üí { value: undefined, done: false }\n\n// You can loop through a generator's values with JavaScript's for-of loops.\nfor (const item of fooGenerator()) {\n    console.log(item);\n}\n```\nTypeScript automatically infers the return type of the generator to be `IterableIterator\u003cnumber\u003e`. To assign an explicit type for what gets yielded, do it the same way that you'd specify the return value, but wrap it around with `IterableIterator`.\n```typescript\nfunction* fooGenerator(): IterableIterator\u003cnumber\u003e {\n\t...\n}\n```\n\n### Iterators\nSee [[software-engineering/concepts/programming/Iterators|iterators]]. In JavaScript, an *iterable* is an object containing the `Symbol.iterator` property with the value being a function that returns an *iterator* (which can be done by defining Symbol.iterator to be a [[TypeScript#Generators|generator function]], which always returns an iterator). An *iterator* is an object that defines a `next` method which returns an object of shape: `{ value: any, done: boolean }`.\n\nAn object can be both an *iterable* and an *iterator* at the same time. When you invoke a generator function, for example, you get an object \nof type `IterableIterator` which is both, meaning it has a `Symbol.iterator` property, whose value is a function that returns an iterator, and the `next` method.\n```typescript\nconst favouriteNums = {\n\t*[Symbol.iterator]() {\n\t\tyield 42;\n\t\tyield 2;\n\t\tyield 4;\n\t}\n}\n\nfor (const item of favouriteNums) {\n\tconsole.log(item);\n}\n```\n**Note**: the syntax for defining `Symbol.iterator` as a generator function might seem strange. See this post for clarifications. As for the square brackets around `Symbol.iterator`, it's called the [computed property name syntax](https://stackoverflow.com/questions/32515598/square-brackets-javascript-object-key), introduced in ES6.\n\n### Function Overloading\nYou can define a function type that actually consists of multiple function signatures. See the [Function Overloads](https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads).\n\n## Generic Functions\nSee [[software-engineering/concepts/programming/Generics|generics]]. In TypeScript, you can define generic functions by specifying a comma-separated list of generic type parameters in angle brackets `\u003c\u003e` right before the parameter list of function. You would use generic functions if you wanted a function to be reusable across multiple types without giving up type safety by resorting to `any`.\n```typescript\ntype Filter = \u003cT\u003e(array: T[], predicate: (elem: T) =\u003e boolean) =\u003e T[];\n\nconst filter: Filter = \u003cT\u003e(array: T[], predicate: (elem: T) =\u003e boolean) =\u003e {\n\tconst arr: T[] = [];\n\tarray.forEach((elem) =\u003e {\n\t\tif (predicate(elem)) arr.push(elem);\n\t});\n\treturn arr;\n};\n\n// TypeScript can infer that `T` should be `number`.\nconsole.log(filter([1, 2, 3, 4, 5], (num) =\u003e num % 2 === 0));\n\n// To explicitly set `T`, use angle brackets after the function name.\nconsole.log(filter\u003cnumber\u003e([1, 2, 3, 4, 5], (num) =\u003e num % 2 === 0));\n```\nTo make regular function declarations generic, you also place the generic type parameters between angle brackets right before the parameter list:\n```typescript\nfunction filter\u003cT\u003e(array: T[], predicate: (elem: T) =\u003e boolean) =\u003e { ... }\n```\n\n### Bind on Reference\nIn the above example, `T` gets *bound* when the function gets invoked, but you could also bind `T` whenever the type alias gets referenced by placing the generic type parameters *after* the type name instead of before the function parameter list:\n```typescript\ntype Filter\u003cT\u003e = (array: T[], predicate: (elem: T) =\u003e boolean) =\u003e T[];\n\n// Wherever you use `Filter`, you have to explicitly bind `T` like `Filter\u003cT\u003e`.\nconst filter: Filter\u003cnumber\u003e = (array, predicate) =\u003e ...;\n```\n\n### Bounded Polymorphism\nSometimes, saying that a generic function takes in type parameter of `T` is too permissive. Instead, we might want `T` to be a subtype of `U`, that is, we should accept type parameters that are 'at least' `U`. This is called *bounded polymorphism* or *constrained genericity*.\n```typescript\ntype Enemy = { health: number };\ntype Alien = Enemy \u0026 { galaxy: string };\ntype Cyborg = Enemy \u0026 { model: string };\n\ntype AttackEnemy = \u003cT extends Enemy\u003e(enemy: T, damage: number) =\u003e void;\nconst attackEnemy: AttackEnemy = \u003cT extends Enemy\u003e(enemy: T, damage: number) =\u003e {\n\tenemy.health -= damage;\n\tconsole.log(`Dealt ${damage}. Enemy now has ${enemy.health} HP left.`);\n};\n\nconst enemy: Enemy = { health: 20 };\nconst alienEnemy: Alien = { health: 50, galaxy: 'Andromed' };\nconst cyborgEnemy: Cyborg = { health: 100, model: 'Terminator Mk. II' };\n\nattackEnemy(enemy, 15);\nattackEnemy(alienEnemy, 10);\nattackEnemy(cyborgEnemy, 8);\nattackEnemy(\"Hello world\", 5);  // Fails because \"Hello world\" is not a subtype of `Enemy`.\n```\n![[software-engineering/programming-languages/assets/bounded-polymorphism.png|250]]\n\n## Object-Oriented Programming\nSee [[software-engineering/concepts/programming/Object Oriented Programming|Object Oriented Programming]].\n\n### Access Modifiers\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Encapsulation|encapsulation]]. TypeScript offers 3 access modifiers, which can be prefixed to any class field declaration:\n- `private`.\n- `protected` (which makes a member accessible to subclasses as well).\n- `public` .\nIf no access modifier is specified, then fields are `public` by default, unlike most languages which default to `private`.\n\nWhen prefixing a constructor's parameter with an access modifier, it'll declare the field and assign the given value implicitly. \n```typescript\nclass Person {\n\tconstructor(public name: string) {}\n}\n// ... is a shorthand that's equivalent to:\nclass Person {\n\tpublic name: string;\n\tconstructor(name: string) { this.name = name; }\n}\n\nconst person: Person = new Person('Linus Torvalds');\nconsole.log(person.name);\n```\n\n### Inheritance\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Inheritance|inheritance]]. In TypeScript, inheritance works in the same way and uses the same syntax as [[software-engineering/programming-languages/JavaScript#Inheritance|JavaScript's inheritance]].\n\n### Method Overriding\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Method Overidding|method overriding]]. By default, every method is '[[software-engineering/concepts/programming/Object Oriented Programming#Virtual Method|virtual]]', so you can override them all. To override a method in TypeScript, just copy the method signature and supply the new method body. As good practice, use the optional `override` modifier so that you're warned when you've got the base class' method signature wrong.\n```typescript\nclass Base {\n    // Methods are virtual by default.\n\tpublic foo(): void {\n\t\tconsole.log('Foo');\n\t}\n}\n\nclass Sub extends Base {\n    // Explicitly re-implementing the parent's `foo` method.\n\tpublic override foo(): void {\n\t\tconsole.log('Bar');\n\t}\n}\n```\n\n#### Abstract Classes\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Abstract Class|abstract classes]]. To make a class abstract, just prefix it with the `abstract` keyword.\n```typescript\nabstract class Employee { ... }\nclass SoftwareEngineer extends Employee { ... }\n```\n\n### Abstract Methods\nSee [[software-engineering/concepts/programming/Object Oriented Programming#Abstract Method|abstract methods]]. Abstract methods must be inside abstract classes. To make a method abstract, use the `abstract` modifier, explicitly type the method signature and do not provide a body.\n```typescript\nabstract class Employee {\n\tconstructor(public salary: number) {}\n\tpublic getSalary(): number { return this.salary; }\n\tpublic abstract slackOff(): void;\n}\n\nclass SoftwareEngineer extends Employee {\n\tconstructor() { super(100000); }\n\tpublic override slackOff() { console.log('Time to browse r/ProgrammerHumor...'); }\n}\n\nconst linus: Employee = new SoftwareEngineer();\nlinus.slackOff();\n```\n\n### Generic Types in Classes/Interfaces\nYou can set class-scoped or interface-scoped generic type parameters:\n```typescript\nclass HashMap\u003cK, V\u003e { ... }\ninterface HashMap\u003cK, V\u003e { ... }\n```\n\n\n## Modules\nSee [[software-engineering/programming-languages/JavaScript#Modules|JavaScript modules]]. With TypeScript, you can additionally import/export type aliases and interfaces.\n\n**Note**: in import statements, you don't need to specify the `.ts` file extension. This means you can easily import [[software-engineering/programming-languages/TypeScript#Type Declaration Files|type declaration files]] with the extensionless name.\n\nIn `thing.ts`:\n```typescript\n// Notice that this file exports a value `Thing` and a type `Thing`, but\n// no name collision happens because 'values' and 'types' are tracked in\n// separate namespaces by the TypeScript compiler.\nexport type Thing = {\n\tval: number;\n};\nexport const Thing = {\n\tval: 42,\n};\n```\nIn `main.ts`:\n```typescript\n// Notice that you don't need to write the extension in the path: './thing.ts'.\nimport { Thing } from './thing';\n\nconst thing: Thing = Thing;\nconsole.log(thing);\n```\n\n## Error Handling\nSee [[software-engineering/programming-languages/JavaScript#Error Handling|JavaScript error handling]]. TypeScript doesn't introduce any new syntax for error handling over JavaScript, but the type system allows for streamlining how errors are treated in a project by developers.\n\n### Ways of Error Handling\nThere are 4 common patterns for handling errors in TypeScript projects, which are also mostly applicable to non-TypeScript projects:\n1. *Just return `null`.*\n   This reveals the least information in the event of an error, but it's the easiest to do. Constant null-checking is required throughout the code however, which can be laborious and verbose.\n2. *Throw an exception.*\n   When an exception is thrown, it must be caught by the caller in a try-catch block (or a `catch` callback if using promises) otherwise a full crash occurs. Making and throwing custom subclasses of `Error` would offer specific information to help with debugging and informing the user about the problem.\n   The main issue is that it's hard to enforce that programmers write the error-handling try-catch logic when they're lazy.\n3. *Return exceptions (rather than throw them)*.\n   This means a function will specify in its return type a union of the expected return type *and* the error classes that it could throw, such as in the following:\n   ```typescript\n\tconst getData = (): Data | NetworkError =\u003e {};\n   ```\n   By putting the error as part of the return type, the user of the function is unlikely to ignore error cases.\n   The idea here is very similar in spirit to [Java's `throws`](https://www.javatpoint.com/throws-keyword-and-difference-between-throw-and-throws) keyword.\n   The downside to this approach is that it'll lead to more verbose function signatures, especially if errors are simply 'bubbled' up the call stack.\n4. *Define and use the `Option` type*.\n  The idea comes from languages like Rust and Haskell. See Rust's documentation on [`std::option`](https://doc.rust-lang.org/std/option/).\n\n## Utility Types\nTypeScript gives you a bunch of [very useful built-in utility types](https://www.typescriptlang.org/docs/handbook/utility-types.html) that you can use to make working with complex types a breeze üå¨Ô∏è.\n\n### Mapping Types\nHere are some of the most useful utility types for sourcing types from other types:\n- `Partial\u003cT\u003e` ‚Äî T, but every property is optional.\n- `Omit\u003cT, Keys\u003e` ‚Äî T, but without the property in `Keys`, which is a union of string property names.\n- `Pick\u003cT, Keys\u003e` ‚Äî a type with properties `Keys`, a union of string property names, sourced from `T`.\n- `Readonly\u003cT\u003e` ‚Äî T, but every property is read-only.\n\nUsage examples:\n```typescript\ninterface Human {\n    limbs: string[];\n    organs: string[];\n    memories: string[];\n    soul: boolean;\n}\n\ntype SubHuman = Partial\u003cHuman\u003e;                                 // Human, but all properties are optional.\ntype Husk = Omit\u003cHuman, 'soul' | 'memories'\u003e;                   // Human, but without the soul or memories.\ntype SentimentalProperties = Pick\u003cHuman, 'soul' | 'memories'\u003e;  // Only the soul and memories of a human.\ntype FrozenHuman = Readonly\u003cHuman\u003e;                             // Human, but every property is immutable.\n\n// After experiencing Java programming, I am just a husk ;(\nconst me: Husk = {\n    limbs: [\"arms\", \"legs\", \"...\"],\n    organs: [\"half a brain\", \"heart\", '...'],\n};\n```\n\n**Note**: behind the scenes, utility types such as the ones above are realised through ['mapped types'](https://www.typescriptlang.org/docs/handbook/2/mapped-types.html).\n```typescript\n// This is the `Partial` type, implemented using mapped types.\n// Many other utility types are implemented in a very similar manner!\ntype MyPartial\u003cT\u003e = {\n    [K in keyof T]?: T[K];\n};\n```\n\n### Conditional Types\nHere are some of the most useful utility types that leverage [conditional typing](https://www.typescriptlang.org/docs/handbook/2/conditional-types.html), a TypeScript innovation.\n- `Exclude\u003cT, U\u003e` ‚Äî removes values in the set `U` from the set `T`.\n- `Extract\u003cT, U\u003e` ‚Äî picks out elements in `U` that are in `T`.\n- `NonNullable\u003cT\u003e` ‚Äî excludes `null` from the set `T`.\n- `ReturnType\u003cF\u003e` ‚Äî the return type of a function's typed signature.\n\n**Note**: just like how you can use the ternary operator, `(condition) ? expr1 : expr2` for conditional expression evaluation, you can use the ternary operator for conditional type evalution. This is what's used to implement those conditional utility types above.\n\n## Asynchronous Programming\nSee [[software-engineering/programming-languages/JavaScript#Asynchronous Programming|JavaScript asynchronous programming]]. \n\n## JavaScript Interoperability\nAn excellent reason to adopt TypeScript is that you don't have to rewrite your JavaScript codebase to begin benefiting from a type system.\n\n### Type Declaration Files\nA type declaration file, which goes with the extension `.d.ts`, associates types to JavaScript code. It's a file consisting **only** of *type-level* code, meaning you can't use expressions in there (which means no function implementations, variables, class implementations, etc. can be defined within). As a very loose analogy, `.d.ts` files are kind of like the `.h` header files in C or C++.\n\nIf you have a `hello-world.js` file, then the type declaration file must have the name, `hello-world.d.ts`.\n\n\u003e A type declaration is a way to tell TypeScript, ‚ÄúThere exists this thing that‚Äôs\ndefined in JavaScript, and I‚Äôm going to describe it to you.‚Äù (Programming TypeScript). \n\nNPM packages that once were intended only for JavaScript developers (eg. jQuery) can be made consumable by TypeScript developers by having these type declaration files. As a TypeScript dev, you'd be able to use pure JS libraries as if they were written in TypeScript.\n\nWhen type declarations don't ship with an NPM package, they can usually be install individually in the [@types organisation](https://www.npmjs.com/~types) on npm. The type declarations in [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped), a big community effort to bring types to popular JS libraries, are automatically published to the @types organisation.\n\nEg. to bring jQuery into a TypeScript frontend project, you'd do:\n```bash\nnpm install jquery --save              \nnpm install @types/jquery --save-dev  # Brings in all the type declaration files.\n```\n\n\n","lastmodified":"2022-09-12T23:20:41.862338959Z","tags":null},"/software-engineering/site-reliability-engineering/Monitoring":{"title":"Monitoring","content":"\nTODO\n\nTODO: observability vs. APM vs. monitoring\n","lastmodified":"2022-09-12T23:20:41.886339156Z","tags":null},"/software-engineering/software-engineering/Agile":{"title":"Agile","content":"\nAgile is a *philosophy* for project management that is particularly useful for software engineering teams. An alternative to Agile is the [[software-engineering/software-engineering/Agile#Waterfall Methodology|Waterfall approach]].\n\nThere exists 'implementations' of Agile, which are called ***Agile methodologies***, such as:\n- [[software-engineering/software-engineering/Scrum|Scrum]]\n- [[software-engineering/software-engineering/Kanban|Kanban]]\n- [[software-engineering/software-engineering/Extreme Programming|Extreme programming (XP)]]\n\nAgile has an old [[software-engineering/software-engineering/Agile#Agile Manifesto|manifesto]] created by bunch of highly respected software engineers in 2001 due to frustrations over inefficient traditional project management methods (mainly [[software-engineering/software-engineering/Agile#Waterfall Methodology|the waterfall approach]]). Overall, Agile puts great emphasis on:\n1. Constantly launching small sets of features and using the feedback to inform the next set of features to be developed and shipped.\n2. The idea that requirements and plans are constantly in flux, so we must crunch down our iteration timeline to respond quickly to those changes.\n\n### Waterfall Methodology\nIn the traditional 'waterfall' approach to project management, teams plan out everything first, then execute on the plan. Essentially, everything is done in phases which collectively span a long time.\n\n![[software-engineering/software-engineering/assets/waterfall-methodology-diagram.png|500]]\n\nThe waterfall approach is named such because you cannot go to a previous phase, at least not in the short-term. It's a great management framework for projects that have fixed and clear requirements and a clear vision of what the end product will be. Sadly, software projects are rarely like that and benefit greatly from very quick development, deployment and feedback cycles which help the team re-orient the project scope so as to maximise the value delivered to customers.\n\n\n\n\n\n![[software-engineering/software-engineering/assets/agile-meme.png|500]]\n\n\n### Epics\nEpics serve as a container for [[software-engineering/software-engineering/Agile#User Stories|user stories]] and do not represent something that's deliverable in a single sprint, usually. They go by the same format of: *\"As a `userType`, I want `some behaviour`, so that `some reason`.\"*\n\n![[software-engineering/software-engineering/assets/epic-user-story-task-hierarchy.png|700]]\n\nEpics are the starting point. You come up with the epics first, then recursively break it down into its constituent user stories.\n\n### User Stories\nUser stories are statements of the following form:\n```\nAs a      {user type}\nI want to {use some feature in some way}\nSo that   {goal or benefit to the user}\n```\n\nIt's worded this way to be extremely straightforward to technical/non-technical people, capture business value, and it does not assert anything about what the design should be.\n\nUser stories are usually placed into a project backlog in a project management app like Jira.\n\n#### User Acceptance Criteria\nUser stories should have a concrete set of conditions that must be satisified in order to consider a user story *implemented*. This is the *user acceptance criteria*.\n\nYou can specify a user acceptance criteria with the given-when-then format:\n```\nGiven {context}\nWhen  {a specific action is performed}\nThen  {a set of consequences should occur}\n```\n\n#### Examples\n\n- **For a music app like Spotify:**\n\t- \"As a user, I want to be able to make a playlist of my favourite songs so that I can find them easily.\"\n\t- \"As a user, I want to follow artists so that I can be notified of new songs.\"\n\n## Agile Manifesto\nSourced from [manifesto](https://agilemanifesto.org/principles.html):\n1. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.\n2. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage.\n3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.\n4. Business people and developers must work together daily throughout the project.\n5. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\n6. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.\n7. Working software is the primary measure of progress.\n8. Agile processes promote sustainable development. The sponsors, developers and users should be able to maintain a constant pace indefinitely.\n9. Continuous attention to technical excellence and good design enhances agility.\n10. Simplicity ‚Äî the art of maximising the amount of work not done ‚Äî is essential.\n11. The best architectures, requirements, and designs emerge from self-organising teams.\n12. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behaviour accordingly.\n\nThe Agile Manifesto is declarative, not imperative. It doesn't tell you how to do anything, it's up to you to apply their principles. You can do that through [[software-engineering/software-engineering/Scrum|Scrum]], [[software-engineering/software-engineering/Kanban|Kanban]], etc. or combining practices you like from any of them.\n","lastmodified":"2022-09-12T23:20:41.886339156Z","tags":null},"/software-engineering/software-engineering/Extreme-Programming":{"title":"Extreme Programming","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.886339156Z","tags":null},"/software-engineering/software-engineering/Kanban":{"title":"Kanban","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.886339156Z","tags":null},"/software-engineering/software-engineering/Requirements-Engineering":{"title":"Requirements Engineering","content":"\n### Software Requirement Specification (SRS)\nA *software requirement specification* is a document, written for engineers and stakeholders alike, that describes what the project's features are and its business model. \n\nGenerally, a requirements document should cover:\n1. Project scope (a summary of what the project is, its features, its target audience, its boundaries, deliverable deadlines, etc.).\n2. [[software-engineering/software-engineering/Requirements Engineering#Functional Requirements|Functional requirements]] in the form of [[software-engineering/software-engineering/Agile#Epic|epics]] and [[software-engineering/software-engineering/Agile#User Stories|user stories]].\n3. System architecture.\n4. UI prototype.\n5. [[software-engineering/software-engineering/Requirements Engineering#Non-Functional Requirements|Non-functional requirements]].\n\nCommunication should be the priority, not formality, so you should make liberal use of diagrams, graphs and images.\n\n### Functional Requirements\nFunctional requirements are product features that are implementable by developers. They define **what the system does** and roughly look like the following:\n1. Authentication system allows user to log in with their Google account.\n2. The user can create new blogs.\n3. The user can comment on existing blogs.\n\n### Non-Functional Requirements\nNon-function requirements are requirements on the product that aren't features. They roughly look like this:\n- Must support 10000 concurrent users.\n- Latency must be below 100ms.\n- The bundle size must be below 1mb.\n","lastmodified":"2022-09-12T23:20:41.886339156Z","tags":null},"/software-engineering/software-engineering/Scrum":{"title":"Scrum","content":"\nTODO.\n\n### Scrum Roles\nA Scrum team's member each adopts a role:\n- *Product owner*\n    - Understanding customer requirements\n    - Creates the vision for what the product should be\n    - Maintains the backlog\n- *Scrum master*\n    - The middleman between product owner and dev team\n    - Assists task breakdown and planning\n    - Ensures completion of tasks\n- *Scrum team* ‚Äî the developers\n    - Breaks down *epic* to *stories/tasks*, then into *subtasks*\n    - Implements features and writes tests\n","lastmodified":"2022-09-12T23:20:41.886339156Z","tags":null},"/software-engineering/technologies/Cypress":{"title":"Cypress","content":"\n![[software-engineering/technologies/assets/cypress-wallpaper.png|500]]\n\nCypress is an [[software-engineering/concepts/testing/End To End Testing|end-to-end testing]] library for testing the entirety of a web app, including its frontend and backend, in a way that closely simulates how real users would use the app. It also has an API for writing [[software-engineering/concepts/testing/Integration Testing|integration tests]] and [[software-engineering/concepts/testing/Unit Testing|unit tests]]. \n\nCypress tests aim to simulate the user experience as closely as possible. This means that tests you write will usually start up a real browser process, navigate to the URL of your web app, then execute a series of user interactions (eg. clicking on links, buttons, sending keystrokes, etc.) and let you make assertions on how the document should respond and what its contents should have.\n\nThe purpose of end-to-end testing this way is to give you confidence that the user can perform critical actions without error. For example, you might have a test that verifies your web app's authentication system, the purchase of an item, the sending of a message, etc. Unit tests with [[software-engineering/technologies/Jest]], for example, wouldn't be sufficient for that purpose.\n\n### Writing Tests\nIn general, the [[software-engineering/concepts/testing/Arrange, Act, Assert|arrange, act, assert]] pattern for writing unit tests is also a useful way to structure e2e Cypress tests.\n\n#### Example\nA simple test suite I wrote for my portfolio website.\n```typescript\ndescribe(\"Portfolio page tests\", () =\u003e {\n    beforeEach(() =\u003e {\n        // A wait exists just to allow for page-load animations to complete.\n        cy.visit(\"/\").wait(1000);\n    });\n\n    it(\"should render the about page after the 'about' link is clicked\", () =\u003e {\n        // Click 'About' from the homepage.\n        cy.contains(\"About\").click().wait(1000);\n\n        // The window should show and the URL should change.\n        cy.url().should(\"include\", \"/about\");\n        cy.contains(\"Who am I?\");\n    });\n\n    // ...\n});\n```\n**Note**: `describe` and `it` are sourced from [Mocha](https://mochajs.org/) and `expect` is sourced from [Chai](https://www.chaijs.com/), two core dependencies of Cypress. Also, Mocha provides `context` which is just an alias for `describe`.\n\n### API\nSee [Cypress API Documentation](https://docs.cypress.io/api/table-of-contents). You'll be frequently chaining many methods together in a single statement.\n- Methods like `cy.get` return a DOM element that can be further chained with methods like `type`, `click`, `contains`, etc.\n- Some methods like `cy.clearCookies` do not yield anything that you can chain further methods on.\n\n**Top-Level Methods**\n```typescript\ncy.visit(url)\ncy.get(cssSelector)    // This works just like jQuery's `$()` selector. In fact, jQuery is one of Cypress' dependencies.\ncy.url()               // Gets the current URL as a string.\ncy.wait(milliseconds)\n\ncy.wrap(subject)       // Yields the given subject. Useful for resolving promises or repeating tests using the same\n                       // array containing test data.\n```\n**Note**: all of these `cy.*` statements execute asynchronously.\n\n**Chained Methods**:\n```typescript\n.then((elem) =\u003e ...)        // You can access the 'subject' inside `then`. You'd chain this with `cy.get`, for example.\n.should(chainer: string)    // Make an assertion. \n.and(chainer: string)       // An alias for `should`.\n\n// Input methods:\n.type(text: string)\n.submit()\n.click()\n```\nThe `chainer` argument is a stringified *chainer* from [Chai](https://docs.cypress.io/guides/references/assertions#Chai), [Chai-jQuery](https://docs.cypress.io/guides/references/assertions#Chai-jQuery), [Sinon-Chai](https://docs.cypress.io/guides/references/assertions#Sinon-Chai), which are dependencies of Cypress.\n\n### Aliases\nYou must always chain commands off of an invocation on `cy.*` otherwise commands won't be properly enqueued. Eg. if you're doing `const elem = cy.get(...); elem.then(...)`, then you need to use an alias instead, as shown below.\n```typescript\ncy.get('.blog').as('blog');  // Create the 'blog' alias.\ncy.get('@blog');             // Retrieve the subject that 'blog' is assigned to.\n```\n\n### Fixtures\nIn Cypress, *fixtures* are a collection of static test data that can be used by tests. They're located at `cypress/fixtures` and are typically .json files, but can also be .js, image files, etc. The common usage of fixtures is in [[software-engineering/technologies/Cypress#Mocking Network Requests|stubbing network requests]].\n\n```typescript\n// Loads `cypress/fixtures/blogs.json` and uses it as the response\n// when an API endpoint is hit.\ncy.fixtures('blogs').as('blogsJson').then((blogs) =\u003e {\n\tcy.intercept('GET', '/blogs', blogs);\n})\n```\n\n### Reusuable Custom Commands\nCypress gives you many useful [[software-engineering/technologies/Cypress#API|commands]], however you might need some custom reusable helper functions to help with stubbing network requests, for example. You define custom helpers in `cypress/support/commands.ts` by doing the following:\n```typescript\nCypress.Commands.add(\"helperName\", () =\u003e {\n\t// ...\n});\n```\nThis makes your helpers available under the `cy` object, eg. from the above example, we'd be able to access `cy.helperName()` from any test.\n\n### Mocking Network Requests\nOften, you'll want to test the frontend independently of the backend, that is, you might not actually want your frontend to make requests to your backend server. You can do this by stubbing API requests with responses using [`cy.intercept`](https://docs.cypress.io/api/commands/intercept).\n```typescript\ncy.intercept('GET', '/blogs', [{ ... }, { ... }])\n```\n\n#### Tradeoffs\nWhen you stub network requests, you're no longer writer 'true' end-to-end tests. Your tests are more isolated and generally less flaky since it has fewer points of failure, however you are straying away from testing the real user experience.\n\nIf you write true end-to-end tests, then:\n- If you have a database, you'd have to seed it to generate state.\n- Tests are possibly much slower since they'll actually go through the full backend request-handling logic.\n- It'll be hard to test for edge cases like network failure.\n\nIt's recommended to maintain a balance of both stubbed tests and true end-to-end tests (especially for the *critical user actions* in your application like authentication).\n\n### Seeding the Database\n\n### Cypress CLI\nThe Cypress package ships with a powerful CLI. [Official reference](https://docs.cypress.io/guides/guides/command-line).\n\nSome basic commands to know and consider adding to the NPM scripts inside `package.json`:\n```bash\ncypress open                                       # Opens Cypress' Electron binary.\ncypress run --headed --no-exit --browser chrome    # Opens a Chrome browser to run Cypress tests.\ncypress run --browser chrome                       # Runs Cypress tests in a headless Chrome process.\n```\n\n### Cypress CI\nI used the GitHub Actions workflow YAML file [provided by the official docs](https://docs.cypress.io/guides/continuous-integration/github-actions) to run Cypress in a CI pipeline.\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/D3":{"title":"D3","content":"\n\n## D3 Force\n[d3-force](https://github.com/d3/d3-force) is an official D3 module.\n\nIt runs a physics simulation where it moves each particle every tick until it reaches its equilibrium state.\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Docker":{"title":"Docker","content":"\n![[software-engineering/technologies/assets/docker-wallpaper.png|800]]\n\nDocker is a [[software-engineering/concepts/devops/Containers|containerisation]] tool, or *container runtime*, that packages up an app's source code and dependencies into portable containers that can be run in many different environments. Since a Docker container packages *all* the app's dependencies, just distributing the **Docker image** for that container is sufficient for anyone to run the app anywhere without needing to install anything else. You define everything an app needs inside a manifest file, called a *Dockerfile*. There are alternative container runtimes like [Rocket](https://www.redhat.com/en/topics/containers/what-is-rkt) or [LXD](https://linuxcontainers.org/lxd/).\n\nWhen you *Dockerise* an app, you get portability. That's the main reason people use it. This means you can have a lot of confidence that the app will work on anything that has a *Docker daemon* running on it, whether it's your laptop, your co-worker's laptop, a VM in a data center, a computer in your office, and so on (with some caveats like not being able to run Windows containers on Linux hosts). Docker is especially great for deploying [[software-engineering/concepts/architecture/Microservice|microservices-based]] applications.\n\n**Terms:**\n- ***Image*** ‚Äî a read-only ***file*** containing the source code, libs, dependencies and tools for an application. Images are sometimes called *snapshots* because they capture an application and their environment at some point in development. Images are templates for creating *containers*\n- ***Containers*** ‚Äî a running instance of an image that is a runtime environment for an application. You can think of creating a container as just adding a writable layer on top of an image (which is read-only).\n    - Containers just *processes*, they have a PID, a parent process, can be killed, etc.\n    - A virtual machine virtualises the hardware to run multiple OS instances. A container virtualises an OS to run multiple workloads and multiple containers can share the same OS kernel, making them lightweight\n    - Containers are isolated environments meaning that they have their own filesystem, network, CPU and memory limits, etc.\n    - You can think of a Docker image as a class and a Docker container as an instance of that class\n- ***Dockerfile*** ‚Äî a file that contains step-by-step instructions for building an image that gets sent to the *Docker engine*. Dockerfiles document the exact environment as a snapshot. The dockerfile is the starting point ‚Äî a dockerfile's commands are executed, creating an image, then a container is built from that image.\n\t![[software-engineering/technologies/assets/dockerfile-to-docker-image.png|340]]\n- ***Tags*** ‚Äî mutable named references to images. They should generally be human-readable\n    - Eg. the Debian image has a tag called 'buster', a name for Debian 10. You would pull this specific image with `docker pull debian:buster`\n- ***Container orchestration*** ‚Äî the automated running of multiple containers across multiple machines, including their deployment, scaling, load balancing, etc.\n    - You can always run multiple containers manually, but tools like [[software-engineering/technologies/Kubernetes|Kubernetes]] can automate a lot of it for you.\n\n**Setting Up Docker**\nJust install Docker on your system, then enable and start the service. On Arch Linux the setup looks like this:\n```bash\nsudo pacman -S docker\nsudo systemctl enable docker\nsudo systemctl start docker\ndocker info   # Confirms whether the Docker daemon is running.\n\n# If you get a 'permission denied' error as a non-root user, then you need to add\n# $USER to the `docker` group.\nsudo groupadd docker\nsudo usermod -aG docker $USER   # Add the current user to the docker group.\nnewgrp docker                   # Log in to the docker group.\ndocker info                     \n# Might need to reboot if the above steps are insufficient.\n```\n\n## Docker Architecture\nDocker follows a client-server architecture where you have a Docker client that sends requests to a Docker daemon using a REST API. Both the client and daemon may run on the same host or on different machines and communicate over the network.\n- **Docker daemon**\nA background process listening for API requests. It manages images, containers, and more\n- **Docker client**\nIssues commands to the Docker daemon. This can be through the [[software-engineering/technologies/Docker#Docker CLI|CLI]], through Docker Desktop, [[software-engineering/technologies/Docker Compose|Docker Compose]], etc.\n- **Docker registries**\nDocker registries store *images*. [[software-engineering/technologies/Docker#DockerHub|Docker Hub]] is the default public registry that images can be pushed to and pulled from (but there exists other registries like GitHub Container Registry and Amazon ECR which has great integrations with ECS for deploying containers)\n\n![[software-engineering/technologies/assets/docker-architecture.png|700]]\n\n## Using the Docker CLI\nThe `docker` CLI needs to talk to the Docker daemon, so make sure that is running on the system first. Usually, the workflow goes like this:\n1. [[software-engineering/technologies/Docker#Dockerfile|Write a Dockerfile]] for the app first.\n2. Make an *image* from the Dockerfile using `docker build`. All images that have been built or pulled exist as files somewhere under `/var/lib/docker/` on Linux. They take up quite a lot of space ‚òπÔ∏è (hundreds of MBs or a few GBs).\n   - If you're aiming to push the built image to DockerHub, for example, then you should tag the image with a name like `\u003cusername\u003e/\u003cimage_name\u003e` using `docker build -t \u003cusername\u003e/\u003cimage_name\u003e`.\n   - When you make a new image, the previous image will become a dangling image, ie. one that is not referenced. These will stick around in your filesystem and suck up space unless you [remove them](https://stackoverflow.com/questions/32723111/how-to-remove-old-and-unused-docker-images).\n3. Run the image to spawn a *container* process on the system using `docker run`.\n4. If manually managing the container, then use `docker ps` to see all the containers that are currently running and use `docker stop`, `docker start`, `docker rm`, etc. to manage them.\n```bash\n# ‚ï†‚ïê‚ïê‚ïê‚ïê Fundamental Commands ‚ïê‚ïê‚ïê‚ïê‚ï£\n# Note: having a .dockerignore file will let you exclude large and unnecessary files from being sent to the daemon\n\ndocker build \u003cpath\u003e           # Creating images, where \u003cpath\u003e tells Docker where to find the Dockerfile to use.\n    -t \u003ctag\u003e                  # Assign a human-readable name (tag) to the image we're going to create\n    -f \u003cfile\u003e                 # Path of the Dockerfile. Without this flag, docker build will use look for a file named exactly Dockerfile in the cwd\n\ndocker run \u003cimage\u003e            # Running a command in a new container. MAKE SURE THE IMAGE NAME COMES LAST IF YOU USE ARGUMENTS!\n    -d                        # Run in detached mode, as a background process\n    -p 8080:80                # Exposes a container port by mapping the host's port 8080 to the container's 80, for instance. \n                              # -p 8080:80 says \"forward any traffic coming to my port 8080 to the container's port 80\"\n    --name \u003ccontainerId\u003e      # Giving an ID to the container. Useful when looking at `docker ps` output. If no name is specified, a random one will be generated\n    -v \u003cvolName\u003e:\u003cpath\u003e       # Use the given volume \u003cvolName\u003e and mount it to \u003cpath\u003e\n    -w \u003cpath\u003e                 # Sets the working directory (which is necessary if you're going to run commands that depend on being on a certain path)\n    --network \u003cnetworkName\u003e\n    --networkalias=\u003cname\u003e\t\n    -e key=val                # Set an environment variable\n    --env-file \u003cfile\u003e         # Use a .env file for setting environment variables\n\ndocker stop \u003ccontainerId\u003e   # Stopping a running container. It'll no longer appear in `docker ps`\ndocker start \u003ccontainerId\u003e  # Starting a stopped container\ndocker rm \u003ccontainerId\u003e     # Removing a container\n                            # Note: to get rid of a container, it must first be stopped with `docker stop \u003ccontainerId\u003e` and then removed with `docker rm \u003ccontainerId\u003e`\n                            #       Container IDs can be found in `docker ps` output\ndocker tag \u003csrc\u003e \u003cdest\u003e     # Create an alias to another image (like a symbolic link). This is useful for `docker push \u003cimage\u003e`\n\ndocker images                  # `ls` for images\n    -a                         # Shows intermediary images for each intermediary layer in the build.\n    --filter \"dangling=true\"   # Shows all images that aren't referenced by any other image.\n    \ndocker ps                      # `ps` for container processes\n    -a                         # Shows all running and stopped containers\n    \ndocker logs                    # Shows container's output log\n    -f                         # 'follow' the output rather than just printing the output once\n\ndocker exec \u003ccontainerId\u003e \u003ccommand\u003e     # Runs a command in the given container\n```\n\n### DockerHub\nMany container runtime systems have a big public repo of container images, called a registry. In Docker's case, we have [DockerHub](https://hub.docker.com/). There you'll find images for containers that run, for example, [PostgreSQL](https://hub.docker.com/_/postgres/), [NGINX](https://hub.docker.com/_/nginx), [Node.js](https://hub.docker.com/_/node), [Ubuntu](https://hub.docker.com/_/ubuntu/), etc.\n\nTo push/pull images to a repo under your DockerHub account, use the commands:\n```bash\ndocker push \u003cimage\u003e   # Pushes an image to Docker Hub (you must have logged in earlier with `docker login -u \u003cusername\u003e`\ndocker pull \u003cimage\u003e   # Downloads an image from Docker Hub (which is the default registry)\n```\n\n### Frequent Operations\nSome command snippets for things I want to do frequently in my workflow.\n```bash\n# ‚ï†‚ïê‚ïê‚ïê‚ïê Frequent Operations ‚ïê‚ïê‚ïê‚ïê‚ï£\ndocker exec -it \u003ccontainerId\u003e bash      # Starts up a Bash shell in your container. Use `sh` if Bash isn't available.\n\ndocker kill $(docker ps -q)             # Stopping all containers.\ndocker rm $(docker ps -a -q)            # Removing all containers.\ndocker rmi $(docker images -q)          # Removing all images.\ndocker rmi -f $(docker images -f \"dangling=true\" -q)   # Remove all dangling images (images that aren't referenced by any other).\n```\n\n## Dockerfile\nA Dockerfile is a file that contains a list of sequential commands that can be executed (with `docker build`) along with the ***build context*** to create new Docker images. There are lots of [best practices](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) for building images efficiently. Building good images and orchestrating them are complex topics by themselves and require effort and experience.\n\n### Docker Layers\nDocker images consist of read-only *layers*, each of which corresponds to `RUN`, `COPY` and `ADD` Dockerfile instruction. Each layer stores the set of changes to the filesystem and metadata from the previous layer. Layers exist to be cached and therefore optimise build times. At each instruction in a Dockerfile, the daemon will check its build cache to see if it can skip the current instruction.\n- *An image is basically a diff*. It just stores what changes from the image it is based on. Every image always has a base image that it derives from.\n\t- An image *is* a layer. You could use them interchangeably, mostly.\n\t- Each layer is a complete image in itself. When you see output like `Step 1/4 : ___` while building an image, each of the steps correspond to the building of an *intermediary image*. Every intermediary image has an ID associated with it that you can spawn containers from.\n    ```bash\n    Step 4/7 : ENV PORT=5678\n     ---\u003e Running in 967bbecf48fa   # The ID of the container that this intermediary image is being built in (I think).\n    Removing intermediate container 967bbecf48fa\n     ---\u003e f8d66c96b15a              # This is the ID of the intermediary image\n    ```\n    See all intermediary images with `docker images -a` .\n\t- Image layers exist to reuse work and save space.\n- You can reduce several layers into one with the squash flag `--squash` in [`docker build`](https://docs.docker.com/engine/reference/commandline/build/).\n- When you run an image to spawn a container (with `docker run`), you are adding a *read-writable layer on top of all the underlying read-only layers*, called the *container layer*. All changes such as newly created files are written to this writable container layer.\n\t![[software-engineering/technologies/assets/docker-layers.png|400]]\n### [Dockerfile Commands](https://docs.docker.com/engine/reference/builder/)\nGenerally, writing a simple Dockerfile goes like this:\n1. Choose a base image to start with (eg. [Node](https://hub.docker.com/_/node), [Alpine](https://hub.docker.com/_/alpine)) and specify it with `FROM`. You must specify a base image. There's no one 'correct' choice, you're free to experiment with different images (eg. using Debian instead of Alpine).\n    - Ideally, the base image should be well-maintained, slim, and up to date.\n1. Determine the (ideally) minimal set of steps necessary to get your app running after bootstrapping from the base image, then map each of those steps to a Dockerfile instruction. This is kind of a try-and-fail process.\n\n#### From\nDockerfiles must begin with a `FROM` instruction. It specifies what base image to start building on top of. You can also specify a tag, otherwise it defaults to the tag with the name: 'latest'.\n```dockerfile\nFROM \u003cbaseImage\u003e[:tag]\n\n# In multi-stage builds, you can use AS to give a name to a build and then be able to have one stage \n# reference another.\nFROM \u003cbaseImage\u003e AS \u003cstageName\u003e\t\n```\n#### Workdir\nSets what the current working directory is within the container's filesystem. Creates the folder if it doesn't exist. You might want to use this before subsequent `RUN`, `CMD`, `ENTRYPOINT`, `COPY`/`ADD` instructions.\n```dockerfile\nWORKDIR \u003cpath\u003e\n```\nAs recommended by the [official docs](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#workdir), prefer `WORKDIR` over `RUN mkdir -p ...`.\n\n#### Run\nRuns a shell command. It uses `/bin/sh` as the default shell in Linux. \n```dockerfile\nRUN [\"command\", \"arg1\", \"arg2\", ...]\n\n# Or:\nRUN command arg1 arg2 ...\n```\n\n#### Cmd\nLike `RUN`, but it runs a default shell command to start up the application. Unlike `RUN`, it DOES NOT execute anything when the image is being built!\n- There can only exist 1 `CMD` in a Dockerfile. If multiple exist, only the last one is used.\n- The `CMD` can be overwritten by `docker run` if is specifies a command. If you want to guarantee a startup command is always run, then use `ENTRYPOINT`.\n```dockerfile\nCMD [\"command\", \"arg1\", \"arg2\", ...]\nCMD command arg1 arg2 ...\n```\n\n#### Copy\nCopies local files (`\u003csrc\u003e`) to the container filesystem (`\u003cdest\u003e`). It's recommended to use `COPY` instead of `ADD`. \n- `\u003cdest\u003e` is either absolute or relative to `WORKDIR`.\n- Dockerfile supports file globbing like in bash.\n- If `\u003csrc\u003e` is a URL, then the file at that URL will be download to the container's `\u003cdest\u003e`.\n```dockerfile\nCOPY \u003csrc\u003e \u003cdest\u003e\n\n# For multi-stage builds, you use **--from** to source files from a previous stage in the build\nCOPY --from=\u003cstageName\u003e \u003csrc\u003e \u003cdest\u003e\n```\n\n#### Add\nAlmost identical to `COPY`, but the main difference is that it supports URL sources and other things, making it a bit more unpredictable.\n```dockerfile\nADD \u003csrc\u003e \u003cdest\u003e\n```\n\n#### Env\nSet an environment variable in the container. You can reference this variable in subsequent Dockerfile instructions.\n```dockerfile\nENV key=\"value\"\n```\n\n#### Entrypoint\nLike `CMD`, but the command is always run, whereas `CMD`'s command doesn't get run if the user supplies their own command. `ENTRYPOINT ` is preferred over `CMD ` when you need a command to always be executed instead of just being the default.\n```dockerfile\nENTRYPOINT [\"command\", \"arg1\", \"arg2\", ...]\n\n# Or:\nENTRYPOINT command arg1 arg2 ...   \n```\n\n#### Volume\n(Not completely sure) Creates a new empty directory at `/var/lib/docker/volumes` on the host machine (assuming you're using Linux). The `\u003cpath\u003e` is the container filesystem path whose contents should be linked to the volume directory created on host.\n```dockerfile\nVOLUME \u003cpath\u003e\n```\n\n#### Label\nAdds a key-value pair custom metadata field to the image that are viewable with `docker inspect`. Third party tools around Docker may make use of Labels in your Dockerfiles to organise/manage them.\n```dockerfile\nLABEL maintainer=\"admin@timz.dev\"\n```\n\n#### Expose\nDefines which port to listen on at runtime. Uses TCP by default.\n```dockerfile\nEXPOSE \u003cport\u003e\n```\n\n#### **Example Dockerfile**\nThis is an example Dockerfile for a simple Express server, to be used in a development environment. Sourced from [official Docker YouTube](https://www.youtube.com/watch?v=iqqDU2crIEQ\u0026ab_channel=Docker).\n```dockerfile\n# You usually start from a base image with `FROM`\n# This is using `node` as a base image with the tag, 12.16.3, which is the target version.\nFROM node:12.16.3\n\n# Creating a directory. All subsequent commands will use this as the working directory\nWORKDIR /code\n\n# Setting up an environment variable \nENV PORT 80\n\nCOPY package.json /code/package.json\n\n# Installs all dependencies in package.json\nRUN npm install\n\nCOPY . /code\n\n# The default command to be run when the container is started.\n# This would run `node src/server.js`\nCMD [ \"node\", \"src/server.js\" ]\n```\n\n### Parser Directives\nParser directives are special comments with the form `# directive=val`\n```dockerfile\n# This defines the location of the Dockerfile syntax that should be used to build the image\n# Note: this has no effect unless you are using the [BuildKit](https://docs.docker.com/develop/develop-images/build_enhancements/) backend\n# syntax=docker/dockerfile:1\n\n# Tells Docker what characters should be used to escape characters. It defaults to be \\\n# escape=`\n```\n\n### Variables\nEnvironment variables defined with `ENV` can be used in other commands. It's similar to how `bash` variables work\n```dockerfile\nFROM ___\nENV MY_DIR=/home/tim/Projects\nWORKDIR ${MY_DIR}\nADD . $MY_DIR\n```\n\n### Dockerfile Optimisation \u0026 Best Practices\nThe goal is to produce lightweight images.\n- Add unnecessary files to `.dockerignore`. This prevents sending unnecessary data to the Docker daemon when you run `docker build`. A good thing to ignore is the `node_modules` directory.\n- Pick a lightweight base image. Eg. prefer choosing smaller Linux distributions like Alpine over Ubuntu.\n    \u003e Note: the [Alpine Linux](https://alpinelinux.org/about/) distribution is a popular choice for deploying production containers since it's designed for security, resource efficiency and is a lot smaller than other Linux distributions (eg. Ubuntu 16.04 is around 100MB while Alpine's image is around 4MB because it only ships with the most essential production tools). Use this to minimise your image sizes. There are also [good reasons *not* to use Alpine](https://pythonspeed.com/articles/alpine-docker-python/), especially for Python apps where you might end up with slower builds, larger images, and a brittle environment!\n- Merge multiple Dockerfile commands into one. Remember that individual Dockerfile commands correspond to an [[software-engineering/technologies/Docker#Docker Layers|intermediary image]] that is built and cached.\n    ```dockerfile\n    # Have the following single command:\n    RUN apk update \u0026\u0026 apk add curl\n    \n    # Instead of multiple commands:\n    RUN apk update\n    RUN apk add curl\n    ```\n- Start the Dockerfile with steps that are least likely to change in the future. This is because changes to the intermediary images built earlier will invalidate later images. \n    ```dockerfile\n    # Do this:\n    RUN [\"yarn\", \"install\"]\n    RUN apk add vim         \n    \n    # Rather than\n    RUN apk add vim\n    RUN [\"yarn\", \"install\"]\n    ```\n\n## .dockerignore\nWhen you run `docker build`, the Docker CLI also sends the *build context*, which is the set of files located at the specified path or Git repo URL, over to the Docker daemon. Before that, the CLI checks if a `.dockerignore` is present and ensures that any files declared in there will not be sent to the Docker daemon. It's purpose is similar to `.gitignore`\n\n- `COPY` or `ADD` will also ignore the files in `.dockerignore`\n- The syntax is very similar to `.gitignore`. File globbing is also supported\n\nA typical `.dockerignore` for a React project might looks like this, for example:\n\n```docker\nnode_modules\nDockerfile\n.git\n.gitignore\n.dockerignore\n.env*\n```\n\nAfter adding this, you'll notice that `docker build` is *way faster* because node_modules isn't being sent to the Docker daemon.\n\n## Volumes (Shared Filesystems)\n*A problem*: containers can do file manipulation, however any created or updated files are lost when that container process is killed. When a containerised backend server writes to a database, for example, then all the objects in that database are gone after the container process terminates.\n\nWith [volumes](https://docs.docker.com/storage/volumes/), you can connect paths of a container's filesystem to paths of the host machine so that files created or updated in that path are also shared with the host. This lets containers persist their filesystem changes. \n\n### Named Volumes\nDocker lets you manage *named volumes*. It hides away the physical location of where the volume is stored so you, as the programmer, just need to work with the name of the volume.\n```bash\ndocker volume create \u003cvolumeName\u003e     # Creates a new named volume\ndocker volume inspect \u003cvolumeName\u003e    # Shows info about the volume such as where its mount point (actual path) is\n```\n\n### Bind Mounts\nUnlike *named volumes*, bind mounts let you control exactly where the *mount point* (the *path* to the directory of the shared files) is between the host and container.\nIt can be used where named volumes are used, but being able to set where the mount point is lets us mount our host's source code into the container to set up *hot reloading*\n- In [this example](https://docs.docker.com/get-started/06_bind_mounts/) which uses [nodemon](https://www.npmjs.com/package/nodemon) to watch for code changes, you *bind mount* the directory that you are currently developing in and the container's working directory so that edits made to the code from the host's side also affect the code being run in the container's side.\n\t\n\tBy bind mounting your project's directory and the directory where the container is running your app, you are basically syncing the files you're editing and the files that are in 'production' on the container.\n\t\n\tBind mounting is done by passing in a few extra options to your usual `docker run` command:\n\t```bash\n\tdocker run -dp 3000:3000 \\\n\t\t -w /app **-v \"$(pwd):/app\"** \\               # Setting the container's cwd to /app and then bind mounting the host side's (your side's) dev directory to the container side's\n\t\t node:12-alpine \\\n\t\t sh -c \"yarn install \u0026\u0026 yarn run dev\"     # Running a command to kick off the **nodemon** (which is what `yarn run dev` does) after the container starts up\n\t```\n- Differences between *bind mounts* and *named volumes*:\n\t![[software-engineering/technologies/assets/bind-mounts-vs-named-volumes.png|400]]\n\n## Multiple Containers\n### Why Use Multiple Containers?\nAlthough it's possible to run multiple processes in a single container, in general each container should focus on one thing. If you have a container that runs both a backend server *and* a database server like MySQL, then it's generally considered better practice to run both in separate containers because:\n- API servers, database servers and other components scale differently. Keeping them in separate containers lets you scale each component independently of each other. Eg. you might have a low-traffic but data-intensive app which might mean needing twice as many database containers than backend server containers.\n- You can rollout a new version to your web server without affecting the database.\n- For production, it doesn't make sense to ship the database server with the app.\n- Each container is less complex.\n\n### Container Networking\nContainers are isolated processes that have no awareness of other containers running on the same machine. How are they able to talk to each other?\n- Containers are able to communicate iff they are connected to the same network.\n- Containers can be connected to non-Docker workloads.\n- Under the hood, [Docker manipulates `iptables`](https://docs.docker.com/network/iptables/) rules on Linux to create network isolation.\n```bash\ndocker network create \u003cnetworkName\u003e       # Creates a new isolated network.\ndocker network ls                         # List all networks being managed by Docker\ndocker run\n\t--network \u003cnetworkName\u003e    # Connects a container to the isolated network\n\t--network-alias \u003cname\u003e     # Gives the container a name that can be used by other containers on the same network to communicate with\n                               # The alias to IP mapping is managed by Docker, so you only ever have to work with aliases\n```\n\n## Multi-Stage Builds\nDockerfiles can actually have multiple `FROM` statements. Every `FROM` statement marks the beginning of a new *build stage*. This just means you can create images which derive from multiple bases.\n- Stages are built in the order they appear in the Dockerfile.\n- You can copy some output of one layer to the next, across stages. All unneeded *artifacts* produced from an earlier stage won't be saved in the final image.\n    - It's common to run a build in an early stage, then only copy the build results to the next stage (eg. running `npm build` in 1 stage, then transferring the build files to a directory for [[software-engineering/technologies/NGINX|NGINX]] to serve in the next stage).\n\n### Example\nSuppose you are trying to deploy a React project with NGINX to serve the files resulting from `npm build`.\n```dockerfile\n# ===== Stage 1 =====\n\n# Naming the stage so that it can be referenced by later stages.\nFROM node:14.18.1 AS build \nWORKDIR /app\nCOPY package.json .\nRUN yarn install\nCOPY . .\n\n# Creating the production-ready files to be served by NGINX in stage 2.\nRUN [\"yarn\", \"build\"]      \n\n# ===== Stage 2 =====\n\nFROM nginx\n\n# From Stage 1, copy the build files into the default directory that NGINX serves files from.\nCOPY --from=build /app/build /usr/share/nginx/html\n```\n\n**How was this Dockerfile made?**\nSuppose we're working on a React project. Here would be a simple Dockerfile to start with:\n```dockerfile \nFROM node:14.18.1\nWORKDIR /app\nCOPY package.json .\nRUN yarn install\nCOPY . .\nEXPOSE 3000\nCMD [\"yarn\", \"start\"]\n```\nWhen you run `yarn start`, a dev server is spun up which listens to traffic on port 3000 and serves your app. This is not a production-grade server and should not be used in deployment. \n![[software-engineering/technologies/assets/docker-react-container-example.png|250]]\nFor production, we'd actually want to run `yarn build` to get a bunch of optimised, production-ready files, and then get NGINX to serve them:\n![[software-engineering/technologies/assets/docker-react-container-for-prod-example.png|250]]\nWe can write a production Dockerfile for the React app by using a first stage that builds the files, and a second stage that spins up an NGINX server to serve those files:\n![[software-engineering/technologies/assets/multi-stage-docker-build-example.png|400]]\n\n## FAQ\n### You can run an operating system in a container??\nMost Docker examples you see will involve using a base container image containing a Linux distribution like the [official DockerHub image for Ubuntu](https://hub.docker.com/_/ubuntu/).\n\nDocker containers do not contain a complete OS like a virtual machine, it just has a snapshot of the filesystem of a 'donor' OS. This idea is powerful enough that you can run a Linux distribution's entire application layer inside a container, eg. the package manager (`apt`, `pacman`, etc.), spawning a shell, etc.\n\nNot every container 'has' an operating system. You won't be able to launch a shell in a container that doesn't have one.\n\n### Under the hood\nTODO.\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Docker-Compose":{"title":"Docker Compose","content":"\n![[software-engineering/technologies/assets/docker-compose.png|300]]\n\n[Docker Compose](https://docs.docker.com/compose/) is a CLI tool for running and coordinating the communication of multiple [[software-engineering/technologies/Docker|Docker]] containers. It's a *container orchestrator*, like [[software-engineering/technologies/Kubernetes|Kubernetes]]. You just have to supply a YAML config file with all the info needed for running each container, then with a single command they'll all get created and started. You can also tear everything down instantly.\n- `docker-compose.yml` is kept at the root of the project\n- It can create networks and attach containers to them and create volumes\n\n```bash\ndocker-compose up      # Starts up all services using `docker-compose.yml`\n    -d                 # Run in the background (detached)\n    --build            # Force-trigger a build\n    -f \u003cfile\u003e          # Path of the compose file. By default, `docker-compose.yml` is expected in the cwd\n\ndocker-compose down    # Tear down all services\n    --volumes          # Also remove volumes\n\ndocker-compose logs\n    -f                 # Follow the live output rather than just dumping it all out on the terminal once\n                       # It'll interleave the output of all the running services \n```\n\nDocker Compose supports the concatenation of multiple YAML compose files to get a 'merged' compose file where more specialised compose files will overwrite rules in the one before it.\n\nIt's common practice to have multiple compose files with slight variations. Eg. in addition to a 'shared' compose file, `docker-compose.yml`, which contains all the config common to both dev and prod, you might also have `docker-compose-dev.yml` and `docker-compose-prod.yml` defining specific setups for development and production. In development for example, you might have a bind mount set up so that you can have hot reloading in the container. But for production, you wouldn't want this\n\n### Example\nIn the [official Docker tutorial](https://docs.docker.com/get-started/08_using_compose/), we're using these 2 commands to startup our app server and database server:\n```bash\n# Backend server container startup:\ndocker run -dp 3000:3000 \\\n  -w /app -v \"$(pwd):/app\" \\\n  --network todo-app \\\n  -e MYSQL_HOST=mysql \\\n  -e MYSQL_USER=root \\\n  -e MYSQL_PASSWORD=secret \\\n  -e MYSQL_DB=todos \\\n  node:12-alpine \\\n  sh -c \"yarn install \u0026\u0026 yarn run dev\"\n\n# Database server container startup:\ndocker run -d \\\n\t--network todo-app \\\n\t--network-alias mysql \\ \n\t-v todo-mysql-data:/var/lib/mysql \\\n\t-e MYSQL_ROOT_PASSWORD=secret \\\n\t-e MYSQL_DATABASE=todos \\\n\tmysql:5.7                  \n```\n\nFrom this, we can create the following `docker-compose.yml` file:\n```yaml\n# Docker Compose version: *https://docs.docker.com/compose/compose-file/* \nversion: \"3.7\"\n\n# The list of containers we want to run\nservices:\n\tapp:    # You can pick any name for the service. This will later become the network alias. See https://docs.docker.com/engine/reference/commandline/network_connect/#create-a-network-alias-for-a-container.\n\t\timage: node:12-alpine                        # Base image\n\t\tcommand: sh -c \"yarn install \u0026\u0026 yarn dev\"    # Command to run on startup. Note that the `-c` tells `sh` to run the given string\n\t\tports:\n\t\t\t- 3000:3000\n\t\tworking_dir: /app\n\t\tvolumes:                       # Volume mapping\n\t\t\t- ./:/app\n\t\tenvironment:\n\t\t\tMYSQL_HOST: mysql          # This should be the same as the **network alias** of the database server\n\t\t\tMYSQL_USER: root \n\t\t\tMYSQL_PASSWORD: secret\n\t\t\tMYSQL_DB: todos\n\tmysql:                            \n\t\timage: mysql:5.7\n\t\tvolumes:\n\t\t\t- todo-mysql-data:/var/lib/mysql\n\t\tenvironment:\n\t\t\tMYSQL_ROOT_PASSWORD: secret\n\t\t\tMYSQL_DATABASE: todos\n\n# Named volumes *aren't automatically created* with Docker-Compose. They need to be listed:\nvolumes:\n\ttodo-mysql-data:\n```\n**Note**: Docker Compose *does not replace* your Dockerfile. See this relevant [StackOverflow post](https://stackoverflow.com/questions/44036337/how-to-convert-a-dockerfile-to-a-docker-compose-image).\n\nNow you just need to run `docker-compose up -d` and both these containers will be created, along with an isolated network and the volumes you listed:\n![[software-engineering/technologies/assets/docker-compose-example-output.png|400]]\n\n## Docker Compose vs. Kubernetes\nThe main difference is that Kubernetes can run and scale containers across multiple computers, but Docker Compose runs containers on a single host machine.\n\u003e If you are networking containers within the same host go for¬†**docker compose**. If you are networking containers across multiple hosts go for¬†**kubernetes**. ([source](https://stackoverflow.com/questions/47536536/whats-the-difference-between-docker-compose-and-kubernetes))\n\n![[software-engineering/technologies/assets/docker-compose-vs-kubernetes.png|400]]\n*(Sourced from [theserverside](https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/What-is-Kubernetes-vs-Docker-Compose-How-these-DevOps-tools-compare))*\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Figma":{"title":"Figma","content":"\n![[software-engineering/technologies/assets/figma-wallpaper.png|800]]\n\nFigma is a real-time collaborative UI design tool, extremely useful for frontend development.\n\n---\n\n![[software-engineering/technologies/assets/figma-ui-anatomy.png|700]]\n\n## Shortcuts\n```shell\nv   # Move tool    (same as in Photoshop)\nf   # Frame tool\np   # Pen tool\nt   # Text tool   \nh   # Hand tool\nc   # Comment tool\n\n# Panel\nalt + 1            # Switch to layers tab\nalt + 2            # Switch to assets tab\nshift + e          # Quickly toggle betweeen design and prototype tabs\n\n# Layer\nctrl + r           # Rename layer\n\n# Group\nctrl + g           # Creates a group that contains all highlighted elements\nctrl + shift + g   # Ungroup highlighted elements\n\n# Frame\nctrl + alt + g     # Creates a frame that contains all highlighted elements\nctrl + shift + g   # Unframes highlighted elements (same shortcut as ungrouping)\n\n# Component\nctrl + alt + k     # Creates a component that contains all highlighted elements\n```\n\n## Left Panel\n![[software-engineering/technologies/assets/figma-left-panel.png|300]]\n### **Layers**\nAll your design elements appear in the layers panel and will be nested within other elements such as *frames*. Each design element has a symbol that tells you what type of element it is:\n- ***Frames** ‚Äî* usually the top-level container for everything else\n    ![[software-engineering/technologies/assets/frame.svg]]\n- **[*Groups*](https://www.figma.com/best-practices/groups-versus-frames/)** ‚Äî  a container for multiple elements, letting them be moved and resized uniformly and organise your layers\n    ![[software-engineering/technologies/assets/group.svg]]\n- ***Components*** ‚Äî reusable design elements in your *assets*\n    ![[software-engineering/technologies/assets/instance.svg]]\n\n- ***Instance*** ‚Äî instantiations of components\n    ![[software-engineering/technologies/assets/component.svg]]\n- **Text**\n    ![[software-engineering/technologies/assets/text.svg]]\n- **Shape**\n    ![[software-engineering/technologies/assets/shape.svg]]\n- **Image**\n    ![[software-engineering/technologies/assets/image.svg]]\n- **GIF**\n    ![[software-engineering/technologies/assets/gif.svg]]\nYou can have multiple *[pages](https://help.figma.com/hc/en-us/articles/360038511293)* in a single Figma file. Each page has its own canvas.\n\n## Right Panel\n- **Design** ‚Äî lets you view and tweak properties of any design element. What is shown in this panel is determined by what you currently have selected\n    - If no element is selected, then you'll see some local styles and canvas properties\n        ![[software-engineering/technologies/assets/figma-right-panel-no-frame.png|200]]\n- **Prototype** ‚Äî lets you set up interactive user-flow logic\n- **Inspect** ‚Äî shows you a summary of properties and how the design maps to real CSS code (or Android/iOS code)\n\n## Components\nComponents are reusable design elements. You can create them from layers, groups and frames.\n- **Master component** ‚Äî or just component, defines the base properties of a component.\n- **Instance** ‚Äî a copy of the master component where you can *override* properties.\n    - Copy and pasting a master component will create an *instance* of a master component.\n    - Updating the master component's properties will cause its instances to 'sync' with that change.\n    - Useful operations:\n        - Jump to master component\n        - Reset instance ‚Äî clear all overrides\n        - Detach from master\n\n## Libraries\nLibraries are groups of [[software-engineering/technologies/Figma#Components|components]] that can be published or imported.\n\n## Prototyping\nLets you set up interactive logic in presentation mode. Examples of common use cases:\n- Setting up transitions between frames based on user events like clicking, hovering, etc.\n- Overflow behaviour ‚Äî lets you set up scrolling, good for demonstrating carousels for example\n\nYou can create *connections* between any element and any top-level frame.\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Firebase":{"title":"Firebase","content":"\n![[software-engineering/technologies/assets/firebase-wallpaper.webp|750]]\nFirebase is a [[software-engineering/concepts/cloud/BaaS|BaaS]] platform which gives you set of services that help you start and scale your apps. It shares the same underlying infrastructure as [[software-engineering/technologies/Google Cloud|Google Cloud]] and is placed on the same bill.\n\nFirebase consists of the following array of products:\n- [Firebase Auth](https://firebase.google.com/products/auth) for setting up end-to-end user authentication without writing and maintaining the backend for it yourself.\n- [Firebase DB](https://firebase.google.com/products/realtime-database), a realtime database (described as a giant JSON tree that bidirectionally communicates with clients, meaning updates can be pushed to connected clients).\n- [Cloud Firestore](https://firebase.google.com/docs/firestore), a NoSQL database.\n- [Firebase Hosting](https://firebase.google.com/docs/hosting) for deploying web apps and static content to a CDN.\n- [Cloud Storage for Firebase](https://firebase.google.com/docs/storage) for storing files/blobs.\n- [Cloud Functions for Firebase](https://firebase.google.com/docs/functions) for running backend code in response to events without having to maintain your own servers or cloud VMs. It's essentially a thin wrapper around [[software-engineering/technologies/Google Cloud#Cloud Functions|Google Cloud Functions]] (see [StackOverflow](https://stackoverflow.com/questions/42854865/what-is-the-difference-between-cloud-functions-and-firebase-functions)).\n- [Firebase Remote Config](https://firebase.google.com/docs/remote-config).\n... and a few more. They all have 'client-first' SDKs for JavaScript, Android, iOS, Flutter, Unity, etc. which means you can directly interact with Firebase products from your frontend without a backend.\n\nThe main concern of adopting Firebase is [vendor lock-in](https://en.wikipedia.org/wiki/Vendor_lock-in). Don't worry too much about it though.\n\n#### Web Quick Setup\n```javascript\n// 1. Create a Firebase project, then register your web app at:\n//    console.firebase.google.com.\n\n// 2. In your project, get the JavaScript Firebase SDK\nyarn add firebase\n\n// 3. In your project, initialise firebase and the services you\n//    intend to use. Grab all credentials from the Firebase console.\n\n    import { initializeApp } from \"firebase/app\";\n    import { getAuth } from \"firebase/auth\";\n    import { getDatabase } from \"firebase/database\"; \n    // ... import more Firebase product SDKs as required.\n    \n    const firebaseConfig = {\n      apiKey: \"...\",\n      authDomain: \"\u003cproject_id\u003e.firebaseapp.com\",\n      projectId: \"\u003cproject_id\u003e\",\n      databaseURL: \"https://\u003cdb_name\u003e.firebaseio.com\",\n      ...\n    };\n\n    // Initialising Firebase and the services you intend to use.\n    const app = initializeApp(firebaseConfig);\n    const db = getDatabase(app);\n    const auth = getAuth(app);\n```\n\n## Firebase Auth\nFirebase Auth provides a bunch of services for implementing user registration, sign in, and sign out for your app in just a few lines of code. It also becomes painless to set up multiple auth providers like Google, Facebook, GitHub, etc.\n\n### Snippets\nSome code snippets to demonstrate Google sign-in, sign-out and grabbing Google profile information (sourced from the [official Codelab](https://firebase.google.com/codelabs/firebase-web)):\n```javascript\nimport {                 // Firebase SDK auth functions.\n    getAuth,\n    onAuthStateChanged,\n    GoogleAuthProvider,\n    signInWithPopup,\n    signOut,\n} from 'firebase/auth';\n\n// Signing in and out.\nconst signIn = async () =\u003e {\n    var provider = new GoogleAuthProvider();\n    await signInWithPopup(getAuth(), provider);\n}\nconst signOutUser = () =\u003e signOut(getAuth())\nconst isUserSignedIn = () =\u003e !!getAuth().currentUser;\n\n// Adding an event listener to when the auth state changes (ie. when the user\n// signs in and out). This can be used to affect the UI, like the top nav.\nconst initFirebaseAuth = () =\u003e onAuthStateChanged(getAuth(), (user) =\u003e {\n    if (user) ...\n    else ...\n});\n\n// Retrieving things accessible in the user's Google profile like their name and display picture.\nconst getProfilePicUrl = () =\u003e getAuth().currentUser.photoURL || '/images/profile_placeholder.png';\nconst getUserName = () =\u003e getAuth().currentUser.displayName;\n```\n\n## Firebase Realtime Database\nFirebase DB is a [[software-engineering/concepts/databases/NoSQL|NoSQL]] *realtime* database, credited with low latencies. Being a 'realtime' database just means that any updates from one client can be pushed to subscribed clients within milliseconds. In other words, it's like a pubsub system for quickly syncing and notifying clients with small bits of data. Firebase DB is a great choice compared to 'normal' databases like Cloud Firestore or PostgreSQL if you have a simple data model, small amount of data, and expect low-latency access. For more heavyweight use cases and longer term data storage, pick Cloud Firestore instead.\n\nAll data is stored as JSON, in fact a Firebase DB instance is described as just [\"a cloud-hosted JSON tree\"](https://firebase.google.com/docs/database/web/structure-data). It looks like this, for example:\n```json\n{\n  \"users\": {\n    \"alovelace\": {\n      \"name\": \"Ada Lovelace\",\n      \"contacts\": { \"ghopper\": true },\n    },\n    \"ghopper\": { ... },\n    \"eclarke\": { ... }\n  }\n}\n```\n\nWhen users lose network connection, the changes they'd otherwise push to the database are persisted locally in a cache, and then when they reconnect, those changes are automatically merged with the database.\n\n### Usage\n[[software-engineering/technologies/Firebase#Web Quick Setup|Initialise the Firebase SDK]], create a Firebase database instance through the web console, then specify the `databaseURL` field in the initialisation config object.\n\n```javascript\nimport { getDatabase, push, ref, onValue } from 'firebase/database';\n\nconst addUser = async () =\u003e {\n    // Get a database handle (ie. a reference to it).\n    const db = getDatabase();   \n    const dbPath = ref(db, `users`);\n\n    // Write a new user object to `users`.\n    const reference = await push(dbPath, { name: \"Andrew\" });\n    return reference.key;\n};\n\nconst watchUsers = async () =\u003e {\n    const usersRef = ref(getDatabase(), `users`);\n\n    // Whenever the remote list of users changes, do something.\n    onValue(usersRef, (snapshot) =\u003e {\n        const currUsers = snapshot.val();\n        // ... do something with the users.\n    });\n}:\n```\n\n### Local Realtime DB Emulator\nSince you likely don't want to read/write data to a production database server while you're developing, you should use the local emulator for the realtime db, provided by Firebase. You'd also want to use this to integration or e2e tests.\n\n```bash\n# Start the local emulator suite, which includes the DB emulator.\nfirebase emulators:start\n```\n\nThen in your client-side code, connect to it if you're locally hosting your website:\n```javascript\nimport { connectDatabaseEmulator } from 'firebase/database';\n\nif (location.hostname === \"localhost\") connectDatabaseEmulator(db, \"localhost\", 9000);\n```\n\n### Security Rules \nSecurity rules let you set the conditions that have to be passed to allow read or write access to a certain node in the database. You can also set [data validation rules](https://firebase.google.com/docs/reference/security/database) that enforce simple checks such as making sure that a field is a string with a certain length. They're specified in a file called `database.rules.json` by default. Applying the rules in `database.rules.json` is done with `firebase deploy --only database`.\n\n**Example `database.rules.json`:**\n```json\n{\n  \"rules\": {\n    // Allow any read/write attempt:\n    \".read\": true,\n    \".write\": true,\n    \"users\": {\n      // '$user' is a wildcard for all keys under 'users'. The value is accessible through references to `$user`.\n      // You can give it any name you want.\n      \"$user\": {   \n        \"name\": {\n          \".validate\": \"newData.isString() \u0026\u0026 newData.val().length \u003e 0 \u0026\u0026 newData.val().length \u003c= 255\"\n        },\n      }\n    }\n  }\n}\n```\n\n## Firebase CLI\nThe Firebase CLI is for deploying and managing projects from the terminal.\n```bash\n# Setup:\nyarn global add firebase-tools\nfirebase --version\n```\n\nSome useful commands:\n```bash\nfirebase init    # Creates `firebase.json` in the current directory and proceeds with\n                 # a guided setup of your services.\nfirebase use     # View project aliases.\nfirebase serve   # Locally host the project so you can test it out before deploying to production.\nfirebase deploy  # Deploy resources to your Firebase project. Eg. use this to set configuration and security rules.\n```\n\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Flutter":{"title":"Flutter","content":"\nFlutter is a framework for building frontends that work natively on Android, iOS, Windows, macOS, Linux and web browsers, all from a single codebase. Although you can target many different platforms, it's hard to build a unified experience on all of them and the codebase will become more complex, so it's common for people to exclusively use Flutter for mobile development and then build out a web frontend separately, for example.\n\nFlutter ships with a comprehensive widget library and Google maintains many of its plugins.\n\u003cmark style=\"background: #ADCCFFA6;\"\u003e\u003c/mark\u003e \nFlutter has its own rendering engine built with C++ and [Skia](https://skia.org/) which is credited with being highly performant (substantially better rendering performance than [React Native](https://reactnative.dev/)). This means your Dart code renders custom UI elements to the screen, not native elements like React Native would.\n\n\n\n## Core\nFlutter's UI component hierarchy is similar to [[software-engineering/technologies/React|React's]]. In Flutter, we call UI components *widgets*. Every widget has a `build` method that declares how the widget is displayed and what it's composed of (this is similar to the `render` method in React components).\n\n**TODO**:\n- `Colors` class\n- `Icon` class\n- `BuildContext`. Every widget's `build` method takes in a BuildContext. Things like `Navigator`, `MediaQuery`, `ListView.builder` all need it.\n- `ThemeData`\n\n### Stateful Widgets\nStateless widgets are immutable.\nStateful widgets maintain state over time and is create through extending `StatefulWidget` which creates an instance of `State`.\n```dart\nclass MyWidget extends StatefulWidget {\n  const MyWidget({Key? key}) : super(key: key);\n\n  @override\n  State\u003cMyWidget\u003e createState() =\u003e _MyWidgetState();\n}\n\nclass _MyWidgetState extends State\u003cMyWidget\u003e {\n  @override\n  Widget build(BuildContext context) {\n    return ...;\n  }\n}\n```\n\n**TODO**:\n- `setState`\n\n### Routing\n\n**TODO**:\n- `Navigator` contains a stack of routes. Pushing to this stack changes the route. Popping navigates back.\n\n### Theming\n\n\n## Widgets Reference\n\n`ListView`\n`Scaffold`\n`AppBar`\n`IconButton`\n\n\n\n## Flutter Architecture\nTODO. https://www.google.com/search?q=flutter+architecture\u0026oq=flutter+architecture\u0026aqs=chrome..69i57.1890j0j9\u0026sourceid=chrome\u0026ie=UTF-8\n\n## Flutter CLI\n```bash\nflutter doctor    # Sanity checks the Flutter installation.\nflutter devices   # List all connected devices.\n\nflutter clean\nflutter run\n\nflutter pub add \u003cpackage_name\u003e\n\n```\n\n## Flare\nTODO: https://www.youtube.com/watch?v=hwBUU9CP4qI\u0026ab_channel=Fireship\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Google-Cloud":{"title":"Google Cloud","content":"\nTODO.\n\n## Cloud Functions\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/GoogleTest":{"title":"GoogleTest","content":"\nTODO.\n\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Grafana":{"title":"Grafana","content":"\n![[software-engineering/technologies/assets/grafana-wallpaper.png|800]]\n[Grafana](https://grafana.com/) is an open-source dashboard for data visualisation. It's commonly used in tandem with [[software-engineering/technologies/Prometheus|Prometheus]], using PromQL to query for its data.\n\n\n\n## Architecture\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Jest":{"title":"Jest","content":"\n\nTODO.\n\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Kubernetes":{"title":"Kubernetes","content":"\n![[software-engineering/technologies/assets/kubernetes-wallpaper.png|700]]\n\nKubernetes is an open-source *container orchestrator*, ie. a system for automating the deployment and [[software-engineering/concepts/cloud/Scaling|scaling]] of [[software-engineering/concepts/devops/Containers|containers]]. The rise in popularity of microservice architectures gave rise to the need for container orchestration tools because microservices often need to be containerised. Container orchestrators like Kubernetes are meant to solve challenges arising from scaling [[software-engineering/concepts/devops/Containers|containers]]. Some other technologies similar or related to Kubernetes include [OpenShift](https://docs.openshift.com/), [Amazon ECS](https://aws.amazon.com/ecs/), [Rancher](https://rancher.com/), [Apache Mesos](http://mesos.apache.org/) and more.\n\n*Note*: Kubernetes and [[software-engineering/technologies/Docker|Docker]] are completely independent technologies. You can use Docker without Kubernetes. Kubernetes, however, needs a container runtime to orchestrate, which may or may not be Docker. It's just common for Docker and Kubernetes to be used together.\n\n**Some background:** 'Kubernetes' originates from Greek, meaning 'helmsman', the person who steers a ship. K8s is an abbreviation for Kubernetes. The '8' is just a count of the letters between k and s.\n\n**Kubernetes Features:**\n- Automated *rollout* and *rollback* ‚Äî updates are deployed automatically with care and when things go wrong, the system is rolled back to a stable state.\n- *Failover* ‚Äî when one container dies, another container is able to take its place, automatically.\n- *Horizontal scaling* ‚Äî when the load is high, then K8s will automate the creation of new containers to meet demand, and when the load is low, then containers are removed\n- *Load balancing* by distributing work across a set of *pods*.\n\n## K8s Cluster Architecture\n![[software-engineering/technologies/assets/kubernetes-architecture.png|800]]\n### Nodes, Control Planes\nKubernetes clusters consist of 2 types of resources: *nodes* and *control planes*.\n1. **Node** ‚Äî also called *worker nodes*. They're the [[software-engineering/concepts/devops/Virtual Machines|VMs]] running the app's containers. Each node has a **Kubelet** running inside them.\n    - **Kubelet** ‚Äî a process running inside a node that makes it possible to talk for the node to talk to the *control plane*. They're responsible for telling the control plane about the health of the worker node.\n2. **Control plane** ‚Äî also called the *master node*. It's responsible for managing all activities in the cluster like scheduling, scaling, rolling out updates, etc. \n\n\tA bunch of critical Kubernetes processes run within the control plane, one of which is an HTTP [Kubernetes API](https://kubernetes.io/docs/concepts/overview/kubernetes-api/) server which the nodes use to communicate with the control plane. It's basically the entrypoint to the K8s cluster and Kubernetes clients talk to this server (eg. through a Kubernetes dashboard, scripts, CLIs, etc.)\n\n### Kubernetes Components\n- **Pods** ‚Äî a logical grouping of one or multiple containers with shared storage and network. They're the *smallest deployable units* of computing that you can create and manage inside¬†a worker node, which can run multiple pods within.\n\t- It's common practice to run 1 container per pod.\n\t- Each pod gets its own virtual internal IP address.\n\t- Pods are ephemeral. When they die, another takes its place.\n\t![[software-engineering/technologies/assets/Pasted image 20220805091942.png|400]]\n- **API server** ‚Äî the entrypoint to the K8s cluster. It serves the [Kubernetes HTTP API](https://kubernetes.io/docs/concepts/overview/kubernetes-api/)\n- **Controller Manager** ‚Äî tracks activities in cluster\n- **Scheduler** ‚Äî ensures intelligent *pod* placement based on workload and available resources\n- **etcd** ‚Äî key-value store for config and backups\n- **ConfigMap** ‚Äî contains config like database URLs that the pod can use. Makes it so that you just have to change stuff at the configmap level rather than at the application code level. It's not secure enough for confidential info though\n- **Secret** ‚Äî like ConfigMap, but for secret credentials\n- **Volumes** ‚Äî for data persistence. Think of it as an external hard drive plugged into the cluster\n\t![[software-engineering/technologies/assets/kubernetes-node-volume.png|300]]\n\n## Service Discovery\nTODO.\n\nEvery *pod* gets assigned an internal IP address like `192.*.*.*`.\n\nYou can group the replicas of a service and put them behind a [[software-engineering/concepts/architecture/Load Balancer|load balancer]], for example, to expose a single cluster IP address that all other services use to talk to it.\n\nThere's even a DNS service that maps symbolic names to those IP addresses.\n\n## Kubectl\nTODO.\n\nThis is the Kubernetes CLI.\n\nYou can\n- `kubectl exec -it \u003cpod\u003e -- /bin/bash` to launch a shell in a pod. Useful for debugging.\n\n## Under the hood\nTODO.\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/NGINX":{"title":"NGINX","content":"\n![[software-engineering/technologies/assets/nginx-wallpaper.png|800]]\n\nNGINX is a production-grade web server that sits between the external web and your backend infrastructure. It can be configured to be a simple web server that just serves static content, or it can be used in more sophisticated architectures as a [[software-engineering/concepts/architecture/Load Balancer|load balancer]], [[software-engineering/concepts/architecture/Reverse Proxy|reverse proxy]], HTTP cache, and other roles. An alternative to Nginx is [Apache HTTP Server](https://httpd.apache.org/).\n\n\u003e This page assumes that NGINX is installed on a Linux machine.\n\n## Directives\nNginx configuration files contain a custom language consisting of *directives*. See the [list of all directives](https://nginx.org/en/docs/dirindex.html). Directives can reference *variables*. See the [list of all variables](https://nginx.org/en/docs/varindex.html).\n\nThe primary Nginx configuration file is available at `/etc/nginx/nginx.conf`. \n\n### Example nginx.conf\nMultiple `server` blocks mean you're hosting multiple services (websites, for example). \n```nginx\nhttp {\n    # Serving content for a static website, my-web-app.com\n    # Listens on port 80 (by default).\n    server {\n        server_name my-web-app.com www.my-web-app.com\n        root /home/tim/my-web-app/build;\n        index index.html\n\n        location / {\n            try_files $uri /index.html\n        }\n    }\n\n    # Serving an API with the URL, my-api.com. Here, Nginx reverse proxies\n    # requests by sending it to the process listening at port 3000 on the\n    # same machine, then responds to the client with the response.\n    server {\n        server_name my-api.com www.my-api.com\n\n        location / {\n            proxy_pass http://localhost:3000;\n        }\n    }\n}\n```\n\n## NGINX Architecture\n\u003e Notes taken from the [official blog on Nginx's architecture](https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/).\n\nNginx follows an event-driven master-slave architecture. Running Nginx involves spawning a master process and worker processes (which you can see via `ps -ax | grep -i nginx`). Nginx also manages a set of caches which it will check before actually sending the request through to the backend infrastructure.\n\n![[software-engineering/technologies/assets/nginx-architecture.png|500]]\n\nThe worker processes are responsible for listening to and establishing new connections, and handling requests by talking to the upstream services in the backend infrastructure (eg. your API server). Ever worker process is single-threaded which reduces context switching on the CPU. This is an important design decision because a multi-threaded process at very high traffic would cause so much constant context switching that it seriously degrades performance. Allocating one worker process per CPU core is the most resource-efficient configuration and can be done through the directive: `worker_processes auto;`.\n\nThe worker processes implement the following state machine:\n![[software-engineering/technologies/assets/nginx-request-flow-state-machine.png|600]]\n\n## NGINX CLI\nNginx installations ship with a simple `nginx` CLI that lets you send signals the the nginx master and worker processes. I mainly find these commands useful:\n```bash\nnginx -t         # Checks whether NGINX configuration files are valid.\nnginx -s reload  # Restart NGINX for updates to any configuration files to take effect.\n```\n\n## LetsEncrypt\n[Let's Encrypt](https://letsencrypt.org/) is a non-profit [[software-engineering/concepts/cybersecurity/Certificate Authority|CA]], trusted by most major browsers, that provides digital certificates for free! It relies on donations/sponsorships. Essentially, it makes [[software-engineering/concepts/cybersecurity/SSL and TLS|SSL/TLS]] available to everyone for free.\n\nUsing the `certbot` CLI, you can provision or renew SSL certificates and have them automatically write in the nginx configuration for you:\n```bash\nsudo certbot --nginx -d example.com -d www.example.com\n```\n**Note**: make sure you've:\n- Have ownership over the domain `example.com`.\n- Created [[software-engineering/concepts/networking/DNS|DNS records]] that point `example.com` and `www.example.com` to the nginx server's host machine's IP address.\n- Have a `server` block in your nginx config files that specify `server_name example.com www.example.com` because that is what certbot uses to find the configuration file to write to.\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Next":{"title":"Next.js","content":"\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Nuxt":{"title":"Nuxt.js","content":"\n![[software-engineering/technologies/assets/Nuxt.js-logo.png|300]]\n\nNuxt.js is a production-ready Vue.js framework that also provides excellent developer experience. It's inspired by [[software-engineering/technologies/Next|Next.js]], hence the naming, and exists for a similar purpose as Next.js but does a few things differently.\n\nNotable features of Nuxt.js:\n- *Auto-importing*, where every file has access to every component, meaning you never have to import a component again.\n- Automatic [[software-engineering/concepts/programming/Code Splitting|code splitting]].\n- Ships with pre-configured packages like [Vuex](https://vuex.vuejs.org/), [Vue Router](https://router.vuejs.org/) and [vue-meta](https://vue-meta.nuxtjs.org/). \n- Gives you a standard folder structure with special purposes associated with each folder. For example, the `pages/` directory gives you filesystem routing where each of the `.vue` files inside are mapped into web pages, similar to what Next.js does.\n- Nuxt.js uses [Nitro](https://v3.nuxtjs.org/guide/concepts/server-engine/), a server-side program that enables you to use [[software-engineering/concepts/full-stack-dev/Static Site Generation|SSG]], use [[software-engineering/concepts/full-stack-dev/Server-Side Rendering|SSR]], build APIs, deploy to the [[software-engineering/concepts/cloud/CDNs|edge]], etc. You can still opt for a pure [[software-engineering/concepts/full-stack-dev/SPAs|SPA]].\n\n---\n\n## Setup\nNuxt.js has a `create-vue-app` CLI that sets up everything.\n```bash\nnpx create-nuxt-app \u003cproject_name\u003e\nyarn create nuxt-app \u003cproject_name\u003e \n```\n\n## Core Things to Know\nThis section contains a tl;dr of basic things to know to work with Nuxt.js projects.\n\n### Directory Structure\nThe basic directory structure is pretty similar to that of Next.js.\n```bash\n.\n‚îú‚îÄ‚îÄ components/       # All your UI components live here. They're always available through Nuxt.js' auto-import.\n‚îú‚îÄ‚îÄ pages/            # Filesystem routing. Every .vue file here becomes available at a client-side URL with the corresponding path.\n‚îú‚îÄ‚îÄ static/           # Publicly accessible unchanging content.\n‚îú‚îÄ‚îÄ store/            # For Vuex.\n‚îú‚îÄ‚îÄ test/             # For unit tests.\n‚îî‚îÄ‚îÄ nuxt.config.js    \n```\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/PostgreSQL":{"title":"PostgreSQL","content":"\n![[software-engineering/technologies/assets/postgresql-wallpaper.png|750]]\n\nPostgreSQL is an *object-relational* DBMS that is [[software-engineering/programming-languages/SQL|SQL]]-compliant. Postgres being an 'object-relational' DBMS means that it supports table inheritance and function overloading, inspired by [[software-engineering/concepts/programming/Object Oriented Programming|OOP]]. It's an open-source successor to the proprietary [Ingres DBMS](https://en.wikipedia.org/wiki/Ingres_(database)), hence the name '*Post*gres'.\n\n## PSQL CLI\nLaunching `psql` and connecting to a local or remote database server:\n```bash\npsql -h localhost -p 5432 -U \u003cuser\u003e -d \u003cdb_name\u003e\n\n# Or you can use the probably friendlier standard database connection URI string:\npsql \"postgresql://\u003cuser\u003e:\u003cpassword\u003e@\u003chost+port\u003e/\u003cdb_name\u003e\"\n\n# For example, connecting to the 'techsuite' database at localhost:5432 with the\n# username 'tim' whose password is '1989'.\npsql \"postgresql://tim:1989@localhost:5432/techsuite\"\n```\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Prometheus":{"title":"Prometheus","content":"\n![[software-engineering/technologies/assets/prometheus-wallpaper.png|700]]\n\n[Prometheus](https://prometheus.io/) is an open-source real-time monitoring and alerting tool. It's a popular choice for monitoring [[software-engineering/technologies/Kubernetes|Kubernetes]] clusters, Linux servers, Raspberry Pis, etc. It's commonly combined with [[software-engineering/technologies/Grafana|Grafana]] to make a nice dashboard UI available for us to quickly understand a software system's metrics.\n\n\n\nPopular programming languages have a Prometheus client library that lets you track and expose metrics.\n\n\n## Architecture\n\n### Exporters\n\nA **target** is a service that exposes metrics in a format Prometheus knows how to work with. A Prometheus server pulls (also called 'scrapes') data from targets. Targets you might be interested in monitoring include:\n- Linux VM running in the cloud.\n- Kubernetes cluster.\n- Your Raspberry Pi.\n- ... and so on.\n\nAn **exporter** is what lets you map metrics collected from a system into Prometheus data. It also starts a web server exposing the path `/metrics` that can be scraped.\n\nThere are 100+ exporters ([official docs](https://prometheus.io/docs/instrumenting/exporters/)).\n\n\nPrometheus uses an HTTP pull model where a Prometheus server sends an HTTP request to a dedicated endpoint exposed by target services to pull metrics from them.\n\nPrometheus has its own custom database for storing real-time metrics.\n\nPromQL is a language for querying metrics from the database, useful for extracting insights.\n\n## Configuration\n\n- Retention time ‚Äî the time that metric datapoints stick around before being discarded (to save space).\n\n## Deployment\nPull the [Prometheus Docker image](https://hub.docker.com/r/prom/prometheus) and set up the YAML config.\n\n## AlertManager\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/React":{"title":"React","content":"\nTODO.\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Redux":{"title":"Redux","content":"\n### Reducers\nTODO.\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Tailwind":{"title":"Tailwind","content":"\n![[software-engineering/technologies/assets/tailwind-wallpaper.png|700]]\n\nWith Tailwind, you style elements by applying a bunch of pre-written [utility classes](https://tailwind.build/classes), minimising the amount of [[software-engineering/programming-languages/CSS|CSS]] you have to write and maintain. Tailwind doesn't give you a bunch of styled components like UI libraries such as Bootstrap or Material UI. You must be proficient with CSS ‚Äî Tailwind is like a CSS power user's tool, not a crutch.\n\n**How do you memorise all the utility classes?** You don't. You pick up on the shorthands like `m-*` and `p-*` for margin and padding respectively, `bg-*` for background, and so on, and then you let intellisense do the work.\n\n**How does Tailwind affect bundle size?** Tailwind barely affects bundle size since all the utility classes that are unused are simply [[software-engineering/concepts/full-stack-dev/Tree Shaking|tree-shaken]]. The final CSS file, after build, is usually less than 10kB.\n\n---\n\n## Utility Classes\nSome useful utility classes at a glance. See the [full reference](https://tailwind.build/classes).\n- *max-width*: `max-w-*`\n- *padding*: `p-*`, `px-*`, `py-*`, `pl-*`, `pt-*`, `pr-*`, `pb-*`\n- *margin*: `m-*`, `mx-*`, `my-*`, `ml-*`, `mt-*`, `mr-*`, `mb-*`\n- *background*: `bg-*`\n- *border*: `border-*`\n- Font styles and text color: `text-*`\n- **Flexbox**: `flex-*`, `justify-*`, `items-*`, and so on.\n- **Responsive design**:\n\t- `container`\n\t- `sm:___` where you can apply any utility class after the colon, like `bg-blue-400`. The available breakpoints are `sm, md, lg, xl`, but they're customisable\n\n### Custom Utility Classes\nYou can write your own utility classes if you're finding the same set of utility classes constantly being applied together. For example:\n```css\n.my-btn {\n\t@apply p-4 font-bold rounded;\n}\n```\n\n## Configuration\nTailwind's utility classes are very unopinionated. To apply broad styling, you can run `npx tailwind init` to get a `tailwind.config.js` file where you can define some styles that should apply to certain utility classes.\n\nFor example, the `container` utility class doesn't center itself by default. You can make that the case by having the following config:\n```node\nmodule.exports = {\n    purge: [],\n    darkMode: false,\n    theme: {\n        container: {\n            center: true,\n        },\n    },\n    variants: {\n        extend: {},\n    },\n    plugins: [],\n}\n```\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Terraform":{"title":"Terraform","content":"\n![[software-engineering/technologies/assets/terraform.png|700]]\n\n[Terraform](https://www.terraform.io/) is an *infrastructure as code* technology that you can use to automate your infrastructure setup. All you do is define the things you want to spin up in a `.tf` file, such as [[software-engineering/concepts/devops/Virtual Machines|VMs]], [[software-engineering/concepts/architecture/Load Balancer|load balancers]], [[software-engineering/technologies/Kubernetes|K8S clusters]], a [[software-engineering/concepts/devops/VPC|VPC]], etc. using Terraform's [[software-engineering/concepts/programming/Programming Paradigm#Declarative|declarative]] language. Terraform uses your API credentials to spin up everything you declared in the `.tf` file. Terraform has a rich plugin ecosystem and it's usable on all the main [[software-engineering/concepts/cloud/Cloud Provider|cloud providers]].\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/Vue":{"title":"Vue.js","content":"\n![[software-engineering/technologies/assets/vue-wallpaper.png|600]]\n\nVue.js is a [[software-engineering/programming-languages/JavaScript|JavaScript]] framework for building sophisticated UI components in a reusable, maintainable and performant way. Just like for React, there's a rich ecosystem of npm packages you can plug in to have things like: unit testing, static site generation, client-side routing, state management, etc.\n\n## Setup\nJust run the following.\n```bash\nnpm init vue@latest  # Invokes `create-vue` which presents a terminal menu\n                     # with prompts to help set up your project.\n```\n\n## Core Things to Know\nThis section contains all the main things to know to be able to work on a Vue project.\n\n### Writing Components\nComponents are defined in a single `.vue` file. Vue provides a template syntax that extends regular HTML.\n```vue\n\u003cscript\u003e\nexport default {\n    data() {\n        return {\n            message: \"Hello world\",\n        };\n    },\n    methods: {\n        handleClick() {\n            this.message = \"Goodbye world\";\n        },\n    },\n};\n\u003c/script\u003e\n\n\u003ctemplate\u003e\n    \u003ch1 v-on:click=\"handleClick\"\u003e{{ message }}\u003c/h1\u003e\n\u003c/template\u003e\n```\nYou can embed any javascript expression inside the double braces, eg. `{{ 42 + Math.PI }}`\n\n#### Props\nJust like React components, every Vue component can take in props.\n```vue\n\u003cscript\u003e\nexport default {\n    props: {\n        message: String,\n    },\n};\n\u003c/script\u003e\n\n\u003ctemplate\u003e\n    \u003cdiv\u003e{{ message }}\u003c/div\u003e\n\u003c/template\u003e\n```\n\n#### V- Directives\nDirectives start with `v-` and are introduced by Vue's template syntax. See the [full list of built-in directives](https://vuejs.org/api/built-in-directives.html).\n- **Attribute/Prop binding** with `v-bind`, or the short-hand `:`.\n\t```vue\n\t\u003cdiv v-bind:class=\"activeClass\"\u003eHi\u003c/div\u003e\n\t\u003cdiv :class=\"activeClass\"\u003eHi\u003c/div\u003e       \u003c!-- You can optionally omit v-bind and just use a colon\n\t                                              since attribute binding is so frequently used. --\u003e\n\t```\n- **[Conditional rendering](https://vuejs.org/guide/essentials/conditional.html)** with `v-if`, `v-else-if` and `v-else`. Whenever you use these, the elements must be consecutive siblings.\n\t```vue\n\t\u003cscript\u003e\n\texport default {\n\t    data() {\n\t        return {\n\t            isDarkMode: false,\n\t        };\n\t    },\n\t    methods: {\n\t        toggleDarkMode() {\n\t            this.isDarkMode = !this.isDarkMode;\n\t        },\n\t    },\n\t};\n\t\u003c/script\u003e\n\t\u003ctemplate\u003e\n\t    \u003cdiv v-if=\"isDarkMode\" @click=\"toggleDarkMode\"\u003eüåô\u003c/div\u003e\n\t    \u003cdiv v-else @click=\"toggleDarkMode\"\u003e‚òÄÔ∏è\u003c/div\u003e\n\t\u003c/template\u003e\n\t```\n- **[List rendering](https://vuejs.org/guide/essentials/list.html)** with `v-for`. \n\t```vue\n\t\u003ctemplate\u003e\n\t    \u003cul v-for=\"message in ['Hello', 'World']\"\u003e\n\t        \u003cli\u003e{{ message }}\u003c/li\u003e\n\t    \u003c/ul\u003e\n\t\u003c/template\u003e\n\t```\n- **Event listeners** with `v-on`, or the short-hand `@`.\n\t```vue\n\t\u003cscript\u003e\n\texport default {\n\t    methods() {\n\t        handleClick: () =\u003e console.log('Hi');\n\t    }\n\t}\n\t\u003c/script\u003e\n\t\u003ctemplate\u003e\n\t\t\u003cbutton v-on:click=\"handleClick\"\u003eHi\u003c/button\u003e\n\t\u003c/template\u003e\n\t```\n\tCombining `v-bind` and `v-on` lets you have *two-way data binding* where changes to the UI will change the state, and changing the state will change the UI. Alternatively you can use `v-model`.\n- **Two-way data binding** with `v-model`. It's just syntactic sugar around `v-bind` and `v-on` for creating two-way [form bindings](https://vuejs.org/guide/essentials/forms.html).\n\t```vue\n\t\u003cscript\u003e\n\texport default {\n\t    data() {\n\t        return {\n\t            email: \"\",\n\t        };\n\t    },\n\t};\n\t\u003c/script\u003e\n\t\n\t\u003ctemplate\u003e\n\t    \u003cinput v-model=\"email\" /\u003e\n\t    \u003cspan\u003eValue: {{ email }}\u003c/span\u003e\n\t\u003c/template\u003e\n\t```\n\n#### Computed Properties\nWhen you want to interpolate values inside the component but the expression is complex, you should extract it out into a *computed property*.\n```vue\n\u003cscript\u003e\nexport default {\n    data() {\n        return {\n            val: 0,\n        };\n    },\n    computed: {\n        isEven() {\n            return this.val % 2 === 0;\n        },\n    },\n};\n\u003c/script\u003e\n\u003ctemplate\u003e\n    \u003cinput type=\"number\" v-model=\"val\" /\u003e\n    \u003cp v-if=\"isEven\"\u003eI'm even\u003c/p\u003e\n    \u003cp v-else\u003eI'm odd\u003c/p\u003e\n\u003c/template\u003e\n```\n\n#### Lifecycle Hooks\nJust like React components, Vue components undergo a similar [lifecycle](https://vuejs.org/api/options-lifecycle.html) consisting of creation, mounting, updating and unmounting.\n```vue\n\u003cscript\u003e\nexport default {\n    beforeCreate() { alert(\"Before creation\"); },\n    created() { alert(\"Created!\"); },\n    beforeMount() { alert(\"Before mounting\"); },\n    mounted() { alert(\"Mounted!\"); },\n};\n\u003c/script\u003e\n\u003ctemplate\u003e\n    \u003cdiv style=\"background: black; width: 200px; height: 200px\"\u003e\u003c/div\u003e\n\u003c/template\u003e\n```\n\n#### Refs\nJust like React, you can attach a reference to an element and then access and manipulate it after it's been mounted.\n```vue\n\u003cscript\u003e\nexport default {\n    mounted() {\n        this.$refs.animal.innerHTML = \"üêï dogs are better\";\n    },\n};\n\u003c/script\u003e\n\n\u003ctemplate\u003e\n    \u003cdiv ref=\"animal\"\u003eüêà cats are better\u003c/div\u003e\n\u003c/template\u003e\n```\n\n#### Emits\nUnlike React, you can make the child trigger events on the parent directly by emitting an event from the child which hits an event handler in the parent.\n```vue\n\u003c!-- ChildComponent.vue --\u003e\n\u003cscript\u003e\nexport default {\n    methods: {\n        notifyParent() {\n            this.$emit(\"someEvent\", \"Hello World!!!\");\n        },\n    },\n};\n\u003c/script\u003e\n\u003ctemplate\u003e\n    \u003cbutton @click=\"notifyParent\"\u003eClick me\u003c/button\u003e\n\u003c/template\u003e\n\n\u003c!-- Then in the parent component, you add an event listener for 'someEvent' --\u003e\n\u003cChildComponent @someEvent=\"...\" /\u003e\n```\n\n### Styling\nBroadly, there are 2 approaches to applying CSS to Vue components.\n1. Add a `\u003cstyle scoped\u003e` to the .vue file where the CSS within applies only to that component. You could omit the `scoped` prop to apply styles globally. For SCSS, you can set the prop `lang=\"scss\"`.\n2. Include a .css file from somewhere in the project directory through `\u003cstyle scoped\u003e@import '...'\u003c/style\u003e` or use an ES `import '___.css'`.\n\n## Vuex\nSee [[software-engineering/concepts/full-stack-dev/State Management|state management]].\n\nVuex, designed after the [Flux](https://facebook.github.io/flux/docs/in-depth-overview/) and [[software-engineering/technologies/Redux|Redux]] state management frameworks, introduces a *single source of truth* to the app that any component can read/write to.\n\n","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null},"/software-engineering/technologies/assets/Pasted-image-20220805162553.png":{"title":"","content":"","lastmodified":"2022-09-12T23:20:41.890339189Z","tags":null}}